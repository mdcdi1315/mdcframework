// Brotli compression system implementation by master131 at https://github.com/master131/BrotliSharpLib .

// Be noted , this is a full implementation of the algorithm; which means that the whole library with all the elements is included.
// This source code is a bit modified (mostly for formatting reasons , NOT a direct tampering on the source code itself.)

//Global namespaces
using System;
using System.IO;
using System.Diagnostics;
using System.IO.Compression;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using reg_t = ExternalArchivingMethods.Brotlis.Brotli.SizeT;
using size_t = ExternalArchivingMethods.Brotlis.Brotli.SizeT;
using score_t = ExternalArchivingMethods.Brotlis.Brotli.SizeT;
using BrotliBitReaderState = ExternalArchivingMethods.Brotlis.Brotli.BrotliBitReader;
using BrotliDecoderState = ExternalArchivingMethods.Brotlis.Brotli.BrotliDecoderStateStruct;
using BrotliEncoderState = ExternalArchivingMethods.Brotlis.Brotli.BrotliEncoderStateStruct;

namespace ExternalArchivingMethods
{

	namespace Brotlis
	{
		/// <summary>
		/// Represents a Brotli stream for compression or decompression.
		/// </summary>
		public unsafe class BrotliStream : Stream
		{
			private Stream _stream;
			private CompressionMode _mode;
			private bool _leaveOpen, _disposed;
			private IntPtr _customDictionary = IntPtr.Zero;
			private byte[] _buffer;
			private int _bufferCount, _bufferOffset;

			private Brotli.BrotliEncoderStateStruct _encoderState;
			private Brotli.BrotliDecoderStateStruct _decoderState;

			private Brotli.BrotliDecoderResult _lastDecoderState =
				Brotli.BrotliDecoderResult.BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT;

			/// <summary>
			/// Initializes a new instance of the <see cref="BrotliStream"/> class using the specified stream and
			/// compression mode, and optionally leaves the stream open.
			/// </summary>
			/// <param name="stream">The stream to compress or decompress.</param>
			/// <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
			/// <param name="leaveOpen"><c>true</c> to leave the stream open after disposing the <see cref="BrotliStream"/> object; otherwise, <c>false</c>.</param>
			public BrotliStream(Stream stream, CompressionMode mode, bool leaveOpen)
			{
				if (stream == null)
					throw new ArgumentNullException(nameof(stream));

				if (CompressionMode.Compress != mode && CompressionMode.Decompress != mode)
					throw new ArgumentOutOfRangeException(nameof(mode));

				_stream = stream;
				_mode = mode;
				_leaveOpen = leaveOpen;

				switch (_mode)
				{
					case CompressionMode.Decompress:
						if (!_stream.CanRead)
							throw new ArgumentException("Stream does not support read", nameof(stream));

						_decoderState = Brotli.BrotliCreateDecoderState();
						Brotli.BrotliDecoderStateInit(ref _decoderState);
						_buffer = new byte[0xfff0];
						break;
					case CompressionMode.Compress:
						if (!_stream.CanWrite)
							throw new ArgumentException("Stream does not support write", nameof(stream));

						_encoderState = Brotli.BrotliEncoderCreateInstance(null, null, null);
						SetQuality(1);
						break;
				}
			}

			/// <summary>
			/// Initializes a new instance of the <see cref="BrotliStream"/> class using the specified stream and
			/// compression mode.
			/// </summary>
			/// <param name="stream">The stream to compress or decompress.</param>
			/// <param name="mode">One of the enumeration values that indicates whether to compress or decompress the stream.</param>
			public BrotliStream(Stream stream, CompressionMode mode) :
				this(stream, mode, false)
			{
			}

			/// <summary>
			/// Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="BrotliStream"/>.
			/// </summary>
			~BrotliStream()
			{
				Dispose(false);
			}

			/// <summary>
			/// Sets the quality for compression.
			/// </summary>
			/// <param name="quality">The quality value (a value from 0-11).</param>
			public void SetQuality(int quality)
			{
				if (_mode != CompressionMode.Compress)
					throw new InvalidOperationException("SetQuality is only valid for compress");

				if (quality < Brotli.BROTLI_MIN_QUALITY || quality > Brotli.BROTLI_MAX_QUALITY)
					throw new ArgumentOutOfRangeException(nameof(quality), "Quality should be a value between " +
																		   Brotli.BROTLI_MIN_QUALITY + "-" + Brotli
																			   .BROTLI_MAX_QUALITY);

				EnsureNotDisposed();

				Brotli.BrotliEncoderSetParameter(ref _encoderState, Brotli.BrotliEncoderParameter.BROTLI_PARAM_QUALITY,
					(uint)quality);
			}

			/// <summary>
			/// Sets the dictionary for compression and decompression.
			/// </summary>
			/// <param name="dictionary">The dictionary as a byte array.</param>
			public void SetCustomDictionary(byte[] dictionary)
			{
				if (dictionary == null)
					throw new ArgumentNullException(nameof(dictionary));

				EnsureNotDisposed();

				if (_customDictionary != IntPtr.Zero)
					Marshal.FreeHGlobal(_customDictionary);

				_customDictionary = Marshal.AllocHGlobal(dictionary.Length);
				Marshal.Copy(dictionary, 0, _customDictionary, dictionary.Length);

				if (_mode == CompressionMode.Compress)
				{
					Brotli.BrotliEncoderSetCustomDictionary(ref _encoderState, dictionary.Length,
						(byte*)_customDictionary);
				}
				else
				{
					Brotli.BrotliDecoderSetCustomDictionary(ref _decoderState, dictionary.Length,
						(byte*)_customDictionary);
				}
			}

			/// <summary>
			/// Sets the window size for the encoder
			/// </summary>
			/// <param name="windowSize">The window size in bits (a value from 10-24)</param>
			public void SetWindow(int windowSize)
			{
				if (_mode != CompressionMode.Compress)
					throw new InvalidOperationException("SetWindow is only valid for compress");

				if (windowSize < Brotli.BROTLI_MIN_WINDOW_BITS || windowSize > Brotli.BROTLI_MAX_WINDOW_BITS)
					throw new ArgumentOutOfRangeException(nameof(windowSize), "Window size should be a value between " +
																			  Brotli.BROTLI_MIN_WINDOW_BITS + "-" + Brotli
																				  .BROTLI_MAX_WINDOW_BITS);

				EnsureNotDisposed();

				Brotli.BrotliEncoderSetParameter(ref _encoderState, Brotli.BrotliEncoderParameter.BROTLI_PARAM_LGWIN,
					(uint)windowSize);
			}

			/// <summary>
			/// Releases the unmanaged resources used by the <see cref="BrotliStream"/> and optionally releases the managed resources.
			/// </summary>
			/// <param name="disposing"></param>
			protected override void Dispose(bool disposing)
			{
				if (!_disposed)
				{
					FlushCompress(true);

					if (_mode == CompressionMode.Compress)
						Brotli.BrotliEncoderDestroyInstance(ref _encoderState);
					else
						Brotli.BrotliDecoderStateCleanup(ref _decoderState);
					if (_customDictionary != IntPtr.Zero)
					{
						Marshal.FreeHGlobal(_customDictionary);
						_customDictionary = IntPtr.Zero;
					}
					_disposed = true;
				}

				if (disposing && !_leaveOpen && _stream != null)
				{
					_stream.Dispose();
					_stream = null;
				}

				base.Dispose(disposing);
			}

			/// <summary>
			/// Flushes any buffered data into the stream
			/// </summary>
			public override void Flush()
			{
				EnsureNotDisposed();
				FlushCompress(false);
			}

			private void FlushCompress(bool finish)
			{
				if (_mode != CompressionMode.Compress)
					return;

				if (Brotli.BrotliEncoderIsFinished(ref _encoderState))
					return;

				var op = finish
					? Brotli.BrotliEncoderOperation.BROTLI_OPERATION_FINISH
					: Brotli.BrotliEncoderOperation.BROTLI_OPERATION_FLUSH;

				byte[] buffer = new byte[0];
				WriteCore(buffer, 0, 0, op);
			}

			/// <summary>
			/// This operation is not supported and always throws a <see cref="NotSupportedException"/>.
			/// </summary>
			public override long Seek(long offset, SeekOrigin origin)
			{
				throw new NotSupportedException();
			}

			/// <summary>
			/// This operation is not supported and always throws a <see cref="NotSupportedException"/>.
			/// </summary>
			public override void SetLength(long value)
			{
				throw new NotSupportedException();
			}

			private void ValidateParameters(byte[] array, int offset, int count)
			{
				if (array == null)
					throw new ArgumentNullException("array");

				if (offset < 0)
					throw new ArgumentOutOfRangeException("offset");

				if (count < 0)
					throw new ArgumentOutOfRangeException("count");

				if (array.Length - offset < count)
					throw new ArgumentException("Invalid argument offset and count");
			}

			/// <summary>
			/// Reads a number of decompressed bytes into the specified byte array.
			/// </summary>
			/// <param name="buffer">The array to store decompressed bytes.</param>
			/// <param name="offset">The byte offset in <paramref name="buffer"/> at which the read bytes will be placed.</param>
			/// <param name="count">The maximum number of decompressed bytes to read.</param>
			/// <returns>The number of bytes that were read into the byte array.</returns>
			public override int Read(byte[] buffer, int offset, int count)
			{
				if (_mode != CompressionMode.Decompress)
					throw new InvalidOperationException("Read is only supported in Decompress mode");

				EnsureNotDisposed();
				ValidateParameters(buffer, offset, count);

				int totalWritten = 0;
				while (offset < buffer.Length && _lastDecoderState != Brotli.BrotliDecoderResult.BROTLI_DECODER_RESULT_SUCCESS)
				{
					if (_lastDecoderState == Brotli.BrotliDecoderResult.BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT)
					{
						if (_bufferCount > 0 && _bufferOffset != 0)
						{
							Array.Copy(_buffer, _bufferOffset, _buffer, 0, _bufferCount);
						}
						_bufferOffset = 0;

						int numRead = 0;
						while (_bufferCount < _buffer.Length && ((numRead = _stream.Read(_buffer, _bufferCount, _buffer.Length - _bufferCount)) > 0))
						{
							_bufferCount += numRead;
							if (_bufferCount > _buffer.Length)
								throw new InvalidDataException("Invalid input stream detected, more bytes supplied than expected.");
						}

						if (_bufferCount <= 0)
							break;
					}

					size_t available_in = _bufferCount;
					size_t available_in_old = available_in;
					size_t available_out = count;
					size_t available_out_old = available_out;

					fixed (byte* out_buf_ptr = buffer)
					fixed (byte* in_buf_ptr = _buffer)
					{
						byte* in_buf = in_buf_ptr + _bufferOffset;
						byte* out_buf = out_buf_ptr + offset;
						_lastDecoderState = Brotli.BrotliDecoderDecompressStream(ref _decoderState, &available_in, &in_buf,
							&available_out, &out_buf, null);
					}

					if (_lastDecoderState == Brotli.BrotliDecoderResult.BROTLI_DECODER_RESULT_ERROR)
						throw new InvalidDataException("Decompression failed with error code: " + _decoderState.error_code);

					size_t bytesConsumed = available_in_old - available_in;
					size_t bytesWritten = available_out_old - available_out;

					if (bytesConsumed > 0)
					{
						_bufferOffset += (int)bytesConsumed;
						_bufferCount -= (int)bytesConsumed;
					}

					if (bytesWritten > 0)
					{
						totalWritten += (int)bytesWritten;
						offset += (int)bytesWritten;
						count -= (int)bytesWritten;
					}
				}

				return totalWritten;
			}

			private void WriteCore(byte[] buffer, int offset, int count, Brotli.BrotliEncoderOperation operation)
			{
				bool flush = operation == Brotli.BrotliEncoderOperation.BROTLI_OPERATION_FLUSH ||
							 operation == Brotli.BrotliEncoderOperation.BROTLI_OPERATION_FINISH;

				byte[] out_buf = new byte[0x1FFFE];
				size_t available_in = count, available_out = out_buf.Length;
				fixed (byte* out_buf_ptr = out_buf)
				fixed (byte* buf_ptr = buffer)
				{
					byte* next_in = buf_ptr + offset;
					byte* next_out = out_buf_ptr;

					while ((!flush && available_in > 0) || flush)
					{
						if (!Brotli.BrotliEncoderCompressStream(ref _encoderState,
							operation, &available_in, &next_in,
							&available_out, &next_out, null))
						{
							throw new InvalidDataException("Compression failed");
						}

						bool hasData = available_out != out_buf.Length;
						if (hasData)
						{
							int out_size = (int)(out_buf.Length - available_out);
							_stream.Write(out_buf, 0, out_size);
							available_out = out_buf.Length;
							next_out = out_buf_ptr;
						}

						if (Brotli.BrotliEncoderIsFinished(ref _encoderState))
							break;

						if (!hasData && flush)
							break;
					}
				}
			}

			/// <summary>
			/// Writes compressed bytes to the underlying stream from the specified byte array.
			/// </summary>
			/// <param name="buffer">The buffer that contains the data to compress.</param>
			/// <param name="offset">The byte offset in <paramref name="buffer"/> from which the bytes will be read.</param>
			/// <param name="count">The maximum number of bytes to write.</param>
			public override void Write(byte[] buffer, int offset, int count)
			{
				if (_mode != CompressionMode.Compress)
					throw new InvalidOperationException("Write is only supported in Compress mode");

				EnsureNotDisposed();
				ValidateParameters(buffer, offset, count);
				WriteCore(buffer, offset, count, Brotli.BrotliEncoderOperation.BROTLI_OPERATION_PROCESS);
			}

			/// <summary>
			/// Gets a value indicating whether the stream supports reading while decompressing a file.
			/// </summary>
			public override bool CanRead
			{
				get
				{
					if (_stream == null)
						return false;

					return _mode == CompressionMode.Decompress && _stream.CanRead;
				}
			}

			/// <summary>
			/// Gets a value indicating whether the stream supports seeking.
			/// </summary>
			public override bool CanSeek => false;

			/// <summary>
			/// Gets a value indicating whether the stream supports writing.
			/// </summary>
			public override bool CanWrite
			{
				get
				{
					if (_stream == null)
						return false;

					return _mode == CompressionMode.Compress && _stream.CanWrite;
				}
			}

			/// <summary>
			/// This property is not supported and always throws a <see cref="NotSupportedException"/>.
			/// </summary>
			public override long Length
			{
				get
				{
					throw new NotSupportedException();
				}
			}

			/// <summary>
			/// This property is not supported and always throws a <see cref="NotSupportedException"/>.
			/// </summary>
			public override long Position
			{
				get
				{
					throw new NotSupportedException();
				}
				set
				{
					throw new NotSupportedException();
				}
			}

			private void EnsureNotDisposed()
			{
				if (_stream == null)
					throw new ObjectDisposedException(null, "The underlying stream has been disposed");

				if (_disposed)
					throw new ObjectDisposedException(null);
			}
		}

		/// <summary>
		/// A class for compressing and decompressing data using the Brotli algorithm.
		/// </summary>
		public static class Brotli 
		{
			/// <summary>
			/// Decompresses a byte array into a new byte array using brotli.
			/// </summary>
			/// <param name="buffer">The byte array to decompress.</param>
			/// <param name="offset">The byte offset in <paramref name="buffer"/> to read from.</param>
			/// <param name="length">The number of bytes to read.</param>
			/// <param name="customDictionary">The custom dictionary that will be passed to the decoder</param>
			/// <returns>The byte array in compressed form</returns>
			public static unsafe byte[] DecompressBuffer(byte[] buffer, int offset, int length, byte[] customDictionary = null) 
			{
				if (buffer == null) { throw new ArgumentNullException(nameof(buffer)); }

				if (offset < 0) { throw new ArgumentOutOfRangeException(nameof(offset)); }

				if (length < 0) { throw new ArgumentOutOfRangeException(nameof(length)); }

				if (offset + length > buffer.Length) { throw new IndexOutOfRangeException("Offset and length exceed the range of the buffer"); }

				using (var ms = new MemoryStream()) 
				{
					// Create the decoder state and intialise it.
					var s = BrotliCreateDecoderState();
					BrotliDecoderStateInit(ref s);

					// Set the custom dictionary
					GCHandle dictionaryHandle = customDictionary != null ? GCHandle.Alloc(customDictionary, GCHandleType.Pinned) : default(GCHandle);
					if (customDictionary != null) { BrotliDecoderSetCustomDictionary(ref s, customDictionary.Length, (byte*) dictionaryHandle.AddrOfPinnedObject()); }

					// Create a 64k buffer to temporarily store decompressed contents.
					byte[] writeBuf = new byte[0x10000];

					// Pin the output buffer and the input buffer.
					fixed (byte* outBuffer = writeBuf) 
					{
						fixed (byte* inBuffer = buffer) 
						{
							// Specify the length of the input buffer.
							size_t len = length;

							// Local vars for input/output buffer.
							var bufPtr = inBuffer + offset;
							var outPtr = outBuffer;

							// Specify the amount of bytes available in the output buffer.
							size_t availOut = writeBuf.Length;

							// Total number of bytes decoded.
							size_t total = 0;

							// Main decompression loop.
							BrotliDecoderResult result;
							while ((result = BrotliDecoderDecompressStream(ref s, &len, &bufPtr, &availOut, &outPtr, &total)) == BrotliDecoderResult.BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT) 
							{
								ms.Write(writeBuf, 0, (int) (writeBuf.Length - availOut));
								availOut = writeBuf.Length;
								outPtr = outBuffer;
							}

							// Check the result and write final block.
							if (result == BrotliDecoderResult.BROTLI_DECODER_RESULT_SUCCESS) { ms.Write(writeBuf, 0, (int) (writeBuf.Length - availOut)); }

							// Cleanup and throw.
							BrotliDecoderStateCleanup(ref s);
							if (customDictionary != null) { dictionaryHandle.Free(); }

							if (result != BrotliDecoderResult.BROTLI_DECODER_RESULT_SUCCESS) { throw new InvalidDataException("Decompress failed with error code: " + s.error_code); }

							return ms.ToArray();
						}
					}
				}
			}

			/// <summary>
			/// Compresses a byte array into a new byte array using brotli.
			/// </summary>
			/// <param name="buffer">The byte array to compress.</param>
			/// <param name="offset">The byte offset in <paramref name="buffer"/> to read from</param>.
			/// <param name="length">The number of bytes to read.</param>
			/// <param name="quality">The quality of the compression. This must be a value between 0 to 11 (inclusive).</param>
			/// <param name="lgwin">The window size (in bits). This must be a value between 10 and 24 (inclusive).</param>
			/// <param name="customDictionary">The custom dictionary that will be passed to the encoder.</param>
			/// <returns></returns>
			public static unsafe byte[] CompressBuffer(byte[] buffer, int offset, int length, int quality = -1,
				int lgwin = -1, byte[] customDictionary = null) 
			{
				if (buffer == null) { throw new ArgumentNullException(nameof(buffer)); }

				if (offset < 0) { throw new ArgumentOutOfRangeException(nameof(offset)); }

				if (length < 0) { throw new ArgumentOutOfRangeException(nameof(length)); }

				if (offset + length > buffer.Length) { throw new IndexOutOfRangeException("Offset and length exceed the range of the buffer"); }

				using (var ms = new MemoryStream()) 
				{
					// Create the encoder state and intialise it.
					var s = BrotliEncoderCreateInstance(null, null, null);

					// Set the encoder parameters
					if (quality != -1) { BrotliEncoderSetParameter(ref s, BrotliEncoderParameter.BROTLI_PARAM_QUALITY, (uint) quality); }

					if (lgwin != -1) { BrotliEncoderSetParameter(ref s, BrotliEncoderParameter.BROTLI_PARAM_LGWIN, (uint) lgwin); }

					// Set the custom dictionary
					if (customDictionary != null) { fixed (byte* cd = customDictionary) { BrotliEncoderSetCustomDictionary(ref s, customDictionary.Length, cd); } }

					size_t available_in = length;
					byte[] out_buf = new byte[0x10000];
					size_t available_out = out_buf.Length;
					fixed (byte* o = out_buf)
					fixed (byte* b = buffer) 
					{
						byte* next_in = b;
						byte* next_out = o;

						bool fail = false;

						while (true) 
						{
							// Compress stream using inputted buffer
							if (!BrotliEncoderCompressStream(ref s, BrotliEncoderOperation.BROTLI_OPERATION_FINISH, &available_in, &next_in, &available_out, &next_out, null)) { fail = true; break; }

							// Write the compressed bytes to the stream
							if (available_out != out_buf.Length) 
							{
								size_t out_size = out_buf.Length - available_out;
								ms.Write(out_buf, 0, (int) out_size);
								available_out = out_buf.Length; next_out = o;
							}

							// Check that the encoder is finished
							if (BrotliEncoderIsFinished(ref s)) break;
						}

						BrotliEncoderDestroyInstance(ref s);

						if (fail) { throw new InvalidDataException("Compression failed for unspecified reason"); }
					}

					return ms.ToArray();
				}
			}

			private const int BROTLI_NUM_LITERAL_SYMBOLS = 256;
			private const int BROTLI_NUM_COMMAND_SYMBOLS = 704;
			private const int BROTLI_NUM_BLOCK_LEN_SYMBOLS = 26;

			private const int BROTLI_MAX_NPOSTFIX = 3;
			private const int BROTLI_MAX_NDIRECT = 120;
			private const int BROTLI_NUM_DISTANCE_SYMBOLS = (BROTLI_NUM_DISTANCE_SHORT_CODES + BROTLI_MAX_NDIRECT + (BROTLI_MAX_DISTANCE_BITS << (BROTLI_MAX_NPOSTFIX + 1)));

			private const int BROTLI_REPEAT_PREVIOUS_CODE_LENGTH = 16;
			private const int BROTLI_REPEAT_ZERO_CODE_LENGTH = 17;
			private const int BROTLI_CODE_LENGTH_CODES = BROTLI_REPEAT_ZERO_CODE_LENGTH + 1;
			private const int BROTLI_INITIAL_REPEATED_CODE_LENGTH = 8;

			private const int BROTLI_NUM_DISTANCE_SHORT_CODES = 16;
			private const int BROTLI_MAX_DISTANCE_BITS = 24;

			private const int BROTLI_LITERAL_CONTEXT_BITS = 6;
			private const int BROTLI_DISTANCE_CONTEXT_BITS = 2;

			private const int BROTLI_WINDOW_GAP = 16;

			private static size_t BROTLI_MAX_BACKWARD_LIMIT(size_t W) { return ((size_t) 1 << (int) W) - BROTLI_WINDOW_GAP; }

			#if X64 || X86
				private const bool BROTLI_ALIGNED_READ = false;
			#else
				private static readonly bool BROTLI_ALIGNED_READ = !IsWhitelistedCPU();
			#endif

			private static readonly Endianess BYTE_ORDER = GetEndianess();
			private static readonly bool BROTLI_LITTLE_ENDIAN = BYTE_ORDER == Endianess.Little;
			private static readonly bool BROTLI_BIG_ENDIAN = BYTE_ORDER == Endianess.Big;
		

			#if PROPER_DETECT
				[StructLayout(LayoutKind.Sequential)]
				private struct SYSTEM_INFO 
				{
					public ushort wProcessorArchitecture;
					public ushort wReserved;
					public uint dwPageSize;
					public IntPtr lpMinimumApplicationAddress;
					public IntPtr lpMaximumApplicationAddress;
					public IntPtr dwActiveProcessorMask;
					public uint dwNumberOfProcessors;
					public uint dwProcessorType;
					public uint dwAllocationGranularity;
					public ushort wProcessorLevel;
					public ushort wProcessorRevision;
				}

				[DllImport("kernel32.dll")]
				private static extern void GetNativeSystemInfo(out SYSTEM_INFO info);

				[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
				private struct utsname 
				{
					[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 65)]
					public string sysname;
					[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 65)]
					public string nodename;
					[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 65)]
					public string release;
					[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 65)]
					public string version;
					[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 65)]
					public string machine;
					[MarshalAs(UnmanagedType.ByValArray, SizeConst = 1024)]
					private byte[] padding;
				}

				[DllImport("libc")]
				private static extern int uname(out utsname buf);
			#endif

			private enum Endianess { Little, Big, Unknown }

			/// <summary>
			/// Detects the endianness of the current CPU
			/// </summary>
			private static unsafe Endianess GetEndianess() 
			{
				uint value = 0xaabbccdd;
				byte* b = (byte*)&value;
				if (b[0] == 0xdd) { return Endianess.Little; }
				if (b[0] == 0xaa) { return Endianess.Big; }
				return Endianess.Unknown;
			}

			/// <summary>
			/// Determines if the current CPU supports unaligned reads
			/// </summary>
			private static bool IsWhitelistedCPU() 
			{
				#if PROPER_DETECT
					// Detect the current CPU architecture to enable unaligned reads
					switch (Environment.OSVersion.Platform) {
						// Unix
						case PlatformID.MacOSX:
						case PlatformID.Unix:
						case (PlatformID) 128:
							utsname buf;
							if (uname(out buf) == 0) {
								switch (buf.machine) {
									case "i386":
									case "i686":
									case "x86_64":
									case "arm":
									case "armv7l":
									case "aarch64":
										return true;
								}
							}
							break;
						// Windows NT
						case PlatformID.Win32NT:
							SYSTEM_INFO info;
							GetNativeSystemInfo(out info);
							switch (info.wProcessorArchitecture) {
								case 0: // Intel (x86)
								case 5: // ARM
								case 9: // AMD64 (x64)
									return true;
							}
							break;
					}

					return false;
				#else
					return true;
				#endif
			}
		

			// Use preprocessor directives to optimise away some of the IL to encourage 
			// inlining by JIT compiler
			#if X64
				private const bool Is64Bit = true;
				private const int WordSize = 64;
			#elif X86
				private const bool Is64Bit = false;
				private const int WordSize = 32;
			#else
				private static readonly bool Is64Bit = IntPtr.Size == 8;
				private static readonly int WordSize = IntPtr.Size * 8;
			#endif

			private static readonly size_t wsize = IntPtr.Size;
			private static readonly size_t wmask = IntPtr.Size - 1;

			// https://opensource.apple.com/source/ntp/ntp-12/ntp/libntp/memmove.c
			private static unsafe void memmove(void* destination, void* source, size_t length)
			{
				byte* src = (byte*)source;
				byte* dst = (byte*)destination;

				// Check that buffers do not overlap, if so do memcpy
				if (dst - src >= length && src - dst >= length)
				{
					memcpy(destination, source, length);
					return;
				}

				if (dst < src)
				{
					/*
					 * Copy forward.
					 */
					size_t t = (int)src; /* only need low bits */
					if (((t | (int)dst) & wmask) != 0)
					{
						/*
						* Try to align operands.  This cannot be done
						* unless the low bits match.
						*/
						if (((t ^ (int)dst) & wmask) != 0 || length < wsize)
							t = length;
						else
							t = wsize - (t & wmask);
						length -= t;
						do
						{
							*dst++ = *src++;
						} while (--t != 0);
					}
					/*
					 * Copy whole words, then mop up any trailing bytes.
					 */
					t = length / wsize;
					if (t != 0)
					{
						do
						{
							*(size_t*)dst = *(size_t*)src;
							src += wsize;
							dst += wsize;
						} while (--t != 0);
					}
					t = length & wmask;
					if (t != 0)
					{
						do
						{
							*dst++ = *src++;
						} while (--t != 0);
					}
				}
				else
				{
					/*
					 * Copy backwards.  Otherwise essentially the same.
					 * Alignment works as before, except that it takes
					 * (t&wmask) bytes to align, not wsize-(t&wmask).
					 */
					src += length;
					dst += length;
					size_t t = (int)src;
					if (((t | (int)dst) & wmask) != 0)
					{
						if (((t ^ (int)dst) & wmask) != 0 || length <= wsize)
							t = length;
						else
							t &= wmask;
						length -= t;
						do
						{
							*--dst = *--src;
						} while (--t != 0);
					}
					t = length / wsize;
					if (t != 0)
					{
						do
						{
							src -= wsize;
							dst -= wsize;
							*(size_t*)dst = *(size_t*)src;
						} while (t-- != 0);
					}
					t = length & wmask;
					if (t != 0)
					{
						do
						{
							*--dst = *--src;
						} while (--t != 0);
					}
				}
			}

			// https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Buffer.cs
			private static unsafe void memcpy(void* destination, void* source, size_t length) 
			{
				#if !(NET20 || NET35 || NET40)
					System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(destination, source, length);
				#else
				// This is portable version of memcpy. It mirrors what the hand optimized assembly versions of memcpy typically do.
				//
				// Ideally, we would just use the cpblk IL instruction here. Unfortunately, cpblk IL instruction is not as efficient as
				// possible yet and so we have this implementation here for now.

				// Note: It's important that this switch handles lengths at least up to 22.
				// See notes below near the main loop for why.

				// The switch will be very fast since it can be implemented using a jump
				// table in assembly. See http://stackoverflow.com/a/449297/4077294 for more info.
				var dest = (byte*) destination;
				var src = (byte*) source;
				var len = (uint) length;
				switch (len) {
					case 0:
						return;
					case 1:
						*dest = *src;
						return;
					case 2:
						*(short*) dest = *(short*) src;
						return;
					case 3:
						*(short*) dest = *(short*) src;
						*(dest + 2) = *(src + 2);
						return;
					case 4:
						*(int*) dest = *(int*) src;
						return;
					case 5:
						*(int*) dest = *(int*) src;
						*(dest + 4) = *(src + 4);
						return;
					case 6:
						*(int*) dest = *(int*) src;
						*(short*) (dest + 4) = *(short*) (src + 4);
						return;
					case 7:
						*(int*) dest = *(int*) src;
						*(short*) (dest + 4) = *(short*) (src + 4);
						*(dest + 6) = *(src + 6);
						return;
					case 8:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						return;
					case 9:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(dest + 8) = *(src + 8);
						return;
					case 10:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(short*) (dest + 8) = *(short*) (src + 8);
						return;
					case 11:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(short*) (dest + 8) = *(short*) (src + 8);
						*(dest + 10) = *(src + 10);
						return;
					case 12:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(int*) (dest + 8) = *(int*) (src + 8);
						return;
					case 13:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(int*) (dest + 8) = *(int*) (src + 8);
						*(dest + 12) = *(src + 12);
						return;
					case 14:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(int*) (dest + 8) = *(int*) (src + 8);
						*(short*) (dest + 12) = *(short*) (src + 12);
						return;
					case 15:
						if (Is64Bit)
							*(long*) dest = *(long*) src;
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
						}
						*(int*) (dest + 8) = *(int*) (src + 8);
						*(short*) (dest + 12) = *(short*) (src + 12);
						*(dest + 14) = *(src + 14);
						return;
					case 16:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						return;
					case 17:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(dest + 16) = *(src + 16);
						return;
					case 18:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(short*) (dest + 16) = *(short*) (src + 16);
						return;
					case 19:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(short*) (dest + 16) = *(short*) (src + 16);
						*(dest + 18) = *(src + 18);
						return;
					case 20:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(int*) (dest + 16) = *(int*) (src + 16);
						return;
					case 21:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(int*) (dest + 16) = *(int*) (src + 16);
						*(dest + 20) = *(src + 20);
						return;
					case 22:
						if (Is64Bit) {
							*(long*) dest = *(long*) src;
							*(long*) (dest + 8) = *(long*) (src + 8);
						}
						else {
							*(int*) dest = *(int*) src;
							*(int*) (dest + 4) = *(int*) (src + 4);
							*(int*) (dest + 8) = *(int*) (src + 8);
							*(int*) (dest + 12) = *(int*) (src + 12);
						}
						*(int*) (dest + 16) = *(int*) (src + 16);
						*(short*) (dest + 20) = *(short*) (src + 20);
						return;
				}

				size_t i = 0; // byte offset at which we're copying

				if (((int) dest & 3) != 0) {
					if (((int) dest & 1) != 0) {
						*(dest + i) = *(src + i);
						i += 1;
						if (((int) dest & 2) != 0)
							goto IntAligned;
					}
					*(short*) (dest + i) = *(short*) (src + i);
					i += 2;
				}

				IntAligned:

				if (Is64Bit) {
					// On 64-bit IntPtr.Size == 8, so we want to advance to the next 8-aligned address. If
					// (int)dest % 8 is 0, 5, 6, or 7, we will already have advanced by 0, 3, 2, or 1
					// bytes to the next aligned address (respectively), so do nothing. On the other hand,
					// if it is 1, 2, 3, or 4 we will want to copy-and-advance another 4 bytes until
					// we're aligned.
					// The thing 1, 2, 3, and 4 have in common that the others don't is that if you
					// subtract one from them, their 3rd lsb will not be set. Hence, the below check.

					if ((((int) dest - 1) & 4) == 0) {
						*(int*) (dest + i) = *(int*) (src + i);
						i += 4;
					}
				} // BIT64

				var end = len - 16;
				len -= i; // lower 4 bits of len represent how many bytes are left *after* the unrolled loop

				// This is separated out into a different variable, so the i + 16 addition can be
				// performed at the start of the pipeline and the loop condition does not have
				// a dependency on the writes.
				uint counter;

				do {
					counter = i + 16;

					// This loop looks very costly since there appear to be a bunch of temporary values
					// being created with the adds, but the jit (for x86 anyways) will convert each of
					// these to use memory addressing operands.

					// So the only cost is a bit of code size, which is made up for by the fact that
					// we save on writes to dest/src.

					if (Is64Bit) {
						*(long*) (dest + i) = *(long*) (src + i);
						*(long*) (dest + i + 8) = *(long*) (src + i + 8);
					}
					else {
						*(int*) (dest + i) = *(int*) (src + i);
						*(int*) (dest + i + 4) = *(int*) (src + i + 4);
						*(int*) (dest + i + 8) = *(int*) (src + i + 8);
						*(int*) (dest + i + 12) = *(int*) (src + i + 12);
					}

					i = counter;

					// See notes above for why this wasn't used instead
					// i += 16;
				} while (counter <= end);

				if ((len & 8) != 0) {
					if (Is64Bit)
						*(long*) (dest + i) = *(long*) (src + i);
					else {
						*(int*) (dest + i) = *(int*) (src + i);
						*(int*) (dest + i + 4) = *(int*) (src + i + 4);
					}
					i += 8;
				}
				if ((len & 4) != 0) {
					*(int*) (dest + i) = *(int*) (src + i);
					i += 4;
				}
				if ((len & 2) != 0) {
					*(short*) (dest + i) = *(short*) (src + i);
					i += 2;
				}
				if ((len & 1) != 0) {
					*(dest + i) = *(src + i);
					// We're not using i after this, so not needed
					// i += 1;
				}
				#endif
			}

			private static unsafe void memmove16(byte* dst, byte* src) 
			{
				if (Is64Bit) { *(long*) dst = *(long*) src; *(long*) (dst + 8) = *(long*) (src + 8); }
				else 
				{
					*(int*) dst = *(int*) src;
					*(int*) (dst + 4) = *(int*) (src + 4);
					*(int*) (dst + 8) = *(int*) (src + 8);
					*(int*) (dst + 12) = *(int*) (src + 12);
				}
			}

			// https://github.com/Smattr/memset
			private static unsafe void* memset(void* ptr, int value, size_t num) 
			{
				#if !(NET20 || NET35 || NET40)
					System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(ptr, (byte)value, num);
					return ptr;
				#else
					size_t x = value & 0xff;
					var pp = (byte*) ptr;
					var xx = (byte) (value & 0xff);
					int i;
					for (i = 3; 1 << i < WordSize; ++i) { x |= x << (1 << i); }
					var bytes_per_word = 1 << (i - 3);

					/* Prologue. */
					while ((((uint) pp & (bytes_per_word - 1)) != 0) && (num-- != 0)) { *pp++ = xx; }
					var tail = num & (bytes_per_word - 1);
					var p = (size_t*) pp;

					/* Main loop. */
					num >>= i - 3;
					while (num-- != 0) { *p++ = x; }

					/* Epilogue. */
					pp = (byte*) p;
					while (tail-- != 0) { *pp++ = xx; }

					return ptr;
				#endif
			}

			[DebuggerDisplay("{Value}")]
			internal unsafe struct SizeT 
			{
				private void* Value;

				public SizeT(void* v) { Value = v; }

				public static implicit operator UIntPtr(size_t s) { return (UIntPtr) s.Value; }

				public static implicit operator size_t(UIntPtr s) { return new size_t(s.ToPointer()); }

				public static implicit operator ulong(size_t s) { return (ulong) s.Value; }

				public static implicit operator uint(size_t s) { return (uint) s.Value; }

				public static explicit operator ushort(size_t s) { return (ushort) s.Value; }

				public static explicit operator short(size_t s) { return (short) s.Value; }

				public static explicit operator long(size_t s) { return (long) s.Value; }

				public static explicit operator int(size_t s) { return (int) s.Value; }

				public static explicit operator byte(size_t s) { return (byte) s.Value; }

				public static explicit operator sbyte(size_t s) { return (sbyte) s.Value; }

				public static explicit operator void*(size_t s) { return s.Value; }

				public static explicit operator float(size_t s) { return Is64Bit ? (ulong)s : (uint)s; }

				public static explicit operator double(size_t s) { return Is64Bit ? (ulong)s : (uint)s; }

				public static implicit operator size_t(ushort i) { return new size_t((void*)i); }

				public static implicit operator size_t(byte i) { return new size_t((void*)i); }

				public static implicit operator size_t(int i) { return new size_t((void*) i); }

				public static implicit operator size_t(uint i) { return new size_t((void*) i); }

				public static implicit operator size_t(long i) { return new size_t((void*) i); }

				public static implicit operator size_t(ulong i) { return new size_t((void*) i); }

				public static explicit operator size_t(void* p) { return new size_t(p); }

				public static explicit operator size_t(double p) { return new size_t(Is64Bit ? (void*) (ulong) p : (void*) (uint) p); }

				public static explicit operator size_t(float p) { return new size_t(Is64Bit ? (void*)(ulong)p : (void*)(uint)p); }

				public static size_t operator +(size_t a, size_t b) { return Is64Bit ? new size_t((byte*) a + (ulong) b) : new size_t((byte*) a + b); }

				public static size_t operator +(size_t a, int b) { return new size_t((byte*) a + b); }

				public static size_t operator +(size_t a, uint b) { return new size_t((byte*) a + b); }

				public static size_t operator +(size_t a, long b) { return new size_t((byte*) a + b); }

				public static size_t operator +(size_t a, ulong b) { return new size_t((byte*) a + b); }

				public static bool operator >(size_t a, size_t b) { return a.Value > b.Value; }

				public static bool operator >=(size_t a, size_t b) { return a.Value >= b.Value; }

				public static bool operator <=(size_t a, size_t b) { return a.Value <= b.Value; }

				public static bool operator <(size_t a, size_t b) { return a.Value < b.Value; }

				public static size_t operator -(size_t a, size_t b) { return Is64Bit ? new size_t((byte*) a - (ulong) b) : new size_t((byte*) a - b); }

				public static size_t operator -(size_t a, int b) { return new size_t((byte*) a.Value - b); }

				public static size_t operator -(size_t a, uint b) { return new size_t((byte*) a.Value - b); }

				public static size_t operator -(size_t a, long b) { return new size_t((byte*) a.Value - b); }

				public static size_t operator -(size_t a, ulong b) { return new size_t((byte*) a.Value - b); }

				public static size_t operator /(size_t a, size_t b) { return new size_t(Is64Bit ? (void*) ((ulong) a / (ulong) b) : (void*) ((uint) a / (uint) b)); }

				public static size_t operator /(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a / (uint) b) : (void*) ((uint) a / (uint) b)); }

				public static size_t operator /(size_t a, uint b) { return new size_t(Is64Bit ? (void*) ((ulong) a / b) : (void*) ((uint) a / b)); }

				public static size_t operator /(size_t a, long b) { return new size_t(Is64Bit ? (void*) ((ulong) a / (ulong) b) : (void*) ((uint) a / (uint) b)); }

				public static size_t operator /(size_t a, ulong b) { return new size_t(Is64Bit ? (void*) ((ulong) a / b) : (void*) ((uint) a / (uint) b)); }

				public static size_t operator *(size_t a, size_t b) { return new size_t(Is64Bit ? (void*) ((ulong) a * (ulong) b) : (void*) ((uint) a * (uint) b)); }

				public static size_t operator *(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a * (ulong) b) : (void*) ((uint) a * (uint) b)); }

				public static size_t operator *(size_t a, uint b) { return new size_t(Is64Bit ? (void*) ((ulong) a * b) : (void*) ((uint) a * b)); }

				public static size_t operator *(size_t a, long b) { return new size_t(Is64Bit ? (void*) ((ulong) a * (ulong) b) : (void*) ((uint) a * (uint) b)); }

				public static size_t operator *(size_t a, ulong b) { return new size_t(Is64Bit ? (void*) ((ulong) a * b) : (void*) ((uint) a * (uint) b)); }

				public static size_t operator %(size_t a, size_t b) { return new size_t(Is64Bit ? (void*) ((ulong) a % (ulong) b) : (void*) ((uint) a % (uint) b)); }

				public static size_t operator %(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a % (ulong) b) : (void*) ((uint) a % (uint) b)); }

				public static size_t operator %(size_t a, uint b) { return new size_t(Is64Bit ? (void*) ((ulong) a % b) : (void*) ((uint) a % b)); }

				public static size_t operator %(size_t a, long b) { return new size_t(Is64Bit ? (void*) ((ulong) a % (ulong) b) : (void*) ((uint) a % (uint) b)); }

				public static size_t operator %(size_t a, ulong b) { return new size_t(Is64Bit ? (void*) ((ulong) a % b) : (void*) ((uint) a % (uint) b)); }

				public static size_t operator &(size_t a, size_t b) { return new size_t(Is64Bit ? (void*) ((ulong) a & (ulong) b) : (void*) ((uint) a & (uint) b)); }

				public static size_t operator &(size_t a, int b) { return new size_t((void*) ((uint)a & (uint) b)); }

				public static size_t operator &(size_t a, uint b) { return new size_t((void*)((uint)a & b)); }

				public static size_t operator &(size_t a, long b) { return new size_t(Is64Bit ? (void*) ((ulong) a & (uint) b) : (void*) ((uint) a & (uint) b)); }

				public static size_t operator &(size_t a, ulong b) { return new size_t(Is64Bit ? (void*) ((ulong) a & b) : (void*) ((uint) a & b)); }

				public static size_t operator |(size_t a, size_t b) { return new size_t(Is64Bit ? (void*) ((ulong) a | (ulong) b) : (void*) ((uint) a | (uint) b)); }

				public static size_t operator |(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a | (uint) b) : (void*) ((uint) a | (uint) b)); }

				public static size_t operator |(size_t a, uint b) { return new size_t(Is64Bit ? (void*) ((ulong) a | b) : (void*) ((uint) a | b)); }

				public static size_t operator |(size_t a, long b) { return new size_t(Is64Bit ? (void*) ((ulong) a | (uint) b) : (void*) ((uint) a | (uint) b)); }

				public static size_t operator |(size_t a, ulong b) { return new size_t(Is64Bit ? (void*) ((ulong) a | b) : (void*) ((uint) a | b)); }

				public static size_t operator >>(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a >> b) : (void*) ((uint) a >> b)); }

				public static size_t operator <<(size_t a, int b) { return new size_t(Is64Bit ? (void*) ((ulong) a << b) : (void*) ((uint) a << b)); }

				public static size_t operator ~(size_t a) { return new size_t(Is64Bit ? (void*)(~(ulong) a) : (void*)(~(uint)a)); }

				public override string ToString() { return Is64Bit ? ((ulong)Value).ToString() : ((uint)Value).ToString(); }
			}
		
			internal unsafe delegate void* brotli_alloc_func(void* opaque, size_t size);

			internal unsafe delegate void brotli_free_func(void* opaque, void* address);
		
			static Brotli() 
			{
				// BrotliNative uses fixed on these arrays, ensure to pin them to prevent GC from cleaning them up,
				// especially with kContextLookup since address references are stored which could break
				GCHandle.Alloc(kContextLookup, GCHandleType.Pinned);
				GCHandle.Alloc(kBrotliDictionary, GCHandleType.Pinned);
				GCHandle.Alloc(kStaticDictionaryHash, GCHandleType.Pinned);
				GCHandle.Alloc(kStaticContextMapComplexUTF8, GCHandleType.Pinned);
				GCHandle.Alloc(kStaticContextMapContinuation, GCHandleType.Pinned);
				GCHandle.Alloc(kStaticContextMapSimpleUTF8, GCHandleType.Pinned);
			}

			private static uint BitMask(uint n) { return kBitMask[n]; }

			private static unsafe void BrotliInitBitReader(BrotliBitReader* br)  { br->val_ = 0; br->bit_pos_ = (uint) (IntPtr.Size << 3); }

			private static unsafe bool BrotliWarmupBitReader(BrotliBitReader* br) 
			{
				size_t aligned_read_mask = (IntPtr.Size >> 1) - 1;
				/* Fixing alignment after unaligned BrotliFillWindow would result accumulator
				   overflow. If unalignment is caused by BrotliSafeReadBits, then there is
				   enough space in accumulator to fix alignment. */
				if (!BROTLI_ALIGNED_READ) { aligned_read_mask = 0; }
				if (BrotliGetAvailableBits(br) == 0) { if (!BrotliPullByte(br)) { return false; } }

				while ((((size_t) br->next_in) & aligned_read_mask) != 0)  { if (!BrotliPullByte(br))  { /* If we consumed all the input, we don't care about the alignment. */ return true; } }
				return true;
			}

			private static unsafe void BrotliBitReaderSaveState(BrotliBitReader* from, BrotliBitReader* to) 
			{
				to->val_ = from->val_; to->bit_pos_ = from->bit_pos_;
				to->next_in = from->next_in; to->avail_in = from->avail_in;
			}

			private static unsafe void BrotliBitReaderRestoreState(BrotliBitReader* to, BrotliBitReader* from) 
			{
				to->val_ = from->val_; to->bit_pos_ = from->bit_pos_;
				to->next_in = from->next_in; to->avail_in = from->avail_in;
			}

			private static unsafe uint BrotliGetAvailableBits(BrotliBitReader* br) {return (uint) ((Is64Bit ? 64 : 32) - br->bit_pos_);}

			/* Returns amount of unread bytes the bit reader still has buffered from the
			BrotliInput, including whole bytes in br->val_. */
			private static unsafe size_t BrotliGetRemainingBytes(BrotliBitReader* br) { return br->avail_in + (BrotliGetAvailableBits(br) >> 3); }

			/* Checks if there is at least |num| bytes left in the input ring-buffer
			   (excluding the bits remaining in br->val_). */
			private static unsafe bool BrotliCheckInputAmount(BrotliBitReader* br, size_t num) { return br->avail_in >= num; }

			private static unsafe ushort BrotliLoad16LE(byte* bIn) 
			{
				if (BROTLI_LITTLE_ENDIAN) 
				{ return *(ushort*) bIn; }
				if (BROTLI_BIG_ENDIAN) 
				{
					ushort value = *((ushort*)bIn);
					return (ushort)(((value & 0xFFU) << 8) | ((value & 0xFF00U) >> 8));
				}
				return (ushort)(bIn[0] | (bIn[1] << 8));
			}

			private static unsafe uint BrotliLoad32LE(byte* bIn) 
			{
				if (BROTLI_LITTLE_ENDIAN) { return *(uint*) bIn; }
				if (BROTLI_BIG_ENDIAN) 
				{
					uint value = *((uint*) bIn);
					return ((value & 0xFFU) << 24) | ((value & 0xFF00U) << 8) | ((value & 0xFF0000U) >> 8) | ((value & 0xFF000000U) >> 24);
				} else 
				{
					uint value = (uint) (*(bIn++));
					value |= (uint) (*(bIn++)) << 8;
					value |= (uint) (*(bIn++)) << 16;
					value |= (uint) (*(bIn++)) << 24;
					return value;
				}
			}

			private static unsafe ulong BrotliLoad64LE(byte* bIn) 
			{
				if (BROTLI_LITTLE_ENDIAN) { return *(ulong*) bIn; }
				if (BROTLI_BIG_ENDIAN) 
				{
					ulong value = *((ulong*)bIn);
					return
						((value & 0xFFU) << 56) |
						((value & 0xFF00U) << 40) |
						((value & 0xFF0000U) << 24) |
						((value & 0xFF000000U) << 8) |
						((value & 0xFF00000000U) >> 8) |
						((value & 0xFF0000000000U) >> 24) |
						((value & 0xFF000000000000U) >> 40) |
						((value & 0xFF00000000000000U) >> 56);
				} else 
				{
					ulong value = (ulong)(*(bIn++));
					value |= (ulong)(*(bIn++)) << 8;
					value |= (ulong)(*(bIn++)) << 16;
					value |= (ulong)(*(bIn++)) << 24;
					value |= (ulong)(*(bIn++)) << 32;
					value |= (ulong)(*(bIn++)) << 40;
					value |= (ulong)(*(bIn++)) << 48;
					value |= (ulong)(*(bIn++)) << 56;
					return value;
				}
			}

			/* Guarantees that there are at least n_bits + 1 bits in accumulator.
			   Precondition: accumulator contains at least 1 bit.
			   n_bits should be in the range [1..24] for regular build. For portable
			   non-64-bit little-endian build only 16 bits are safe to request. */
			private static unsafe void BrotliFillBitWindow(BrotliBitReader* br, uint n_bits) 
			{
				if (Is64Bit) 
				{
					if (!BROTLI_ALIGNED_READ && n_bits != 0 && (n_bits <= 8)) 
					{
						if (br->bit_pos_ >= 56) 
						{
							br->val_ >>= 56; br->bit_pos_ ^= 56; /* here same as -= 56 because of the if condition */
							br->val_ |= BrotliLoad64LE(br->next_in) << 8;
							br->avail_in -= 7; br->next_in += 7;
						}
					}
					else if (!BROTLI_ALIGNED_READ && n_bits != 0 && (n_bits <= 16)) 
					{
						if (br->bit_pos_ >= 48) 
						{
							br->val_ >>= 48; br->bit_pos_ ^= 48; /* here same as -= 48 because of the if condition */
							br->val_ |= BrotliLoad64LE(br->next_in) << 16;
							br->avail_in -= 6; br->next_in += 6;
						}
					}
					else 
					{
						if (br->bit_pos_ >= 32) 
						{
							br->val_ >>= 32; br->bit_pos_ ^= 32; /* here same as -= 32 because of the if condition */
							br->val_ |= ((ulong) BrotliLoad32LE(br->next_in)) << 32;
							br->avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
							br->next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
						}
					}
				}
				else 
				{
					if (!BROTLI_ALIGNED_READ && n_bits != 0 && (n_bits <= 8)) 
					{
						if (br->bit_pos_ >= 24) 
						{
							br->val_ >>= 24; br->bit_pos_ ^= 24; /* here same as -= 24 because of the if condition */
							br->val_ |= BrotliLoad32LE(br->next_in) << 8;
							br->avail_in -= 3; br->next_in += 3;
						}
					}
					else 
					{
						if (br->bit_pos_ >= 16) 
						{
							br->val_ >>= 16; br->bit_pos_ ^= 16; /* here same as -= 16 because of the if condition */
							br->val_ |= ((uint) BrotliLoad16LE(br->next_in)) << 16;
							br->avail_in -= BROTLI_SHORT_FILL_BIT_WINDOW_READ;
							br->next_in += BROTLI_SHORT_FILL_BIT_WINDOW_READ;
						}
					}
				}
			}

			/* Mostly like BrotliFillBitWindow, but guarantees only 16 bits and reads no
			   more than BROTLI_SHORT_FILL_BIT_WINDOW_READ bytes of input. */
			private static unsafe void BrotliFillBitWindow16(BrotliBitReader* br) { BrotliFillBitWindow(br, 17); }

			/* Pulls one byte of input to accumulator. */
			private static unsafe bool BrotliPullByte(BrotliBitReader* br) 
			{
				if (br->avail_in == 0) { return false; }
				br->val_ >>= 8;
				if (Is64Bit) { br->val_ |= ((ulong) *br->next_in) << 56; }
				else { br->val_ |= ((uint) *br->next_in) << 24; }
				br->bit_pos_ -= 8;
				--br->avail_in;
				++br->next_in;
				return true;
			}

			/* Returns currently available bits.
			The number of valid bits could be calculated by BrotliGetAvailableBits. */
			private static unsafe reg_t BrotliGetBitsUnmasked(BrotliBitReader* br) { return br->val_ >> (int) br->bit_pos_; }

			/* Like BrotliGetBits, but does not mask the result.
			The result contains at least 16 valid bits. */
			private static unsafe uint BrotliGet16BitsUnmasked(BrotliBitReader* br) { BrotliFillBitWindow(br, 16); return BrotliGetBitsUnmasked(br); }

			/* Returns the specified number of bits from |br| without advancing bit pos. */
			private static unsafe uint BrotliGetBits(BrotliBitReader* br, uint n_bits) { BrotliFillBitWindow(br, n_bits); return (uint) (BrotliGetBitsUnmasked(br) & BitMask(n_bits)); }

			/* Tries to peek the specified amount of bits. Returns 0, if there is not
			   enough input. */
			private static unsafe bool BrotliSafeGetBits(BrotliBitReader* br, uint n_bits, uint* val) 
			{
				while (BrotliGetAvailableBits(br) < n_bits) { if (!BrotliPullByte(br)) { return false; } }
				*val = (uint) (BrotliGetBitsUnmasked(br) & BitMask(n_bits));
				return true;
			}

			/* Advances the bit pos by n_bits. */
			private static unsafe void BrotliDropBits(BrotliBitReader* br, uint n_bits) { br->bit_pos_ += n_bits; }

			private static unsafe void BrotliBitReaderUnload(BrotliBitReader* br) 
			{
				var unused_bytes = BrotliGetAvailableBits(br) >> 3;
				var unused_bits = unused_bytes << 3;
				br->avail_in += unused_bytes; br->next_in -= unused_bytes;
				if (unused_bits == IntPtr.Size << 3) { br->val_ = 0; } else { br->val_ <<= (int) unused_bits; }
				br->bit_pos_ += unused_bits;
			}

			/* Reads the specified number of bits from |br| and advances the bit pos.
			   Precondition: accumulator MUST contain at least n_bits. */
			private static unsafe void BrotliTakeBits(BrotliBitReader* br, uint n_bits, uint* val)  { *val = BrotliGetBitsUnmasked(br) & BitMask(n_bits); BrotliDropBits(br, n_bits); }

			/* Reads the specified number of bits from |br| and advances the bit pos.
			Assumes that there is enough input to perform BrotliFillBitWindow. */
			private static unsafe uint BrotliReadBits(BrotliBitReader* br, uint n_bits) 
			{
				if (Is64Bit || (n_bits <= 16)) { uint val; BrotliFillBitWindow(br, n_bits); BrotliTakeBits(br, n_bits, &val); return val; }
				else 
				{
					uint low_val; uint high_val; BrotliFillBitWindow(br, 16);
					BrotliTakeBits(br, 16, &low_val); BrotliFillBitWindow(br, 8);
					BrotliTakeBits(br, n_bits - 16, &high_val);
					return low_val | (high_val << 16);
				}
			}

			/* Tries to read the specified amount of bits. Returns 0, if there is not
			   enough input. n_bits MUST be positive. */
			private static unsafe bool BrotliSafeReadBits(BrotliBitReader* br, uint n_bits, uint* val) 
			{
				while (BrotliGetAvailableBits(br) < n_bits) { if (!BrotliPullByte(br)) { return false; } }
				BrotliTakeBits(br, n_bits, val); return true;
			}

			/* Advances the bit reader position to the next byte boundary and verifies
			   that any skipped bits are set to zero. */
			private static unsafe bool BrotliJumpToByteBoundary(BrotliBitReader* br) 
			{
				var pad_bits_count = BrotliGetAvailableBits(br) & 0x7; uint pad_bits = 0;
				if (pad_bits_count != 0) { BrotliTakeBits(br, pad_bits_count, &pad_bits); }
				return pad_bits == 0;
			}

			/* Copies remaining input bytes stored in the bit reader to the output. Value
			   num may not be larger than BrotliGetRemainingBytes. The bit reader must be
			   warmed up again after this. */
			private static unsafe void BrotliCopyBytes(byte* dest, BrotliBitReader* br, size_t num) 
			{
				while (BrotliGetAvailableBits(br) >= 8 && num > 0) { *dest = (byte) BrotliGetBitsUnmasked(br); BrotliDropBits(br, 8); ++dest; --num; }
				memcpy(dest, br->next_in, num); br->avail_in -= num; br->next_in += num;
			}

			private const int BROTLI_HUFFMAN_MAX_CODE_LENGTH = 15;


			private const int BROTLI_HUFFMAN_MAX_SIZE_26 = 396;
			private const int BROTLI_HUFFMAN_MAX_SIZE_258 = 632;
			private const int BROTLI_HUFFMAN_MAX_SIZE_272 = 646;
			private const int BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH = 5;
			private const int BROTLI_REVERSE_BITS_MAX = 8;
			private const int BROTLI_REVERSE_BITS_BASE = 0;

			private const int HUFFMAN_TABLE_MASK = 0xff;
			private const int BROTLI_MIN_DICTIONARY_WORD_LENGTH = 4;
			private const int BROTLI_MAX_DICTIONARY_WORD_LENGTH = 24;

			private const int HUFFMAN_TABLE_BITS = 8;

			private static readonly reg_t BROTLI_REVERSE_BITS_LOWEST = (reg_t) 1 << (BROTLI_REVERSE_BITS_MAX - 1 + BROTLI_REVERSE_BITS_BASE);

			private static readonly int BROTLI_SHORT_FILL_BIT_WINDOW_READ =
				#if SIZE_OF_T
					Marshal.SizeOf<reg_t>()
				#else
					Marshal.SizeOf(typeof(reg_t))
				#endif
				>> 1;
		


		// ReSharper disable All

			private static unsafe T CreateStruct<T>() 
			{
				#if SIZE_OF_T
					var sz = Marshal.SizeOf<T>();
				#else
					var sz = Marshal.SizeOf(typeof(T));
				#endif
				var hMem = Marshal.AllocHGlobal(sz);
				memset(hMem.ToPointer(), 0, sz);
				#if SIZE_OF_T
					var s = Marshal.PtrToStructure<T>(hMem);
				#else
					var s = Marshal.PtrToStructure(hMem, typeof(T));
				#endif
				Marshal.FreeHGlobal(hMem);
				return (T) s;
			}

			private static unsafe void* DefaultAllocFunc(void* opaque, size_t size) { return Marshal.AllocHGlobal((int) size).ToPointer(); }

			private static unsafe void DefaultFreeFunc(void* opaque, void* address) { Marshal.FreeHGlobal((IntPtr) address); }

			internal static BrotliDecoderState BrotliCreateDecoderState() { return CreateStruct<BrotliDecoderState>(); }

			internal static unsafe void BrotliDecoderSetCustomDictionary(ref BrotliDecoderState s, size_t size, byte* dict) { if (size > (1u << 24)) { return; } s.custom_dict = dict; s.custom_dict_size = (int)size; }

			private static unsafe BrotliDecoderResult BrotliDecoderDecompress(size_t encoded_size, byte* encoded_buffer, size_t* decoded_size,byte* decoded_buffer) 
			{
				var s = BrotliCreateDecoderState(); size_t total_out = 0; var available_in = encoded_size;
				var next_in = encoded_buffer; var available_out = *decoded_size; var next_out = decoded_buffer;
				BrotliDecoderStateInit(ref s);
				var result = BrotliDecoderDecompressStream(ref s, &available_in, &next_in, &available_out, &next_out, &total_out);
				*decoded_size = total_out; BrotliDecoderStateCleanup(ref s);
				if (result != BrotliDecoderResult.BROTLI_DECODER_RESULT_SUCCESS) { result = BrotliDecoderResult.BROTLI_DECODER_RESULT_ERROR; }
				return result;
			}

			/* Saves error code and converts it to BrotliDecoderResult */
			private static BrotliDecoderResult SaveErrorCode(ref BrotliDecoderState s, BrotliDecoderErrorCode e) 
			{
				s.error_code = (int) e;
				switch (e) 
				{
					case BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS: return BrotliDecoderResult.BROTLI_DECODER_RESULT_SUCCESS;
					case BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT: return BrotliDecoderResult.BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT;
					case BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_OUTPUT: return BrotliDecoderResult.BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT;
					default: return BrotliDecoderResult.BROTLI_DECODER_RESULT_ERROR;
				}
			}

			private static size_t UnwrittenBytes(ref BrotliDecoderState s, bool wrap) 
			{
				var pos = wrap && s.pos > s.ringbuffer_size ? (size_t) s.ringbuffer_size : (size_t) (s.pos);
				var partial_pos_rb = (s.rb_roundtrips * (size_t) s.ringbuffer_size) + pos;
				return partial_pos_rb - s.partial_pos_out;
			}

			private static unsafe BrotliDecoderErrorCode WriteRingBuffer(ref BrotliDecoderState s, size_t* available_out, byte** next_out,size_t* total_out, bool force) 
			{
				var start = s.ringbuffer + (s.partial_pos_out & (size_t) s.ringbuffer_mask);
				var to_write = UnwrittenBytes(ref s, true);
				var num_written = *available_out;
				if (num_written > to_write) { num_written = to_write; }
				if (s.meta_block_remaining_len < 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1; }
				if (next_out != null && *next_out == null) { *next_out = start; } else  { if (next_out != null) { memcpy(*next_out, start, num_written); *next_out += num_written; } }
				*available_out -= num_written;
				s.partial_pos_out += num_written;
				if (total_out != null) *total_out = s.partial_pos_out - s.custom_dict_size;
				if (num_written < to_write) 
				{
					if (s.ringbuffer_size == (1 << (int)s.window_bits) || force) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_OUTPUT; } else 
					{ return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS; }
				}
				/* Wrap ring buffer only if it has reached its maximal size. */
				if (s.ringbuffer_size == (1 << (int) s.window_bits) && s.pos >= s.ringbuffer_size) { s.pos -= s.ringbuffer_size; s.rb_roundtrips++; s.should_wrap_ringbuffer = (size_t) s.pos != 0; }
				return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
			}


			/* Decodes a number in the range [9..24], by reading 1 - 7 bits.
			   Precondition: bit-reader accumulator has at least 7 bits. */
			private static unsafe uint DecodeWindowBits(BrotliBitReader* br) 
			{
				uint n;
				BrotliTakeBits(br, 1, &n);
				if (n == 0) { return 16; }
				BrotliTakeBits(br, 3, &n);
				if (n != 0) { return 17 + n; }
				BrotliTakeBits(br, 3, &n);
				if (n != 0) { return 8 + n; }
				return 17;
			}

			/* Decodes a metablock length and flags by reading 2 - 31 bits. */
			private static unsafe BrotliDecoderErrorCode DecodeMetaBlockLength(ref BrotliDecoderState s, BrotliBitReader* br) 
			{
				uint bits;
				int i;
				for (;;) 
				{
					switch (s.substate_metablock_header) 
					{
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE:
							if (!BrotliSafeReadBits(br, 1, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							s.is_last_metablock = bits != 0; s.meta_block_remaining_len = 0; s.is_uncompressed = false; s.is_metadata = false;
							if (!s.is_last_metablock) { s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NIBBLES; break; }
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_EMPTY;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_EMPTY;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_EMPTY:
							if (!BrotliSafeReadBits(br, 1, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							if (bits != 0) 
							{
								s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE;
								return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
							}
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NIBBLES;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NIBBLES;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NIBBLES:
							if (!BrotliSafeReadBits(br, 2, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							s.size_nibbles = (byte) (bits + 4); s.loop_counter = 0;
							if (bits == 3) 
							{
								s.is_metadata = true;
								s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_RESERVED;
								break;
							}
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_SIZE;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_SIZE;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_SIZE:
							i = s.loop_counter;
							for (; i < (int) s.size_nibbles; ++i) 
							{
								if (!BrotliSafeReadBits(br, 4, &bits)) 
								{
									s.loop_counter = i;
									return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
								}
								if (i + 1 == s.size_nibbles && s.size_nibbles > 4 && bits == 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE; }
								s.meta_block_remaining_len |= (int) (bits << (i * 4));
							}
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED:
							if (!s.is_last_metablock) 
							{
								if (!BrotliSafeReadBits(br, 1, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
								s.is_uncompressed = bits != 0;
							}
							++s.meta_block_remaining_len;
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE;
							return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_RESERVED:
							if (!BrotliSafeReadBits(br, 1, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							if (bits != 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_RESERVED; }
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_BYTES;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_BYTES;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_BYTES:
							if (!BrotliSafeReadBits(br, 2, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							if (bits == 0) 
							{
								s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE;
								return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
							}
							s.size_nibbles = (byte) bits;
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_METADATA;
							/* No break, transit to the next state. */
							goto case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_METADATA;
						case BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_METADATA:
							i = s.loop_counter;
							for (; i < (int) s.size_nibbles; ++i) 
							{
								if (!BrotliSafeReadBits(br, 8, &bits)) { s.loop_counter = i; return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
								if (i + 1 == s.size_nibbles && s.size_nibbles > 1 && bits == 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE; }
								s.meta_block_remaining_len |= (int) (bits << (i * 8));
							}
							++s.meta_block_remaining_len;
							s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE;
							return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
						default:
							return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE;
					}
				}
			}

			/* Calculates the smallest feasible ring buffer.

			   If we know the data size is small, do not allocate more ring buffer
			   size than needed to reduce memory usage.

			   When this method is called, metablock size and flags MUST be decoded.
			*/
			private static unsafe void BrotliCalculateRingBufferSize(ref BrotliDecoderState s) 
			{
				var window_size = 1 << (int) s.window_bits; var new_ringbuffer_size = window_size;
				/* We need at least 2 bytes of ring buffer size to get the last two
				   bytes for context from there */
				var min_size = s.ringbuffer_size != 0 ? s.ringbuffer_size : 1024;
				int output_size;
				/* If maximum is already reached, no further extension is retired. */
				if (s.ringbuffer_size == window_size) { return; }
				/* Metadata blocks does not touch ring buffer. */
				if (s.is_metadata) { return; }
				if (s.ringbuffer == null) { /* Custom dictionary counts as a "virtual" output. */ output_size = s.custom_dict_size; } else { output_size = s.pos; }
				output_size += s.meta_block_remaining_len;
				min_size = min_size < output_size ? output_size : min_size;
				while ((new_ringbuffer_size >> 1) >= min_size) { new_ringbuffer_size >>= 1; }
				s.new_ringbuffer_size = new_ringbuffer_size;
			}

			/* Allocates ring-buffer.

			   s->ringbuffer_size MUST be updated by BrotliCalculateRingBufferSize before
			   this function is called.

			   Last two bytes of ring-buffer are initialized to 0, so context calculation
			   could be done uniformly for the first two and all other positions.

			   Custom dictionary, if any, is copied to the end of ring-buffer.
			*/
			private static unsafe bool BrotliEnsureRingBuffer(ref BrotliDecoderState s) {
				/* We need the slack region for the following reasons:
					- doing up to two 16-byte copies for fast backward copying
					- inserting transformed dictionary word (5 prefix + 24 base + 8 suffix) */
				const int kRingBufferWriteAheadSlack = 42;
				var old_ringbuffer = s.ringbuffer;
				if (s.ringbuffer_size == s.new_ringbuffer_size) { return true; }
				s.ringbuffer = (byte*) s.alloc_func(s.memory_manager_opaque, (size_t) (s.new_ringbuffer_size + kRingBufferWriteAheadSlack));
				if (s.ringbuffer == null) {/* Restore previous value. */ s.ringbuffer = old_ringbuffer; return false; }
				s.ringbuffer[s.new_ringbuffer_size - 2] = 0;
				s.ringbuffer[s.new_ringbuffer_size - 1] = 0;
				if (old_ringbuffer == null) 
				{
					if (s.custom_dict != null) 
					{
						memcpy(s.ringbuffer, s.custom_dict, (size_t) s.custom_dict_size);
						s.partial_pos_out = (size_t) s.custom_dict_size; s.pos = s.custom_dict_size;
					}
				}
				else 
				{
					memcpy(s.ringbuffer, old_ringbuffer, (size_t) s.pos);
					s.free_func(s.memory_manager_opaque, old_ringbuffer); old_ringbuffer = null;
				}
				s.ringbuffer_size = s.new_ringbuffer_size;
				s.ringbuffer_mask = s.new_ringbuffer_size - 1;
				s.ringbuffer_end = s.ringbuffer + s.ringbuffer_size;
				return true;
			}

			private static unsafe BrotliDecoderErrorCode CopyUncompressedBlockToOutput(size_t* available_out, byte** next_out, size_t* total_out, ref BrotliDecoderState s) 
			{
				/* TODO: avoid allocation for single uncompressed block. */
				if (!BrotliEnsureRingBuffer(ref s)) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1; }

				/* State machine */
				for (;;) 
				{
					switch (s.substate_uncompressed) 
					{
						case BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_NONE: {
							fixed (BrotliBitReader* br = &s.br) 
							{
								var nbytes = (int) BrotliGetRemainingBytes(br);
								if (nbytes > s.meta_block_remaining_len) { nbytes = s.meta_block_remaining_len; }
								if (s.pos + nbytes > s.ringbuffer_size) { nbytes = s.ringbuffer_size - s.pos; }
								/* Copy remaining bytes from s.br.buf_ to ring-buffer. */
								BrotliCopyBytes(&s.ringbuffer[s.pos], br, (size_t) nbytes);
								s.pos += nbytes;
								s.meta_block_remaining_len -= nbytes;
								if (s.pos < 1 << (int) s.window_bits) 
								{
									if (s.meta_block_remaining_len == 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS; }
									return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
								}
								s.substate_uncompressed = BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_WRITE;
								/* No break, continue to next state */
								goto case BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_WRITE;
							}
						}
						case BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_WRITE: {
							BrotliDecoderErrorCode result;
							result = WriteRingBuffer(ref s, available_out, next_out, total_out, false);
							if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
							if (s.ringbuffer_size == 1 << (int) s.window_bits) { s.max_distance = s.max_backward_distance; }
							s.substate_uncompressed = BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_NONE;
							break;
						}
					}
				}
			}

			private static uint Log2Floor(uint x) 
			{
				uint y = x; // JIT ETW (Inlinee writes to an argument)
				uint result = 0;
				while (y != 0) { y >>= 1; ++result; }
				return result;
			}

			/* Reads (s->symbol + 1) symbols.
			   Totally 1..4 symbols are read, 1..10 bits each.
			   The list of symbols MUST NOT contain duplicates.
			 */
			private static unsafe BrotliDecoderErrorCode ReadSimpleHuffmanSymbols(uint alphabet_size, ref BrotliDecoderState s) 
			{
				/* max_bits == 1..10; symbol == 0..3; 1..40 bits will be read. */
				var max_bits = Log2Floor(alphabet_size - 1);
				var i = s.sub_loop_counter;
				var num_symbols = s.symbol;
				while (i <= num_symbols) 
				{
					uint v;
					fixed (BrotliBitReader* br = &s.br)
					{
						if (!BrotliSafeReadBits(br, max_bits, &v))
						{
							s.sub_loop_counter = i;
							s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_READ;
							return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
						}
					}
					if (v >= alphabet_size) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET; }
					fixed (ushort* sla = s.symbols_lists_array) { sla[i] = (ushort)v; }
					++i;
				}

				fixed (ushort* sla = s.symbols_lists_array) 
				{
					for (i = 0; i < num_symbols; ++i) 
					{
						var k = i + 1;
						for (; k <= num_symbols; ++k) { if (sla[i] == sla[k]) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME; } }
					}
				}
				return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
			}

			/* Decodes a number in the range [0..255], by reading 1 - 11 bits. */
			private static unsafe BrotliDecoderErrorCode DecodeVarLenUint8(ref BrotliDecoderState s, BrotliBitReader* br, uint* value) {
				uint bits;
				switch (s.substate_decode_uint8) 
				{
					case BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_NONE:
						if (!BrotliSafeReadBits(br, 1, &bits))  { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
						if (bits == 0) { *value = 0; return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS; }
						/* No break, transit to the next state. */
						goto case BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_SHORT;
					case BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_SHORT:
						if (!BrotliSafeReadBits(br, 3, &bits)) 
						{
							s.substate_decode_uint8 = BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_SHORT;
							return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
						}
						if (bits == 0) 
						{
							*value = 1;
							s.substate_decode_uint8 = BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_NONE;
							return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
						}
						/* Use output value as a temporary storage. It MUST be persisted. */
						*value = bits;
						/* No break, transit to the next state. */
						goto case BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_LONG;
					case BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_LONG:
						if (!BrotliSafeReadBits(br, *value, &bits)) 
						{
							s.substate_decode_uint8 = BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_LONG;
							return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
						}
						*value = (1U << (int) *value) + bits;
						s.substate_decode_uint8 = BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_NONE;
						return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
					default:
						return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE;
				}
			}


			/* Reads and decodes 15..18 codes using static prefix code.
			   Each code is 2..4 bits long. In total 30..72 bits are used. */
			private static unsafe BrotliDecoderErrorCode ReadCodeLengthCodeLengths(ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					var num_codes = s.repeat;
					var space = s.space;
					var i = s.sub_loop_counter;
					for (; i < BROTLI_CODE_LENGTH_CODES; ++i) 
					{
						var code_len_idx = kCodeLengthCodeOrder[i];
						uint ix;
						uint v;
						if (!BrotliSafeGetBits(br, 4, &ix)) 
						{
							var available_bits = BrotliGetAvailableBits(br);
							if (available_bits != 0) { ix = BrotliGetBitsUnmasked(br) & 0xF; } else { ix = 0; }
							if (kCodeLengthPrefixLength[ix] > available_bits) 
							{
								s.sub_loop_counter = i;
								s.repeat = num_codes;
								s.space = space;
								s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_COMPLEX;
								return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
							}
						}
						v = kCodeLengthPrefixValue[ix];
						BrotliDropBits(br, kCodeLengthPrefixLength[ix]);
						fixed (byte* clcl = s.code_length_code_lengths) { clcl[code_len_idx] = (byte)v; }
						if (v != 0) 
						{
							space = space - (32U >> (int) v);
							++num_codes;
							fixed (ushort* clh = s.code_length_histo) { ++clh[v]; }
							if (space - 1U >= 32U) { /* space is 0 or wrapped around */ break; }
						}
					}
					if (!(num_codes == 1 || space == 0)) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_CL_SPACE; }
					return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
				}
			}

			/* Process single decoded symbol code length:
				A) reset the repeat variable
				B) remember code length (if it is not 0)
				C) extend corresponding index-chain
				D) reduce the Huffman space
				E) update the histogram
			 */
			private static unsafe void ProcessSingleCodeLength(uint code_len, uint* symbol, uint* repeat, uint* space, uint* prev_code_len, ushort* symbol_lists,ushort* code_length_histo, int* next_symbol) 
			{
				*repeat = 0;
				if (code_len != 0) 
				{
					/* code_len == 1..15 */
					symbol_lists[next_symbol[code_len]] = (ushort) (*symbol);
					next_symbol[code_len] = (int) (*symbol); *prev_code_len = code_len; *space -= 32768U >> (int) code_len; code_length_histo[code_len]++;
				}
				(*symbol)++;
			}

			/* Process repeated symbol code length.
				A) Check if it is the extension of previous repeat sequence; if the decoded
				   value is not BROTLI_REPEAT_PREVIOUS_CODE_LENGTH, then it is a new
				   symbol-skip
				B) Update repeat variable
				C) Check if operation is feasible (fits alphabet)
				D) For each symbol do the same operations as in ProcessSingleCodeLength

			   PRECONDITION: code_len == BROTLI_REPEAT_PREVIOUS_CODE_LENGTH or
							 code_len == BROTLI_REPEAT_ZERO_CODE_LENGTH
			 */
			private static unsafe void ProcessRepeatedCodeLength(uint code_len, uint repeat_delta, uint alphabet_size, uint* symbol,uint* repeat, uint* space, uint* prev_code_len,
				uint* repeat_code_len, ushort* symbol_lists, ushort* code_length_histo, int* next_symbol) 
			{
				uint old_repeat; uint extra_bits = 3; /* for BROTLI_REPEAT_ZERO_CODE_LENGTH */
				uint new_len = 0; /* for BROTLI_REPEAT_ZERO_CODE_LENGTH */
				if (code_len == BROTLI_REPEAT_PREVIOUS_CODE_LENGTH) { new_len = *prev_code_len; extra_bits = 2; }
				if (*repeat_code_len != new_len) { *repeat = 0; *repeat_code_len = new_len; }
				old_repeat = *repeat;
				if (*repeat > 0) { *repeat -= 2; *repeat <<= (int) extra_bits; }
				*repeat += repeat_delta + 3U; repeat_delta = *repeat - old_repeat;
				if (*symbol + repeat_delta > alphabet_size) { *symbol = alphabet_size; *space = 0xFFFFF; return; }
				if (*repeat_code_len != 0) 
				{
					var last = *symbol + repeat_delta; var next = next_symbol[*repeat_code_len];
					do 
					{
						symbol_lists[next] = (ushort) *symbol;
						next = (int) *symbol;
					} while (++(*symbol) != last);
					next_symbol[*repeat_code_len] = next;
					*space -= repeat_delta << (int) (15 - *repeat_code_len);
					code_length_histo[*repeat_code_len] = (ushort) (code_length_histo[*repeat_code_len] + repeat_delta);
				}
				else { *symbol += repeat_delta; }
			}

			private static unsafe BrotliDecoderErrorCode SafeReadSymbolCodeLengths(uint alphabet_size, ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					bool get_byte = false;
					while (s.symbol < alphabet_size && s.space > 0) 
					{
						fixed (HuffmanCode* t = s.table) 
						{
							var p = t;
							uint code_len;
							uint bits = 0;
							if (get_byte && !BrotliPullByte(br)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							get_byte = false;
							var available_bits = BrotliGetAvailableBits(br);
							if (available_bits != 0) { bits = (uint) BrotliGetBitsUnmasked(br); }
							p += bits & BitMask(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH);
							if (p->bits > available_bits) { get_byte = true; continue; }
							code_len = p->value; /* code_len == 0..17 */
							fixed (uint* symbol = &s.symbol)
							fixed (uint* repeat = &s.repeat)
							fixed (uint* space = &s.space)
							fixed (uint* pcl = &s.prev_code_len)
							fixed (ushort* clh = s.code_length_histo)
							fixed (int* ns = s.next_symbol) 
							{
								if (code_len < BROTLI_REPEAT_PREVIOUS_CODE_LENGTH) 
								{
									BrotliDropBits(br, p->bits);
									ProcessSingleCodeLength(code_len, symbol, repeat, space, pcl, s.symbol_lists, clh, ns);
								}
								else 
								{
									/* code_len == 16..17, extra_bits == 2..3 */
									var extra_bits = code_len - 14U;
									var repeat_delta = (bits >> p->bits) & BitMask(extra_bits);
									if (available_bits < p->bits + extra_bits) { get_byte = true; continue; }
									BrotliDropBits(br, p->bits + extra_bits);
									fixed (uint* rcl = &s.repeat_code_len)
									{
										ProcessRepeatedCodeLength(code_len, repeat_delta, alphabet_size, symbol, repeat, space, pcl, rcl, s.symbol_lists, clh, ns);
									}
								}
							}
						}
					}
				}
				return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
			}

			/* Reads and decodes symbol codelengths. */

			private static unsafe BrotliDecoderErrorCode ReadSymbolCodeLengths(uint alphabet_size, ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					var symbol = s.symbol;
					var repeat = s.repeat;
					var space = s.space;
					var prev_code_len = s.prev_code_len;
					var repeat_code_len = s.repeat_code_len;
					var symbol_lists = s.symbol_lists;
					fixed (ushort* clh = s.code_length_histo) 
					{
						fixed (int* ns = s.next_symbol) 
						{
							var code_length_histo = clh;
							var next_symbol = ns;
							if (!BrotliWarmupBitReader(br)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							while (symbol < alphabet_size && space > 0) 
							{
								fixed (HuffmanCode* t = s.table) 
								{
									var p = t;
									uint code_len;
									if (!BrotliCheckInputAmount(br, BROTLI_SHORT_FILL_BIT_WINDOW_READ)) 
									{
										s.symbol = symbol; s.repeat = repeat; s.prev_code_len = prev_code_len; s.repeat_code_len = repeat_code_len; s.space = space;
										return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
									}
									BrotliFillBitWindow16(br);
									p += BrotliGetBitsUnmasked(br) & BitMask(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH);
									BrotliDropBits(br, p->bits); /* Use 1..5 bits */
									code_len = p->value; /* code_len == 0..17 */
									if (code_len < BROTLI_REPEAT_PREVIOUS_CODE_LENGTH) 
									{
										ProcessSingleCodeLength(code_len, &symbol, &repeat, &space, &prev_code_len, symbol_lists, code_length_histo, next_symbol);
									}
									else 
									{
										/* code_len == 16..17, extra_bits == 2..3 */
										var extra_bits = (code_len == BROTLI_REPEAT_PREVIOUS_CODE_LENGTH) ? 2u : 3u;
										var repeat_delta = (uint) (BrotliGetBitsUnmasked(br) & BitMask(extra_bits));
										BrotliDropBits(br, extra_bits);
										ProcessRepeatedCodeLength(code_len, repeat_delta, alphabet_size, &symbol, &repeat, &space, &prev_code_len, &repeat_code_len,
											symbol_lists, code_length_histo, next_symbol);
									}
								}
							}
							s.space = space;
							return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
						}
					}
				}
			}

			/* Decodes the Huffman tables.
			   There are 2 scenarios:
				A) Huffman code contains only few symbols (1..4). Those symbols are read
				   directly; their code lengths are defined by the number of symbols.
				   For this scenario 4 - 45 bits will be read.

				B) 2-phase decoding:
				B.1) Small Huffman table is decoded; it is specified with code lengths
					 encoded with predefined entropy code. 32 - 74 bits are used.
				B.2) Decoded table is used to decode code lengths of symbols in resulting
					 Huffman table. In worst case 3520 bits are read.
			*/
			private static unsafe BrotliDecoderErrorCode ReadHuffmanCode(uint alphabet_size, HuffmanCode* table, uint* opt_table_size, ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					/* Unnecessary masking, but might be good for safety. */
					alphabet_size &= 0x3ff;
					/* State machine */
					for (;;) 
					{
						switch (s.substate_huffman) 
						{
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_NONE:
								fixed (uint* slc = &s.sub_loop_counter) { if (!BrotliSafeReadBits(br, 2, slc)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; } }
								/* The value is used as follows:
								   1 for simple code;
								   0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */
								if (s.sub_loop_counter != 1) 
								{
									s.space = 32; s.repeat = 0; /* num_codes */
									fixed (ushort* clh = s.code_length_histo) { memset(&clh[0], 0, sizeof(ushort) *(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH + 1)); }
									fixed (byte* clcl = s.code_length_code_lengths) { memset(&clcl[0], 0, BROTLI_CODE_LENGTH_CODES); }
									s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_COMPLEX;
									continue;
								}
								/* No break, transit to the next state. */
								goto case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_SIZE;
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_SIZE:
								/* Read symbols, codes & code lengths directly. */
								fixed (uint* ss = &s.symbol)
								{
									if (!BrotliSafeReadBits(br, 2, ss))
									{ /* num_symbols */
										s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_SIZE;
										return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
									}
								}
								s.sub_loop_counter = 0;
								/* No break, transit to the next state. */
								goto case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_READ;
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_READ: {
								var result = ReadSimpleHuffmanSymbols(alphabet_size, ref s);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
								/* No break, transit to the next state. */
								goto case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_BUILD;
							}
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_BUILD: {
								uint table_size;
								if (s.symbol == 3) 
								{
									uint bits;
									if (!BrotliSafeReadBits(br, 1, &bits)) 
									{
										s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_SIMPLE_BUILD;
										return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
									}
									s.symbol += bits;
								}
								fixed (ushort* sla = s.symbols_lists_array) { table_size = BrotliBuildSimpleHuffmanTable( table, HUFFMAN_TABLE_BITS, sla, s.symbol); }
								if (opt_table_size != null) { *opt_table_size = table_size; }
								s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_NONE;
								return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
							}

							/* Decode Huffman-coded code lengths. */
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_COMPLEX: {
								uint i;
								var result = ReadCodeLengthCodeLengths(ref s);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
								fixed (HuffmanCode* t = s.table)
								fixed (byte* clcl = s.code_length_code_lengths)
								fixed (ushort* clh = s.code_length_histo) 
								{
									BrotliBuildCodeLengthsHuffmanTable(t, clcl, clh);
									memset(&clh[0], 0, sizeof(ushort) * 16);
									fixed (int* ns = s.next_symbol)
									{
										for (i = 0; i <= BROTLI_HUFFMAN_MAX_CODE_LENGTH; ++i)
										{
											ns[i] = (int)i - (BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1);
											s.symbol_lists[(int)i - (BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1)] = 0xFFFF;
										}
									}
								}

								s.symbol = 0;
								s.prev_code_len = BROTLI_INITIAL_REPEATED_CODE_LENGTH;
								s.repeat = 0;
								s.repeat_code_len = 0;
								s.space = 32768;
								s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS;
								/* No break, transit to the next state. */
								goto case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS;
							}
							case BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS: {
								uint table_size;
								var result = ReadSymbolCodeLengths(alphabet_size, ref s);
								if (result == BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT) { result = SafeReadSymbolCodeLengths(alphabet_size, ref s); }
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
								if (s.space != 0) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE; }
								fixed (ushort* clh = s.code_length_histo) { table_size = BrotliBuildHuffmanTable(table, HUFFMAN_TABLE_BITS, s.symbol_lists, clh); }
								if (opt_table_size != null) { *opt_table_size = table_size; }
								s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_NONE;
								return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
							}
							default: return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE;
						}
					}
				}
			}

			/* Decodes the Huffman code.
			   This method doesn't read data from the bit reader, BUT drops the amount of
			   bits that correspond to the decoded symbol.
			   bits MUST contain at least 15 (BROTLI_HUFFMAN_MAX_CODE_LENGTH) valid bits. */
			private static unsafe uint DecodeSymbol(uint bits, HuffmanCode* table, BrotliBitReader* br) 
			{
				table += bits & HUFFMAN_TABLE_MASK;
				if (table->bits > HUFFMAN_TABLE_BITS) { var nbits = (uint) (table->bits - HUFFMAN_TABLE_BITS); BrotliDropBits(br, HUFFMAN_TABLE_BITS); table += table->value; table += (bits >> HUFFMAN_TABLE_BITS) & BitMask(nbits); }
				BrotliDropBits(br, table->bits); return table->value;
			}

			/* Same as DecodeSymbol, but it is known that there is less than 15 bits of
				input are currently available. */
			private static unsafe bool SafeDecodeSymbol(HuffmanCode* table, BrotliBitReader* br, uint* result) 
			{
				uint val; var available_bits = BrotliGetAvailableBits(br);
				if (available_bits == 0) { if (table->bits == 0) { *result = table->value; return true; } return false; /* No valid bits at all. */ }
				val = (uint) BrotliGetBitsUnmasked(br); table += val & HUFFMAN_TABLE_MASK;
				if (table->bits <= HUFFMAN_TABLE_BITS) { if (table->bits <= available_bits) { BrotliDropBits(br, table->bits); *result = table->value; return true; } else { return false; /* Not enough bits for the first level. */ } }
				if (available_bits <= HUFFMAN_TABLE_BITS) { return false; /* Not enough bits to move to the second level. */ }
				/* Speculatively drop HUFFMAN_TABLE_BITS. */ val = (val & BitMask(table->bits)) >> HUFFMAN_TABLE_BITS; available_bits -= HUFFMAN_TABLE_BITS; table += table->value + val;
				if (available_bits < table->bits) { return false; /* Not enough bits for the second level. */ }
				BrotliDropBits(br, (uint) (HUFFMAN_TABLE_BITS + table->bits));
				*result = table->value;
				return true;
			}

			private static unsafe bool SafeReadSymbol(HuffmanCode* table, BrotliBitReader* br, uint* result) 
			{
				uint val; if (BrotliSafeGetBits(br, 15, &val)) { *result = DecodeSymbol(val, table, br); return true; }
				return SafeDecodeSymbol(table, br, result);
			}

			/* WARNING: if state is not BROTLI_STATE_READ_BLOCK_LENGTH_NONE, then
				reading can't be continued with ReadBlockLength. */

			private static unsafe bool SafeReadBlockLength(ref BrotliDecoderState s, uint* result, HuffmanCode* table, BrotliBitReader* br) 
			{
				uint index;
				if (s.substate_read_block_length == BrotliRunningReadBlockLengthState.BROTLI_STATE_READ_BLOCK_LENGTH_NONE) 
				{ if (!SafeReadSymbol(table, br, &index)) { return false; } } else { index = s.block_length_index; }
				{
					uint bits;
					uint nbits = kBlockLengthPrefixCode[index].nbits; /* nbits == 2..24 */
					if (!BrotliSafeReadBits(br, nbits, &bits)) 
					{
						s.block_length_index = index;
						s.substate_read_block_length = BrotliRunningReadBlockLengthState.BROTLI_STATE_READ_BLOCK_LENGTH_SUFFIX;
						return false;
					}
					*result = kBlockLengthPrefixCode[index].offset + bits;
					s.substate_read_block_length = BrotliRunningReadBlockLengthState.BROTLI_STATE_READ_BLOCK_LENGTH_NONE;
					return true;
				}
			}

			/* Reads 1..256 2-bit context modes. */
			private static unsafe BrotliDecoderErrorCode ReadContextModes(ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					var i = s.loop_counter;
					fixed (uint* nbt = s.num_block_types)
					{
						while (i < (int)nbt[0])
						{
							uint bits;
							if (!BrotliSafeReadBits(br, 2, &bits)) { s.loop_counter = i; return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							s.context_modes[i] = (byte)(bits << 1); i++;
						}
					}
				}
				return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
			}

			/* Transform:
				1) initialize list L with values 0, 1,... 255
				2) For each input element X:
				2.1) let Y = L[X]
				2.2) remove X-th element from L
				2.3) prepend Y to L
				2.4) append Y to output

			   In most cases max(Y) <= 7, so most of L remains intact.
			   To reduce the cost of initialization, we reuse L, remember the upper bound
			   of Y values, and reinitialize only first elements in L.

			   Most of input values are 0 and 1. To reduce number of branches, we replace
			   inner for loop with do-while.
			 */
			private static unsafe void InverseMoveToFrontTransform(byte* v, uint v_len, ref BrotliDecoderState state) 
			{
				/* Reinitialize elements that could have been changed. */
				uint i = 1;
				var upper_bound = state.mtf_upper_bound;
				fixed (uint* m = state.mtf) 
				{
					var mtf = &m[1]; /* Make mtf[-1] addressable. */ var mtf_u8 = (byte*) mtf;
					/* Load endian-aware constant. */
					var b0123 = new byte[] {0, 1, 2, 3}; uint pattern;
					fixed (byte* b = b0123) { memcpy(&pattern, b, 4); }

					/* Initialize list using 4 consequent values pattern. */
					mtf[0] = pattern; do { pattern += 0x04040404; /* Advance all 4 values by 4. */ mtf[i] = pattern; i++; } while (i <= upper_bound);

					/* Transform the input. */
					upper_bound = 0;
					for (i = 0; i < v_len; ++i) 
					{
						int index = v[i]; var value = mtf_u8[index]; upper_bound |= v[i]; v[i] = value; mtf_u8[-1] = value;
						do { index--; mtf_u8[index + 1] = mtf_u8[index]; } while (index >= 0);
					}
					/* Remember amount of elements to be reinitialized. */
					state.mtf_upper_bound = upper_bound >> 2;
				}
			}

			/* Decodes a context map.
			   Decoding is done in 4 phases:
				1) Read auxiliary information (6..16 bits) and allocate memory.
				   In case of trivial context map, decoding is finished at this phase.
				2) Decode Huffman table using ReadHuffmanCode function.
				   This table will be used for reading context map items.
				3) Read context map items; "0" values could be run-length encoded.
				4) Optionally, apply InverseMoveToFront transform to the resulting map.
			 */
			private static unsafe BrotliDecoderErrorCode DecodeContextMap(uint context_map_size, uint* num_htrees, byte** context_map_arg, ref BrotliDecoderState s) 
			{
				fixed (BrotliBitReader* br = &s.br) 
				{
					var result = BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;

					switch (s.substate_context_map) 
					{
						case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_NONE:
							result = DecodeVarLenUint8(ref s, br, num_htrees);
							if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
							(*num_htrees)++; s.context_index = 0;
							*context_map_arg = (byte*) s.alloc_func(s.memory_manager_opaque, (size_t) context_map_size);
							if (*context_map_arg == null) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP; }
							if (*num_htrees <= 1) { memset(*context_map_arg, 0, (size_t) context_map_size); return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS; }
							s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_READ_PREFIX;
							/* No break, continue to next state. */
							goto case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_READ_PREFIX;
						case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_READ_PREFIX: {
							uint bits;
							/* In next stage ReadHuffmanCode uses at least 4 bits, so it is safe
							   to peek 4 bits ahead. */
							if (!BrotliSafeGetBits(br, 5, &bits)) { return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; }
							if ((bits & 1) != 0) { /* Use RLE for zeros. */ s.max_run_length_prefix = (bits >> 1) + 1; BrotliDropBits(br, 5); }
							else { s.max_run_length_prefix = 0; BrotliDropBits(br, 1); }
							s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_HUFFMAN;
							/* No break, continue to next state. */
							goto case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_HUFFMAN;
						}
						case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_HUFFMAN:
							fixed (HuffmanCode* cmt = s.context_map_table) { result = ReadHuffmanCode(*num_htrees + s.max_run_length_prefix, cmt, null, ref s); }
							if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) return result;
							s.code = 0xFFFF; s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_DECODE;
							/* No break, continue to next state. */
							goto case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_DECODE;
						case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_DECODE: {
							var context_index = s.context_index; var max_run_length_prefix = s.max_run_length_prefix;
							var context_map = *context_map_arg; var code = s.code; var skip_preamble = (code != 0xffff);
							while (context_index < context_map_size || skip_preamble) 
							{
								if (!skip_preamble) 
								{
									fixed (HuffmanCode* cmt = s.context_map_table)
									{
										if (!SafeReadSymbol(cmt, br, &code))
										{
												s.code = 0xFFFF; s.context_index = context_index;
												return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
										}
									}

									if (code == 0) { context_map[context_index++] = 0; continue; }
									if (code > max_run_length_prefix) { context_map[context_index++] = (byte) (code - max_run_length_prefix); continue; }
								} else { skip_preamble = false; }
								/* RLE sub-stage. */
								{
									uint reps;
									if (!BrotliSafeReadBits(br, code, &reps)) 
									{ s.code = code; s.context_index = context_index;
										return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
									}
									reps += 1U << (int) code;
									//Debug.WriteLine((context_index + reps) + "," + context_map_size);
									if (context_index + reps > context_map_size) { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT; }
									do { context_map[context_index++] = 0; } while (--reps != 0);
								}
							}
							/* No break, continue to next state. */
							goto case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_TRANSFORM;
						}
						case BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_TRANSFORM: {
							uint bits;
							if (!BrotliSafeReadBits(br, 1, &bits)) 
							{
								s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_TRANSFORM;
								return BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
							}
							if (bits != 0) { InverseMoveToFrontTransform(*context_map_arg, context_map_size, ref s); }
							s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_NONE;
							return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
						}
						default:
							return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE;
					}
				}
			}

			private static unsafe void DetectTrivialLiteralBlockTypes(ref BrotliDecoderState s) 
			{
				size_t i;
				fixed (uint* tlc = s.trivial_literal_contexts)
				fixed (uint* nbt = s.num_block_types)
				{
					for (i = 0; i < 8; ++i) { tlc[i] = 0; }
					for (i = 0; i < nbt[0]; i++) 
					{
						var offset = i << BROTLI_LITERAL_CONTEXT_BITS; size_t error = 0; size_t sample = (int) s.context_map[offset]; size_t j;
						for (j = 0; j < (1u << BROTLI_LITERAL_CONTEXT_BITS);) { for (var z = 1; z <= 4; z *= 2) { if ((4 & z) != 0) { for (var x = 0; x < z; x++) { error |= s.context_map[offset + j++] ^ sample; } } } }
						if (error == 0) { tlc[i >> 5] |= 1u << (int) (i & 31); }
					}
				}
			}

			/* Decodes a series of Huffman table using ReadHuffmanCode function. */
			private static unsafe BrotliDecoderErrorCode HuffmanTreeGroupDecode(HuffmanTreeGroup* group, ref BrotliDecoderState s) 
			{
				if (s.substate_tree_group != BrotliRunningTreeGroupState.BROTLI_STATE_TREE_GROUP_LOOP) { s.next = group->codes; s.htree_index = 0; s.substate_tree_group = BrotliRunningTreeGroupState.BROTLI_STATE_TREE_GROUP_LOOP; }
				while (s.htree_index < group->num_htrees)
				{
					uint table_size;
					var result = ReadHuffmanCode(group->alphabet_size, s.next, &table_size, ref s);
					if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { return result; }
					group->htrees[s.htree_index] = s.next; s.next += table_size; ++s.htree_index;
				}
				s.substate_tree_group = BrotliRunningTreeGroupState.BROTLI_STATE_TREE_GROUP_NONE;
				return BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
			}

			private static unsafe void PrepareLiteralDecoding(ref BrotliDecoderState s) 
			{
				byte context_mode;
				size_t trivial;
				fixed (uint* btr = s.block_type_rb)
				fixed (uint* tlc = s.trivial_literal_contexts) 
				{
					var block_type = btr[1]; var context_offset = block_type << BROTLI_LITERAL_CONTEXT_BITS;
					s.context_map_slice = s.context_map + context_offset; trivial = tlc[block_type >> 5];
					s.trivial_literal_context = (int) ((trivial >> (int) (block_type & 31)) & 1);
					s.literal_htree = s.literal_hgroup.htrees[s.context_map_slice[0]];
					context_mode = s.context_modes[block_type];
					fixed (byte* kcl = kContextLookup) { s.context_lookup1 = &kcl[kContextLookupOffsets[context_mode]]; s.context_lookup2 = &kcl[kContextLookupOffsets[context_mode + 1]]; }
				}
			}

			private static unsafe bool CheckInputAmount(int safe, BrotliBitReader* br, size_t num) { if (safe != 0) { return true; } return BrotliCheckInputAmount(br, num); }

			/* Reads and decodes the next Huffman code from bit-stream.
			This method peeks 16 bits of input and drops 0 - 15 of them. */
			private static unsafe uint ReadSymbol(HuffmanCode* table, BrotliBitReader* br) { return DecodeSymbol(BrotliGet16BitsUnmasked(br), table, br); }

			/* Decodes a block length by reading 3..39 bits. */
			private static unsafe uint ReadBlockLength(HuffmanCode* table, BrotliBitReader* br) 
			{
				uint code; uint nbits; code = ReadSymbol(table, br);
				nbits = kBlockLengthPrefixCode[code].nbits; /* nbits == 2..24 */
				return kBlockLengthPrefixCode[code].offset + BrotliReadBits(br, nbits);
			}

			/* Decodes a command or literal and updates block type ring-buffer.
			   Reads 3..54 bits. */
			private static unsafe bool DecodeBlockTypeAndLength(int safe, ref BrotliDecoderState s, int tree_type) 
			{
				fixed (uint* nbt = s.num_block_types) 
				{
					var max_block_type = nbt[tree_type]; var type_tree = &s.block_type_trees[tree_type * BROTLI_HUFFMAN_MAX_SIZE_258];
					var len_tree = &s.block_len_trees[tree_type * BROTLI_HUFFMAN_MAX_SIZE_26];
					fixed (BrotliBitReader* br = &s.br)
					fixed (uint* btr = s.block_type_rb)
					fixed (uint* bl = s.block_length) 
					{
						var ringbuffer = &btr[tree_type * 2];
						uint block_type;

						/* Read 0..15 + 3..39 bits */
						if (safe == 0) { block_type = ReadSymbol(type_tree, br); bl[tree_type] = ReadBlockLength(len_tree, br); } else 
						{
							BrotliBitReaderState memento;
							BrotliBitReaderSaveState(br, &memento);
							if (!SafeReadSymbol(type_tree, br, &block_type)) { return false; }
							if (!SafeReadBlockLength(ref s, &bl[tree_type], len_tree, br)) 
							{
								s.substate_read_block_length = BrotliRunningReadBlockLengthState.BROTLI_STATE_READ_BLOCK_LENGTH_NONE;
								BrotliBitReaderRestoreState(br, &memento); return false;
							}
						}

						if (block_type == 1) { block_type = ringbuffer[1] + 1; } else if (block_type == 0) { block_type = ringbuffer[0]; } else { block_type -= 2; }
						if (block_type >= max_block_type) { block_type -= max_block_type; }
						ringbuffer[0] = ringbuffer[1]; ringbuffer[1] = block_type;
						return true;
					}
				}
			}

			/* Block switch for insert/copy length.
			   Reads 3..54 bits. */
			private static unsafe bool DecodeCommandBlockSwitchInternal(int safe, ref BrotliDecoderState s) 
			{
				if (!DecodeBlockTypeAndLength(safe, ref s, 1)) { return false; }
				fixed (uint* btr = s.block_type_rb) { s.htree_command = s.insert_copy_hgroup.htrees[btr[3]]; }
				return true;
			}

			private static unsafe void DecodeCommandBlockSwitch(ref BrotliDecoderState s) { DecodeCommandBlockSwitchInternal(0, ref s); }

			private static unsafe bool SafeDecodeCommandBlockSwitch(ref BrotliDecoderState s) { return DecodeCommandBlockSwitchInternal(1, ref s); }

			private static unsafe bool SafeReadBits(BrotliBitReader* br, uint n_bits, uint* val) { if (n_bits != 0) { return BrotliSafeReadBits(br, n_bits, val); } else { *val = 0; return true; } }

			private static unsafe bool ReadCommandInternal(int safe, ref BrotliDecoderState s, BrotliBitReader* br, int* insert_length)
			{
				uint cmd_code; uint insert_len_extra = 0; uint copy_length = 0;
				CmdLutElement v; BrotliBitReaderState memento;
				if (safe == 0) { cmd_code = ReadSymbol(s.htree_command, br); } else { BrotliBitReaderSaveState(br, &memento); if (!SafeReadSymbol(s.htree_command, br, &cmd_code)) { return false; } }
				v = kCmdLut[cmd_code]; s.distance_code = v.distance_code; s.distance_context = v.context; 
				s.dist_htree_index = s.dist_context_map_slice[s.distance_context]; *insert_length = v.insert_len_offset;
				if (safe == 0) { if (v.insert_len_extra_bits != 0) { insert_len_extra = BrotliReadBits(br, v.insert_len_extra_bits); } copy_length = BrotliReadBits(br, v.copy_len_extra_bits); } else
				{ if (!SafeReadBits(br, v.insert_len_extra_bits, &insert_len_extra) || !SafeReadBits(br, v.copy_len_extra_bits, &copy_length)) { BrotliBitReaderRestoreState(br, &memento); return false; } }
				s.copy_length = (int)copy_length + v.copy_len_offset;
				fixed (uint* bl = s.block_length) { --bl[1]; }
				*insert_length += (int) insert_len_extra; return true;
			}

			private static unsafe void ReadCommand(ref BrotliDecoderState s, BrotliBitReader* br, int* insert_length) { ReadCommandInternal(0, ref s, br, insert_length); }

			private static unsafe bool SafeReadCommand(ref BrotliDecoderState s, BrotliBitReader* br, int* insert_length) { return ReadCommandInternal(1, ref s, br, insert_length); }

			/* Makes a look-up in first level Huffman table. Peeks 8 bits. */
			private static unsafe void PreloadSymbol(int safe, HuffmanCode* table, BrotliBitReader* br, uint* bits, uint* value) 
			{
				if (safe != 0) { return; }
				var t = table; // JIT ETW (Inlinee writes to an argument)
				t += BrotliGetBits(br, HUFFMAN_TABLE_BITS); *bits = t->bits; *value = t->value;
			}

			/* Decodes the block type and updates the state for literal context.
			   Reads 3..54 bits. */
			private static unsafe bool DecodeLiteralBlockSwitchInternal(int safe, ref BrotliDecoderState s) 
			{
				if (!DecodeBlockTypeAndLength(safe, ref s, 0)) { return false; }
				PrepareLiteralDecoding(ref s); return true;
			}

			private static unsafe void DecodeLiteralBlockSwitch(ref BrotliDecoderState s) { DecodeLiteralBlockSwitchInternal(0, ref s); }

			private static unsafe bool SafeDecodeLiteralBlockSwitch( ref BrotliDecoderState s) { return DecodeLiteralBlockSwitchInternal(1, ref s); }

			/* Decodes the next Huffman code using data prepared by PreloadSymbol.
			   Reads 0 - 15 bits. Also peeks 8 following bits. */

			private static unsafe uint ReadPreloadedSymbol(HuffmanCode* table, BrotliBitReader* br, uint* bits, uint* value) 
			{
				var result = *value;
				if (*bits > HUFFMAN_TABLE_BITS) 
				{
					var val = BrotliGet16BitsUnmasked(br); var ext = table + (val & HUFFMAN_TABLE_MASK) + *value;
					var mask = BitMask((*bits - HUFFMAN_TABLE_BITS)); BrotliDropBits(br, HUFFMAN_TABLE_BITS);
					ext += (val >> HUFFMAN_TABLE_BITS) & mask; BrotliDropBits(br, ext->bits); result = ext->value;
				} else { BrotliDropBits(br, *bits); }
				PreloadSymbol(0, table, br, bits, value); return result;
			}

			/* Block switch for distance codes.
			   Reads 3..54 bits. */
			private static unsafe bool DecodeDistanceBlockSwitchInternal(int safe, ref BrotliDecoderState s) 
			{
				if (!DecodeBlockTypeAndLength(safe, ref s, 2)) { return false; }
				fixed (uint* btr = s.block_type_rb) { s.dist_context_map_slice = s.dist_context_map + (btr[5] << BROTLI_DISTANCE_CONTEXT_BITS); }
				s.dist_htree_index = s.dist_context_map_slice[s.distance_context]; return true;
			}

			private static unsafe void DecodeDistanceBlockSwitch(ref BrotliDecoderState s) { DecodeDistanceBlockSwitchInternal(0, ref s); }

			private static unsafe bool SafeDecodeDistanceBlockSwitch(ref BrotliDecoderState s) { return DecodeDistanceBlockSwitchInternal(1, ref s); }

			private static unsafe void TakeDistanceFromRingBuffer(ref BrotliDecoderState s) 
			{
				fixed (int* drb = s.dist_rb) 
				{
					if (s.distance_code == 0) { --s.dist_rb_idx; s.distance_code = drb[s.dist_rb_idx & 3]; /* Compensate double distance-ring-buffer roll for dictionary items. */ s.distance_context = 1; }
					else 
					{
						var distance_code = s.distance_code << 1;
						/* kDistanceShortCodeIndexOffset has 2-bit values from LSB: */
						/* 3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2 */
						const uint kDistanceShortCodeIndexOffset = 0xaaafff1b;
						/* kDistanceShortCodeValueOffset has 2-bit values from LSB: */
						/*-0, 0,-0, 0,-1, 1,-2, 2,-3, 3,-1, 1,-2, 2,-3, 3 */
						const uint kDistanceShortCodeValueOffset = 0xfa5fa500;
						var v = (s.dist_rb_idx + (int) (kDistanceShortCodeIndexOffset >> distance_code)) & 0x3;
						s.distance_code = drb[v];
						v = (int) (kDistanceShortCodeValueOffset >> distance_code) & 0x3;
						if ((distance_code & 0x3) != 0) { s.distance_code += v; }
						else 
						{
							s.distance_code -= v;
							if (s.distance_code <= 0) { /* A huge distance will cause a BROTLI_FAILURE() soon. This is a little faster than failing here. */ s.distance_code = 0x0fffffff; }
						}
					}
				}
			}

			/* Precondition: s->distance_code < 0 */
			private static unsafe bool ReadDistanceInternal(int safe, ref BrotliDecoderState s, BrotliBitReader* br) 
			{
				fixed (uint* bl = s.block_length) 
				{
					int distval;
					BrotliBitReaderState memento;
					var distance_tree = s.distance_hgroup.htrees[s.dist_htree_index];
					if (safe == 0) { s.distance_code = (int) ReadSymbol(distance_tree, br); } else 
					{ uint code; BrotliBitReaderSaveState(br, &memento);
						if (!SafeReadSymbol(distance_tree, br, &code)) { return false; }
						s.distance_code = (int) code;
					}
					/* Convert the distance code to the actual distance by possibly */
					/* looking up past distances from the s.ringbuffer. */
					s.distance_context = 0;
					if ((s.distance_code & ~0xf) == 0) { TakeDistanceFromRingBuffer(ref s); --bl[2]; return true; }
					distval = s.distance_code - (int) s.num_direct_distance_codes;
					if (distval >= 0) 
					{
						uint nbits; int postfix; int offset;
						if (safe == 0 && (s.distance_postfix_bits == 0)) 
						{
							nbits = ((uint) distval >> 1) + 1; offset = ((2 + (distval & 1)) << (int) nbits) - 4;
							s.distance_code = (int) s.num_direct_distance_codes + offset + (int) BrotliReadBits(br, nbits);
						}
						else 
						{
							/* This branch also works well when s.distance_postfix_bits == 0 */
							uint bits; postfix = distval & s.distance_postfix_mask;
							distval >>= (int) s.distance_postfix_bits; nbits = ((uint) distval >> 1) + 1;
							if (safe != 0) { if (!SafeReadBits(br, nbits, &bits)) { s.distance_code = -1; /* Restore precondition. */ BrotliBitReaderRestoreState(br, &memento); return false; } }
							else { bits = BrotliReadBits(br, nbits); }
							offset = ((2 + (distval & 1)) << (int) nbits) - 4;
							s.distance_code = (int) s.num_direct_distance_codes + ((offset + (int) bits) << (int) s.distance_postfix_bits) + postfix;
						}
					}
					s.distance_code = s.distance_code - BROTLI_NUM_DISTANCE_SHORT_CODES + 1; --bl[2]; return true;
				}
			}

			private static unsafe void ReadDistance(ref BrotliDecoderState s, BrotliBitReader* br) {ReadDistanceInternal(0, ref s, br); }

			private static unsafe bool SafeReadDistance(ref BrotliDecoderState s, BrotliBitReader* br) { return ReadDistanceInternal(1, ref s, br); }

			private static unsafe BrotliDecoderErrorCode ProcessCommandsInternal(int safe, ref BrotliDecoderState s) 
			{
				var pos = s.pos; var i = s.loop_counter; var result = BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
				fixed (BrotliBitReader* br = &s.br) 
				{
					fixed (uint* bl = s.block_length) 
					{
						if (!CheckInputAmount(safe, br, 28)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; }
						if (safe == 0) { BrotliWarmupBitReader(br); }

						/* Jump into state machine. */
						if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN) { goto CommandBegin; }
						else if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_INNER) { goto CommandInner; }
						else if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_POST_DECODE_LITERALS) { goto CommandPostDecodeLiterals; }
						else if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRAP_COPY) { goto CommandPostWrapCopy; }
						else { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE; }

						CommandBegin:
						if (safe != 0) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN; }
						if (!CheckInputAmount(safe, br, 28)) 
						{
							/* 156 bits + 7 bytes */
							s.state = BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN;
							result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT;
							goto saveStateAndReturn;
						}
						if (bl[1] == 0) 
						{
							if (safe != 0) { if (!SafeDecodeCommandBlockSwitch(ref s)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } }
							else { DecodeCommandBlockSwitch(ref s); }
							goto CommandBegin;
						}
						/* Read the insert/copy length in the command */
						if (safe != 0)  { if (!SafeReadCommand(ref s, br, &i)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } }
						else { ReadCommand(ref s, br, &i); }
						if (i == 0) { goto CommandPostDecodeLiterals; }
						s.meta_block_remaining_len -= i;
						CommandInner:
						if (safe != 0) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER; }
						/* Read the literals in the command */
						if (s.trivial_literal_context != 0) 
						{
							uint bits; uint value;
							PreloadSymbol(safe, s.literal_htree, br, &bits, &value);
							do 
							{
								if (!CheckInputAmount(safe, br, 28)) 
								{
									/* 162 bits + 7 bytes */
									s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER;
									result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn;
								}
								if (bl[0] == 0) 
								{
									if (safe != 0) { if (!SafeDecodeLiteralBlockSwitch(ref s)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } } else { DecodeLiteralBlockSwitch(ref s); }
									PreloadSymbol(safe, s.literal_htree, br, &bits, &value);
									if (s.trivial_literal_context == 0) goto CommandInner;
								}
								if (safe == 0) { s.ringbuffer[pos] = (byte) ReadPreloadedSymbol(s.literal_htree, br, &bits, &value); }
								else {
									uint literal;
									if (!SafeReadSymbol(s.literal_htree, br, &literal))  { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; }
									s.ringbuffer[pos] = (byte) literal;
								}
								--bl[0]; ++pos;
								if (pos == s.ringbuffer_size) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER_WRITE; --i; goto saveStateAndReturn; }
							} while (--i != 0);
						}
						else 
						{
							var p1 = s.ringbuffer[(pos - 1) & s.ringbuffer_mask]; var p2 = s.ringbuffer[(pos - 2) & s.ringbuffer_mask];
							do 
							{
								HuffmanCode* hc; byte context;
								if (!CheckInputAmount(safe, br, 28)) 
								{
									/* 162 bits + 7 bytes */
									s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER;
									result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn;
								}
								if (bl[0] == 0) 
								{
									if (safe != 0) { if (!SafeDecodeLiteralBlockSwitch(ref s)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } }
									else { DecodeLiteralBlockSwitch(ref s); }
									if (s.trivial_literal_context != 0) goto CommandInner;
								}
								context = (byte) (s.context_lookup1[p1] | s.context_lookup2[p2]);
								hc = s.literal_hgroup.htrees[s.context_map_slice[context]];
								p2 = p1;
								if (safe == 0) { p1 = (byte) ReadSymbol(hc, br); }
								else 
								{
									uint literal;
									if (!SafeReadSymbol(hc, br, &literal))  { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; }
									p1 = (byte) literal;
								}
								s.ringbuffer[pos] = p1; --bl[0]; ++pos;
								if (pos == s.ringbuffer_size) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER_WRITE; --i; goto saveStateAndReturn; }
							} while (--i != 0);
						}
						if (s.meta_block_remaining_len <= 0) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; goto saveStateAndReturn; }

						CommandPostDecodeLiterals:
						if (safe != 0) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_POST_DECODE_LITERALS; }
						if (s.distance_code >= 0) 
						{
							/* Implicit distance case. */
							s.distance_context = s.distance_code != 0 ? 0 : 1; --s.dist_rb_idx;
							fixed (int* dr = s.dist_rb) { s.distance_code = dr[s.dist_rb_idx & 3]; }
						}
						else 
						{
							/* Read distance code in the command, unless it was implicitly zero. */
							if (bl[2] == 0) 
							{
								if (safe != 0) { if (!SafeDecodeDistanceBlockSwitch(ref s)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } } else {
									DecodeDistanceBlockSwitch(ref s); }
							}
							if (safe != 0) { if (!SafeReadDistance(ref s, br)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; goto saveStateAndReturn; } } else { ReadDistance(ref s, br); }
						}
						if (s.max_distance != s.max_backward_distance) { s.max_distance = (pos < s.max_backward_distance) ? pos : s.max_backward_distance; }
						i = s.copy_length;
						/* Apply copy of LZ77 back-reference, or static dictionary reference if
						the distance is larger than the max LZ77 distance */
						if (s.distance_code > s.max_distance) 
						{
							if (i >= BROTLI_MIN_DICTIONARY_WORD_LENGTH && i <= BROTLI_MAX_DICTIONARY_WORD_LENGTH) 
							{
								var offset = (int) kBrotliDictionaryOffsetsByLength[i];
								var word_id = s.distance_code - s.max_distance - 1;
								uint shift = kBrotliDictionarySizeBitsByLength[i]; var mask = (int) BitMask(shift);
								var word_idx = word_id & mask; var transform_idx = word_id >> (int) shift; offset += word_idx * i;
								if (transform_idx < kNumTransforms) 
								{
									fixed (byte* dict = kBrotliDictionary) 
									{
										var word = &dict[offset]; var len = i;
										if (transform_idx == 0) { memcpy(&s.ringbuffer[pos], word, (size_t) len); } else { len = TransformDictionaryWord( &s.ringbuffer[pos], word, len, transform_idx); }
										pos += len; s.meta_block_remaining_len -= len;
										if (pos >= s.ringbuffer_size) { /*s.partial_pos_rb += (size_t)s.ringbuffer_size;*/ s.state = BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_1; goto saveStateAndReturn; }
									}
								}
								else { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_TRANSFORM; }
							} else { return BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_DICTIONARY; }
						}
						else 
						{
							var src_start = (pos - s.distance_code) & s.ringbuffer_mask;
							var copy_dst = &s.ringbuffer[pos]; var copy_src = &s.ringbuffer[src_start];
							var dst_end = pos + i; var src_end = src_start + i;
							/* update the recent distances cache */
							fixed (int* drb = s.dist_rb) { drb[s.dist_rb_idx & 3] = s.distance_code; }
							++s.dist_rb_idx; s.meta_block_remaining_len -= i;
							/* There are 32+ bytes of slack in the ring-buffer allocation.
							   Also, we have 16 short codes, that make these 16 bytes irrelevant
							   in the ring-buffer. Let's copy over them as a first guess.
							 */
							memmove16(copy_dst, copy_src);
							if (src_end > pos && dst_end > src_start)  { /* Regions intersect. */ goto CommandPostWrapCopy; }
							if (dst_end >= s.ringbuffer_size || src_end >= s.ringbuffer_size) { /* At least one region wraps. */ goto CommandPostWrapCopy; }
							pos += i;
							if (i > 16) { if (i > 32) { memcpy(copy_dst + 16, copy_src + 16, (size_t) (i - 16)); } else { /* This branch covers about 45% cases. Fixed size short copy allows more compiler optimizations. */ memmove16(copy_dst + 16, copy_src + 16); } }
						}
						if (s.meta_block_remaining_len <= 0) { /* Next metablock, if any */ s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; goto saveStateAndReturn; } else { goto CommandBegin; }
						CommandPostWrapCopy:
						{
							var wrap_guard = s.ringbuffer_size - pos;
							while (--i >= 0) 
							{
								s.ringbuffer[pos] = s.ringbuffer[(pos - s.distance_code) & s.ringbuffer_mask]; ++pos;
								if (--wrap_guard == 0) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_2; goto saveStateAndReturn; }
							}
						}
						if (s.meta_block_remaining_len <= 0) { /* Next metablock, if any */ s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; goto saveStateAndReturn; } else { goto CommandBegin; }

						saveStateAndReturn:
						s.pos = pos; s.loop_counter = i; return result;
					}
				}
			}

			private static BrotliDecoderErrorCode ProcessCommands(ref BrotliDecoderState s) { return ProcessCommandsInternal(0, ref s); }

			private static BrotliDecoderErrorCode SafeProcessCommands(ref BrotliDecoderState s) { return ProcessCommandsInternal(1, ref s); }

			private static unsafe void WrapRingBuffer(ref BrotliDecoderState s) { if (s.should_wrap_ringbuffer) { memcpy(s.ringbuffer, s.ringbuffer_end, (size_t) s.pos); s.should_wrap_ringbuffer = false; } }

			private static unsafe void BrotliDecoderHuffmanTreeGroupRelease( ref BrotliDecoderState s, HuffmanTreeGroup* group) { s.free_func(s.memory_manager_opaque, group->htrees); group->htrees = null; }

			internal static unsafe BrotliDecoderResult BrotliDecoderDecompressStream(ref BrotliDecoderState s, size_t* available_in, byte** next_in, size_t* available_out, byte** next_out, size_t* total_out) 
			{
				var result = BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
				fixed (BrotliBitReader* br = &s.br) 
				{
					if (*available_out != 0 && (next_out == null || *next_out == null)) { return SaveErrorCode(ref s, BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_INVALID_ARGUMENTS); }
					if (*available_out == 0) next_out = null;
					if (s.buffer_length == 0) { /* Just connect bit reader to input stream. */ br->avail_in = *available_in; br->next_in = *next_in; }
					else 
					{
						/* At least one byte of input is required. More than one byte of input may
						   be required to complete the transaction -> reading more data must be
						   done in a loop -> do it in a main loop. */
						result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; br->next_in = &s.buffer.u8[0];
					}

					/* State machine */
					for (;;) 
					{
						if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) 
						{
							/* Error, needs more input/output */
							if (result == BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT) 
							{
								if (s.ringbuffer != null) { /* Pro-actively push output. */ WriteRingBuffer(ref s, available_out, next_out, total_out, true); }
								if (s.buffer_length != 0) 
								{
									/* Used with internal buffer. */
									if (br->avail_in == 0) 
									{
										/* Successfully finished read transaction. */
										/* Accumulator contains less than 8 bits, because internal buffer
										   is expanded byte-by-byte until it is enough to complete read. */
										s.buffer_length = 0;
										/* Switch to input stream and restart. */
										result = BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS;
										br->avail_in = *available_in; br->next_in = *next_in;
										continue;
									}
									else if (*available_in != 0) 
									{
										/* Not enough data in buffer, but can take one more byte from
										   input stream. */
										result = BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS; s.buffer.u8[s.buffer_length] = **next_in;
										s.buffer_length++; br->avail_in = s.buffer_length; (*next_in)++; (*available_in)--;
										/* Retry with more data in buffer. */
										continue;
									}
									/* Can't finish reading and no more input.*/
									break;
								}
								else 
								{
									/* Input stream doesn't contain enough input. */
									/* Copy tail to internal buffer and return. */
									*next_in = br->next_in; *available_in = br->avail_in;
									while (*available_in != 0) 
									{
										s.buffer.u8[s.buffer_length] = **next_in; s.buffer_length++;
										(*next_in)++; (*available_in)--;
									}
									break;
								}
								/* Unreachable. */
							}

							/* Fail or needs more output. */
							if (s.buffer_length != 0) 
							{
								/* Just consumed the buffered input and produced some output. Otherwise
								   it would result in "needs more input". Reset internal buffer.*/
								s.buffer_length = 0;
							}
							else 
							{
								/* Using input stream in last iteration. When decoder switches to input
								   stream it has less than 8 bits in accumulator, so it is safe to
								   return unused accumulator bits there. */
								BrotliBitReaderUnload(br); *available_in = br->avail_in; *next_in = br->next_in;
							}
							break;
						}
						switch (s.state) 
						{
							case BrotliRunningState.BROTLI_STATE_UNINITED:
								/* Prepare to the first read. */
								if (!BrotliWarmupBitReader(br)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; break; }
								/* Decode window size. */
								s.window_bits = DecodeWindowBits(br); /* Reads 1..7 bits. */
								if (s.window_bits == 9) { /* Value 9 is reserved for future use. */ result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS; break; }
								/* Maximum distance, see section 9.1. of the spec. */
								s.max_backward_distance = (1 << (int) s.window_bits) - BROTLI_WINDOW_GAP;
								/* Limit custom dictionary size. */
								if (s.custom_dict_size >= s.max_backward_distance) { s.custom_dict += s.custom_dict_size - s.max_backward_distance; s.custom_dict_size = s.max_backward_distance; }

								/* Allocate memory for both block_type_trees and block_len_trees. */
								s.block_type_trees = (HuffmanCode*) s.alloc_func(s.memory_manager_opaque, sizeof(HuffmanCode) * 3 * (BROTLI_HUFFMAN_MAX_SIZE_258 + BROTLI_HUFFMAN_MAX_SIZE_26));
								if (s.block_type_trees == null)  { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES; break; }
								s.block_len_trees = s.block_type_trees + 3 * BROTLI_HUFFMAN_MAX_SIZE_258;
								s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_BEGIN;
								goto case BrotliRunningState.BROTLI_STATE_METABLOCK_BEGIN;
							/* No break, continue to next state */
							case BrotliRunningState.BROTLI_STATE_METABLOCK_BEGIN:
								BrotliDecoderStateMetablockBegin(ref s); s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_HEADER;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_METABLOCK_HEADER;
							/* No break, continue to next state */
							case BrotliRunningState.BROTLI_STATE_METABLOCK_HEADER:
								result = DecodeMetaBlockLength(ref s, br); /* Reads 2 - 31 bits. */
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								if (s.is_metadata || s.is_uncompressed) 
								{ if (!BrotliJumpToByteBoundary(br)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_PADDING_1; break; } }
								if (s.is_metadata) { s.state = BrotliRunningState.BROTLI_STATE_METADATA; break; }
								if (s.meta_block_remaining_len == 0) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; break; }
								BrotliCalculateRingBufferSize(ref s);
								if (s.is_uncompressed) { s.state = BrotliRunningState.BROTLI_STATE_UNCOMPRESSED; break; }
								s.loop_counter = 0; s.state = BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_0;
								break;
							case BrotliRunningState.BROTLI_STATE_UNCOMPRESSED: {
								result = CopyUncompressedBlockToOutput(available_out, next_out, total_out, ref s);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE;
								break;
							}
							case BrotliRunningState.BROTLI_STATE_METADATA:
								for (; s.meta_block_remaining_len > 0; --s.meta_block_remaining_len) 
								{
									uint bits;
									/* Read one byte and ignore it. */
									if (!BrotliSafeReadBits(br, 8, &bits)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; break; }
								}
								if (result == BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; }
								break;
							case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_0:
								if (s.loop_counter >= 3) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_HEADER_2; break; }
								/* Reads 1..11 bits. */
								fixed (uint* nbt = s.num_block_types) 
								{
									result = DecodeVarLenUint8(ref s, br, &nbt[s.loop_counter]);
									if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
									nbt[s.loop_counter]++;
									if (nbt[s.loop_counter] < 2) { s.loop_counter++; break; }
								}
								s.state = BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_1;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_1;
							case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_1: {
								var tree_offset = s.loop_counter * BROTLI_HUFFMAN_MAX_SIZE_258;
								fixed (uint* nbt = s.num_block_types) { result = ReadHuffmanCode(nbt[s.loop_counter] + 2, &s.block_type_trees[tree_offset], null, ref s); }
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) break;
								s.state = BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_2;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_2;
							}
							case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_2: {
								var tree_offset = s.loop_counter * BROTLI_HUFFMAN_MAX_SIZE_26;
								result = ReadHuffmanCode(BROTLI_NUM_BLOCK_LEN_SYMBOLS, &s.block_len_trees[tree_offset], null, ref s);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) break;
								s.state = BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_3;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_3;
							}
							case BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_3: {
								var tree_offset = s.loop_counter * BROTLI_HUFFMAN_MAX_SIZE_26;
								fixed (uint* bl = s.block_length) { if (!SafeReadBlockLength(ref s, &bl[s.loop_counter], &s.block_len_trees[tree_offset], br)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; break; } }
								s.loop_counter++; s.state = BrotliRunningState.BROTLI_STATE_HUFFMAN_CODE_0;
								break;
							}
							case BrotliRunningState.BROTLI_STATE_METABLOCK_HEADER_2: {
								uint bits;
								if (!BrotliSafeReadBits(br, 6, &bits)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT; break; }
								s.distance_postfix_bits = bits & BitMask(2); bits >>= 2;
								s.num_direct_distance_codes = BROTLI_NUM_DISTANCE_SHORT_CODES + (bits << (int)s.distance_postfix_bits);
								s.distance_postfix_mask = (int)BitMask(s.distance_postfix_bits);
								fixed (uint* nbt = s.num_block_types) {  s.context_modes = (byte*)s.alloc_func(s.memory_manager_opaque, (size_t)nbt[0]); }
								if (s.context_modes == null) { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES; break; }
								s.loop_counter = 0; s.state = BrotliRunningState.BROTLI_STATE_CONTEXT_MODES;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_CONTEXT_MODES;
							}
							case BrotliRunningState.BROTLI_STATE_CONTEXT_MODES:
								result = ReadContextModes(ref s);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								s.state = BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_1;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_1;
							case BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_1:
								fixed (uint* nbt = s.num_block_types)
								fixed (uint* nlh = &s.num_literal_htrees)
								fixed (byte** cm = &s.context_map) { result = DecodeContextMap( nbt[0] << BROTLI_LITERAL_CONTEXT_BITS, nlh, cm, ref s); }
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								DetectTrivialLiteralBlockTypes(ref s); s.state = BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_2;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_2;
							case BrotliRunningState.BROTLI_STATE_CONTEXT_MAP_2: {
								var num_distance_codes = (uint) (s.num_direct_distance_codes + ((2 * BROTLI_MAX_DISTANCE_BITS) << (int) s.distance_postfix_bits));
								var allocation_success = true;
								fixed (uint* nbt = s.num_block_types)
								fixed (uint* ndh = &s.num_dist_htrees)
								fixed (byte** dcm = &s.dist_context_map) 
								{
									result = DecodeContextMap(nbt[2] << BROTLI_DISTANCE_CONTEXT_BITS, ndh, dcm, ref s);
									if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
										fixed (HuffmanTreeGroup* lh = &s.literal_hgroup)
										{
											allocation_success &= BrotliDecoderHuffmanTreeGroupInit(ref s, lh, BROTLI_NUM_LITERAL_SYMBOLS, s.num_literal_htrees);
										}
										fixed (HuffmanTreeGroup* ich = &s.insert_copy_hgroup)
										{
											allocation_success &= BrotliDecoderHuffmanTreeGroupInit(ref s, ich, BROTLI_NUM_COMMAND_SYMBOLS, nbt[1]);
										}
										fixed (HuffmanTreeGroup* dh = &s.distance_hgroup)
										{
											allocation_success &= BrotliDecoderHuffmanTreeGroupInit(ref s, dh, num_distance_codes, s.num_dist_htrees);
										}
									if (!allocation_success) { return SaveErrorCode(ref s, BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS); }
								}
							}
								s.loop_counter = 0; s.state = BrotliRunningState.BROTLI_STATE_TREE_GROUP;
								goto case BrotliRunningState.BROTLI_STATE_TREE_GROUP;
							/* No break, continue to next state */
							case BrotliRunningState.BROTLI_STATE_TREE_GROUP: {
								HuffmanTreeGroup* hgroup = null;
								fixed (HuffmanTreeGroup* lh = &s.literal_hgroup)
								fixed (HuffmanTreeGroup* ich = &s.insert_copy_hgroup)
								fixed (HuffmanTreeGroup* dh = &s.distance_hgroup) 
								{
									switch (s.loop_counter) 
									{
										case 0: hgroup = lh; break;
										case 1: hgroup = ich; break;
										case 2: hgroup = dh; break;
										default: return SaveErrorCode(ref s, BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_UNREACHABLE);
									}
									result = HuffmanTreeGroupDecode(hgroup, ref s);
								}
							}
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) break;
								s.loop_counter++;
								if (s.loop_counter >= 3) 
								{
									PrepareLiteralDecoding(ref s); s.dist_context_map_slice = s.dist_context_map; s.htree_command = s.insert_copy_hgroup.htrees[0];
									if (!BrotliEnsureRingBuffer(ref s)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2; break; }
									s.state = BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN;
								}
								break;
							case BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN:
							case BrotliRunningState.BROTLI_STATE_COMMAND_INNER:
							case BrotliRunningState.BROTLI_STATE_COMMAND_POST_DECODE_LITERALS:
							case BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRAP_COPY:
								result = ProcessCommands(ref s);
								if (result == BrotliDecoderErrorCode.BROTLI_DECODER_NEEDS_MORE_INPUT) { result = SafeProcessCommands(ref s); }
								break;
							case BrotliRunningState.BROTLI_STATE_COMMAND_INNER_WRITE:
							case BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_1:
							case BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_2:
								result = WriteRingBuffer(ref s, available_out, next_out, total_out, false);
								if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								WrapRingBuffer(ref s);
								if (s.ringbuffer_size == 1 << (int) s.window_bits) { s.max_distance = s.max_backward_distance; }
								if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_1) {
									if (s.meta_block_remaining_len == 0) { /* Next metablock, if any */ s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; } else { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_BEGIN; }
									break;
								}
								else if (s.state == BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRITE_2) { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_POST_WRAP_COPY; }
								else 
								{
									/* BROTLI_STATE_COMMAND_INNER_WRITE */
									if (s.loop_counter == 0) { if (s.meta_block_remaining_len == 0) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_DONE; } else { s.state = BrotliRunningState.BROTLI_STATE_COMMAND_POST_DECODE_LITERALS; } break; }
									s.state = BrotliRunningState.BROTLI_STATE_COMMAND_INNER;
								}
								break;
							case BrotliRunningState.BROTLI_STATE_METABLOCK_DONE:
								if (s.meta_block_remaining_len < 0) { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2; break; }
								BrotliDecoderStateCleanupAfterMetablock(ref s);
								if (!s.is_last_metablock) { s.state = BrotliRunningState.BROTLI_STATE_METABLOCK_BEGIN; break; }
								if (!BrotliJumpToByteBoundary(br)) { result = BrotliDecoderErrorCode.BROTLI_DECODER_ERROR_FORMAT_PADDING_2; break; }
								if (s.buffer_length == 0) { BrotliBitReaderUnload(br); *available_in = br->avail_in; *next_in = br->next_in; }
								s.state = BrotliRunningState.BROTLI_STATE_DONE;
								/* No break, continue to next state */
								goto case BrotliRunningState.BROTLI_STATE_DONE;
							case BrotliRunningState.BROTLI_STATE_DONE:
								if (s.ringbuffer != null) 
								{
									result = WriteRingBuffer(ref s, available_out, next_out, total_out, true);
									if (result != BrotliDecoderErrorCode.BROTLI_DECODER_SUCCESS) { break; }
								}
								return SaveErrorCode(ref s, result);
						}
					}
				}
				return SaveErrorCode(ref s, result);
			}

			/* Returns reverse(num >> BROTLI_REVERSE_BITS_BASE, BROTLI_REVERSE_BITS_MAX),
			   where reverse(value, len) is the bit-wise reversal of the len least
			   significant bits of value. */
			private static reg_t BrotliReverseBits(reg_t num) { return (uint) kReverseBits[num]; }

			/* Stores code in table[0], table[step], table[2*step], ..., table[end] */
			/* Assumes that end is an integer multiple of step */
			private static unsafe void ReplicateValue(HuffmanCode* table, int step, int end, HuffmanCode code)  { do { end -= step; table[end] = code; } while (end > 0); }

			/* Returns the table width of the next 2nd level table. count is the histogram
			   of bit lengths for the remaining symbols, len is the code length of the next
			   processed symbol */
			private static unsafe int NextTableBitSize(ushort* count, int len, int root_bits) 
			{
				var l = len; // JIT ETW (Inlinee writes to an argument)
				var left = 1 << (l - root_bits);
				while (l < BROTLI_HUFFMAN_MAX_CODE_LENGTH) { left -= count[l]; if (left <= 0) { break; } ++l; left <<= 1; }
				return l - root_bits; 
			}

			private static unsafe void BrotliBuildCodeLengthsHuffmanTable(HuffmanCode* table, byte* code_lengths, ushort* count) 
			{
				HuffmanCode code; /* current table entry */
				int symbol; /* symbol index in original or sorted table */
				reg_t key; /* prefix code */
				reg_t key_step; /* prefix code addend */
				int step; /* step size to replicate values in current table */
				int table_size; /* size of current table */
				var sorted = new int[BROTLI_CODE_LENGTH_CODES]; /* symbols sorted by code length */
				/* offsets in sorted table for each length */
				var offset = new int[BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH + 1]; int bits; int bits_count;

				/* generate offsets into sorted symbol table by code length */
				symbol = -1; bits = 1;
				for (var i = 1; i <= 4; i *= 2) 
				{ if ((BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH & i) != 0)  { for (var x = 0; x < i; x++) { symbol += count[bits]; offset[bits] = symbol; bits++; } } }
				/* Symbols with code length 0 are placed after all other symbols. */
				offset[0] = BROTLI_CODE_LENGTH_CODES - 1;
				/* sort symbols by length, by symbol order within each length */
				symbol = BROTLI_CODE_LENGTH_CODES;
				do 
				{
					for (var i = 1; i <= 4; i *= 2) { if ((6 & i) != 0) { for (var x = 0; x < i; x++) { symbol--; sorted[offset[code_lengths[symbol]]--] = symbol; } } }
				} while (symbol != 0);
				table_size = 1 << BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH;
				/* Special case: all symbols but one have 0 code length. */
				if (offset[0] == 0) 
				{
					code.bits = 0; code.value = (ushort) sorted[0];
					for (key = 0; key < (reg_t) table_size; ++key) { table[key] = code; }
					return;
				}

				/* fill in table */
				key = 0; key_step = BROTLI_REVERSE_BITS_LOWEST; symbol = 0; bits = 1; step = 2;
				do 
				{
					code.bits = (byte) bits;
					for (bits_count = count[bits]; bits_count != 0; --bits_count) { code.value = (ushort) sorted[symbol++]; ReplicateValue(&table[BrotliReverseBits(key)], step, table_size, code); key += key_step; }
					step <<= 1; key_step >>= 1;
				} while (++bits <= BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH);
			}

			private static unsafe uint BrotliBuildHuffmanTable(HuffmanCode* root_table, int root_bits, ushort* symbol_lists, ushort* count)
			{
				HuffmanCode code; /* current table entry */
				HuffmanCode* table; /* next available space in table */
				int len; /* current code length */
				int symbol; /* symbol index in original or sorted table */
				reg_t key; /* prefix code */
				reg_t key_step; /* prefix code addend */
				reg_t sub_key; /* 2nd level table prefix code */
				reg_t sub_key_step; /* 2nd level table prefix code addend */
				int step; /* step size to replicate values in current table */
				int table_bits; /* key length of current table */
				int table_size; /* size of current table */
				int total_size; /* sum of root table size and 2nd level table sizes */
				var max_length = -1; int bits; int bits_count;

				while (symbol_lists[max_length] == 0xFFFF) { max_length--; }
				max_length += BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1; table = root_table;
				table_bits = root_bits; table_size = 1 << table_bits; total_size = table_size;

				/* fill in root table */
				/* let's reduce the table size to a smaller size if possible, and */
				/* create the repetitions by memcpy if possible in the coming loop */
				if (table_bits > max_length) { table_bits = max_length; table_size = 1 << table_bits; }
				key = 0; key_step = BROTLI_REVERSE_BITS_LOWEST; bits = 1; step = 2;
				do 
				{
					code.bits = (byte) bits; symbol = bits - (BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1);
					for (bits_count = count[bits]; bits_count != 0; --bits_count) 
					{
						symbol = symbol_lists[symbol]; code.value = (ushort) symbol;
						ReplicateValue(&table[BrotliReverseBits(key)], step, table_size, code);
						key += key_step;
					}
					step <<= 1; key_step >>= 1;
				} while (++bits <= table_bits);

				/* if root_bits != table_bits we only created one fraction of the */
				/* table, and we need to replicate it now. */
				while (total_size != table_size) { memcpy(&table[table_size], &table[0], (size_t) table_size * sizeof(HuffmanCode)); table_size <<= 1; }

				/* fill in 2nd level tables and add pointers to root table */
				key_step = BROTLI_REVERSE_BITS_LOWEST >> (root_bits - 1);
				sub_key = (BROTLI_REVERSE_BITS_LOWEST << 1); sub_key_step = BROTLI_REVERSE_BITS_LOWEST;
				for (len = root_bits + 1, step = 2; len <= max_length; ++len) 
				{
					symbol = len - (BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1);
					for (; count[len] != 0; --count[len]) 
					{
						if (sub_key == (BROTLI_REVERSE_BITS_LOWEST << 1)) 
						{
							table += table_size;
							table_bits = NextTableBitSize(count, len, root_bits); table_size = 1 << table_bits;
							total_size += table_size; sub_key = BrotliReverseBits(key); key += key_step;
							root_table[sub_key].bits = (byte) (table_bits + root_bits);
							root_table[sub_key].value = (ushort) ((size_t) (table - root_table) - sub_key);
							sub_key = 0;
						}
						code.bits = (byte) (len - root_bits); symbol = symbol_lists[symbol];
						code.value = (ushort) symbol; ReplicateValue(&table[BrotliReverseBits(sub_key)], step, table_size, code);
						sub_key += sub_key_step;
					}
					step <<= 1; sub_key_step >>= 1;
				}
				return (uint) total_size;
			}

			private static unsafe uint BrotliBuildSimpleHuffmanTable(HuffmanCode* table, int root_bits, ushort* val, uint num_symbols) 
			{
				uint table_size = 1; var goal_size = 1U << root_bits;
				switch (num_symbols) 
				{
					case 0: table[0].bits = 0; table[0].value = val[0]; break;
					case 1: table[0].bits = 1; table[1].bits = 1; if (val[1] > val[0]) { table[0].value = val[0]; table[1].value = val[1]; } else { table[0].value = val[1]; table[1].value = val[0]; } table_size = 2; break;
					case 2: table[0].bits = 1; table[0].value = val[0]; table[2].bits = 1; table[2].value = val[0]; if (val[2] > val[1]) { table[1].value = val[1]; table[3].value = val[2]; }
						else  {table[1].value = val[2]; table[3].value = val[1]; }
						table[1].bits = 2; table[3].bits = 2; table_size = 4; break;
					case 3: {
						int i, k;
						for (i = 0; i < 3; ++i) { for (k = i + 1; k < 4; ++k)  { if (val[k] < val[i]) { var t = val[k]; val[k] = val[i]; val[i] = t; } } }
						for (i = 0; i < 4; ++i) { table[i].bits = 2; } table[0].value = val[0]; table[2].value = val[1]; table[1].value = val[2];
						table[3].value = val[3]; table_size = 4; break;
					}
					case 4: {
						int i;
						if (val[3] < val[2]) { var t = val[3]; val[3] = val[2]; val[2] = t; }
						for (i = 0; i < 7; ++i) { table[i].value = val[0]; table[i].bits = (byte) (1 + (i & 1)); }
						table[1].value = val[1]; table[3].value = val[2]; table[5].value = val[1]; table[7].value = val[3]; table[3].bits = 3;
						table[7].bits = 3; table_size = 8; break;
					}
				}
				while (table_size != goal_size) { memcpy(&table[table_size], &table[0], (size_t) table_size * sizeof(HuffmanCode)); table_size <<= 1; }
				return goal_size;
			}

			internal static unsafe void BrotliDecoderStateInit(ref BrotliDecoderState s) {BrotliDecoderStateInitWithCustomAllocators(ref s, null, null, null); }

			private static unsafe void BrotliDecoderStateInitWithCustomAllocators(ref BrotliDecoderState s, brotli_alloc_func alloc_func, brotli_free_func free_func, void* opaque) 
			{
				if (alloc_func == null) { s.alloc_func = DefaultAllocFunc; s.free_func = DefaultFreeFunc; s.memory_manager_opaque = null; }
				else  { s.alloc_func = alloc_func; s.free_func = free_func; s.memory_manager_opaque = opaque; }

				fixed (BrotliBitReader* br = &s.br) { BrotliInitBitReader(br); }

				s.state = BrotliRunningState.BROTLI_STATE_UNINITED;
				s.substate_metablock_header = BrotliRunningMetablockHeaderState.BROTLI_STATE_METABLOCK_HEADER_NONE;
				s.substate_tree_group = BrotliRunningTreeGroupState.BROTLI_STATE_TREE_GROUP_NONE;
				s.substate_context_map = BrotliRunningContextMapState.BROTLI_STATE_CONTEXT_MAP_NONE;
				s.substate_uncompressed = BrotliRunningUncompressedState.BROTLI_STATE_UNCOMPRESSED_NONE;
				s.substate_huffman = BrotliRunningHuffmanState.BROTLI_STATE_HUFFMAN_NONE;
				s.substate_decode_uint8 = BrotliRunningDecodeUint8State.BROTLI_STATE_DECODE_UINT8_NONE;
				s.substate_read_block_length = BrotliRunningReadBlockLengthState.BROTLI_STATE_READ_BLOCK_LENGTH_NONE;

				s.buffer_length = 0; s.loop_counter = 0; s.pos = 0; s.rb_roundtrips = 0; s.partial_pos_out = 0;

				s.block_type_trees = null; s.block_len_trees = null; s.ringbuffer = null; s.ringbuffer_size = 0;
				s.new_ringbuffer_size = 0; s.ringbuffer_mask = 0;

				s.context_map = null; s.context_modes = null; s.dist_context_map = null; s.context_map_slice = null;
				s.dist_context_map_slice = null;

				s.sub_loop_counter = 0;

				s.literal_hgroup.codes = null; s.literal_hgroup.htrees = null; s.insert_copy_hgroup.codes = null;
				s.insert_copy_hgroup.htrees = null; s.distance_hgroup.codes = null; s.distance_hgroup.htrees = null;

				s.custom_dict = null; s.custom_dict_size = 0;

				s.is_last_metablock = false; s.should_wrap_ringbuffer = false; s.window_bits = 0;
				s.max_distance = 0;
				fixed (int* rb = s.dist_rb) { rb[0] = 16; rb[1] = 15; rb[2] = 11; rb[3] = 4; }
				s.dist_rb_idx = 0; s.block_type_trees = null; s.block_len_trees = null;

				s.mtf_upper_bound = 63;
			}

			internal static unsafe void BrotliDecoderStateCleanup(ref BrotliDecoderState s) 
			{
				BrotliDecoderStateCleanupAfterMetablock(ref s);
				s.free_func(s.memory_manager_opaque, s.ringbuffer);
				s.ringbuffer = null; s.free_func(s.memory_manager_opaque, s.block_type_trees);
				s.block_type_trees = null;
			}

			private static unsafe void BrotliDecoderStateMetablockBegin(ref BrotliDecoderState s)
			{
				s.meta_block_remaining_len = 0;
				fixed (uint* bl = s.block_length) { bl[0] = 1U << 28; bl[1] = 1U << 28; bl[2] = 1U << 28; }
				fixed (uint* nbt = s.num_block_types) { nbt[0] = 1; nbt[1] = 1; nbt[2] = 1; }
				fixed (uint* btr = s.block_type_rb) { btr[0] = 1; btr[1] = 0; btr[2] = 1; btr[3] = 0; btr[4] = 1; btr[5] = 0; }
				s.context_map = null; s.context_modes = null; s.dist_context_map = null;
				s.context_map_slice = null; s.literal_htree = null; s.dist_context_map_slice = null;
				s.dist_htree_index = 0; s.context_lookup1 = null; s.context_lookup2 = null;
				s.literal_hgroup.codes = null; s.literal_hgroup.htrees = null; s.insert_copy_hgroup.codes = null;
				s.insert_copy_hgroup.htrees = null; s.distance_hgroup.codes = null; s.distance_hgroup.htrees = null;
			}

			private static unsafe void BrotliDecoderStateCleanupAfterMetablock(ref BrotliDecoderState s) 
			{
				s.free_func(s.memory_manager_opaque, s.context_modes);
				s.context_modes = null;
				s.free_func(s.memory_manager_opaque, s.context_map);
				s.context_map = null;
				s.free_func(s.memory_manager_opaque, s.dist_context_map);
				s.dist_context_map = null;

				fixed (HuffmanTreeGroup* lh = &s.literal_hgroup)
				fixed (HuffmanTreeGroup* ich = &s.insert_copy_hgroup)
				fixed (HuffmanTreeGroup* dh = &s.distance_hgroup) { BrotliDecoderHuffmanTreeGroupRelease(ref s, lh); BrotliDecoderHuffmanTreeGroupRelease(ref s, ich); BrotliDecoderHuffmanTreeGroupRelease(ref s, dh); }
			}

			private static unsafe bool BrotliDecoderHuffmanTreeGroupInit(ref BrotliDecoderState s, HuffmanTreeGroup* group, uint alphabet_size, uint ntrees) 
			{
				/* Pack two allocations into one */
				size_t max_table_size = (int) kMaxHuffmanTableSize[(alphabet_size + 31) >> 5];
				size_t code_size = sizeof(HuffmanCode) * ntrees * max_table_size;
				size_t htree_size = IntPtr.Size * ntrees;
				/* Pointer alignment is, hopefully, wider than sizeof(HuffmanCode). */
				var p = (HuffmanCode**) s.alloc_func(s.memory_manager_opaque, code_size + htree_size);
				group->alphabet_size = (ushort) alphabet_size;
				group->num_htrees = (ushort) ntrees; group->htrees = (HuffmanCode**) p; group->codes = (HuffmanCode*) (&p[ntrees]);
				return p != null;
			}

			internal enum BrotliDecoderErrorCode {
				/* Same as BrotliDecoderResult values */
				BROTLI_DECODER_NO_ERROR,
				BROTLI_DECODER_SUCCESS,
				BROTLI_DECODER_NEEDS_MORE_INPUT,
				BROTLI_DECODER_NEEDS_MORE_OUTPUT,

				/* Errors caused by invalid input */
				BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE = -1,
				BROTLI_DECODER_ERROR_FORMAT_RESERVED = -2,
				BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE = -3,
				BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET = -4,
				BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME = -5,
				BROTLI_DECODER_ERROR_FORMAT_CL_SPACE = -6,
				BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE = -7,
				BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT = -8,
				BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1 = -9,
				BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2 = -10,
				BROTLI_DECODER_ERROR_FORMAT_TRANSFORM = -11,
				BROTLI_DECODER_ERROR_FORMAT_DICTIONARY = -12,
				BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS = -13,
				BROTLI_DECODER_ERROR_FORMAT_PADDING_1 = -14,
				BROTLI_DECODER_ERROR_FORMAT_PADDING_2 = -15,

				/* -16..-19 codes are reserved */

				BROTLI_DECODER_ERROR_INVALID_ARGUMENTS = -20,

				/* Memory allocation problems */
				BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES = -21,
				/* Literalinsert and distance trees together */
				BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS = -22,
				/* -23..-24 codes are reserved for distinct tree groups */
				BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP = -25,
				BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1 = -26,
				BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2 = -27,
				/* -28..-29 codes are reserved for dynamic ring-buffer allocation */
				BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES = -30,

				/* "Impossible" states */
				BROTLI_DECODER_ERROR_UNREACHABLE = -31
			}

			internal enum BrotliDecoderResult 
			{
				/// <summary>Decoding error, e.g. corrupted input or memory allocation problem.</summary>
				BROTLI_DECODER_RESULT_ERROR = 0,

				/// <summary>Decoding successfully completed</summary>
				BROTLI_DECODER_RESULT_SUCCESS = 1,

				/// <summary>Partially done; should be called again with more input</summary>
				BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT = 2,

				/// <summary>Partially done; should be called again with more output</summary>
				BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT = 3
			}

			internal enum BrotliRunningContextMapState 
			{
				BROTLI_STATE_CONTEXT_MAP_NONE, BROTLI_STATE_CONTEXT_MAP_READ_PREFIX,
				BROTLI_STATE_CONTEXT_MAP_HUFFMAN, BROTLI_STATE_CONTEXT_MAP_DECODE, BROTLI_STATE_CONTEXT_MAP_TRANSFORM
			}

			internal enum BrotliRunningDecodeUint8State  { BROTLI_STATE_DECODE_UINT8_NONE, BROTLI_STATE_DECODE_UINT8_SHORT, BROTLI_STATE_DECODE_UINT8_LONG }

			internal enum BrotliRunningHuffmanState 
			{
				BROTLI_STATE_HUFFMAN_NONE, BROTLI_STATE_HUFFMAN_SIMPLE_SIZE, BROTLI_STATE_HUFFMAN_SIMPLE_READ,
				BROTLI_STATE_HUFFMAN_SIMPLE_BUILD, BROTLI_STATE_HUFFMAN_COMPLEX, BROTLI_STATE_HUFFMAN_LENGTH_SYMBOLS
			}

			internal enum BrotliRunningMetablockHeaderState 
			{
				BROTLI_STATE_METABLOCK_HEADER_NONE, BROTLI_STATE_METABLOCK_HEADER_EMPTY,
				BROTLI_STATE_METABLOCK_HEADER_NIBBLES, BROTLI_STATE_METABLOCK_HEADER_SIZE,
				BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED, BROTLI_STATE_METABLOCK_HEADER_RESERVED,
				BROTLI_STATE_METABLOCK_HEADER_BYTES, BROTLI_STATE_METABLOCK_HEADER_METADATA
			}

			internal enum BrotliRunningReadBlockLengthState { BROTLI_STATE_READ_BLOCK_LENGTH_NONE, BROTLI_STATE_READ_BLOCK_LENGTH_SUFFIX }

			internal enum BrotliRunningState 
			{
				BROTLI_STATE_UNINITED, BROTLI_STATE_METABLOCK_BEGIN,
				BROTLI_STATE_METABLOCK_HEADER, BROTLI_STATE_METABLOCK_HEADER_2, BROTLI_STATE_CONTEXT_MODES, BROTLI_STATE_COMMAND_BEGIN,
				BROTLI_STATE_COMMAND_INNER, BROTLI_STATE_COMMAND_POST_DECODE_LITERALS, BROTLI_STATE_COMMAND_POST_WRAP_COPY,
				BROTLI_STATE_UNCOMPRESSED, BROTLI_STATE_METADATA, BROTLI_STATE_COMMAND_INNER_WRITE,
				BROTLI_STATE_METABLOCK_DONE, BROTLI_STATE_COMMAND_POST_WRITE_1, BROTLI_STATE_COMMAND_POST_WRITE_2,
				BROTLI_STATE_HUFFMAN_CODE_0, BROTLI_STATE_HUFFMAN_CODE_1, BROTLI_STATE_HUFFMAN_CODE_2, BROTLI_STATE_HUFFMAN_CODE_3,
				BROTLI_STATE_CONTEXT_MAP_1, BROTLI_STATE_CONTEXT_MAP_2, BROTLI_STATE_TREE_GROUP, BROTLI_STATE_DONE
			}

			internal enum BrotliRunningTreeGroupState { BROTLI_STATE_TREE_GROUP_NONE, BROTLI_STATE_TREE_GROUP_LOOP }

			internal enum BrotliRunningUncompressedState { BROTLI_STATE_UNCOMPRESSED_NONE, BROTLI_STATE_UNCOMPRESSED_WRITE }

			private static readonly string kPrefixSuffix = "\0 \0, \0 of the \0 of \0s \0.\0 and \0 in \0\"\0 to \0\">\0\n\0. \0]\0" +
				" for \0 a \0 that \0\'\0 with \0 from \0 by \0(\0. The \0 on \0 as \0" +
				" is \0ing \0\n\t\0:\0ed \0=\"\0 at \0ly \0,\0=\'\0.com/\0. This \0" +
				" not \0er \0al \0ful \0ive \0less \0est \0ize \0\xc2\xa0\0ous ";

			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct BrotliBitReader { public reg_t val_; public uint bit_pos_; public byte* next_in; public size_t avail_in; }

			[StructLayout(LayoutKind.Sequential)]
			private struct CmdLutElement
			{
				public byte insert_len_extra_bits; public byte copy_len_extra_bits; public sbyte distance_code;
				public byte context; public ushort insert_len_offset; public ushort copy_len_offset;

				public CmdLutElement(byte a, byte b, sbyte c, byte d, ushort e, ushort f) { insert_len_extra_bits = a; copy_len_extra_bits = b; distance_code = c; context = d; insert_len_offset = e; copy_len_offset = f; }

				public static implicit operator CmdLutElement(short[] a) { return new CmdLutElement((byte)a[0], (byte)a[1], (sbyte)a[2], (byte)a[3], (ushort)a[4], (ushort)a[5]); }
			}

			/* Represents the range of values belonging to a prefix code: */
			/* [offset, offset + 2^nbits) */

			[StructLayout(LayoutKind.Sequential)]
			internal struct PrefixCodeRange 
			{
				public ushort offset; public byte nbits;

				public PrefixCodeRange(ushort o, byte n) { offset = o; nbits = n; }

				public static implicit operator PrefixCodeRange(ushort[] a) { return new PrefixCodeRange((ushort) a[0], (byte) a[1]); }
			}

			[StructLayout(LayoutKind.Sequential)]
			internal struct BrotliDecoderStateBuffer  { public ulong u64; public unsafe byte* u8 { get { fixed (ulong* u = &u64) { return (byte*) u; } } } }

			[StructLayout(LayoutKind.Sequential)]
			internal struct HuffmanCode { public byte bits; public ushort value; }

			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct HuffmanTreeGroup { public HuffmanCode** htrees; public HuffmanCode* codes; public ushort alphabet_size; public ushort num_htrees; }

			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct BrotliDecoderStateStruct 
			{
				public BrotliRunningState state;

				/* This counter is reused for several disjoint loops. */
				public int loop_counter; public BrotliBitReader br;

				public brotli_alloc_func alloc_func; public brotli_free_func free_func; public void* memory_manager_opaque;

				public BrotliDecoderStateBuffer buffer; public uint buffer_length;

				public int pos; public int max_backward_distance;
				public int max_distance; public int ringbuffer_size; public int ringbuffer_mask; public int dist_rb_idx;
				public fixed int dist_rb [4]; public int error_code; public uint sub_loop_counter; public byte* ringbuffer;
				public byte* ringbuffer_end; public HuffmanCode* htree_command; public byte* context_lookup1;
				public byte* context_lookup2; public byte* context_map_slice; public byte* dist_context_map_slice;

				/* This ring buffer holds a few past copy distances that will be used by */
				/* some special distance codes. */
				public HuffmanTreeGroup literal_hgroup;
				public HuffmanTreeGroup insert_copy_hgroup;
				public HuffmanTreeGroup distance_hgroup;
				public HuffmanCode* block_type_trees;
				public HuffmanCode* block_len_trees;
				/* This is true if the literal context map histogram type always matches the
				block type. It is then not needed to keep the context (faster decoding). */
				public int trivial_literal_context;
				/* Distance context is actual after command is decoded and before distance
				is computed. After distance computation it is used as a temporary variable. */
				public int distance_context; public int meta_block_remaining_len; public uint block_length_index;
				public fixed uint block_length [3]; public fixed uint num_block_types [3]; public fixed uint block_type_rb [6]; public uint distance_postfix_bits;
				public uint num_direct_distance_codes; public int distance_postfix_mask; public uint num_dist_htrees; public byte* dist_context_map;
				public HuffmanCode* literal_htree; public byte dist_htree_index; public uint repeat_code_len; public uint prev_code_len;

				public int copy_length; public int distance_code;

				/* For partial write operations */
				public size_t rb_roundtrips; /* How many times we went around the ring-buffer */
				public size_t partial_pos_out; /* How much output to the user in total */

				/* For ReadHuffmanCode */
				public uint symbol; public uint repeat; public uint space;

				[MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)] public HuffmanCode[] table;
				/* List of of symbol chains. */
				public ushort* symbol_lists { get { /* Make small negative indexes addressable. */ fixed (ushort* sla = symbols_lists_array) { return &sla[BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1]; } } }

				/* Storage from symbol_lists. */

				public fixed ushort symbols_lists_array [BROTLI_HUFFMAN_MAX_CODE_LENGTH + 1 + BROTLI_NUM_COMMAND_SYMBOLS];

				/* Tails of symbol chains. */
				public fixed int next_symbol [32];
				public fixed byte code_length_code_lengths [BROTLI_CODE_LENGTH_CODES];
				/* Population counts for the code lengths */
				public fixed ushort code_length_histo [16];

				/* For HuffmanTreeGroupDecode */
				public int htree_index; public HuffmanCode* next;

				/* For DecodeContextMap */
				public uint context_index; public uint max_run_length_prefix; public uint code;

				[MarshalAs(UnmanagedType.ByValArray, SizeConst = BROTLI_HUFFMAN_MAX_SIZE_272)] public HuffmanCode[]
					context_map_table;

				/* For InverseMoveToFrontTransform */
				public uint mtf_upper_bound; public fixed uint mtf [64 + 1];

				/* For custom dictionaries */
				public byte* custom_dict; public int custom_dict_size;

				/* less used attributes are in the end of this struct */
				/* States inside function calls */
				public BrotliRunningMetablockHeaderState substate_metablock_header;
				public BrotliRunningTreeGroupState substate_tree_group;
				public BrotliRunningContextMapState substate_context_map;
				public BrotliRunningUncompressedState substate_uncompressed;
				public BrotliRunningHuffmanState substate_huffman;
				public BrotliRunningDecodeUint8State substate_decode_uint8;
				public BrotliRunningReadBlockLengthState substate_read_block_length;

				public bool is_last_metablock; public bool is_uncompressed;
				public bool is_metadata; public bool should_wrap_ringbuffer; public byte size_nibbles; public uint window_bits;

				public int new_ringbuffer_size;

				public uint num_literal_htrees; public byte* context_map; public byte* context_modes; public byte* dictionary;

				public fixed uint trivial_literal_contexts [8]; /* 256 bits */
			}

			private enum TransformID 
			{
				/* EMPTY = ""
				   SP = " "
				   DQUOT = "\""
				   SQUOT = "'"
				   CLOSEBR = "]"
				   OPEN = "("
				   SLASH = "/"
				   NBSP = non-breaking space "\0xc2\xa0"
				*/
				kPFix_EMPTY = 0, kPFix_SP = 1,
				kPFix_COMMASP = 3, kPFix_SPofSPtheSP = 6, kPFix_SPtheSP = 9, kPFix_eSP = 12, kPFix_SPofSP = 15, kPFix_sSP = 20,
				kPFix_DOT = 23, kPFix_SPandSP = 25, kPFix_SPinSP = 31, kPFix_DQUOT = 36, kPFix_SPtoSP = 38, kPFix_DQUOTGT = 43,
				kPFix_NEWLINE = 46, kPFix_DOTSP = 48, kPFix_CLOSEBR = 51, kPFix_SPforSP = 53, kPFix_SPaSP = 59, kPFix_SPthatSP = 63,
				kPFix_SQUOT = 70, kPFix_SPwithSP = 72, kPFix_SPfromSP = 79, kPFix_SPbySP = 86, kPFix_OPEN = 91, kPFix_DOTSPTheSP = 93, 
				kPFix_SPonSP = 100, kPFix_SPasSP = 105, kPFix_SPisSP = 110, kPFix_ingSP = 115, kPFix_NEWLINETAB = 120, kPFix_COLON = 123,
				kPFix_edSP = 125, kPFix_EQDQUOT = 129, kPFix_SPatSP = 132, kPFix_lySP = 137, kPFix_COMMA = 141, kPFix_EQSQUOT = 143,
				kPFix_DOTcomSLASH = 146, kPFix_DOTSPThisSP = 152, kPFix_SPnotSP = 160, kPFix_erSP = 166, kPFix_alSP = 170, kPFix_fulSP = 174,
				kPFix_iveSP = 179, kPFix_lessSP = 184, kPFix_estSP = 190, kPFix_izeSP = 195, kPFix_NBSP = 200, kPFix_ousSP = 203
			}

			private enum WordTransformType 
			{
				kIdentity = 0, kOmitLast1 = 1, kOmitLast2 = 2, kOmitLast3 = 3,
				kOmitLast4 = 4, kOmitLast5 = 5, kOmitLast6 = 6, kOmitLast7 = 7, kOmitLast8 = 8, kOmitLast9 = 9,
				kUppercaseFirst = 10, kUppercaseAll = 11, kOmitFirst1 = 12, kOmitFirst2 = 13, kOmitFirst3 = 14,
				kOmitFirst4 = 15, kOmitFirst5 = 16, kOmitFirst6 = 17, kOmitFirst7 = 18, kOmitFirst8 = 19, kOmitFirst9 = 20
			}

			internal struct Transform 
			{
				public byte prefix_id; public byte transform; public byte suffix_id;

				public static implicit operator Transform(Enum[] e) { return new Transform { prefix_id = Convert.ToByte(e[0]), transform = Convert.ToByte(e[1]), suffix_id = Convert.ToByte(e[2]) }; }
			}
		

			private static readonly PrefixCodeRange[] kBlockLengthPrefixCode = {
				new ushort[] {1, 2}, new ushort[] {5, 2}, new ushort[] {9, 2}, new ushort[] {13, 2},
				new ushort[] {17, 3}, new ushort[] {25, 3}, new ushort[] {33, 3}, new ushort[] {41, 3},
				new ushort[] {49, 4}, new ushort[] {65, 4}, new ushort[] {81, 4}, new ushort[] {97, 4},
				new ushort[] {113, 5}, new ushort[] {145, 5}, new ushort[] {177, 5}, new ushort[] {209, 5},
				new ushort[] {241, 6}, new ushort[] {305, 6}, new ushort[] {369, 7}, new ushort[] {497, 8},
				new ushort[] {753, 9}, new ushort[] {1265, 10}, new ushort[] {2289, 11}, new ushort[] {4337, 12},
				new ushort[] {8433, 13}, new ushort[] {16625, 24}
			};

			private static readonly uint[] kBitMask = {
				0x0000,
				0x00000001, 0x00000003, 0x00000007, 0x0000000F,
				0x0000001F, 0x0000003F, 0x0000007F, 0x000000FF,
				0x000001FF, 0x000003FF, 0x000007FF, 0x00000FFF,
				0x00001FFF, 0x00003FFF, 0x00007FFF, 0x0000FFFF,
				0x0001FFFF, 0x0003FFFF, 0x0007FFFF, 0x000FFFFF,
				0x001FFFFF, 0x003FFFFF, 0x007FFFFF, 0x00FFFFFF,
				0x01FFFFFF, 0x03FFFFFF, 0x07FFFFFF, 0x0FFFFFFF,
				0x1FFFFFFF, 0x3FFFFFFF, 0x7FFFFFFF, 0xFFFFFFFF
			};

			private static readonly byte[] kReverseBits = {
				0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
				0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
				0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
				0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
				0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
				0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
				0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
				0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
				0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
				0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
				0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
				0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
				0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
				0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
				0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
				0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
				0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
				0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
				0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
				0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
				0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
				0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
				0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
				0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
				0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
				0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
				0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
				0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
				0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
				0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
				0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
				0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
			};

			/* Maximum possible Huffman table size for an alphabet size of (index * 32),
			 * max code length 15 and root table bits 8. */

			private static readonly ushort[] kMaxHuffmanTableSize = { 256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822, 854, 886, 920, 952, 984, 1016, 1048, 1080 };


			/* Common context lookup table for all context modes. */

			private static readonly byte[] kContextLookup = {
				/* CONTEXT_UTF8, last byte. */
				/* ASCII range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,
				44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
				12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,
				52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,
				12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,
				60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12, 0,
				/* UTF8 continuation byte range. */
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				/* UTF8 lead byte range. */
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				/* CONTEXT_UTF8 second last byte. */
				/* ASCII range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
				1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
				1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
				/* UTF8 continuation byte range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				/* UTF8 lead byte range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				/* CONTEXT_SIGNED, second last byte. */
				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
				/* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
				0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
				16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
				16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
				16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
				32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
				32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
				32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
				40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
				40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
				40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
				48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
				/* CONTEXT_LSB6, last byte. */
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
				48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
				48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
				48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
				48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
				/* CONTEXT_MSB6, last byte. */
				0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,
				4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7,
				8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11,
				12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
				16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
				20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,
				24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,
				28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31,
				32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35,
				36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
				40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43,
				44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,
				48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51,
				52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55,
				56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59,
				60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,
				/* CONTEXT_{M,L}SB6, second last byte, */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			};

			private static readonly int[] kContextLookupOffsets = {
				/* CONTEXT_LSB6 */
				1024, 1536,
				/* CONTEXT_MSB6 */
				1280, 1536,
				/* CONTEXT_UTF8 */
				0, 256,
				/* CONTEXT_SIGNED */
				768, 512
			};


			private static readonly CmdLutElement[] kCmdLut = {
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0000, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0000, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0000, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0000, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0000, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0000, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0000, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0000, 0x0009),
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0001, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0001, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0001, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0001, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0001, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0001, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0001, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0001, 0x0009),
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0002, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0002, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0002, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0002, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0002, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0002, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0002, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0002, 0x0009),
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0003, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0003, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0003, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0003, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0003, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0003, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0003, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0003, 0x0009),
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0004, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0004, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0004, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0004, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0004, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0004, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0004, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0004, 0x0009),
				new CmdLutElement(0x00, 0x00, 0, 0x00, 0x0005, 0x0002),
				new CmdLutElement(0x00, 0x00, 0, 0x01, 0x0005, 0x0003),
				new CmdLutElement(0x00, 0x00, 0, 0x02, 0x0005, 0x0004),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0005, 0x0005),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0005, 0x0006),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0005, 0x0007),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0005, 0x0008),
				new CmdLutElement(0x00, 0x00, 0, 0x03, 0x0005, 0x0009),
				new CmdLutElement(0x01, 0x00, 0, 0x00, 0x0006, 0x0002),
				new CmdLutElement(0x01, 0x00, 0, 0x01, 0x0006, 0x0003),
				new CmdLutElement(0x01, 0x00, 0, 0x02, 0x0006, 0x0004),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0006, 0x0005),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0006, 0x0006),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0006, 0x0007),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0006, 0x0008),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0006, 0x0009),
				new CmdLutElement(0x01, 0x00, 0, 0x00, 0x0008, 0x0002),
				new CmdLutElement(0x01, 0x00, 0, 0x01, 0x0008, 0x0003),
				new CmdLutElement(0x01, 0x00, 0, 0x02, 0x0008, 0x0004),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0008, 0x0005),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0008, 0x0006),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0008, 0x0007),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0008, 0x0008),
				new CmdLutElement(0x01, 0x00, 0, 0x03, 0x0008, 0x0009),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0000, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0000, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0000, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0000, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0000, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0000, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0000, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0000, 0x0036),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0001, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0001, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0001, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0001, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0001, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0001, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0001, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0001, 0x0036),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0002, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0002, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0002, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0002, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0002, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0002, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0002, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0002, 0x0036),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0003, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0003, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0003, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0003, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0003, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0003, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0003, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0003, 0x0036),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0004, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0004, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0004, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0004, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0004, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0004, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0004, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0004, 0x0036),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0005, 0x000a),
				new CmdLutElement(0x00, 0x01, 0, 0x03, 0x0005, 0x000c),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0005, 0x000e),
				new CmdLutElement(0x00, 0x02, 0, 0x03, 0x0005, 0x0012),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0005, 0x0016),
				new CmdLutElement(0x00, 0x03, 0, 0x03, 0x0005, 0x001e),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0005, 0x0026),
				new CmdLutElement(0x00, 0x04, 0, 0x03, 0x0005, 0x0036),
				new CmdLutElement(0x01, 0x01, 0, 0x03, 0x0006, 0x000a),
				new CmdLutElement(0x01, 0x01, 0, 0x03, 0x0006, 0x000c),
				new CmdLutElement(0x01, 0x02, 0, 0x03, 0x0006, 0x000e),
				new CmdLutElement(0x01, 0x02, 0, 0x03, 0x0006, 0x0012),
				new CmdLutElement(0x01, 0x03, 0, 0x03, 0x0006, 0x0016),
				new CmdLutElement(0x01, 0x03, 0, 0x03, 0x0006, 0x001e),
				new CmdLutElement(0x01, 0x04, 0, 0x03, 0x0006, 0x0026),
				new CmdLutElement(0x01, 0x04, 0, 0x03, 0x0006, 0x0036),
				new CmdLutElement(0x01, 0x01, 0, 0x03, 0x0008, 0x000a),
				new CmdLutElement(0x01, 0x01, 0, 0x03, 0x0008, 0x000c),
				new CmdLutElement(0x01, 0x02, 0, 0x03, 0x0008, 0x000e),
				new CmdLutElement(0x01, 0x02, 0, 0x03, 0x0008, 0x0012),
				new CmdLutElement(0x01, 0x03, 0, 0x03, 0x0008, 0x0016),
				new CmdLutElement(0x01, 0x03, 0, 0x03, 0x0008, 0x001e),
				new CmdLutElement(0x01, 0x04, 0, 0x03, 0x0008, 0x0026),
				new CmdLutElement(0x01, 0x04, 0, 0x03, 0x0008, 0x0036),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0000, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0000, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0000, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0000, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0000, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0000, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0000, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0000, 0x0009),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0001, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0001, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0001, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0001, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0001, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0001, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0001, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0001, 0x0009),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0002, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0002, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0002, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0002, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0002, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0002, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0002, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0002, 0x0009),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0003, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0003, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0003, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0003, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0003, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0003, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0003, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0003, 0x0009),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0004, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0004, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0004, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0004, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0004, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0004, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0004, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0004, 0x0009),
				new CmdLutElement(0x00, 0x00, -1, 0x00, 0x0005, 0x0002),
				new CmdLutElement(0x00, 0x00, -1, 0x01, 0x0005, 0x0003),
				new CmdLutElement(0x00, 0x00, -1, 0x02, 0x0005, 0x0004),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0005, 0x0005),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0005, 0x0006),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0005, 0x0007),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0005, 0x0008),
				new CmdLutElement(0x00, 0x00, -1, 0x03, 0x0005, 0x0009),
				new CmdLutElement(0x01, 0x00, -1, 0x00, 0x0006, 0x0002),
				new CmdLutElement(0x01, 0x00, -1, 0x01, 0x0006, 0x0003),
				new CmdLutElement(0x01, 0x00, -1, 0x02, 0x0006, 0x0004),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0006, 0x0005),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0006, 0x0006),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0006, 0x0007),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0006, 0x0008),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0006, 0x0009),
				new CmdLutElement(0x01, 0x00, -1, 0x00, 0x0008, 0x0002),
				new CmdLutElement(0x01, 0x00, -1, 0x01, 0x0008, 0x0003),
				new CmdLutElement(0x01, 0x00, -1, 0x02, 0x0008, 0x0004),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0008, 0x0005),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0008, 0x0006),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0008, 0x0007),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0008, 0x0008),
				new CmdLutElement(0x01, 0x00, -1, 0x03, 0x0008, 0x0009),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0000, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0000, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0000, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0000, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0000, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0000, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0000, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0000, 0x0036),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0001, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0001, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0001, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0001, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0001, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0001, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0001, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0001, 0x0036),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0002, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0002, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0002, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0002, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0002, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0002, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0002, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0002, 0x0036),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0003, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0003, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0003, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0003, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0003, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0003, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0003, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0003, 0x0036),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0004, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0004, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0004, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0004, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0004, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0004, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0004, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0004, 0x0036),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0005, 0x000a),
				new CmdLutElement(0x00, 0x01, -1, 0x03, 0x0005, 0x000c),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0005, 0x000e),
				new CmdLutElement(0x00, 0x02, -1, 0x03, 0x0005, 0x0012),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0005, 0x0016),
				new CmdLutElement(0x00, 0x03, -1, 0x03, 0x0005, 0x001e),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0005, 0x0026),
				new CmdLutElement(0x00, 0x04, -1, 0x03, 0x0005, 0x0036),
				new CmdLutElement(0x01, 0x01, -1, 0x03, 0x0006, 0x000a),
				new CmdLutElement(0x01, 0x01, -1, 0x03, 0x0006, 0x000c),
				new CmdLutElement(0x01, 0x02, -1, 0x03, 0x0006, 0x000e),
				new CmdLutElement(0x01, 0x02, -1, 0x03, 0x0006, 0x0012),
				new CmdLutElement(0x01, 0x03, -1, 0x03, 0x0006, 0x0016),
				new CmdLutElement(0x01, 0x03, -1, 0x03, 0x0006, 0x001e),
				new CmdLutElement(0x01, 0x04, -1, 0x03, 0x0006, 0x0026),
				new CmdLutElement(0x01, 0x04, -1, 0x03, 0x0006, 0x0036),
				new CmdLutElement(0x01, 0x01, -1, 0x03, 0x0008, 0x000a),
				new CmdLutElement(0x01, 0x01, -1, 0x03, 0x0008, 0x000c),
				new CmdLutElement(0x01, 0x02, -1, 0x03, 0x0008, 0x000e),
				new CmdLutElement(0x01, 0x02, -1, 0x03, 0x0008, 0x0012),
				new CmdLutElement(0x01, 0x03, -1, 0x03, 0x0008, 0x0016),
				new CmdLutElement(0x01, 0x03, -1, 0x03, 0x0008, 0x001e),
				new CmdLutElement(0x01, 0x04, -1, 0x03, 0x0008, 0x0026),
				new CmdLutElement(0x01, 0x04, -1, 0x03, 0x0008, 0x0036),
				new CmdLutElement(0x02, 0x00, -1, 0x00, 0x000a, 0x0002),
				new CmdLutElement(0x02, 0x00, -1, 0x01, 0x000a, 0x0003),
				new CmdLutElement(0x02, 0x00, -1, 0x02, 0x000a, 0x0004),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000a, 0x0005),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000a, 0x0006),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000a, 0x0007),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000a, 0x0008),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000a, 0x0009),
				new CmdLutElement(0x02, 0x00, -1, 0x00, 0x000e, 0x0002),
				new CmdLutElement(0x02, 0x00, -1, 0x01, 0x000e, 0x0003),
				new CmdLutElement(0x02, 0x00, -1, 0x02, 0x000e, 0x0004),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000e, 0x0005),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000e, 0x0006),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000e, 0x0007),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000e, 0x0008),
				new CmdLutElement(0x02, 0x00, -1, 0x03, 0x000e, 0x0009),
				new CmdLutElement(0x03, 0x00, -1, 0x00, 0x0012, 0x0002),
				new CmdLutElement(0x03, 0x00, -1, 0x01, 0x0012, 0x0003),
				new CmdLutElement(0x03, 0x00, -1, 0x02, 0x0012, 0x0004),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x0012, 0x0005),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x0012, 0x0006),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x0012, 0x0007),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x0012, 0x0008),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x0012, 0x0009),
				new CmdLutElement(0x03, 0x00, -1, 0x00, 0x001a, 0x0002),
				new CmdLutElement(0x03, 0x00, -1, 0x01, 0x001a, 0x0003),
				new CmdLutElement(0x03, 0x00, -1, 0x02, 0x001a, 0x0004),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x001a, 0x0005),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x001a, 0x0006),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x001a, 0x0007),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x001a, 0x0008),
				new CmdLutElement(0x03, 0x00, -1, 0x03, 0x001a, 0x0009),
				new CmdLutElement(0x04, 0x00, -1, 0x00, 0x0022, 0x0002),
				new CmdLutElement(0x04, 0x00, -1, 0x01, 0x0022, 0x0003),
				new CmdLutElement(0x04, 0x00, -1, 0x02, 0x0022, 0x0004),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0022, 0x0005),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0022, 0x0006),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0022, 0x0007),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0022, 0x0008),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0022, 0x0009),
				new CmdLutElement(0x04, 0x00, -1, 0x00, 0x0032, 0x0002),
				new CmdLutElement(0x04, 0x00, -1, 0x01, 0x0032, 0x0003),
				new CmdLutElement(0x04, 0x00, -1, 0x02, 0x0032, 0x0004),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0032, 0x0005),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0032, 0x0006),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0032, 0x0007),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0032, 0x0008),
				new CmdLutElement(0x04, 0x00, -1, 0x03, 0x0032, 0x0009),
				new CmdLutElement(0x05, 0x00, -1, 0x00, 0x0042, 0x0002),
				new CmdLutElement(0x05, 0x00, -1, 0x01, 0x0042, 0x0003),
				new CmdLutElement(0x05, 0x00, -1, 0x02, 0x0042, 0x0004),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0042, 0x0005),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0042, 0x0006),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0042, 0x0007),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0042, 0x0008),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0042, 0x0009),
				new CmdLutElement(0x05, 0x00, -1, 0x00, 0x0062, 0x0002),
				new CmdLutElement(0x05, 0x00, -1, 0x01, 0x0062, 0x0003),
				new CmdLutElement(0x05, 0x00, -1, 0x02, 0x0062, 0x0004),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0062, 0x0005),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0062, 0x0006),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0062, 0x0007),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0062, 0x0008),
				new CmdLutElement(0x05, 0x00, -1, 0x03, 0x0062, 0x0009),
				new CmdLutElement(0x02, 0x01, -1, 0x03, 0x000a, 0x000a),
				new CmdLutElement(0x02, 0x01, -1, 0x03, 0x000a, 0x000c),
				new CmdLutElement(0x02, 0x02, -1, 0x03, 0x000a, 0x000e),
				new CmdLutElement(0x02, 0x02, -1, 0x03, 0x000a, 0x0012),
				new CmdLutElement(0x02, 0x03, -1, 0x03, 0x000a, 0x0016),
				new CmdLutElement(0x02, 0x03, -1, 0x03, 0x000a, 0x001e),
				new CmdLutElement(0x02, 0x04, -1, 0x03, 0x000a, 0x0026),
				new CmdLutElement(0x02, 0x04, -1, 0x03, 0x000a, 0x0036),
				new CmdLutElement(0x02, 0x01, -1, 0x03, 0x000e, 0x000a),
				new CmdLutElement(0x02, 0x01, -1, 0x03, 0x000e, 0x000c),
				new CmdLutElement(0x02, 0x02, -1, 0x03, 0x000e, 0x000e),
				new CmdLutElement(0x02, 0x02, -1, 0x03, 0x000e, 0x0012),
				new CmdLutElement(0x02, 0x03, -1, 0x03, 0x000e, 0x0016),
				new CmdLutElement(0x02, 0x03, -1, 0x03, 0x000e, 0x001e),
				new CmdLutElement(0x02, 0x04, -1, 0x03, 0x000e, 0x0026),
				new CmdLutElement(0x02, 0x04, -1, 0x03, 0x000e, 0x0036),
				new CmdLutElement(0x03, 0x01, -1, 0x03, 0x0012, 0x000a),
				new CmdLutElement(0x03, 0x01, -1, 0x03, 0x0012, 0x000c),
				new CmdLutElement(0x03, 0x02, -1, 0x03, 0x0012, 0x000e),
				new CmdLutElement(0x03, 0x02, -1, 0x03, 0x0012, 0x0012),
				new CmdLutElement(0x03, 0x03, -1, 0x03, 0x0012, 0x0016),
				new CmdLutElement(0x03, 0x03, -1, 0x03, 0x0012, 0x001e),
				new CmdLutElement(0x03, 0x04, -1, 0x03, 0x0012, 0x0026),
				new CmdLutElement(0x03, 0x04, -1, 0x03, 0x0012, 0x0036),
				new CmdLutElement(0x03, 0x01, -1, 0x03, 0x001a, 0x000a),
				new CmdLutElement(0x03, 0x01, -1, 0x03, 0x001a, 0x000c),
				new CmdLutElement(0x03, 0x02, -1, 0x03, 0x001a, 0x000e),
				new CmdLutElement(0x03, 0x02, -1, 0x03, 0x001a, 0x0012),
				new CmdLutElement(0x03, 0x03, -1, 0x03, 0x001a, 0x0016),
				new CmdLutElement(0x03, 0x03, -1, 0x03, 0x001a, 0x001e),
				new CmdLutElement(0x03, 0x04, -1, 0x03, 0x001a, 0x0026),
				new CmdLutElement(0x03, 0x04, -1, 0x03, 0x001a, 0x0036),
				new CmdLutElement(0x04, 0x01, -1, 0x03, 0x0022, 0x000a),
				new CmdLutElement(0x04, 0x01, -1, 0x03, 0x0022, 0x000c),
				new CmdLutElement(0x04, 0x02, -1, 0x03, 0x0022, 0x000e),
				new CmdLutElement(0x04, 0x02, -1, 0x03, 0x0022, 0x0012),
				new CmdLutElement(0x04, 0x03, -1, 0x03, 0x0022, 0x0016),
				new CmdLutElement(0x04, 0x03, -1, 0x03, 0x0022, 0x001e),
				new CmdLutElement(0x04, 0x04, -1, 0x03, 0x0022, 0x0026),
				new CmdLutElement(0x04, 0x04, -1, 0x03, 0x0022, 0x0036),
				new CmdLutElement(0x04, 0x01, -1, 0x03, 0x0032, 0x000a),
				new CmdLutElement(0x04, 0x01, -1, 0x03, 0x0032, 0x000c),
				new CmdLutElement(0x04, 0x02, -1, 0x03, 0x0032, 0x000e),
				new CmdLutElement(0x04, 0x02, -1, 0x03, 0x0032, 0x0012),
				new CmdLutElement(0x04, 0x03, -1, 0x03, 0x0032, 0x0016),
				new CmdLutElement(0x04, 0x03, -1, 0x03, 0x0032, 0x001e),
				new CmdLutElement(0x04, 0x04, -1, 0x03, 0x0032, 0x0026),
				new CmdLutElement(0x04, 0x04, -1, 0x03, 0x0032, 0x0036),
				new CmdLutElement(0x05, 0x01, -1, 0x03, 0x0042, 0x000a),
				new CmdLutElement(0x05, 0x01, -1, 0x03, 0x0042, 0x000c),
				new CmdLutElement(0x05, 0x02, -1, 0x03, 0x0042, 0x000e),
				new CmdLutElement(0x05, 0x02, -1, 0x03, 0x0042, 0x0012),
				new CmdLutElement(0x05, 0x03, -1, 0x03, 0x0042, 0x0016),
				new CmdLutElement(0x05, 0x03, -1, 0x03, 0x0042, 0x001e),
				new CmdLutElement(0x05, 0x04, -1, 0x03, 0x0042, 0x0026),
				new CmdLutElement(0x05, 0x04, -1, 0x03, 0x0042, 0x0036),
				new CmdLutElement(0x05, 0x01, -1, 0x03, 0x0062, 0x000a),
				new CmdLutElement(0x05, 0x01, -1, 0x03, 0x0062, 0x000c),
				new CmdLutElement(0x05, 0x02, -1, 0x03, 0x0062, 0x000e),
				new CmdLutElement(0x05, 0x02, -1, 0x03, 0x0062, 0x0012),
				new CmdLutElement(0x05, 0x03, -1, 0x03, 0x0062, 0x0016),
				new CmdLutElement(0x05, 0x03, -1, 0x03, 0x0062, 0x001e),
				new CmdLutElement(0x05, 0x04, -1, 0x03, 0x0062, 0x0026),
				new CmdLutElement(0x05, 0x04, -1, 0x03, 0x0062, 0x0036),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0000, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0000, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0000, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0000, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0000, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0000, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0000, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0000, 0x0846),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0001, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0001, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0001, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0001, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0001, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0001, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0001, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0001, 0x0846),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0002, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0002, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0002, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0002, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0002, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0002, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0002, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0002, 0x0846),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0003, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0003, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0003, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0003, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0003, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0003, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0003, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0003, 0x0846),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0004, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0004, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0004, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0004, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0004, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0004, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0004, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0004, 0x0846),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0005, 0x0046),
				new CmdLutElement(0x00, 0x05, -1, 0x03, 0x0005, 0x0066),
				new CmdLutElement(0x00, 0x06, -1, 0x03, 0x0005, 0x0086),
				new CmdLutElement(0x00, 0x07, -1, 0x03, 0x0005, 0x00c6),
				new CmdLutElement(0x00, 0x08, -1, 0x03, 0x0005, 0x0146),
				new CmdLutElement(0x00, 0x09, -1, 0x03, 0x0005, 0x0246),
				new CmdLutElement(0x00, 0x0a, -1, 0x03, 0x0005, 0x0446),
				new CmdLutElement(0x00, 0x18, -1, 0x03, 0x0005, 0x0846),
				new CmdLutElement(0x01, 0x05, -1, 0x03, 0x0006, 0x0046),
				new CmdLutElement(0x01, 0x05, -1, 0x03, 0x0006, 0x0066),
				new CmdLutElement(0x01, 0x06, -1, 0x03, 0x0006, 0x0086),
				new CmdLutElement(0x01, 0x07, -1, 0x03, 0x0006, 0x00c6),
				new CmdLutElement(0x01, 0x08, -1, 0x03, 0x0006, 0x0146),
				new CmdLutElement(0x01, 0x09, -1, 0x03, 0x0006, 0x0246),
				new CmdLutElement(0x01, 0x0a, -1, 0x03, 0x0006, 0x0446),
				new CmdLutElement(0x01, 0x18, -1, 0x03, 0x0006, 0x0846),
				new CmdLutElement(0x01, 0x05, -1, 0x03, 0x0008, 0x0046),
				new CmdLutElement(0x01, 0x05, -1, 0x03, 0x0008, 0x0066),
				new CmdLutElement(0x01, 0x06, -1, 0x03, 0x0008, 0x0086),
				new CmdLutElement(0x01, 0x07, -1, 0x03, 0x0008, 0x00c6),
				new CmdLutElement(0x01, 0x08, -1, 0x03, 0x0008, 0x0146),
				new CmdLutElement(0x01, 0x09, -1, 0x03, 0x0008, 0x0246),
				new CmdLutElement(0x01, 0x0a, -1, 0x03, 0x0008, 0x0446),
				new CmdLutElement(0x01, 0x18, -1, 0x03, 0x0008, 0x0846),
				new CmdLutElement(0x06, 0x00, -1, 0x00, 0x0082, 0x0002),
				new CmdLutElement(0x06, 0x00, -1, 0x01, 0x0082, 0x0003),
				new CmdLutElement(0x06, 0x00, -1, 0x02, 0x0082, 0x0004),
				new CmdLutElement(0x06, 0x00, -1, 0x03, 0x0082, 0x0005),
				new CmdLutElement(0x06, 0x00, -1, 0x03, 0x0082, 0x0006),
				new CmdLutElement(0x06, 0x00, -1, 0x03, 0x0082, 0x0007),
				new CmdLutElement(0x06, 0x00, -1, 0x03, 0x0082, 0x0008),
				new CmdLutElement(0x06, 0x00, -1, 0x03, 0x0082, 0x0009),
				new CmdLutElement(0x07, 0x00, -1, 0x00, 0x00c2, 0x0002),
				new CmdLutElement(0x07, 0x00, -1, 0x01, 0x00c2, 0x0003),
				new CmdLutElement(0x07, 0x00, -1, 0x02, 0x00c2, 0x0004),
				new CmdLutElement(0x07, 0x00, -1, 0x03, 0x00c2, 0x0005),
				new CmdLutElement(0x07, 0x00, -1, 0x03, 0x00c2, 0x0006),
				new CmdLutElement(0x07, 0x00, -1, 0x03, 0x00c2, 0x0007),
				new CmdLutElement(0x07, 0x00, -1, 0x03, 0x00c2, 0x0008),
				new CmdLutElement(0x07, 0x00, -1, 0x03, 0x00c2, 0x0009),
				new CmdLutElement(0x08, 0x00, -1, 0x00, 0x0142, 0x0002),
				new CmdLutElement(0x08, 0x00, -1, 0x01, 0x0142, 0x0003),
				new CmdLutElement(0x08, 0x00, -1, 0x02, 0x0142, 0x0004),
				new CmdLutElement(0x08, 0x00, -1, 0x03, 0x0142, 0x0005),
				new CmdLutElement(0x08, 0x00, -1, 0x03, 0x0142, 0x0006),
				new CmdLutElement(0x08, 0x00, -1, 0x03, 0x0142, 0x0007),
				new CmdLutElement(0x08, 0x00, -1, 0x03, 0x0142, 0x0008),
				new CmdLutElement(0x08, 0x00, -1, 0x03, 0x0142, 0x0009),
				new CmdLutElement(0x09, 0x00, -1, 0x00, 0x0242, 0x0002),
				new CmdLutElement(0x09, 0x00, -1, 0x01, 0x0242, 0x0003),
				new CmdLutElement(0x09, 0x00, -1, 0x02, 0x0242, 0x0004),
				new CmdLutElement(0x09, 0x00, -1, 0x03, 0x0242, 0x0005),
				new CmdLutElement(0x09, 0x00, -1, 0x03, 0x0242, 0x0006),
				new CmdLutElement(0x09, 0x00, -1, 0x03, 0x0242, 0x0007),
				new CmdLutElement(0x09, 0x00, -1, 0x03, 0x0242, 0x0008),
				new CmdLutElement(0x09, 0x00, -1, 0x03, 0x0242, 0x0009),
				new CmdLutElement(0x0a, 0x00, -1, 0x00, 0x0442, 0x0002),
				new CmdLutElement(0x0a, 0x00, -1, 0x01, 0x0442, 0x0003),
				new CmdLutElement(0x0a, 0x00, -1, 0x02, 0x0442, 0x0004),
				new CmdLutElement(0x0a, 0x00, -1, 0x03, 0x0442, 0x0005),
				new CmdLutElement(0x0a, 0x00, -1, 0x03, 0x0442, 0x0006),
				new CmdLutElement(0x0a, 0x00, -1, 0x03, 0x0442, 0x0007),
				new CmdLutElement(0x0a, 0x00, -1, 0x03, 0x0442, 0x0008),
				new CmdLutElement(0x0a, 0x00, -1, 0x03, 0x0442, 0x0009),
				new CmdLutElement(0x0c, 0x00, -1, 0x00, 0x0842, 0x0002),
				new CmdLutElement(0x0c, 0x00, -1, 0x01, 0x0842, 0x0003),
				new CmdLutElement(0x0c, 0x00, -1, 0x02, 0x0842, 0x0004),
				new CmdLutElement(0x0c, 0x00, -1, 0x03, 0x0842, 0x0005),
				new CmdLutElement(0x0c, 0x00, -1, 0x03, 0x0842, 0x0006),
				new CmdLutElement(0x0c, 0x00, -1, 0x03, 0x0842, 0x0007),
				new CmdLutElement(0x0c, 0x00, -1, 0x03, 0x0842, 0x0008),
				new CmdLutElement(0x0c, 0x00, -1, 0x03, 0x0842, 0x0009),
				new CmdLutElement(0x0e, 0x00, -1, 0x00, 0x1842, 0x0002),
				new CmdLutElement(0x0e, 0x00, -1, 0x01, 0x1842, 0x0003),
				new CmdLutElement(0x0e, 0x00, -1, 0x02, 0x1842, 0x0004),
				new CmdLutElement(0x0e, 0x00, -1, 0x03, 0x1842, 0x0005),
				new CmdLutElement(0x0e, 0x00, -1, 0x03, 0x1842, 0x0006),
				new CmdLutElement(0x0e, 0x00, -1, 0x03, 0x1842, 0x0007),
				new CmdLutElement(0x0e, 0x00, -1, 0x03, 0x1842, 0x0008),
				new CmdLutElement(0x0e, 0x00, -1, 0x03, 0x1842, 0x0009),
				new CmdLutElement(0x18, 0x00, -1, 0x00, 0x5842, 0x0002),
				new CmdLutElement(0x18, 0x00, -1, 0x01, 0x5842, 0x0003),
				new CmdLutElement(0x18, 0x00, -1, 0x02, 0x5842, 0x0004),
				new CmdLutElement(0x18, 0x00, -1, 0x03, 0x5842, 0x0005),
				new CmdLutElement(0x18, 0x00, -1, 0x03, 0x5842, 0x0006),
				new CmdLutElement(0x18, 0x00, -1, 0x03, 0x5842, 0x0007),
				new CmdLutElement(0x18, 0x00, -1, 0x03, 0x5842, 0x0008),
				new CmdLutElement(0x18, 0x00, -1, 0x03, 0x5842, 0x0009),
				new CmdLutElement(0x02, 0x05, -1, 0x03, 0x000a, 0x0046),
				new CmdLutElement(0x02, 0x05, -1, 0x03, 0x000a, 0x0066),
				new CmdLutElement(0x02, 0x06, -1, 0x03, 0x000a, 0x0086),
				new CmdLutElement(0x02, 0x07, -1, 0x03, 0x000a, 0x00c6),
				new CmdLutElement(0x02, 0x08, -1, 0x03, 0x000a, 0x0146),
				new CmdLutElement(0x02, 0x09, -1, 0x03, 0x000a, 0x0246),
				new CmdLutElement(0x02, 0x0a, -1, 0x03, 0x000a, 0x0446),
				new CmdLutElement(0x02, 0x18, -1, 0x03, 0x000a, 0x0846),
				new CmdLutElement(0x02, 0x05, -1, 0x03, 0x000e, 0x0046),
				new CmdLutElement(0x02, 0x05, -1, 0x03, 0x000e, 0x0066),
				new CmdLutElement(0x02, 0x06, -1, 0x03, 0x000e, 0x0086),
				new CmdLutElement(0x02, 0x07, -1, 0x03, 0x000e, 0x00c6),
				new CmdLutElement(0x02, 0x08, -1, 0x03, 0x000e, 0x0146),
				new CmdLutElement(0x02, 0x09, -1, 0x03, 0x000e, 0x0246),
				new CmdLutElement(0x02, 0x0a, -1, 0x03, 0x000e, 0x0446),
				new CmdLutElement(0x02, 0x18, -1, 0x03, 0x000e, 0x0846),
				new CmdLutElement(0x03, 0x05, -1, 0x03, 0x0012, 0x0046),
				new CmdLutElement(0x03, 0x05, -1, 0x03, 0x0012, 0x0066),
				new CmdLutElement(0x03, 0x06, -1, 0x03, 0x0012, 0x0086),
				new CmdLutElement(0x03, 0x07, -1, 0x03, 0x0012, 0x00c6),
				new CmdLutElement(0x03, 0x08, -1, 0x03, 0x0012, 0x0146),
				new CmdLutElement(0x03, 0x09, -1, 0x03, 0x0012, 0x0246),
				new CmdLutElement(0x03, 0x0a, -1, 0x03, 0x0012, 0x0446),
				new CmdLutElement(0x03, 0x18, -1, 0x03, 0x0012, 0x0846),
				new CmdLutElement(0x03, 0x05, -1, 0x03, 0x001a, 0x0046),
				new CmdLutElement(0x03, 0x05, -1, 0x03, 0x001a, 0x0066),
				new CmdLutElement(0x03, 0x06, -1, 0x03, 0x001a, 0x0086),
				new CmdLutElement(0x03, 0x07, -1, 0x03, 0x001a, 0x00c6),
				new CmdLutElement(0x03, 0x08, -1, 0x03, 0x001a, 0x0146),
				new CmdLutElement(0x03, 0x09, -1, 0x03, 0x001a, 0x0246),
				new CmdLutElement(0x03, 0x0a, -1, 0x03, 0x001a, 0x0446),
				new CmdLutElement(0x03, 0x18, -1, 0x03, 0x001a, 0x0846),
				new CmdLutElement(0x04, 0x05, -1, 0x03, 0x0022, 0x0046),
				new CmdLutElement(0x04, 0x05, -1, 0x03, 0x0022, 0x0066),
				new CmdLutElement(0x04, 0x06, -1, 0x03, 0x0022, 0x0086),
				new CmdLutElement(0x04, 0x07, -1, 0x03, 0x0022, 0x00c6),
				new CmdLutElement(0x04, 0x08, -1, 0x03, 0x0022, 0x0146),
				new CmdLutElement(0x04, 0x09, -1, 0x03, 0x0022, 0x0246),
				new CmdLutElement(0x04, 0x0a, -1, 0x03, 0x0022, 0x0446),
				new CmdLutElement(0x04, 0x18, -1, 0x03, 0x0022, 0x0846),
				new CmdLutElement(0x04, 0x05, -1, 0x03, 0x0032, 0x0046),
				new CmdLutElement(0x04, 0x05, -1, 0x03, 0x0032, 0x0066),
				new CmdLutElement(0x04, 0x06, -1, 0x03, 0x0032, 0x0086),
				new CmdLutElement(0x04, 0x07, -1, 0x03, 0x0032, 0x00c6),
				new CmdLutElement(0x04, 0x08, -1, 0x03, 0x0032, 0x0146),
				new CmdLutElement(0x04, 0x09, -1, 0x03, 0x0032, 0x0246),
				new CmdLutElement(0x04, 0x0a, -1, 0x03, 0x0032, 0x0446),
				new CmdLutElement(0x04, 0x18, -1, 0x03, 0x0032, 0x0846),
				new CmdLutElement(0x05, 0x05, -1, 0x03, 0x0042, 0x0046),
				new CmdLutElement(0x05, 0x05, -1, 0x03, 0x0042, 0x0066),
				new CmdLutElement(0x05, 0x06, -1, 0x03, 0x0042, 0x0086),
				new CmdLutElement(0x05, 0x07, -1, 0x03, 0x0042, 0x00c6),
				new CmdLutElement(0x05, 0x08, -1, 0x03, 0x0042, 0x0146),
				new CmdLutElement(0x05, 0x09, -1, 0x03, 0x0042, 0x0246),
				new CmdLutElement(0x05, 0x0a, -1, 0x03, 0x0042, 0x0446),
				new CmdLutElement(0x05, 0x18, -1, 0x03, 0x0042, 0x0846),
				new CmdLutElement(0x05, 0x05, -1, 0x03, 0x0062, 0x0046),
				new CmdLutElement(0x05, 0x05, -1, 0x03, 0x0062, 0x0066),
				new CmdLutElement(0x05, 0x06, -1, 0x03, 0x0062, 0x0086),
				new CmdLutElement(0x05, 0x07, -1, 0x03, 0x0062, 0x00c6),
				new CmdLutElement(0x05, 0x08, -1, 0x03, 0x0062, 0x0146),
				new CmdLutElement(0x05, 0x09, -1, 0x03, 0x0062, 0x0246),
				new CmdLutElement(0x05, 0x0a, -1, 0x03, 0x0062, 0x0446),
				new CmdLutElement(0x05, 0x18, -1, 0x03, 0x0062, 0x0846),
				new CmdLutElement(0x06, 0x01, -1, 0x03, 0x0082, 0x000a),
				new CmdLutElement(0x06, 0x01, -1, 0x03, 0x0082, 0x000c),
				new CmdLutElement(0x06, 0x02, -1, 0x03, 0x0082, 0x000e),
				new CmdLutElement(0x06, 0x02, -1, 0x03, 0x0082, 0x0012),
				new CmdLutElement(0x06, 0x03, -1, 0x03, 0x0082, 0x0016),
				new CmdLutElement(0x06, 0x03, -1, 0x03, 0x0082, 0x001e),
				new CmdLutElement(0x06, 0x04, -1, 0x03, 0x0082, 0x0026),
				new CmdLutElement(0x06, 0x04, -1, 0x03, 0x0082, 0x0036),
				new CmdLutElement(0x07, 0x01, -1, 0x03, 0x00c2, 0x000a),
				new CmdLutElement(0x07, 0x01, -1, 0x03, 0x00c2, 0x000c),
				new CmdLutElement(0x07, 0x02, -1, 0x03, 0x00c2, 0x000e),
				new CmdLutElement(0x07, 0x02, -1, 0x03, 0x00c2, 0x0012),
				new CmdLutElement(0x07, 0x03, -1, 0x03, 0x00c2, 0x0016),
				new CmdLutElement(0x07, 0x03, -1, 0x03, 0x00c2, 0x001e),
				new CmdLutElement(0x07, 0x04, -1, 0x03, 0x00c2, 0x0026),
				new CmdLutElement(0x07, 0x04, -1, 0x03, 0x00c2, 0x0036),
				new CmdLutElement(0x08, 0x01, -1, 0x03, 0x0142, 0x000a),
				new CmdLutElement(0x08, 0x01, -1, 0x03, 0x0142, 0x000c),
				new CmdLutElement(0x08, 0x02, -1, 0x03, 0x0142, 0x000e),
				new CmdLutElement(0x08, 0x02, -1, 0x03, 0x0142, 0x0012),
				new CmdLutElement(0x08, 0x03, -1, 0x03, 0x0142, 0x0016),
				new CmdLutElement(0x08, 0x03, -1, 0x03, 0x0142, 0x001e),
				new CmdLutElement(0x08, 0x04, -1, 0x03, 0x0142, 0x0026),
				new CmdLutElement(0x08, 0x04, -1, 0x03, 0x0142, 0x0036),
				new CmdLutElement(0x09, 0x01, -1, 0x03, 0x0242, 0x000a),
				new CmdLutElement(0x09, 0x01, -1, 0x03, 0x0242, 0x000c),
				new CmdLutElement(0x09, 0x02, -1, 0x03, 0x0242, 0x000e),
				new CmdLutElement(0x09, 0x02, -1, 0x03, 0x0242, 0x0012),
				new CmdLutElement(0x09, 0x03, -1, 0x03, 0x0242, 0x0016),
				new CmdLutElement(0x09, 0x03, -1, 0x03, 0x0242, 0x001e),
				new CmdLutElement(0x09, 0x04, -1, 0x03, 0x0242, 0x0026),
				new CmdLutElement(0x09, 0x04, -1, 0x03, 0x0242, 0x0036),
				new CmdLutElement(0x0a, 0x01, -1, 0x03, 0x0442, 0x000a),
				new CmdLutElement(0x0a, 0x01, -1, 0x03, 0x0442, 0x000c),
				new CmdLutElement(0x0a, 0x02, -1, 0x03, 0x0442, 0x000e),
				new CmdLutElement(0x0a, 0x02, -1, 0x03, 0x0442, 0x0012),
				new CmdLutElement(0x0a, 0x03, -1, 0x03, 0x0442, 0x0016),
				new CmdLutElement(0x0a, 0x03, -1, 0x03, 0x0442, 0x001e),
				new CmdLutElement(0x0a, 0x04, -1, 0x03, 0x0442, 0x0026),
				new CmdLutElement(0x0a, 0x04, -1, 0x03, 0x0442, 0x0036),
				new CmdLutElement(0x0c, 0x01, -1, 0x03, 0x0842, 0x000a),
				new CmdLutElement(0x0c, 0x01, -1, 0x03, 0x0842, 0x000c),
				new CmdLutElement(0x0c, 0x02, -1, 0x03, 0x0842, 0x000e),
				new CmdLutElement(0x0c, 0x02, -1, 0x03, 0x0842, 0x0012),
				new CmdLutElement(0x0c, 0x03, -1, 0x03, 0x0842, 0x0016),
				new CmdLutElement(0x0c, 0x03, -1, 0x03, 0x0842, 0x001e),
				new CmdLutElement(0x0c, 0x04, -1, 0x03, 0x0842, 0x0026),
				new CmdLutElement(0x0c, 0x04, -1, 0x03, 0x0842, 0x0036),
				new CmdLutElement(0x0e, 0x01, -1, 0x03, 0x1842, 0x000a),
				new CmdLutElement(0x0e, 0x01, -1, 0x03, 0x1842, 0x000c),
				new CmdLutElement(0x0e, 0x02, -1, 0x03, 0x1842, 0x000e),
				new CmdLutElement(0x0e, 0x02, -1, 0x03, 0x1842, 0x0012),
				new CmdLutElement(0x0e, 0x03, -1, 0x03, 0x1842, 0x0016),
				new CmdLutElement(0x0e, 0x03, -1, 0x03, 0x1842, 0x001e),
				new CmdLutElement(0x0e, 0x04, -1, 0x03, 0x1842, 0x0026),
				new CmdLutElement(0x0e, 0x04, -1, 0x03, 0x1842, 0x0036),
				new CmdLutElement(0x18, 0x01, -1, 0x03, 0x5842, 0x000a),
				new CmdLutElement(0x18, 0x01, -1, 0x03, 0x5842, 0x000c),
				new CmdLutElement(0x18, 0x02, -1, 0x03, 0x5842, 0x000e),
				new CmdLutElement(0x18, 0x02, -1, 0x03, 0x5842, 0x0012),
				new CmdLutElement(0x18, 0x03, -1, 0x03, 0x5842, 0x0016),
				new CmdLutElement(0x18, 0x03, -1, 0x03, 0x5842, 0x001e),
				new CmdLutElement(0x18, 0x04, -1, 0x03, 0x5842, 0x0026),
				new CmdLutElement(0x18, 0x04, -1, 0x03, 0x5842, 0x0036),
				new CmdLutElement(0x06, 0x05, -1, 0x03, 0x0082, 0x0046),
				new CmdLutElement(0x06, 0x05, -1, 0x03, 0x0082, 0x0066),
				new CmdLutElement(0x06, 0x06, -1, 0x03, 0x0082, 0x0086),
				new CmdLutElement(0x06, 0x07, -1, 0x03, 0x0082, 0x00c6),
				new CmdLutElement(0x06, 0x08, -1, 0x03, 0x0082, 0x0146),
				new CmdLutElement(0x06, 0x09, -1, 0x03, 0x0082, 0x0246),
				new CmdLutElement(0x06, 0x0a, -1, 0x03, 0x0082, 0x0446),
				new CmdLutElement(0x06, 0x18, -1, 0x03, 0x0082, 0x0846),
				new CmdLutElement(0x07, 0x05, -1, 0x03, 0x00c2, 0x0046),
				new CmdLutElement(0x07, 0x05, -1, 0x03, 0x00c2, 0x0066),
				new CmdLutElement(0x07, 0x06, -1, 0x03, 0x00c2, 0x0086),
				new CmdLutElement(0x07, 0x07, -1, 0x03, 0x00c2, 0x00c6),
				new CmdLutElement(0x07, 0x08, -1, 0x03, 0x00c2, 0x0146),
				new CmdLutElement(0x07, 0x09, -1, 0x03, 0x00c2, 0x0246),
				new CmdLutElement(0x07, 0x0a, -1, 0x03, 0x00c2, 0x0446),
				new CmdLutElement(0x07, 0x18, -1, 0x03, 0x00c2, 0x0846),
				new CmdLutElement(0x08, 0x05, -1, 0x03, 0x0142, 0x0046),
				new CmdLutElement(0x08, 0x05, -1, 0x03, 0x0142, 0x0066),
				new CmdLutElement(0x08, 0x06, -1, 0x03, 0x0142, 0x0086),
				new CmdLutElement(0x08, 0x07, -1, 0x03, 0x0142, 0x00c6),
				new CmdLutElement(0x08, 0x08, -1, 0x03, 0x0142, 0x0146),
				new CmdLutElement(0x08, 0x09, -1, 0x03, 0x0142, 0x0246),
				new CmdLutElement(0x08, 0x0a, -1, 0x03, 0x0142, 0x0446),
				new CmdLutElement(0x08, 0x18, -1, 0x03, 0x0142, 0x0846),
				new CmdLutElement(0x09, 0x05, -1, 0x03, 0x0242, 0x0046),
				new CmdLutElement(0x09, 0x05, -1, 0x03, 0x0242, 0x0066),
				new CmdLutElement(0x09, 0x06, -1, 0x03, 0x0242, 0x0086),
				new CmdLutElement(0x09, 0x07, -1, 0x03, 0x0242, 0x00c6),
				new CmdLutElement(0x09, 0x08, -1, 0x03, 0x0242, 0x0146),
				new CmdLutElement(0x09, 0x09, -1, 0x03, 0x0242, 0x0246),
				new CmdLutElement(0x09, 0x0a, -1, 0x03, 0x0242, 0x0446),
				new CmdLutElement(0x09, 0x18, -1, 0x03, 0x0242, 0x0846),
				new CmdLutElement(0x0a, 0x05, -1, 0x03, 0x0442, 0x0046),
				new CmdLutElement(0x0a, 0x05, -1, 0x03, 0x0442, 0x0066),
				new CmdLutElement(0x0a, 0x06, -1, 0x03, 0x0442, 0x0086),
				new CmdLutElement(0x0a, 0x07, -1, 0x03, 0x0442, 0x00c6),
				new CmdLutElement(0x0a, 0x08, -1, 0x03, 0x0442, 0x0146),
				new CmdLutElement(0x0a, 0x09, -1, 0x03, 0x0442, 0x0246),
				new CmdLutElement(0x0a, 0x0a, -1, 0x03, 0x0442, 0x0446),
				new CmdLutElement(0x0a, 0x18, -1, 0x03, 0x0442, 0x0846),
				new CmdLutElement(0x0c, 0x05, -1, 0x03, 0x0842, 0x0046),
				new CmdLutElement(0x0c, 0x05, -1, 0x03, 0x0842, 0x0066),
				new CmdLutElement(0x0c, 0x06, -1, 0x03, 0x0842, 0x0086),
				new CmdLutElement(0x0c, 0x07, -1, 0x03, 0x0842, 0x00c6),
				new CmdLutElement(0x0c, 0x08, -1, 0x03, 0x0842, 0x0146),
				new CmdLutElement(0x0c, 0x09, -1, 0x03, 0x0842, 0x0246),
				new CmdLutElement(0x0c, 0x0a, -1, 0x03, 0x0842, 0x0446),
				new CmdLutElement(0x0c, 0x18, -1, 0x03, 0x0842, 0x0846),
				new CmdLutElement(0x0e, 0x05, -1, 0x03, 0x1842, 0x0046),
				new CmdLutElement(0x0e, 0x05, -1, 0x03, 0x1842, 0x0066),
				new CmdLutElement(0x0e, 0x06, -1, 0x03, 0x1842, 0x0086),
				new CmdLutElement(0x0e, 0x07, -1, 0x03, 0x1842, 0x00c6),
				new CmdLutElement(0x0e, 0x08, -1, 0x03, 0x1842, 0x0146),
				new CmdLutElement(0x0e, 0x09, -1, 0x03, 0x1842, 0x0246),
				new CmdLutElement(0x0e, 0x0a, -1, 0x03, 0x1842, 0x0446),
				new CmdLutElement(0x0e, 0x18, -1, 0x03, 0x1842, 0x0846),
				new CmdLutElement(0x18, 0x05, -1, 0x03, 0x5842, 0x0046),
				new CmdLutElement(0x18, 0x05, -1, 0x03, 0x5842, 0x0066),
				new CmdLutElement(0x18, 0x06, -1, 0x03, 0x5842, 0x0086),
				new CmdLutElement(0x18, 0x07, -1, 0x03, 0x5842, 0x00c6),
				new CmdLutElement(0x18, 0x08, -1, 0x03, 0x5842, 0x0146),
				new CmdLutElement(0x18, 0x09, -1, 0x03, 0x5842, 0x0246),
				new CmdLutElement(0x18, 0x0a, -1, 0x03, 0x5842, 0x0446),
				new CmdLutElement(0x18, 0x18, -1, 0x03, 0x5842, 0x0846)
			};

			private static readonly Transform[] kTransforms = {
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst1, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPtheSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_sSP, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPofSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPandSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst2, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast1, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_COMMASP, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPinSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPtoSP},
				new Enum[] {TransformID.kPFix_eSP, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DQUOTGT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_NEWLINE},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast3, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_CLOSEBR},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPforSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst3, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast2, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPaSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPthatSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_DOT, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst4, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPwithSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPfromSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPbySP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst5, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst6, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_SPtheSP, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast4, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DOTSPTheSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPonSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPasSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPisSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast7, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast1, TransformID.kPFix_ingSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_NEWLINETAB},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_COLON},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_edSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst9, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitFirst7, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast6, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_OPEN},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast8, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPatSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_lySP},
				new Enum[] {TransformID.kPFix_SPtheSP, WordTransformType.kIdentity, TransformID.kPFix_SPofSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast5, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kOmitLast9, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_DQUOT},
				new Enum[] {TransformID.kPFix_DOT, WordTransformType.kIdentity, TransformID.kPFix_OPEN},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_DQUOTGT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_DOTcomSLASH, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_SPtheSP, WordTransformType.kIdentity, TransformID.kPFix_SPofSPtheSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_SQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_DOTSPThisSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_COMMA},
				new Enum[] {TransformID.kPFix_DOT, WordTransformType.kIdentity, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_OPEN},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_SPnotSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_erSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_SP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_alSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_EQSQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_DQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_OPEN},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_fulSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_iveSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_lessSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_SQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_estSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_DQUOTGT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_EQSQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_COMMA},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_izeSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_NBSP, WordTransformType.kIdentity, TransformID.kPFix_EMPTY},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kIdentity, TransformID.kPFix_COMMA},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kIdentity, TransformID.kPFix_ousSP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseFirst, TransformID.kPFix_EQSQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_COMMA},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_COMMASP},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_COMMA},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_OPEN},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_DOT},
				new Enum[] {TransformID.kPFix_EMPTY, WordTransformType.kUppercaseAll, TransformID.kPFix_EQSQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_DOTSP},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_EQDQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseAll, TransformID.kPFix_EQSQUOT},
				new Enum[] {TransformID.kPFix_SP, WordTransformType.kUppercaseFirst, TransformID.kPFix_EQSQUOT}
			};

			private static readonly int kNumTransforms = kTransforms.Length;

			private static readonly byte[] kCodeLengthCodeOrder = { 1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

			/* Static prefix code for the complex code length code lengths. */

			private static readonly byte[] kCodeLengthPrefixLength = { 2, 2, 2, 3, 2, 2, 2, 4, 2, 2, 2, 3, 2, 2, 2, 4 };

			private static readonly byte[] kCodeLengthPrefixValue = { 0, 4, 3, 2, 0, 4, 3, 1, 0, 4, 3, 2, 0, 4, 3, 5 };


			private static readonly uint[] kBrotliDictionaryOffsetsByLength = { 0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248, 63488, 74752, 87040,
				93696, 100864, 104704, 106752, 108928, 113536, 115968, 118528, 119872, 121280, 122016 };

			private static readonly byte[] kBrotliDictionarySizeBitsByLength = { 0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 8, 7, 7, 6, 6, 5, 5 };

			private static readonly byte[] kBrotliDictionary = {
				0x74, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x66, 0x65, 0x6c,
				0x65, 0x66, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x61,
				0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x69, 0x74,
				0x65, 0x63, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x65, 0x6e, 0x6a, 0x75, 0x73, 0x74,
				0x6c, 0x69, 0x6b, 0x65, 0x66, 0x72, 0x65, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74,
				0x65, 0x78, 0x74, 0x79, 0x65, 0x61, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x6f,
				0x64, 0x79, 0x6c, 0x6f, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6f, 0x6f,
				0x6b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65,
				0x68, 0x65, 0x6c, 0x70, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6d,
				0x6f, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x68,
				0x65, 0x6d, 0x76, 0x69, 0x65, 0x77, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x67,
				0x65, 0x64, 0x61, 0x79, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x68, 0x65, 0x61, 0x64,
				0x74, 0x65, 0x72, 0x6d, 0x65, 0x61, 0x63, 0x68, 0x61, 0x72, 0x65, 0x61, 0x66,
				0x72, 0x6f, 0x6d, 0x74, 0x72, 0x75, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62,
				0x6c, 0x65, 0x75, 0x70, 0x6f, 0x6e, 0x68, 0x69, 0x67, 0x68, 0x64, 0x61, 0x74,
				0x65, 0x6c, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x76, 0x65, 0x6e,
				0x6e, 0x65, 0x78, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x74, 0x68, 0x70,
				0x6f, 0x73, 0x74, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x64, 0x65, 0x68, 0x61,
				0x6e, 0x64, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x61, 0x74, 0x6e, 0x61, 0x6d,
				0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x69, 0x7a, 0x65,
				0x62, 0x61, 0x73, 0x65, 0x68, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6b, 0x65, 0x6d,
				0x61, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x27, 0x29, 0x20, 0x2b, 0x68, 0x6f,
				0x6c, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77,
				0x73, 0x72, 0x65, 0x61, 0x64, 0x77, 0x65, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
				0x74, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x73,
				0x65, 0x65, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x77, 0x65,
				0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x73, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x6c,
				0x6d, 0x70, 0x61, 0x72, 0x74, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x68, 0x69, 0x73,
				0x6c, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x6e, 0x65, 0x65, 0x64, 0x77,
				0x61, 0x79, 0x73, 0x77, 0x65, 0x73, 0x74, 0x6a, 0x6f, 0x62, 0x73, 0x6d, 0x69,
				0x6e, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x63,
				0x68, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x65, 0x61, 0x6d,
				0x61, 0x72, 0x6d, 0x79, 0x66, 0x6f, 0x6f, 0x64, 0x6b, 0x69, 0x6e, 0x67, 0x77,
				0x69, 0x6c, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x77, 0x61, 0x72, 0x64, 0x62, 0x65,
				0x73, 0x74, 0x66, 0x69, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x6b, 0x6e, 0x6f,
				0x77, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x65,
				0x74, 0x68, 0x61, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x67, 0x69, 0x76, 0x65, 0x73,
				0x65, 0x6c, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x75, 0x63, 0x68, 0x66, 0x65,
				0x65, 0x64, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x63, 0x6f,
				0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x68, 0x69, 0x64, 0x65,
				0x64, 0x69, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x68,
				0x6f, 0x73, 0x74, 0x61, 0x6a, 0x61, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6c,
				0x75, 0x62, 0x6c, 0x61, 0x77, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x68, 0x61, 0x6c,
				0x66, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x63, 0x68, 0x7a, 0x6f, 0x6e, 0x65,
				0x31, 0x30, 0x30, 0x25, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x72, 0x65, 0x54,
				0x69, 0x6d, 0x65, 0x72, 0x61, 0x63, 0x65, 0x62, 0x6c, 0x75, 0x65, 0x66, 0x6f,
				0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x66, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x70,
				0x65, 0x67, 0x61, 0x76, 0x65, 0x68, 0x61, 0x72, 0x64, 0x6c, 0x6f, 0x73, 0x74,
				0x77, 0x68, 0x65, 0x6e, 0x70, 0x61, 0x72, 0x6b, 0x6b, 0x65, 0x70, 0x74, 0x70,
				0x61, 0x73, 0x73, 0x73, 0x68, 0x69, 0x70, 0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x54,
				0x4d, 0x4c, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x6f, 0x6e,
				0x65, 0x73, 0x61, 0x76, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x66, 0x6c, 0x61, 0x67,
				0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x6f, 0x6c, 0x64, 0x66, 0x69, 0x76, 0x65, 0x74,
				0x6f, 0x6f, 0x6b, 0x72, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x6a, 0x75,
				0x6d, 0x70, 0x74, 0x68, 0x75, 0x73, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x72,
				0x64, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x65, 0x61, 0x72, 0x73, 0x74, 0x61, 0x79,
				0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x68, 0x61, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x61,
				0x75, 0x74, 0x6f, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x74, 0x61,
				0x6c, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x65, 0x65,
				0x70, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x73, 0x74, 0x74, 0x75, 0x72, 0x6e,
				0x62, 0x6f, 0x72, 0x6e, 0x62, 0x61, 0x6e, 0x64, 0x66, 0x65, 0x6c, 0x6c, 0x72,
				0x6f, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x28, 0x73, 0x6b, 0x69, 0x6e, 0x72, 0x6f,
				0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65,
				0x73, 0x6d, 0x65, 0x65, 0x74, 0x67, 0x6f, 0x6c, 0x64, 0x2e, 0x6a, 0x70, 0x67,
				0x69, 0x74, 0x65, 0x6d, 0x76, 0x61, 0x72, 0x79, 0x66, 0x65, 0x6c, 0x74, 0x74,
				0x68, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x69,
				0x65, 0x77, 0x63, 0x6f, 0x70, 0x79, 0x31, 0x2e, 0x30, 0x22, 0x3c, 0x2f, 0x61,
				0x3e, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0x73, 0x65, 0x6c, 0x69, 0x65, 0x73,
				0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x70,
				0x61, 0x73, 0x74, 0x63, 0x73, 0x73, 0x3f, 0x67, 0x72, 0x61, 0x79, 0x6d, 0x65,
				0x61, 0x6e, 0x26, 0x67, 0x74, 0x3b, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,
				0x74, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x61, 0x69, 0x64, 0x72, 0x6f, 0x61, 0x64,
				0x76, 0x61, 0x72, 0x20, 0x66, 0x65, 0x65, 0x6c, 0x6a, 0x6f, 0x68, 0x6e, 0x72,
				0x69, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x73, 0x74, 0x27, 0x55,
				0x41, 0x2d, 0x64, 0x65, 0x61, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x70, 0x6f, 0x6f,
				0x72, 0x62, 0x69, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x55, 0x2e, 0x53, 0x2e,
				0x77, 0x6f, 0x6f, 0x64, 0x6d, 0x75, 0x73, 0x74, 0x32, 0x70, 0x78, 0x3b, 0x49,
				0x6e, 0x66, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x77, 0x69, 0x64, 0x65, 0x77, 0x61,
				0x6e, 0x74, 0x77, 0x61, 0x6c, 0x6c, 0x6c, 0x65, 0x61, 0x64, 0x5b, 0x30, 0x5d,
				0x3b, 0x70, 0x61, 0x75, 0x6c, 0x77, 0x61, 0x76, 0x65, 0x73, 0x75, 0x72, 0x65,
				0x24, 0x28, 0x27, 0x23, 0x77, 0x61, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x73, 0x61,
				0x72, 0x6d, 0x73, 0x67, 0x6f, 0x65, 0x73, 0x67, 0x61, 0x69, 0x6e, 0x6c, 0x61,
				0x6e, 0x67, 0x70, 0x61, 0x69, 0x64, 0x21, 0x2d, 0x2d, 0x20, 0x6c, 0x6f, 0x63,
				0x6b, 0x75, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x6f, 0x74, 0x77, 0x61, 0x6c, 0x6b,
				0x66, 0x69, 0x72, 0x6d, 0x77, 0x69, 0x66, 0x65, 0x78, 0x6d, 0x6c, 0x22, 0x73,
				0x6f, 0x6e, 0x67, 0x74, 0x65, 0x73, 0x74, 0x32, 0x30, 0x70, 0x78, 0x6b, 0x69,
				0x6e, 0x64, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x6e,
				0x74, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x73, 0x74, 0x61, 0x72,
				0x6d, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x69, 0x6e, 0x66,
				0x6c, 0x6f, 0x77, 0x62, 0x61, 0x62, 0x79, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x61,
				0x79, 0x73, 0x34, 0x70, 0x78, 0x3b, 0x36, 0x70, 0x78, 0x3b, 0x61, 0x72, 0x74,
				0x73, 0x66, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x69, 0x6b, 0x69,
				0x68, 0x65, 0x61, 0x74, 0x73, 0x74, 0x65, 0x70, 0x74, 0x72, 0x69, 0x70, 0x6f,
				0x72, 0x67, 0x2f, 0x6c, 0x61, 0x6b, 0x65, 0x77, 0x65, 0x61, 0x6b, 0x74, 0x6f,
				0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x66, 0x61, 0x6e,
				0x73, 0x62, 0x61, 0x6e, 0x6b, 0x76, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73,
				0x6a, 0x75, 0x6c, 0x79, 0x74, 0x61, 0x73, 0x6b, 0x31, 0x70, 0x78, 0x3b, 0x67,
				0x6f, 0x61, 0x6c, 0x67, 0x72, 0x65, 0x77, 0x73, 0x6c, 0x6f, 0x77, 0x65, 0x64,
				0x67, 0x65, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x74, 0x73, 0x35, 0x70, 0x78,
				0x3b, 0x2e, 0x6a, 0x73, 0x3f, 0x34, 0x30, 0x70, 0x78, 0x69, 0x66, 0x20, 0x28,
				0x73, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x6e, 0x65, 0x74,
				0x75, 0x62, 0x65, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x65,
				0x65, 0x64, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x69, 0x66,
				0x74, 0x68, 0x61, 0x72, 0x6d, 0x31, 0x38, 0x70, 0x78, 0x63, 0x61, 0x6d, 0x65,
				0x68, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x6c, 0x64, 0x7a, 0x6f, 0x6f, 0x6d, 0x76,
				0x6f, 0x69, 0x64, 0x65, 0x61, 0x73, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x69,
				0x6c, 0x6c, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,
				0x74, 0x33, 0x70, 0x78, 0x3b, 0x6a, 0x61, 0x63, 0x6b, 0x74, 0x61, 0x67, 0x73,
				0x62, 0x69, 0x74, 0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6b,
				0x6e, 0x65, 0x77, 0x6e, 0x65, 0x61, 0x72, 0x3c, 0x21, 0x2d, 0x2d, 0x67, 0x72,
				0x6f, 0x77, 0x4a, 0x53, 0x4f, 0x4e, 0x64, 0x75, 0x74, 0x79, 0x4e, 0x61, 0x6d,
				0x65, 0x73, 0x61, 0x6c, 0x65, 0x79, 0x6f, 0x75, 0x20, 0x6c, 0x6f, 0x74, 0x73,
				0x70, 0x61, 0x69, 0x6e, 0x6a, 0x61, 0x7a, 0x7a, 0x63, 0x6f, 0x6c, 0x64, 0x65,
				0x79, 0x65, 0x73, 0x66, 0x69, 0x73, 0x68, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x69,
				0x73, 0x6b, 0x74, 0x61, 0x62, 0x73, 0x70, 0x72, 0x65, 0x76, 0x31, 0x30, 0x70,
				0x78, 0x72, 0x69, 0x73, 0x65, 0x32, 0x35, 0x70, 0x78, 0x42, 0x6c, 0x75, 0x65,
				0x64, 0x69, 0x6e, 0x67, 0x33, 0x30, 0x30, 0x2c, 0x62, 0x61, 0x6c, 0x6c, 0x66,
				0x6f, 0x72, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x77, 0x69, 0x6c, 0x64, 0x62, 0x6f,
				0x78, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x61, 0x63, 0x6b, 0x76, 0x65, 0x72,
				0x73, 0x70, 0x61, 0x69, 0x72, 0x6a, 0x75, 0x6e, 0x65, 0x74, 0x65, 0x63, 0x68,
				0x69, 0x66, 0x28, 0x21, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x76, 0x69, 0x6c, 0x24,
				0x28, 0x22, 0x23, 0x77, 0x61, 0x72, 0x6d, 0x6c, 0x6f, 0x72, 0x64, 0x64, 0x6f,
				0x65, 0x73, 0x70, 0x75, 0x6c, 0x6c, 0x2c, 0x30, 0x30, 0x30, 0x69, 0x64, 0x65,
				0x61, 0x64, 0x72, 0x61, 0x77, 0x68, 0x75, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x74,
				0x66, 0x75, 0x6e, 0x64, 0x62, 0x75, 0x72, 0x6e, 0x68, 0x72, 0x65, 0x66, 0x63,
				0x65, 0x6c, 0x6c, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x68, 0x6f,
				0x75, 0x72, 0x6c, 0x6f, 0x73, 0x73, 0x66, 0x75, 0x65, 0x6c, 0x31, 0x32, 0x70,
				0x78, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x53, 0x53, 0x22,
				0x61, 0x67, 0x65, 0x64, 0x67, 0x72, 0x65, 0x79, 0x47, 0x45, 0x54, 0x22, 0x65,
				0x61, 0x73, 0x65, 0x61, 0x69, 0x6d, 0x73, 0x67, 0x69, 0x72, 0x6c, 0x61, 0x69,
				0x64, 0x73, 0x38, 0x70, 0x78, 0x3b, 0x6e, 0x61, 0x76, 0x79, 0x67, 0x72, 0x69,
				0x64, 0x74, 0x69, 0x70, 0x73, 0x23, 0x39, 0x39, 0x39, 0x77, 0x61, 0x72, 0x73,
				0x6c, 0x61, 0x64, 0x79, 0x63, 0x61, 0x72, 0x73, 0x29, 0x3b, 0x20, 0x7d, 0x70,
				0x68, 0x70, 0x3f, 0x68, 0x65, 0x6c, 0x6c, 0x74, 0x61, 0x6c, 0x6c, 0x77, 0x68,
				0x6f, 0x6d, 0x7a, 0x68, 0x3a, 0xe5, 0x2a, 0x2f, 0x0d, 0x0a, 0x20, 0x31, 0x30,
				0x30, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x41, 0x37, 0x70, 0x78, 0x3b,
				0x70, 0x75, 0x73, 0x68, 0x63, 0x68, 0x61, 0x74, 0x30, 0x70, 0x78, 0x3b, 0x63,
				0x72, 0x65, 0x77, 0x2a, 0x2f, 0x3c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x37, 0x35,
				0x70, 0x78, 0x66, 0x6c, 0x61, 0x74, 0x72, 0x61, 0x72, 0x65, 0x20, 0x26, 0x26,
				0x20, 0x74, 0x65, 0x6c, 0x6c, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x6e, 0x74, 0x6f,
				0x6c, 0x61, 0x69, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x73, 0x6b, 0x69, 0x70, 0x74,
				0x65, 0x6e, 0x74, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x67, 0x65,
				0x74, 0x73, 0x70, 0x6c, 0x6f, 0x74, 0x34, 0x30, 0x30, 0x2c, 0x0d, 0x0a, 0x0d,
				0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x66, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x68, 0x70,
				0x3c, 0x62, 0x72, 0x3e, 0x65, 0x72, 0x69, 0x63, 0x6d, 0x6f, 0x73, 0x74, 0x67,
				0x75, 0x69, 0x64, 0x62, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x73, 0x63, 0x68, 0x61,
				0x69, 0x72, 0x6d, 0x61, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6d, 0x2f, 0x69, 0x6d,
				0x67, 0x26, 0x23, 0x38, 0x32, 0x6c, 0x75, 0x63, 0x6b, 0x63, 0x65, 0x6e, 0x74,
				0x30, 0x30, 0x30, 0x3b, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x6e, 0x65, 0x68,
				0x74, 0x6d, 0x6c, 0x73, 0x65, 0x6c, 0x6c, 0x64, 0x72, 0x75, 0x67, 0x46, 0x52,
				0x45, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x69, 0x63, 0x6b, 0x3f, 0x69, 0x64,
				0x3d, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x73, 0x74,
				0x77, 0x69, 0x6e, 0x64, 0x52, 0x53, 0x53, 0x20, 0x77, 0x65, 0x61, 0x72, 0x72,
				0x65, 0x6c, 0x79, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x65, 0x64, 0x75,
				0x6b, 0x65, 0x6e, 0x61, 0x73, 0x61, 0x63, 0x61, 0x70, 0x65, 0x77, 0x69, 0x73,
				0x68, 0x67, 0x75, 0x6c, 0x66, 0x54, 0x32, 0x33, 0x3a, 0x68, 0x69, 0x74, 0x73,
				0x73, 0x6c, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x62,
				0x6c, 0x75, 0x72, 0x74, 0x68, 0x65, 0x79, 0x31, 0x35, 0x70, 0x78, 0x27, 0x27,
				0x29, 0x3b, 0x29, 0x3b, 0x22, 0x3e, 0x6d, 0x73, 0x69, 0x65, 0x77, 0x69, 0x6e,
				0x73, 0x62, 0x69, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x65, 0x74, 0x61,
				0x73, 0x65, 0x65, 0x6b, 0x54, 0x31, 0x38, 0x3a, 0x6f, 0x72, 0x64, 0x73, 0x74,
				0x72, 0x65, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x36, 0x30, 0x70, 0x78, 0x66, 0x61,
				0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x62, 0x6f, 0x79, 0x73, 0x5b, 0x30, 0x5d,
				0x2e, 0x27, 0x29, 0x3b, 0x22, 0x50, 0x4f, 0x53, 0x54, 0x62, 0x65, 0x61, 0x72,
				0x6b, 0x69, 0x64, 0x73, 0x29, 0x3b, 0x7d, 0x7d, 0x6d, 0x61, 0x72, 0x79, 0x74,
				0x65, 0x6e, 0x64, 0x28, 0x55, 0x4b, 0x29, 0x71, 0x75, 0x61, 0x64, 0x7a, 0x68,
				0x3a, 0xe6, 0x2d, 0x73, 0x69, 0x7a, 0x2d, 0x2d, 0x2d, 0x2d, 0x70, 0x72, 0x6f,
				0x70, 0x27, 0x29, 0x3b, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x54, 0x31, 0x39, 0x3a,
				0x76, 0x69, 0x63, 0x65, 0x61, 0x6e, 0x64, 0x79, 0x64, 0x65, 0x62, 0x74, 0x3e,
				0x52, 0x53, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x65, 0x63, 0x6b, 0x62, 0x6c,
				0x6f, 0x77, 0x54, 0x31, 0x36, 0x3a, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x76, 0x61,
				0x6c, 0x54, 0x31, 0x37, 0x3a, 0x6c, 0x65, 0x74, 0x73, 0x66, 0x61, 0x69, 0x6c,
				0x6f, 0x72, 0x61, 0x6c, 0x70, 0x6f, 0x6c, 0x6c, 0x6e, 0x6f, 0x76, 0x61, 0x63,
				0x6f, 0x6c, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x20, 0xe2, 0x80, 0x94, 0x73, 0x6f,
				0x66, 0x74, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6c, 0x6c, 0x72, 0x6f, 0x73,
				0x73, 0x3c, 0x68, 0x33, 0x3e, 0x70, 0x6f, 0x75, 0x72, 0x66, 0x61, 0x64, 0x65,
				0x70, 0x69, 0x6e, 0x6b, 0x3c, 0x74, 0x72, 0x3e, 0x6d, 0x69, 0x6e, 0x69, 0x29,
				0x7c, 0x21, 0x28, 0x6d, 0x69, 0x6e, 0x65, 0x7a, 0x68, 0x3a, 0xe8, 0x62, 0x61,
				0x72, 0x73, 0x68, 0x65, 0x61, 0x72, 0x30, 0x30, 0x29, 0x3b, 0x6d, 0x69, 0x6c,
				0x6b, 0x20, 0x2d, 0x2d, 0x3e, 0x69, 0x72, 0x6f, 0x6e, 0x66, 0x72, 0x65, 0x64,
				0x64, 0x69, 0x73, 0x6b, 0x77, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x69, 0x6c, 0x70,
				0x75, 0x74, 0x73, 0x2f, 0x6a, 0x73, 0x2f, 0x68, 0x6f, 0x6c, 0x79, 0x54, 0x32,
				0x32, 0x3a, 0x49, 0x53, 0x42, 0x4e, 0x54, 0x32, 0x30, 0x3a, 0x61, 0x64, 0x61,
				0x6d, 0x73, 0x65, 0x65, 0x73, 0x3c, 0x68, 0x32, 0x3e, 0x6a, 0x73, 0x6f, 0x6e,
				0x27, 0x2c, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x54, 0x32, 0x31, 0x3a, 0x20,
				0x52, 0x53, 0x53, 0x6c, 0x6f, 0x6f, 0x70, 0x61, 0x73, 0x69, 0x61, 0x6d, 0x6f,
				0x6f, 0x6e, 0x3c, 0x2f, 0x70, 0x3e, 0x73, 0x6f, 0x75, 0x6c, 0x4c, 0x49, 0x4e,
				0x45, 0x66, 0x6f, 0x72, 0x74, 0x63, 0x61, 0x72, 0x74, 0x54, 0x31, 0x34, 0x3a,
				0x3c, 0x68, 0x31, 0x3e, 0x38, 0x30, 0x70, 0x78, 0x21, 0x2d, 0x2d, 0x3c, 0x39,
				0x70, 0x78, 0x3b, 0x54, 0x30, 0x34, 0x3a, 0x6d, 0x69, 0x6b, 0x65, 0x3a, 0x34,
				0x36, 0x5a, 0x6e, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x59, 0x6f, 0x72,
				0x6b, 0x72, 0x69, 0x63, 0x65, 0x7a, 0x68, 0x3a, 0xe4, 0x27, 0x29, 0x29, 0x3b,
				0x70, 0x75, 0x72, 0x65, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
				0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x3a, 0x33, 0x37, 0x5a, 0x5f, 0x6f,
				0x66, 0x5f, 0x27, 0x5d, 0x29, 0x3b, 0x30, 0x30, 0x30, 0x2c, 0x7a, 0x68, 0x3a,
				0xe7, 0x74, 0x61, 0x6e, 0x6b, 0x79, 0x61, 0x72, 0x64, 0x62, 0x6f, 0x77, 0x6c,
				0x62, 0x75, 0x73, 0x68, 0x3a, 0x35, 0x36, 0x5a, 0x4a, 0x61, 0x76, 0x61, 0x33,
				0x30, 0x70, 0x78, 0x0a, 0x7c, 0x7d, 0x0a, 0x25, 0x43, 0x33, 0x25, 0x3a, 0x33,
				0x34, 0x5a, 0x6a, 0x65, 0x66, 0x66, 0x45, 0x58, 0x50, 0x49, 0x63, 0x61, 0x73,
				0x68, 0x76, 0x69, 0x73, 0x61, 0x67, 0x6f, 0x6c, 0x66, 0x73, 0x6e, 0x6f, 0x77,
				0x7a, 0x68, 0x3a, 0xe9, 0x71, 0x75, 0x65, 0x72, 0x2e, 0x63, 0x73, 0x73, 0x73,
				0x69, 0x63, 0x6b, 0x6d, 0x65, 0x61, 0x74, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x69,
				0x6e, 0x64, 0x64, 0x65, 0x6c, 0x6c, 0x68, 0x69, 0x72, 0x65, 0x70, 0x69, 0x63,
				0x73, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x33, 0x36, 0x5a, 0x48, 0x54, 0x54, 0x50,
				0x2d, 0x32, 0x30, 0x31, 0x66, 0x6f, 0x74, 0x6f, 0x77, 0x6f, 0x6c, 0x66, 0x45,
				0x4e, 0x44, 0x20, 0x78, 0x62, 0x6f, 0x78, 0x3a, 0x35, 0x34, 0x5a, 0x42, 0x4f,
				0x44, 0x59, 0x64, 0x69, 0x63, 0x6b, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x78, 0x69,
				0x74, 0x3a, 0x33, 0x35, 0x5a, 0x76, 0x61, 0x72, 0x73, 0x62, 0x65, 0x61, 0x74,
				0x27, 0x7d, 0x29, 0x3b, 0x64, 0x69, 0x65, 0x74, 0x39, 0x39, 0x39, 0x3b, 0x61,
				0x6e, 0x6e, 0x65, 0x7d, 0x7d, 0x3c, 0x2f, 0x5b, 0x69, 0x5d, 0x2e, 0x4c, 0x61,
				0x6e, 0x67, 0x6b, 0x6d, 0xc2, 0xb2, 0x77, 0x69, 0x72, 0x65, 0x74, 0x6f, 0x79,
				0x73, 0x61, 0x64, 0x64, 0x73, 0x73, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x65, 0x78,
				0x3b, 0x0a, 0x09, 0x7d, 0x65, 0x63, 0x68, 0x6f, 0x6e, 0x69, 0x6e, 0x65, 0x2e,
				0x6f, 0x72, 0x67, 0x30, 0x30, 0x35, 0x29, 0x74, 0x6f, 0x6e, 0x79, 0x6a, 0x65,
				0x77, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x67, 0x73, 0x72, 0x6f, 0x6f,
				0x66, 0x30, 0x30, 0x30, 0x29, 0x20, 0x32, 0x30, 0x30, 0x77, 0x69, 0x6e, 0x65,
				0x67, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x67, 0x73, 0x62, 0x6f, 0x6f, 0x74, 0x67,
				0x61, 0x72, 0x79, 0x63, 0x75, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x65,
				0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x6d, 0x6c, 0x63, 0x6f, 0x63,
				0x6b, 0x67, 0x61, 0x6e, 0x67, 0x24, 0x28, 0x27, 0x2e, 0x35, 0x30, 0x70, 0x78,
				0x50, 0x68, 0x2e, 0x44, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x6e, 0x6c,
				0x6f, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x6d, 0x69, 0x6c, 0x65, 0x72, 0x79,
				0x61, 0x6e, 0x75, 0x6e, 0x69, 0x78, 0x64, 0x69, 0x73, 0x63, 0x29, 0x3b, 0x7d,
				0x0a, 0x64, 0x75, 0x73, 0x74, 0x63, 0x6c, 0x69, 0x70, 0x29, 0x2e, 0x0a, 0x0a,
				0x37, 0x30, 0x70, 0x78, 0x2d, 0x32, 0x30, 0x30, 0x44, 0x56, 0x44, 0x73, 0x37,
				0x5d, 0x3e, 0x3c, 0x74, 0x61, 0x70, 0x65, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x2b,
				0x2b, 0x29, 0x77, 0x61, 0x67, 0x65, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x68, 0x69,
				0x6c, 0x6f, 0x70, 0x74, 0x73, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x41, 0x51, 0x73,
				0x61, 0x73, 0x69, 0x6e, 0x2d, 0x32, 0x36, 0x54, 0x6c, 0x61, 0x62, 0x73, 0x70,
				0x65, 0x74, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x62, 0x75, 0x6c, 0x6b, 0x63, 0x6f,
				0x6f, 0x6b, 0x3b, 0x7d, 0x0d, 0x0a, 0x48, 0x45, 0x41, 0x44, 0x5b, 0x30, 0x5d,
				0x29, 0x61, 0x62, 0x62, 0x72, 0x6a, 0x75, 0x61, 0x6e, 0x28, 0x31, 0x39, 0x38,
				0x6c, 0x65, 0x73, 0x68, 0x74, 0x77, 0x69, 0x6e, 0x3c, 0x2f, 0x69, 0x3e, 0x73,
				0x6f, 0x6e, 0x79, 0x67, 0x75, 0x79, 0x73, 0x66, 0x75, 0x63, 0x6b, 0x70, 0x69,
				0x70, 0x65, 0x7c, 0x2d, 0x0a, 0x21, 0x30, 0x30, 0x32, 0x29, 0x6e, 0x64, 0x6f,
				0x77, 0x5b, 0x31, 0x5d, 0x3b, 0x5b, 0x5d, 0x3b, 0x0a, 0x4c, 0x6f, 0x67, 0x20,
				0x73, 0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09, 0x09, 0x62, 0x61, 0x6e, 0x67, 0x74,
				0x72, 0x69, 0x6d, 0x62, 0x61, 0x74, 0x68, 0x29, 0x7b, 0x0d, 0x0a, 0x30, 0x30,
				0x70, 0x78, 0x0a, 0x7d, 0x29, 0x3b, 0x6b, 0x6f, 0x3a, 0xec, 0x66, 0x65, 0x65,
				0x73, 0x61, 0x64, 0x3e, 0x0d, 0x73, 0x3a, 0x2f, 0x2f, 0x20, 0x5b, 0x5d, 0x3b,
				0x74, 0x6f, 0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x28, 0x29, 0x7b, 0x0a, 0x7b,
				0x0d, 0x0a, 0x20, 0x2e, 0x6a, 0x73, 0x27, 0x32, 0x30, 0x30, 0x70, 0x64, 0x75,
				0x61, 0x6c, 0x62, 0x6f, 0x61, 0x74, 0x2e, 0x4a, 0x50, 0x47, 0x29, 0x3b, 0x0a,
				0x7d, 0x71, 0x75, 0x6f, 0x74, 0x29, 0x3b, 0x0a, 0x0a, 0x27, 0x29, 0x3b, 0x0a,
				0x0d, 0x0a, 0x7d, 0x0d, 0x32, 0x30, 0x31, 0x34, 0x32, 0x30, 0x31, 0x35, 0x32,
				0x30, 0x31, 0x36, 0x32, 0x30, 0x31, 0x37, 0x32, 0x30, 0x31, 0x38, 0x32, 0x30,
				0x31, 0x39, 0x32, 0x30, 0x32, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 0x30, 0x32,
				0x32, 0x32, 0x30, 0x32, 0x33, 0x32, 0x30, 0x32, 0x34, 0x32, 0x30, 0x32, 0x35,
				0x32, 0x30, 0x32, 0x36, 0x32, 0x30, 0x32, 0x37, 0x32, 0x30, 0x32, 0x38, 0x32,
				0x30, 0x32, 0x39, 0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x33, 0x31, 0x32, 0x30,
				0x33, 0x32, 0x32, 0x30, 0x33, 0x33, 0x32, 0x30, 0x33, 0x34, 0x32, 0x30, 0x33,
				0x35, 0x32, 0x30, 0x33, 0x36, 0x32, 0x30, 0x33, 0x37, 0x32, 0x30, 0x31, 0x33,
				0x32, 0x30, 0x31, 0x32, 0x32, 0x30, 0x31, 0x31, 0x32, 0x30, 0x31, 0x30, 0x32,
				0x30, 0x30, 0x39, 0x32, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x37, 0x32, 0x30,
				0x30, 0x36, 0x32, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30,
				0x33, 0x32, 0x30, 0x30, 0x32, 0x32, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30,
				0x31, 0x39, 0x39, 0x39, 0x31, 0x39, 0x39, 0x38, 0x31, 0x39, 0x39, 0x37, 0x31,
				0x39, 0x39, 0x36, 0x31, 0x39, 0x39, 0x35, 0x31, 0x39, 0x39, 0x34, 0x31, 0x39,
				0x39, 0x33, 0x31, 0x39, 0x39, 0x32, 0x31, 0x39, 0x39, 0x31, 0x31, 0x39, 0x39,
				0x30, 0x31, 0x39, 0x38, 0x39, 0x31, 0x39, 0x38, 0x38, 0x31, 0x39, 0x38, 0x37,
				0x31, 0x39, 0x38, 0x36, 0x31, 0x39, 0x38, 0x35, 0x31, 0x39, 0x38, 0x34, 0x31,
				0x39, 0x38, 0x33, 0x31, 0x39, 0x38, 0x32, 0x31, 0x39, 0x38, 0x31, 0x31, 0x39,
				0x38, 0x30, 0x31, 0x39, 0x37, 0x39, 0x31, 0x39, 0x37, 0x38, 0x31, 0x39, 0x37,
				0x37, 0x31, 0x39, 0x37, 0x36, 0x31, 0x39, 0x37, 0x35, 0x31, 0x39, 0x37, 0x34,
				0x31, 0x39, 0x37, 0x33, 0x31, 0x39, 0x37, 0x32, 0x31, 0x39, 0x37, 0x31, 0x31,
				0x39, 0x37, 0x30, 0x31, 0x39, 0x36, 0x39, 0x31, 0x39, 0x36, 0x38, 0x31, 0x39,
				0x36, 0x37, 0x31, 0x39, 0x36, 0x36, 0x31, 0x39, 0x36, 0x35, 0x31, 0x39, 0x36,
				0x34, 0x31, 0x39, 0x36, 0x33, 0x31, 0x39, 0x36, 0x32, 0x31, 0x39, 0x36, 0x31,
				0x31, 0x39, 0x36, 0x30, 0x31, 0x39, 0x35, 0x39, 0x31, 0x39, 0x35, 0x38, 0x31,
				0x39, 0x35, 0x37, 0x31, 0x39, 0x35, 0x36, 0x31, 0x39, 0x35, 0x35, 0x31, 0x39,
				0x35, 0x34, 0x31, 0x39, 0x35, 0x33, 0x31, 0x39, 0x35, 0x32, 0x31, 0x39, 0x35,
				0x31, 0x31, 0x39, 0x35, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x34,
				0x31, 0x33, 0x39, 0x34, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x39, 0x39, 0x63,
				0x6f, 0x6d, 0x6f, 0x6d, 0xc3, 0xa1, 0x73, 0x65, 0x73, 0x74, 0x65, 0x65, 0x73,
				0x74, 0x61, 0x70, 0x65, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x6f, 0x68, 0x61, 0x63,
				0x65, 0x63, 0x61, 0x64, 0x61, 0x61, 0xc3, 0xb1, 0x6f, 0x62, 0x69, 0x65, 0x6e,
				0x64, 0xc3, 0xad, 0x61, 0x61, 0x73, 0xc3, 0xad, 0x76, 0x69, 0x64, 0x61, 0x63,
				0x61, 0x73, 0x6f, 0x6f, 0x74, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6f,
				0x6c, 0x6f, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x6a,
				0x6f, 0x73, 0x69, 0x64, 0x6f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x70, 0x6f,
				0x74, 0x65, 0x6d, 0x61, 0x64, 0x65, 0x62, 0x65, 0x61, 0x6c, 0x67, 0x6f, 0x71,
				0x75, 0xc3, 0xa9, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x74, 0x72,
				0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x63, 0x61, 0x73, 0x61, 0x62, 0x61, 0x6a,
				0x6f, 0x74, 0x6f, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x61, 0x67, 0x75, 0x61,
				0x70, 0x75, 0x65, 0x73, 0x75, 0x6e, 0x6f, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x64,
				0x69, 0x63, 0x65, 0x6c, 0x75, 0x69, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x6d, 0x61,
				0x79, 0x6f, 0x7a, 0x6f, 0x6e, 0x61, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x69, 0x73,
				0x6f, 0x6f, 0x62, 0x72, 0x61, 0x63, 0x6c, 0x69, 0x63, 0x65, 0x6c, 0x6c, 0x6f,
				0x64, 0x69, 0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x63, 0x61, 0x73, 0x69, 0xd0,
				0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x80,
				0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
				0xb5, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb7,
				0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
				0xb6, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0x9d,
				0xd0, 0xb0, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbc, 0xd1,
				0x8b, 0xd0, 0x92, 0xd1, 0x8b, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
				0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0,
				0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xa0,
				0xd0, 0xa4, 0xd0, 0x9d, 0xd0, 0xb5, 0xd0, 0x9c, 0xd1, 0x8b, 0xd1, 0x82, 0xd1,
				0x8b, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb4, 0xd0, 0xb0,
				0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0x9d, 0xd1, 0x83, 0xd0,
				0x9e, 0xd0, 0xb1, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0x98, 0xd0, 0xb7, 0xd0, 0xb5,
				0xd0, 0xb9, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xa2, 0xd1,
				0x8b, 0xd1, 0x83, 0xd0, 0xb6, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xa3, 0xd9, 0x86,
				0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x83, 0xd9, 0x84, 0xd8,
				0xa3, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x81,
				0xd9, 0x89, 0xd9, 0x87, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9,
				0x83, 0xd8, 0xa7, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa8, 0xd8, 0xb3,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x8a, 0xd8,
				0xa3, 0xd9, 0x8a, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xab,
				0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x84, 0xd9,
				0x8a, 0xd8, 0xa8, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x8a, 0xd8, 0xa8, 0xd9, 0x83,
				0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa3, 0xd9, 0x85, 0xd9,
				0x86, 0xd8, 0xaa, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x84, 0xd9, 0x86, 0xd8, 0xad,
				0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xb4, 0xd9, 0x88, 0xd8,
				0xb4, 0x66, 0x69, 0x72, 0x73, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x69,
				0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x65, 0x64, 0x69, 0x61,
				0x77, 0x68, 0x69, 0x74, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6c, 0x61,
				0x63, 0x6b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62,
				0x6f, 0x6f, 0x6b, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x75, 0x73, 0x69,
				0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f,
				0x69, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x75,
				0x73, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x79,
				0x65, 0x61, 0x72, 0x73, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x64, 0x61,
				0x79, 0x77, 0x61, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x64, 0x65, 0x61, 0x74, 0x68, 0x70, 0x6f, 0x77, 0x65, 0x72,
				0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x72,
				0x6f, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x74,
				0x65, 0x72, 0x6d, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x6f, 0x6f, 0x6c,
				0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69,
				0x6d, 0x65, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x73,
				0x67, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x61,
				0x63, 0x65, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6d,
				0x6f, 0x64, 0x65, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x67, 0x75, 0x69, 0x64,
				0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x77, 0x6f,
				0x6d, 0x65, 0x6e, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
				0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x79, 0x6f, 0x75,
				0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x63,
				0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x72, 0x6f, 0x6e,
				0x74, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x66, 0x6f,
				0x72, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73,
				0x62, 0x65, 0x67, 0x69, 0x6e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x76, 0x69, 0x73,
				0x69, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x61, 0x72, 0x65, 0x61, 0x73, 0x62,
				0x65, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x74, 0x6f, 0x74, 0x61,
				0x6c, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x72,
				0x69, 0x6e, 0x74, 0x70, 0x72, 0x65, 0x73, 0x73, 0x62, 0x75, 0x69, 0x6c, 0x74,
				0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x74, 0x75,
				0x64, 0x79, 0x74, 0x72, 0x61, 0x64, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73,
				0x65, 0x6e, 0x73, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77,
				0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x64,
				0x64, 0x65, 0x64, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x6d, 0x6f, 0x76, 0x65, 0x64,
				0x74, 0x61, 0x6b, 0x65, 0x6e, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x66, 0x6c, 0x61,
				0x73, 0x68, 0x66, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6f,
				0x74, 0x68, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x63, 0x68, 0x65, 0x63,
				0x6b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x72, 0x69, 0x76, 0x65, 0x72, 0x69, 0x74,
				0x65, 0x6d, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68, 0x61, 0x70, 0x65,
				0x68, 0x75, 0x6d, 0x61, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x69,
				0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x68, 0x69, 0x72, 0x64, 0x62,
				0x61, 0x73, 0x69, 0x63, 0x70, 0x65, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x67,
				0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x64,
				0x65, 0x61, 0x73, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,
				0x75, 0x73, 0x65, 0x72, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
				0x72, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x76,
				0x6f, 0x69, 0x63, 0x65, 0x73, 0x69, 0x74, 0x65, 0x73, 0x6d, 0x6f, 0x6e, 0x74,
				0x68, 0x77, 0x68, 0x65, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x77, 0x68,
				0x69, 0x63, 0x68, 0x65, 0x61, 0x72, 0x74, 0x68, 0x66, 0x6f, 0x72, 0x75, 0x6d,
				0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x61, 0x72,
				0x74, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x6c,
				0x69, 0x76, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x79, 0x65,
				0x72, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x75, 0x73,
				0x61, 0x67, 0x65, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x74,
				0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6f, 0x70,
				0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,
				0x6d, 0x61, 0x67, 0x65, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x75, 0x70, 0x70, 0x65,
				0x72, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79, 0x73, 0x68,
				0x6f, 0x77, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61,
				0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6b, 0x6e, 0x6f,
				0x77, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x62, 0x65, 0x67, 0x61, 0x6e, 0x73,
				0x75, 0x70, 0x65, 0x72, 0x70, 0x61, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x74,
				0x68, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x6e, 0x61,
				0x6d, 0x65, 0x64, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73,
				0x70, 0x61, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x72, 0x61,
				0x6e, 0x64, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x66,
				0x61, 0x6c, 0x73, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x61, 0x75, 0x64, 0x69,
				0x6f, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2e, 0x63,
				0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x63, 0x61, 0x73, 0x65, 0x73,
				0x64, 0x61, 0x69, 0x6c, 0x79, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x67, 0x72, 0x65,
				0x61, 0x74, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x75,
				0x6e, 0x69, 0x74, 0x73, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72, 0x6f, 0x61,
				0x64, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x70,
				0x70, 0x6c, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x63, 0x79, 0x63, 0x6c, 0x65,
				0x73, 0x63, 0x65, 0x6e, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x69,
				0x63, 0x6b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x70,
				0x69, 0x65, 0x63, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x66, 0x72, 0x61, 0x6d,
				0x65, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6c, 0x69,
				0x6d, 0x69, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x63, 0x69, 0x76, 0x69, 0x6c,
				0x73, 0x63, 0x61, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65,
				0x6d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x62,
				0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x61, 0x73, 0x6b, 0x65,
				0x64, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x74,
				0x6f, 0x63, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x61, 0x69, 0x74, 0x68,
				0x68, 0x65, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x6f, 0x66, 0x66,
				0x65, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x6d,
				0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x74, 0x68, 0x69, 0x6e,
				0x6b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6d, 0x61,
				0x6a, 0x6f, 0x72, 0x74, 0x72, 0x75, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
				0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x76, 0x61, 0x6c,
				0x69, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c,
				0x6f, 0x67, 0x69, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x6f, 0x63, 0x63, 0x75,
				0x72, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x66, 0x72, 0x65, 0x73, 0x68, 0x71, 0x75,
				0x69, 0x74, 0x65, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x67, 0x72, 0x61, 0x64, 0x65,
				0x6e, 0x65, 0x65, 0x64, 0x73, 0x75, 0x72, 0x62, 0x61, 0x6e, 0x66, 0x69, 0x67,
				0x68, 0x74, 0x62, 0x61, 0x73, 0x69, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x61,
				0x75, 0x74, 0x6f, 0x3b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x68, 0x74, 0x6d,
				0x6c, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x59, 0x6f,
				0x75, 0x72, 0x20, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63,
				0x62, 0x72, 0x6f, 0x77, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x61,
				0x77, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52,
				0x69, 0x67, 0x68, 0x74, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x63,
				0x68, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69,
				0x6e, 0x6b, 0x73, 0x64, 0x6f, 0x75, 0x62, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63,
				0x74, 0x68, 0x75, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x69,
				0x65, 0x66, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x31,
				0x30, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x75, 0x6e, 0x74, 0x69,
				0x6c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70,
				0x61, 0x63, 0x65, 0x71, 0x75, 0x65, 0x72, 0x79, 0x6a, 0x61, 0x6d, 0x65, 0x73,
				0x65, 0x71, 0x75, 0x61, 0x6c, 0x74, 0x77, 0x69, 0x63, 0x65, 0x30, 0x2c, 0x30,
				0x30, 0x30, 0x53, 0x74, 0x61, 0x72, 0x74, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,
				0x6f, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x69, 0x67, 0x68,
				0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x70, 0x6f,
				0x73, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x77, 0x65, 0x65, 0x6b, 0x73,
				0x61, 0x76, 0x6f, 0x69, 0x64, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x69, 0x6c,
				0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x61,
				0x6c, 0x70, 0x68, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b,
				0x73, 0x72, 0x61, 0x74, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x63, 0x6c,
				0x61, 0x69, 0x6d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x73,
				0x73, 0x74, 0x61, 0x72, 0x73, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x3c, 0x2f, 0x68,
				0x33, 0x3e, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6d,
				0x75, 0x6c, 0x74, 0x69, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,
				0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x6f,
				0x6c, 0x69, 0x64, 0x28, 0x74, 0x68, 0x69, 0x73, 0x62, 0x72, 0x69, 0x6e, 0x67,
				0x73, 0x68, 0x69, 0x70, 0x73, 0x73, 0x74, 0x61, 0x66, 0x66, 0x74, 0x72, 0x69,
				0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x66,
				0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x73,
				0x20, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x67,
				0x79, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x35, 0x70, 0x78, 0x3b,
				0x45, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x65, 0x22, 0x63, 0x72, 0x6f,
				0x73, 0x73, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x62,
				0x6f, 0x78, 0x22, 0x3e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6c, 0x65, 0x61, 0x76,
				0x65, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x67, 0x75,
				0x65, 0x73, 0x74, 0x3c, 0x2f, 0x68, 0x34, 0x3e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
				0x68, 0x65, 0x61, 0x76, 0x79, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x73, 0x65, 0x76,
				0x65, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x73,
				0x69, 0x67, 0x6e, 0x73, 0x61, 0x77, 0x61, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x63,
				0x65, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3e, 0x3c, 0x21, 0x2d, 0x2d, 0x65, 0x6e,
				0x5f, 0x55, 0x53, 0x26, 0x23, 0x33, 0x39, 0x3b, 0x32, 0x30, 0x30, 0x70, 0x78,
				0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x6a,
				0x6f, 0x79, 0x61, 0x6a, 0x61, 0x78, 0x2e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x6d, 0x69, 0x74, 0x68, 0x55, 0x2e, 0x53, 0x2e, 0x20, 0x68, 0x6f, 0x6c, 0x64,
				0x73, 0x70, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61,
				0x76, 0x22, 0x3e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,
				0x63, 0x6f, 0x6d, 0x65, 0x73, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x69,
				0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x31, 0x39, 0x39, 0x30, 0x73, 0x72,
				0x6f, 0x6d, 0x61, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6a, 0x61, 0x70, 0x61,
				0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x77,
				0x6e, 0x65, 0x72, 0x61, 0x67, 0x72, 0x65, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e,
				0x61, 0x62, 0x75, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70, 0x65,
				0x72, 0x61, 0x22, 0x2d, 0x2f, 0x2f, 0x57, 0x63, 0x61, 0x72, 0x64, 0x73, 0x68,
				0x69, 0x6c, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x68, 0x6f, 0x74,
				0x6f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70,
				0x68, 0x70, 0x3f, 0x73, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x6c,
				0x6c, 0x6f, 0x75, 0x69, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x70, 0x72, 0x6f,
				0x6f, 0x66, 0x62, 0x72, 0x69, 0x65, 0x66, 0x72, 0x6f, 0x77, 0x22, 0x3e, 0x67,
				0x65, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x6c, 0x6f, 0x6f, 0x6b,
				0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x6e,
				0x65, 0x74, 0x2f, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x74, 0x72, 0x79, 0x20, 0x7b,
				0x0a, 0x76, 0x61, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x63, 0x6f, 0x73,
				0x74, 0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x71,
				0x75, 0x65, 0x73, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x62, 0x6f,
				0x72, 0x68, 0x65, 0x6c, 0x70, 0x73, 0x63, 0x61, 0x75, 0x73, 0x65, 0x6d, 0x61,
				0x67, 0x69, 0x63, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x69, 0x72,
				0x32, 0x35, 0x30, 0x70, 0x78, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x73, 0x74, 0x65,
				0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x67,
				0x6c, 0x61, 0x73, 0x73, 0x73, 0x69, 0x64, 0x65, 0x73, 0x66, 0x75, 0x6e, 0x64,
				0x73, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x6f,
				0x75, 0x74, 0x68, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x61, 0x72, 0x69, 0x73,
				0x67, 0x69, 0x76, 0x65, 0x73, 0x64, 0x75, 0x74, 0x63, 0x68, 0x74, 0x65, 0x78,
				0x61, 0x73, 0x66, 0x72, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x7c,
				0x7c, 0x5b, 0x5d, 0x3b, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,
				0x2d, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x3c, 0x62,
				0x72, 0x2f, 0x3e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x70, 0x65, 0x61, 0x6b,
				0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x61, 0x6e,
				0x6b, 0x73, 0x63, 0x61, 0x74, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32,
				0x30, 0x70, 0x78, 0x3b, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x64, 0x65, 0x61, 0x6c,
				0x73, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x35, 0x30, 0x70, 0x78, 0x3b, 0x75, 0x72,
				0x6c, 0x3d, 0x22, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x6d, 0x6f, 0x75, 0x73, 0x65,
				0x4d, 0x6f, 0x73, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x6d, 0x6f,
				0x6e, 0x67, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e,
				0x6f, 0x6e, 0x65, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x64, 0x63, 0x61, 0x72, 0x72,
				0x79, 0x64, 0x72, 0x61, 0x66, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x70, 0x61,
				0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72,
				0x64, 0x65, 0x6c, 0x61, 0x79, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x70, 0x72, 0x6f,
				0x76, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x64,
				0x72, 0x75, 0x67, 0x73, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x61, 0x70, 0x72, 0x69,
				0x6c, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x78,
				0x61, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x73,
				0x6c, 0x6f, 0x67, 0x69, 0x63, 0x56, 0x69, 0x65, 0x77, 0x20, 0x73, 0x65, 0x65,
				0x6d, 0x73, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,
				0x28, 0x32, 0x30, 0x30, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
				0x6b, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x67, 0x72,
				0x65, 0x65, 0x6b, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x72, 0x69, 0x6e, 0x67, 0x73,
				0x72, 0x61, 0x74, 0x65, 0x64, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x77, 0x68, 0x6f,
				0x73, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x42,
				0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x6a, 0x6f, 0x6e, 0x65,
				0x73, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x27, 0x29, 0x3b, 0x22, 0x3e, 0x29, 0x3b,
				0x69, 0x66, 0x28, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x64, 0x61, 0x76, 0x69, 0x64,
				0x68, 0x6f, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x72, 0x61, 0x69,
				0x73, 0x65, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
				0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x62, 0x61, 0x72, 0x22,
				0x3e, 0x2e, 0x73, 0x72, 0x63, 0x3d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x6c,
				0x74, 0x3d, 0x22, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x68, 0x65, 0x6e, 0x72, 0x79,
				0x32, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x74, 0x61,
				0x6c, 0x79, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74,
				0x61, 0x73, 0x74, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x74, 0x68, 0x69, 0x73,
				0x2e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x67, 0x69,
				0x72, 0x6c, 0x73, 0x2f, 0x63, 0x73, 0x73, 0x2f, 0x31, 0x30, 0x30, 0x25, 0x3b,
				0x63, 0x6c, 0x75, 0x62, 0x73, 0x73, 0x74, 0x75, 0x66, 0x66, 0x62, 0x69, 0x62,
				0x6c, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x31, 0x30, 0x30, 0x30, 0x6b,
				0x6f, 0x72, 0x65, 0x61, 0x7d, 0x29, 0x3b, 0x0d, 0x0a, 0x62, 0x61, 0x6e, 0x64,
				0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x38, 0x30,
				0x70, 0x78, 0x3b, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
				0x61, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x72, 0x69,
				0x73, 0x68, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73,
				0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x61, 0x68, 0x6f,
				0x6f, 0x29, 0x5b, 0x30, 0x5d, 0x3b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x66, 0x69,
				0x6e, 0x64, 0x73, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x64, 0x65, 0x62, 0x75, 0x67,
				0x74, 0x61, 0x73, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x3d, 0x63, 0x65, 0x6c,
				0x6c, 0x73, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x31, 0x32, 0x70, 0x78, 0x3b, 0x70,
				0x72, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x6c, 0x73, 0x74, 0x75, 0x72, 0x6e,
				0x73, 0x30, 0x78, 0x36, 0x30, 0x30, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x73, 0x70,
				0x61, 0x69, 0x6e, 0x62, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x78, 0x65, 0x73,
				0x6d, 0x69, 0x63, 0x72, 0x6f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x2d, 0x2d, 0x3e,
				0x3c, 0x2f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x73, 0x74, 0x65, 0x76, 0x65, 0x2d,
				0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x7d, 0x29, 0x3b, 0x0a,
				0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x31, 0x39, 0x39, 0x46, 0x41,
				0x51, 0x3c, 0x2f, 0x72, 0x6f, 0x67, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6e, 0x6b,
				0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x38, 0x70, 0x78, 0x3b, 0x66, 0x65, 0x65,
				0x64, 0x73, 0x3c, 0x68, 0x31, 0x3e, 0x3c, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x74,
				0x65, 0x73, 0x74, 0x73, 0x32, 0x32, 0x70, 0x78, 0x3b, 0x64, 0x72, 0x69, 0x6e,
				0x6b, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x6c, 0x65, 0x77, 0x69, 0x73, 0x73, 0x68,
				0x61, 0x6c, 0x6c, 0x23, 0x30, 0x33, 0x39, 0x3b, 0x20, 0x66, 0x6f, 0x72, 0x20,
				0x6c, 0x6f, 0x76, 0x65, 0x64, 0x77, 0x61, 0x73, 0x74, 0x65, 0x30, 0x30, 0x70,
				0x78, 0x3b, 0x6a, 0x61, 0x3a, 0xe3, 0x82, 0x73, 0x69, 0x6d, 0x6f, 0x6e, 0x3c,
				0x66, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x6d, 0x65, 0x65, 0x74,
				0x73, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x61, 0x70, 0x74, 0x69,
				0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x29, 0x20, 0x21, 0x3d, 0x20,
				0x64, 0x72, 0x65, 0x73, 0x73, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x72, 0x6f, 0x6f,
				0x6d, 0x73, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x6d,
				0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x74,
				0x65, 0x66, 0x75, 0x6e, 0x6e, 0x79, 0x74, 0x72, 0x65, 0x65, 0x73, 0x63, 0x6f,
				0x6d, 0x2f, 0x22, 0x31, 0x2e, 0x6a, 0x70, 0x67, 0x77, 0x6d, 0x6f, 0x64, 0x65,
				0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x6c, 0x65, 0x66,
				0x74, 0x20, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x29,
				0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x69, 0x72, 0x75,
				0x73, 0x63, 0x68, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x6f,
				0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x70, 0x61, 0x74, 0x63, 0x68, 0x3c, 0x21, 0x2d, 0x2d, 0x0a, 0x6f, 0x2d, 0x63,
				0x61, 0x63, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2c,
				0x30, 0x30, 0x30, 0x20, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x69, 0x2b, 0x2b, 0x29,
				0x7b, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x27, 0x29, 0x5b, 0x30, 0x5d, 0x69, 0x64,
				0x3d, 0x31, 0x30, 0x62, 0x6f, 0x74, 0x68, 0x3b, 0x6d, 0x65, 0x6e, 0x75, 0x20,
				0x2e, 0x32, 0x2e, 0x6d, 0x69, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x6b, 0x65, 0x76,
				0x69, 0x6e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x62,
				0x72, 0x75, 0x63, 0x65, 0x32, 0x2e, 0x6a, 0x70, 0x67, 0x55, 0x52, 0x4c, 0x29,
				0x2b, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x6c,
				0x69, 0x63, 0x65, 0x68, 0x61, 0x72, 0x72, 0x79, 0x31, 0x32, 0x30, 0x22, 0x20,
				0x73, 0x77, 0x65, 0x65, 0x74, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x6e, 0x61, 0x6d,
				0x65, 0x3d, 0x64, 0x69, 0x65, 0x67, 0x6f, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73,
				0x77, 0x69, 0x73, 0x73, 0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x23, 0x66, 0x66, 0x66,
				0x3b, 0x22, 0x3e, 0x4c, 0x6f, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x74, 0x72,
				0x65, 0x61, 0x74, 0x73, 0x68, 0x65, 0x65, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20,
				0x31, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x6e, 0x74, 0x65,
				0x6e, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x6a, 0x61, 0x3a, 0xe3, 0x83, 0x69,
				0x64, 0x3d, 0x22, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x6f, 0x72, 0x73,
				0x65, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2d, 0x62, 0x6f, 0x78, 0x2d, 0x64, 0x65,
				0x6c, 0x74, 0x61, 0x0a, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x65, 0x61, 0x72, 0x73,
				0x3a, 0x34, 0x38, 0x5a, 0x3c, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x75, 0x72,
				0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x62,
				0x61, 0x6b, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x3d, 0x20, 0x22, 0x22,
				0x3b, 0x70, 0x68, 0x70, 0x22, 0x3e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x33,
				0x70, 0x78, 0x3b, 0x62, 0x72, 0x69, 0x61, 0x6e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
				0x73, 0x69, 0x7a, 0x65, 0x3d, 0x6f, 0x3d, 0x25, 0x32, 0x46, 0x20, 0x6a, 0x6f,
				0x69, 0x6e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x69,
				0x6d, 0x67, 0x22, 0x3e, 0x2c, 0x20, 0x66, 0x6a, 0x73, 0x69, 0x6d, 0x67, 0x22,
				0x20, 0x22, 0x29, 0x5b, 0x30, 0x5d, 0x4d, 0x54, 0x6f, 0x70, 0x42, 0x54, 0x79,
				0x70, 0x65, 0x22, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x44, 0x61, 0x6e, 0x73, 0x6b,
				0x63, 0x7a, 0x65, 0x63, 0x68, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x6b, 0x6e, 0x6f,
				0x77, 0x73, 0x3c, 0x2f, 0x68, 0x35, 0x3e, 0x66, 0x61, 0x71, 0x22, 0x3e, 0x7a,
				0x68, 0x2d, 0x63, 0x6e, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x2d, 0x31, 0x22, 0x29,
				0x3b, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x62, 0x6c, 0x75, 0x65, 0x73, 0x74, 0x72,
				0x75, 0x6c, 0x79, 0x64, 0x61, 0x76, 0x69, 0x73, 0x2e, 0x6a, 0x73, 0x27, 0x3b,
				0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x73, 0x74, 0x65, 0x65, 0x6c, 0x20, 0x79, 0x6f,
				0x75, 0x20, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6a,
				0x65, 0x73, 0x75, 0x73, 0x31, 0x30, 0x30, 0x25, 0x20, 0x6d, 0x65, 0x6e, 0x75,
				0x2e, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x77, 0x61, 0x6c, 0x65, 0x73, 0x72, 0x69,
				0x73, 0x6b, 0x73, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x67,
				0x62, 0x2d, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x67, 0x69, 0x66,
				0x22, 0x20, 0x76, 0x65, 0x67, 0x61, 0x73, 0x64, 0x61, 0x6e, 0x73, 0x6b, 0x65,
				0x65, 0x73, 0x74, 0x69, 0x73, 0x68, 0x71, 0x69, 0x70, 0x73, 0x75, 0x6f, 0x6d,
				0x69, 0x73, 0x6f, 0x62, 0x72, 0x65, 0x64, 0x65, 0x73, 0x64, 0x65, 0x65, 0x6e,
				0x74, 0x72, 0x65, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x70, 0x75, 0x65, 0x64, 0x65,
				0x61, 0xc3, 0xb1, 0x6f, 0x73, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x74, 0x69, 0x65,
				0x6e, 0x65, 0x68, 0x61, 0x73, 0x74, 0x61, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x70,
				0x61, 0x72, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x75, 0x65, 0x76,
				0x6f, 0x68, 0x61, 0x63, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6d, 0x69,
				0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x6d, 0x75, 0x6e, 0x64, 0x6f,
				0x61, 0x71, 0x75, 0xc3, 0xad, 0x64, 0xc3, 0xad, 0x61, 0x73, 0x73, 0xc3, 0xb3,
				0x6c, 0x6f, 0x61, 0x79, 0x75, 0x64, 0x61, 0x66, 0x65, 0x63, 0x68, 0x61, 0x74,
				0x6f, 0x64, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x6e, 0x6f,
				0x73, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x61, 0x73, 0x73, 0x69,
				0x74, 0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x61, 0x68, 0x6f, 0x72, 0x61,
				0x6c, 0x75, 0x67, 0x61, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x65, 0x73, 0x74,
				0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x61,
				0x6e, 0x74, 0x65, 0x73, 0x66, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61,
				0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x61,
				0x6c, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x6f,
				0x71, 0x75, 0x69, 0x65, 0x6e, 0x6d, 0x65, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x64,
				0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0xc3, 0xa1, 0x76,
				0x65, 0x63, 0x65, 0x73, 0x64, 0x65, 0x63, 0x69, 0x72, 0x6a, 0x6f, 0x73, 0xc3,
				0xa9, 0x65, 0x73, 0x74, 0x61, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x72,
				0x75, 0x70, 0x6f, 0x68, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
				0x74, 0x65, 0x6e, 0x67, 0x6f, 0x61, 0x6d, 0x69, 0x67, 0x6f, 0x63, 0x6f, 0x73,
				0x61, 0x73, 0x6e, 0x69, 0x76, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x6d,
				0x69, 0x73, 0x6d, 0x61, 0x61, 0x69, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x6c, 0x69,
				0x6f, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x68, 0x61, 0x63, 0x69, 0x61, 0x66, 0x61,
				0x76, 0x6f, 0x72, 0x6a, 0x75, 0x6e, 0x69, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x65,
				0x70, 0x75, 0x6e, 0x74, 0x6f, 0x62, 0x75, 0x65, 0x6e, 0x6f, 0x61, 0x75, 0x74,
				0x6f, 0x72, 0x61, 0x62, 0x72, 0x69, 0x6c, 0x62, 0x75, 0x65, 0x6e, 0x61, 0x74,
				0x65, 0x78, 0x74, 0x6f, 0x6d, 0x61, 0x72, 0x7a, 0x6f, 0x73, 0x61, 0x62, 0x65,
				0x72, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x75, 0x65, 0x67, 0x6f, 0x63, 0xc3,
				0xb3, 0x6d, 0x6f, 0x65, 0x6e, 0x65, 0x72, 0x6f, 0x6a, 0x75, 0x65, 0x67, 0x6f,
				0x70, 0x65, 0x72, 0xc3, 0xba, 0x68, 0x61, 0x62, 0x65, 0x72, 0x65, 0x73, 0x74,
				0x6f, 0x79, 0x6e, 0x75, 0x6e, 0x63, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x76,
				0x61, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x62, 0x72,
				0x6f, 0x67, 0x75, 0x73, 0x74, 0x61, 0x69, 0x67, 0x75, 0x61, 0x6c, 0x76, 0x6f,
				0x74, 0x6f, 0x73, 0x63, 0x61, 0x73, 0x6f, 0x73, 0x67, 0x75, 0xc3, 0xad, 0x61,
				0x70, 0x75, 0x65, 0x64, 0x6f, 0x73, 0x6f, 0x6d, 0x6f, 0x73, 0x61, 0x76, 0x69,
				0x73, 0x6f, 0x75, 0x73, 0x74, 0x65, 0x64, 0x64, 0x65, 0x62, 0x65, 0x6e, 0x6e,
				0x6f, 0x63, 0x68, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61, 0x66, 0x61, 0x6c, 0x74,
				0x61, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x64, 0x69,
				0x63, 0x68, 0x6f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x63, 0x6c, 0x61, 0x76, 0x65,
				0x63, 0x61, 0x73, 0x61, 0x73, 0x6c, 0x65, 0xc3, 0xb3, 0x6e, 0x70, 0x6c, 0x61,
				0x7a, 0x6f, 0x6c, 0x61, 0x72, 0x67, 0x6f, 0x6f, 0x62, 0x72, 0x61, 0x73, 0x76,
				0x69, 0x73, 0x74, 0x61, 0x61, 0x70, 0x6f, 0x79, 0x6f, 0x6a, 0x75, 0x6e, 0x74,
				0x6f, 0x74, 0x72, 0x61, 0x74, 0x61, 0x76, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x72,
				0x65, 0x61, 0x72, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x68, 0x65, 0x6d, 0x6f, 0x73,
				0x63, 0x69, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x69, 0x73,
				0x6f, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x6e, 0xc3,
				0xa1, 0x72, 0x65, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x72,
				0x6f, 0x63, 0x65, 0x72, 0x63, 0x61, 0x70, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61,
				0x70, 0x65, 0x6c, 0x6d, 0x65, 0x6e, 0x6f, 0x72, 0xc3, 0xba, 0x74, 0x69, 0x6c,
				0x63, 0x6c, 0x61, 0x72, 0x6f, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x63, 0x61, 0x6c,
				0x6c, 0x65, 0x70, 0x6f, 0x6e, 0x65, 0x72, 0x74, 0x61, 0x72, 0x64, 0x65, 0x6e,
				0x61, 0x64, 0x69, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x73, 0x69, 0x67, 0x75,
				0x65, 0x65, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6c, 0x6f, 0x63, 0x6f,
				0x63, 0x68, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x73, 0x6d, 0x61, 0x64, 0x72, 0x65,
				0x63, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0xc3,
				0xb1, 0x6f, 0x71, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61, 0x73, 0x61, 0x72, 0x62,
				0x61, 0x6e, 0x63, 0x6f, 0x68, 0x69, 0x6a, 0x6f, 0x73, 0x76, 0x69, 0x61, 0x6a,
				0x65, 0x70, 0x61, 0x62, 0x6c, 0x6f, 0xc3, 0xa9, 0x73, 0x74, 0x65, 0x76, 0x69,
				0x65, 0x6e, 0x65, 0x72, 0x65, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x61, 0x72,
				0x66, 0x6f, 0x6e, 0x64, 0x6f, 0x63, 0x61, 0x6e, 0x61, 0x6c, 0x6e, 0x6f, 0x72,
				0x74, 0x65, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x61, 0x75, 0x73, 0x61, 0x74,
				0x6f, 0x6d, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x73, 0x6c, 0x75, 0x6e, 0x65,
				0x73, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x76, 0x65,
				0x6e, 0x64, 0x6f, 0x70, 0x65, 0x73, 0x61, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x73,
				0x74, 0x65, 0x6e, 0x67, 0x61, 0x6d, 0x61, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
				0x76, 0x61, 0x70, 0x61, 0x64, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x76,
				0x61, 0x6d, 0x6f, 0x73, 0x7a, 0x6f, 0x6e, 0x61, 0x73, 0x61, 0x6d, 0x62, 0x6f,
				0x73, 0x62, 0x61, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x61, 0x62,
				0x75, 0x73, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x75, 0x62, 0x69, 0x72,
				0x72, 0x69, 0x6f, 0x6a, 0x61, 0x76, 0x69, 0x76, 0x69, 0x72, 0x67, 0x72, 0x61,
				0x64, 0x6f, 0x63, 0x68, 0x69, 0x63, 0x61, 0x61, 0x6c, 0x6c, 0xc3, 0xad, 0x6a,
				0x6f, 0x76, 0x65, 0x6e, 0x64, 0x69, 0x63, 0x68, 0x61, 0x65, 0x73, 0x74, 0x61,
				0x6e, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x72, 0x73, 0x75,
				0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x6f, 0x73, 0x66, 0x69, 0x6e, 0x65, 0x73,
				0x6c, 0x6c, 0x61, 0x6d, 0x61, 0x62, 0x75, 0x73, 0x63, 0x6f, 0xc3, 0xa9, 0x73,
				0x74, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x70,
				0x6c, 0x61, 0x7a, 0x61, 0x68, 0x75, 0x6d, 0x6f, 0x72, 0x70, 0x61, 0x67, 0x61,
				0x72, 0x6a, 0x75, 0x6e, 0x74, 0x61, 0x64, 0x6f, 0x62, 0x6c, 0x65, 0x69, 0x73,
				0x6c, 0x61, 0x73, 0x62, 0x6f, 0x6c, 0x73, 0x61, 0x62, 0x61, 0xc3, 0xb1, 0x6f,
				0x68, 0x61, 0x62, 0x6c, 0x61, 0x6c, 0x75, 0x63, 0x68, 0x61, 0xc3, 0x81, 0x72,
				0x65, 0x61, 0x64, 0x69, 0x63, 0x65, 0x6e, 0x6a, 0x75, 0x67, 0x61, 0x72, 0x6e,
				0x6f, 0x74, 0x61, 0x73, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0xc3,
				0xa1, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x61, 0x62,
				0x61, 0x6a, 0x6f, 0x65, 0x73, 0x74, 0xc3, 0xa9, 0x67, 0x75, 0x73, 0x74, 0x6f,
				0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x61, 0x72, 0x69, 0x6f, 0x66, 0x69, 0x72,
				0x6d, 0x61, 0x63, 0x6f, 0x73, 0x74, 0x6f, 0x66, 0x69, 0x63, 0x68, 0x61, 0x70,
				0x6c, 0x61, 0x74, 0x61, 0x68, 0x6f, 0x67, 0x61, 0x72, 0x61, 0x72, 0x74, 0x65,
				0x73, 0x6c, 0x65, 0x79, 0x65, 0x73, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6d, 0x75,
				0x73, 0x65, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x73,
				0x6d, 0x69, 0x74, 0x61, 0x64, 0x63, 0x69, 0x65, 0x6c, 0x6f, 0x63, 0x68, 0x69,
				0x63, 0x6f, 0x6d, 0x69, 0x65, 0x64, 0x6f, 0x67, 0x61, 0x6e, 0x61, 0x72, 0x73,
				0x61, 0x6e, 0x74, 0x6f, 0x65, 0x74, 0x61, 0x70, 0x61, 0x64, 0x65, 0x62, 0x65,
				0x73, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x72, 0x65, 0x64, 0x65, 0x73, 0x73, 0x69,
				0x65, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x61,
				0x64, 0x75, 0x64, 0x61, 0x73, 0x64, 0x65, 0x73, 0x65, 0x6f, 0x76, 0x69, 0x65,
				0x6a, 0x6f, 0x64, 0x65, 0x73, 0x65, 0x61, 0x61, 0x67, 0x75, 0x61, 0x73, 0x26,
				0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6f,
				0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x76, 0x65,
				0x6e, 0x74, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74,
				0x65, 0x6d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65,
				0x72, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
				0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6d,
				0x65, 0x64, 0x69, 0x75, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x75,
				0x6d, 0x62, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x73,
				0x75, 0x6c, 0x74, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73, 0x63, 0x72, 0x65,
				0x65, 0x6e, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
				0x6c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
				0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
				0x70, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x6d, 0x6f,
				0x62, 0x69, 0x6c, 0x65, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x68, 0x6f,
				0x74, 0x6f, 0x73, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69,
				0x6f, 0x6e, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x73, 0x6f, 0x63, 0x69, 0x61,
				0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
				0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x65,
				0x6e, 0x67, 0x74, 0x68, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x66, 0x72, 0x69,
				0x65, 0x6e, 0x64, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x61, 0x75, 0x74, 0x68,
				0x6f, 0x72, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x65, 0x76, 0x69, 0x65,
				0x77, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
				0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65,
				0x78, 0x70, 0x61, 0x6e, 0x64, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x6f,
				0x72, 0x6d, 0x61, 0x74, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x70, 0x6f, 0x69,
				0x6e, 0x74, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73,
				0x6f, 0x6e, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67,
				0x6e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73,
				0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x6e, 0x61,
				0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x66, 0x69, 0x67,
				0x75, 0x72, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x63, 0x75, 0x73, 0x74,
				0x6f, 0x6d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x74, 0x74, 0x65,
				0x72, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
				0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75,
				0x70, 0x6c, 0x6f, 0x61, 0x64, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6d, 0x65,
				0x74, 0x68, 0x6f, 0x64, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x73, 0x63, 0x68,
				0x6f, 0x6f, 0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x61, 0x64,
				0x6f, 0x77, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65,
				0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,
				0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x63,
				0x68, 0x72, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6e, 0x6f,
				0x74, 0x69, 0x63, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x64,
				0x69, 0x6e, 0x67, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f,
				0x72, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x71, 0x75, 0x61, 0x72,
				0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
				0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6c,
				0x61, 0x74, 0x65, 0x73, 0x74, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72,
				0x61, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x74, 0x72,
				0x6f, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x64,
				0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
				0x64, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
				0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x70,
				0x6c, 0x61, 0x63, 0x65, 0x73, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
				0x61, 0x74, 0x69, 0x63, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72,
				0x65, 0x61, 0x6d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x61,
				0x63, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68,
				0x74, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3e,
				0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x76,
				0x61, 0x6c, 0x6c, 0x65, 0x79, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x65,
				0x61, 0x64, 0x65, 0x72, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x65, 0x63,
				0x6f, 0x6e, 0x64, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x72,
				0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e,
				0x67, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
				0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x73,
				0x74, 0x61, 0x74, 0x65, 0x73, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x76, 0x69,
				0x73, 0x75, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x76, 0x6f, 0x6c,
				0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65,
				0x75, 0x6d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
				0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79,
				0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6d,
				0x61, 0x72, 0x6b, 0x65, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x68,
				0x61, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x65, 0x66,
				0x6f, 0x72, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6d, 0x6f, 0x6d, 0x65,
				0x6e, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
				0x6e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,
				0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x65,
				0x78, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x45, 0x75,
				0x72, 0x6f, 0x70, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x6c, 0x65, 0x67,
				0x61, 0x63, 0x79, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x65, 0x6e, 0x6f, 0x75,
				0x67, 0x68, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x65,
				0x72, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
				0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
				0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,
				0x70, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x74,
				0x68, 0x65, 0x72, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x70,
				0x6c, 0x79, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x65, 0x73, 0x63, 0x61, 0x70,
				0x65, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x63, 0x68, 0x75, 0x72, 0x63, 0x68,
				0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x63,
				0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x6d, 0x65,
				0x6d, 0x6f, 0x72, 0x79, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x6c,
				0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62,
				0x65, 0x72, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72,
				0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
				0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73,
				0x69, 0x6c, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x64, 0x65,
				0x6c, 0x65, 0x74, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x62, 0x72, 0x6f,
				0x77, 0x73, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
				0x61, 0x6c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x77, 0x69, 0x64, 0x67, 0x65,
				0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
				0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63,
				0x6c, 0x61, 0x69, 0x6d, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x61,
				0x66, 0x65, 0x74, 0x79, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x70, 0x69,
				0x72, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x65,
				0x61, 0x64, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x65, 0x64, 0x65,
				0x64, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65,
				0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x62,
				0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x63, 0x68,
				0x61, 0x72, 0x67, 0x65, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x66, 0x61, 0x63,
				0x74, 0x6f, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x62, 0x61, 0x73,
				0x65, 0x64, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69,
				0x67, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64,
				0x68, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x69,
				0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6c,
				0x77, 0x61, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x6f, 0x74,
				0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x29, 0x7b, 0x76, 0x61,
				0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6f, 0x72, 0x61, 0x6e, 0x67,
				0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x28,
				0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x62,
				0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
				0x76, 0x69, 0x65, 0x77, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x69, 0x73,
				0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x69,
				0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x62, 0x65, 0x61, 0x75, 0x74,
				0x79, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74,
				0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x61,
				0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x68,
				0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x72,
				0x69, 0x6e, 0x67, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x62, 0x69,
				0x6c, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6c,
				0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
				0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x63,
				0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x73,
				0x6c, 0x61, 0x6e, 0x64, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x63, 0x6f, 0x6f,
				0x6b, 0x69, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6d, 0x61, 0x7a,
				0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x64, 0x76, 0x69, 0x63,
				0x65, 0x69, 0x6e, 0x3c, 0x2f, 0x61, 0x3e, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20,
				0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x42,
				0x45, 0x47, 0x49, 0x4e, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x73, 0x74,
				0x61, 0x72, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x68, 0x65, 0x69,
				0x67, 0x68, 0x74, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x6c, 0x61,
				0x6e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x69, 0x72,
				0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
				0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x6d,
				0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x0a,
				0x0a, 0x4f, 0x6e, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x6d, 0x65, 0x6e,
				0x75, 0x22, 0x3e, 0x50, 0x68, 0x69, 0x6c, 0x69, 0x70, 0x61, 0x77, 0x61, 0x72,
				0x64, 0x73, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x6d, 0x70, 0x6f, 0x72,
				0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
				0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
				0x70, 0x6f, 0x72, 0x74, 0x73, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x77, 0x65,
				0x65, 0x6b, 0x6c, 0x79, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x62, 0x65, 0x68,
				0x69, 0x6e, 0x64, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x6c, 0x6f, 0x67, 0x67,
				0x65, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x3c,
				0x2f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
				0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69,
				0x73, 0x73, 0x75, 0x65, 0x64, 0x33, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x63, 0x61,
				0x6e, 0x61, 0x64, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x63, 0x68,
				0x65, 0x6d, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x7a,
				0x69, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x22,
				0x3e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x65,
				0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6d,
				0x61, 0x72, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x63, 0x61,
				0x6d, 0x65, 0x72, 0x61, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x5f, 0x66, 0x6f,
				0x72, 0x6d, 0x22, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x73, 0x74, 0x72, 0x65,
				0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x2e, 0x67, 0x69, 0x66, 0x22,
				0x20, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
				0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73,
				0x75, 0x72, 0x76, 0x69, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x66, 0x65,
				0x6d, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x69, 0x7a,
				0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x74, 0x65, 0x78, 0x74,
				0x22, 0x3e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x74, 0x68, 0x61, 0x6e, 0x6b,
				0x73, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
				0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x61, 0x6e, 0x79, 0x6f, 0x6e, 0x65, 0x41,
				0x66, 0x72, 0x69, 0x63, 0x61, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x72, 0x65,
				0x63, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3c, 0x62, 0x72,
				0x20, 0x2f, 0x3e, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x72, 0x69, 0x63,
				0x65, 0x73, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x7c, 0x7c, 0x20, 0x7b, 0x7d,
				0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
				0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x77, 0x72, 0x61, 0x70, 0x22, 0x3e, 0x66,
				0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x6d, 0x69,
				0x6e, 0x75, 0x74, 0x65, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x6f,
				0x74, 0x65, 0x73, 0x31, 0x35, 0x30, 0x70, 0x78, 0x7c, 0x65, 0x73, 0x74, 0x61,
				0x74, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c,
				0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b,
				0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x31,
				0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x70, 0x72,
				0x69, 0x6e, 0x63, 0x65, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x2e, 0x70, 0x6e,
				0x67, 0x22, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x65,
				0x73, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x73, 0x6f, 0x75, 0x6e, 0x64,
				0x73, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
				0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x26,
				0x61, 0x6d, 0x70, 0x3b, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2e, 0x20,
				0x57, 0x69, 0x74, 0x68, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x6f, 0x77, 0x6e,
				0x65, 0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x66,
				0x69, 0x74, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x61, 0x6e, 0x6e, 0x75, 0x61,
				0x6c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74,
				0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6c,
				0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x69, 0x73,
				0x72, 0x61, 0x65, 0x6c, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63,
				0x69, 0x64, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64,
				0x65, 0x72, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x62, 0x72, 0x61, 0x6e, 0x63,
				0x68, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b,
				0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x3c, 0x72,
				0x61, 0x63, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x2d,
				0x26, 0x67, 0x74, 0x3b, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x65, 0x78,
				0x75, 0x61, 0x6c, 0x62, 0x75, 0x72, 0x65, 0x61, 0x75, 0x2e, 0x6a, 0x70, 0x67,
				0x22, 0x20, 0x31, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x6f, 0x62, 0x74, 0x61, 0x69,
				0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
				0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x6d,
				0x65, 0x6e, 0x75, 0x22, 0x20, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x74, 0x6f,
				0x64, 0x61, 0x79, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x63, 0x6f, 0x75,
				0x6e, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,
				0x6c, 0x79, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
				0x74, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
				0x74, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x29, 0x3b, 0x76, 0x61, 0x72, 0x20, 0x66,
				0x6f, 0x72, 0x65, 0x73, 0x74, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x65, 0x72,
				0x72, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x65, 0x6c,
				0x73, 0x65, 0x7b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x67,
				0x3c, 0x2f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
				0x2e, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
				0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x31, 0x30, 0x70, 0x78, 0x20, 0x30, 0x70,
				0x72, 0x61, 0x67, 0x6d, 0x61, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x6a, 0x75,
				0x6e, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x70, 0x6c, 0x61,
				0x63, 0x65, 0x64, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x75, 0x67,
				0x69, 0x6e, 0x35, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x70, 0x61, 0x67, 0x65, 0x22,
				0x3e, 0x62, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x28,
				0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
				0x63, 0x6f, 0x75, 0x6e, 0x74, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x73, 0x63,
				0x68, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x66, 0x69, 0x6c,
				0x6c, 0x65, 0x64, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x72, 0x65, 0x61, 0x64,
				0x65, 0x72, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x28, 0x61, 0x70, 0x70, 0x65, 0x61,
				0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3e,
				0x62, 0x6f, 0x64, 0x79, 0x22, 0x3e, 0x0a, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x54,
				0x68, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x65, 0x65, 0x69, 0x6e, 0x67, 0x6a, 0x65,
				0x72, 0x73, 0x65, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x3c, 0x2f, 0x76, 0x65, 0x72,
				0x69, 0x66, 0x79, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6a, 0x75,
				0x72, 0x79, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
				0x65, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73,
				0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x6e,
				0x61, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x6f,
				0x78, 0x22, 0x3e, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x44, 0x61,
				0x76, 0x69, 0x64, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x62, 0x6c,
				0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70, 0x72, 0x69, 0x6c,
				0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
				0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x62,
				0x6f, 0x61, 0x72, 0x64, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x61,
				0x6d, 0x70, 0x75, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x7c, 0x7c, 0x20,
				0x5b, 0x5d, 0x3b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x67, 0x75, 0x69, 0x74,
				0x61, 0x72, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x77, 0x69, 0x64, 0x74, 0x68,
				0x3a, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20,
				0x2e, 0x70, 0x68, 0x70, 0x22, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x6c,
				0x61, 0x79, 0x65, 0x72, 0x73, 0x77, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x73, 0x74,
				0x6f, 0x72, 0x65, 0x73, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x77, 0x65,
				0x64, 0x65, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x69,
				0x6c, 0x79, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e,
				0x67, 0x0a, 0x0a, 0x57, 0x68, 0x69, 0x6c, 0x74, 0x61, 0x79, 0x6c, 0x6f, 0x72,
				0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x66,
				0x72, 0x65, 0x6e, 0x63, 0x68, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x29,
				0x20, 0x2b, 0x20, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x62, 0x75, 0x79,
				0x69, 0x6e, 0x67, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x6d, 0x62,
				0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x6f, 0x70, 0x70, 0x69, 0x6e,
				0x67, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e,
				0x76, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x6d,
				0x61, 0x6a, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x6d, 0x61,
				0x72, 0x74, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x68, 0x61, 0x70,
				0x70, 0x65, 0x6e, 0x3c, 0x2f, 0x6e, 0x61, 0x76, 0x3e, 0x6b, 0x61, 0x6e, 0x73,
				0x61, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x49, 0x6d, 0x61, 0x67, 0x65,
				0x73, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,
				0x68, 0x73, 0x70, 0x61, 0x63, 0x65, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x20,
				0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f,
				0x6c, 0x73, 0x6b, 0x69, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6a, 0x6f, 0x72,
				0x64, 0x61, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72,
				0x74, 0x20, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2e, 0x68, 0x74, 0x6d,
				0x6c, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x3e, 0x30, 0x31, 0x2e, 0x6a, 0x70, 0x67,
				0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6d,
				0x69, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x49, 0x53,
				0x42, 0x4e, 0x20, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x67, 0x75, 0x69,
				0x64, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x65, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x78, 0x6d, 0x6c, 0x22,
				0x20, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
				0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x45, 0x78, 0x70, 0x3a,
				0x68, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x76, 0x69,
				0x72, 0x67, 0x69, 0x6e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x74,
				0x72, 0x3e, 0x0d, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x76, 0x61,
				0x72, 0x20, 0x3e, 0x27, 0x29, 0x3b, 0x0a, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
				0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0a, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61,
				0x62, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x67, 0x61, 0x6c, 0x65, 0x67, 0x6f, 0x6d,
				0x61, 0x67, 0x79, 0x61, 0x72, 0x70, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x73, 0x72,
				0x70, 0x73, 0x6b, 0x69, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xe4, 0xb8, 0xad,
				0xe6, 0x96, 0x87, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe7, 0xb9, 0x81, 0xe9,
				0xab, 0x94, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe5, 0x9b,
				0xbd, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa,
				0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8,
				0xae, 0xba, 0xe5, 0x9d, 0x9b, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9c,
				0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0xaa,
				0xe4, 0xba, 0xba, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0x87, 0xaa, 0xe5,
				0xb7, 0xb1, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c,
				0x8b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb,
				0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xab, 0x99, 0xe6,
				0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0xe4, 0xb8,
				0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x94, 0xa8,
				0xe6, 0x88, 0xb7, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe4, 0xbd, 0x9c, 0xe8,
				0x80, 0x85, 0xe6, 0x8a, 0x80, 0xe6, 0x9c, 0xaf, 0xe9, 0x97, 0xae, 0xe9, 0xa2,
				0x98, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd,
				0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8,
				0xbd, 0xaf, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe4, 0xb8,
				0xbb, 0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe8, 0xa7, 0x86,
				0xe9, 0xa2, 0x91, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0xb3, 0xa8, 0xe5,
				0x86, 0x8c, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x94, 0xb6, 0xe8, 0x97,
				0x8f, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90,
				0xe5, 0xb8, 0x82, 0xe5, 0x9c, 0xba, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe7,
				0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xbb,
				0x80, 0xe4, 0xb9, 0x88, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe7, 0x94, 0x9f,
				0xe6, 0xb4, 0xbb, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x8f, 0x91, 0xe5,
				0xb1, 0x95, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c,
				0xba, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xbb, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0,
				0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe6,
				0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x85, 0xb3, 0xe4, 0xba, 0x8e, 0xe6, 0x9b,
				0xb4, 0xe5, 0xa4, 0x9a, 0xe8, 0xbf, 0x99, 0xe4, 0xb8, 0xaa, 0xe7, 0xb3, 0xbb,
				0xe7, 0xbb, 0x9f, 0xe7, 0x9f, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0xb8, 0xb8, 0xe6,
				0x88, 0x8f, 0xe5, 0xb9, 0xbf, 0xe5, 0x91, 0x8a, 0xe5, 0x85, 0xb6, 0xe4, 0xbb,
				0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8,
				0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xbc, 0x9a, 0xe5, 0x91, 0x98, 0xe8,
				0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe7, 0x89,
				0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xb5, 0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x96,
				0xe7, 0x95, 0x8c, 0xe8, 0xae, 0xbe, 0xe8, 0xae, 0xa1, 0xe5, 0x85, 0x8d, 0xe8,
				0xb4, 0xb9, 0xe6, 0x95, 0x99, 0xe8, 0x82, 0xb2, 0xe5, 0x8a, 0xa0, 0xe5, 0x85,
				0xa5, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbb, 0x96, 0xe4, 0xbb, 0xac,
				0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x8d, 0x9a, 0xe5, 0xae, 0xa2, 0xe7,
				0x8e, 0xb0, 0xe5, 0x9c, 0xa8, 0xe4, 0xb8, 0x8a, 0xe6, 0xb5, 0xb7, 0xe5, 0xa6,
				0x82, 0xe4, 0xbd, 0x95, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe7, 0x95, 0x99,
				0xe8, 0xa8, 0x80, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xa4, 0xbe, 0xe5,
				0x8c, 0xba, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe6, 0x9c, 0xac, 0xe7, 0xab,
				0x99, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
				0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x9b, 0xbd, 0xe9, 0x99, 0x85, 0xe9,
				0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6, 0xe5, 0xbb,
				0xba, 0xe8, 0xae, 0xbe, 0xe6, 0x9c, 0x8b, 0xe5, 0x8f, 0x8b, 0xe9, 0x98, 0x85,
				0xe8, 0xaf, 0xbb, 0xe6, 0xb3, 0x95, 0xe5, 0xbe, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7,
				0xbd, 0xae, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
				0xa9, 0xe8, 0xbf, 0x99, 0xe6, 0xa0, 0xb7, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
				0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe5,
				0x9b, 0xa0, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x9c,
				0x80, 0xe5, 0x90, 0x8e, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe4, 0xb8, 0x8d,
				0xe8, 0x83, 0xbd, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xa1, 0x8c, 0xe4,
				0xb8, 0x9a, 0xe7, 0xa7, 0x91, 0xe6, 0x8a, 0x80, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,
				0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x88, 0xe4, 0xbd, 0x9c,
				0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0xb6, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc, 0x9a, 0xe7,
				0xa0, 0x94, 0xe7, 0xa9, 0xb6, 0xe4, 0xb8, 0x93, 0xe4, 0xb8, 0x9a, 0xe5, 0x85,
				0xa8, 0xe9, 0x83, 0xa8, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xbf, 0x99,
				0xe9, 0x87, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x98, 0xaf, 0xe5, 0xbc, 0x80, 0xe5,
				0xa7, 0x8b, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xb5, 0xe8, 0x84,
				0x91, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c,
				0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x96, 0x87, 0xe5, 0x8c, 0x96, 0xe8,
				0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe5, 0xad,
				0xa6, 0xe4, 0xb9, 0xa0, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb5, 0x8f,
				0xe8, 0xa7, 0x88, 0xe6, 0x8a, 0x95, 0xe8, 0xb5, 0x84, 0xe5, 0xb7, 0xa5, 0xe7,
				0xa8, 0x8b, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe6, 0x80, 0x8e, 0xe4, 0xb9,
				0x88, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,
				0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe8,
				0xb5, 0x84, 0xe8, 0xae, 0xaf, 0xe5, 0x9f, 0x8e, 0xe5, 0xb8, 0x82, 0xe6, 0x96,
				0xb9, 0xe6, 0xb3, 0x95, 0xe7, 0x94, 0xb5, 0xe5, 0xbd, 0xb1, 0xe6, 0x8b, 0x9b,
				0xe8, 0x81, 0x98, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xbb, 0xbb, 0xe4,
				0xbd, 0x95, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
				0xae, 0xe7, 0xbe, 0x8e, 0xe5, 0x9b, 0xbd, 0xe6, 0xb1, 0xbd, 0xe8, 0xbd, 0xa6,
				0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe4,
				0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x89,
				0x80, 0xe4, 0xbb, 0xa5, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe6, 0x98, 0xbe,
				0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x8d, 0x95, 0xe4,
				0xbd, 0x8d, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x9e,
				0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0x97, 0x85, 0xe6, 0xb8, 0xb8,
				0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0xb7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe7,
				0xb3, 0xbb, 0xe5, 0x88, 0x97, 0xe7, 0xbd, 0x91, 0xe5, 0x8f, 0x8b, 0xe5, 0xb8,
				0x96, 0xe5, 0xad, 0x90, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe9, 0xa2, 0x91,
				0xe9, 0x81, 0x93, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5,
				0x8c, 0xba, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0x85, 0xa8, 0xe5, 0x9b,
				0xbd, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x87, 0x8d, 0xe8, 0xa6, 0x81,
				0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe8,
				0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x8b, 0xe6, 0x83, 0x85, 0xe8, 0xbf,
				0x99, 0xe4, 0xba, 0x9b, 0xe8, 0x80, 0x83, 0xe8, 0xaf, 0x95, 0xe5, 0x8f, 0x91,
				0xe7, 0x8e, 0xb0, 0xe5, 0x9f, 0xb9, 0xe8, 0xae, 0xad, 0xe4, 0xbb, 0xa5, 0xe4,
				0xb8, 0x8a, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe6, 0x88, 0x90, 0xe4, 0xb8,
				0xba, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0xa6, 0x99, 0xe6, 0xb8, 0xaf,
				0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
				0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe5, 0xbc,
				0x80, 0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0xa0, 0x87,
				0xe5, 0x87, 0x86, 0xe6, 0xac, 0xa2, 0xe8, 0xbf, 0x8e, 0xe8, 0xa7, 0xa3, 0xe5,
				0x86, 0xb3, 0xe5, 0x9c, 0xb0, 0xe6, 0x96, 0xb9, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
				0x8b, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe8, 0xb4, 0xa3, 0xe4, 0xbb, 0xbb,
				0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe4,
				0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe5, 0xa5,
				0xb3, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe7, 0xa0, 0x81, 0xe9, 0x94, 0x80,
				0xe5, 0x94, 0xae, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0xb0, 0xe7, 0xa6, 0xbb, 0xe7,
				0xba, 0xbf, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
				0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91,
				0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
				0xb8, 0x8d, 0xe8, 0xa6, 0x81, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb3, 0xe6, 0x9c,
				0xba, 0xe6, 0x9e, 0x84, 0xe5, 0xbe, 0x88, 0xe5, 0xa4, 0x9a, 0xe6, 0x92, 0xad,
				0xe6, 0x94, 0xbe, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0xe6, 0x94, 0xbf, 0xe7,
				0xad, 0x96, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe8, 0x83, 0xbd, 0xe5, 0x8a,
				0x9b, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe6, 0x99, 0x82, 0xe9, 0x96, 0x93,
				0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0xb0, 0xe7, 0x83, 0xad, 0xe9, 0x97, 0xa8, 0xe5,
				0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe4, 0xb8, 0x93, 0xe5, 0x8c, 0xba, 0xe9, 0x9d,
				0x9e, 0xe5, 0xb8, 0xb8, 0xe8, 0x8b, 0xb1, 0xe8, 0xaf, 0xad, 0xe7, 0x99, 0xbe,
				0xe5, 0xba, 0xa6, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0xbe, 0x8e, 0xe5,
				0xa5, 0xb3, 0xe6, 0xaf, 0x94, 0xe8, 0xbe, 0x83, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf,
				0x86, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0x9a, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae,
				0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe6, 0x84, 0x8f, 0xe8, 0xa7, 0x81, 0xe7,
				0xb2, 0xbe, 0xe5, 0xbd, 0xa9, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe6, 0x8f,
				0x90, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0x91, 0xe8, 0xa8, 0x80, 0xe6, 0x96, 0xb9,
				0xe9, 0x9d, 0xa2, 0xe5, 0x9f, 0xba, 0xe9, 0x87, 0x91, 0xe5, 0xa4, 0x84, 0xe7,
				0x90, 0x86, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0xbd, 0xb1, 0xe7, 0x89,
				0x87, 0xe9, 0x93, 0xb6, 0xe8, 0xa1, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0x89,
				0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7,
				0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4, 0xb8,
				0x93, 0xe5, 0xae, 0xb6, 0xe8, 0xbf, 0x99, 0xe7, 0xa7, 0x8d, 0xe8, 0xaf, 0x9d,
				0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0xb7, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5,
				0x8a, 0xa1, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,
				0x95, 0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe8, 0xb4, 0xa8, 0xe9, 0x87, 0x8f,
				0xe7, 0x94, 0xb7, 0xe4, 0xba, 0xba, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5,
				0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xe9, 0x83,
				0xa8, 0xe5, 0x88, 0x86, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe5, 0x92, 0xa8,
				0xe8, 0xaf, 0xa2, 0xe6, 0x97, 0xb6, 0xe5, 0xb0, 0x9a, 0xe6, 0xb3, 0xa8, 0xe6,
				0x84, 0x8f, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xad, 0xa6, 0xe6, 0xa0,
				0xa1, 0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xa5, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2,
				0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8,
				0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8,
				0xba, 0xe4, 0xba, 0x86, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0xaf, 0xb4,
				0xe6, 0x98, 0x8e, 0xe4, 0xbe, 0x9b, 0xe5, 0xba, 0x94, 0xe5, 0xad, 0xa9, 0xe5,
				0xad, 0x90, 0xe4, 0xb8, 0x93, 0xe9, 0xa2, 0x98, 0xe7, 0xa8, 0x8b, 0xe5, 0xba,
				0x8f, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe6, 0x9c, 0x83, 0xe5, 0x93, 0xa1,
				0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe4,
				0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe8, 0x80, 0x8c, 0xe4, 0xb8, 0x94, 0xe4, 0xbb,
				0x8a, 0xe5, 0xa4, 0xa9, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe5, 0x8a, 0xa8,
				0xe6, 0x80, 0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x89, 0xb9, 0xe5,
				0x88, 0xab, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
				0xbb, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb0, 0x8f, 0xe8, 0xaf, 0xb4,
				0xe6, 0x88, 0x91, 0xe5, 0x80, 0x91, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe5,
				0xaa, 0x92, 0xe4, 0xbd, 0x93, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe9, 0x82,
				0xa3, 0xe4, 0xb9, 0x88, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0xb7, 0xe5, 0x9b, 0xbd,
				0xe5, 0x86, 0x85, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xa0, 0xb9, 0xe6,
				0x8d, 0xae, 0xe7, 0x94, 0xb5, 0xe8, 0xa7, 0x86, 0xe5, 0xad, 0xa6, 0xe9, 0x99,
				0xa2, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0x89, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b,
				0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x8e, 0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8d, 0xe5,
				0x87, 0xba, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xbf, 0x87, 0xe6, 0xad,
				0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0x9f, 0xe6, 0x95, 0x85,
				0xe4, 0xba, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0xa0, 0x87, 0xe9,
				0xa2, 0x98, 0xe5, 0x95, 0x86, 0xe5, 0x8a, 0xa1, 0xe8, 0xbe, 0x93, 0xe5, 0x85,
				0xa5, 0xe4, 0xb8, 0x80, 0xe7, 0x9b, 0xb4, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,
				0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0xe4, 0xba, 0x86, 0xe8, 0xa7, 0xa3, 0xe5,
				0xbb, 0xba, 0xe7, 0xad, 0x91, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe5, 0x85,
				0xa8, 0xe7, 0x90, 0x83, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xae, 0xa1,
				0xe5, 0x88, 0x92, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0xe8, 0x89, 0xba, 0xe6,
				0x9c, 0xaf, 0xe7, 0x9b, 0xb8, 0xe5, 0x86, 0x8c, 0xe5, 0x8f, 0x91, 0xe7, 0x94,
				0x9f, 0xe7, 0x9c, 0x9f, 0xe7, 0x9a, 0x84, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b,
				0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7,
				0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe5, 0x88,
				0xb6, 0xe4, 0xbd, 0x9c, 0xe6, 0x9d, 0xa5, 0xe8, 0x87, 0xaa, 0xe6, 0xa0, 0x87,
				0xe7, 0xad, 0xbe, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8b, 0xe5, 0x8e, 0x9f, 0xe5,
				0x88, 0x9b, 0xe6, 0x97, 0xa0, 0xe6, 0xb3, 0x95, 0xe5, 0x85, 0xb6, 0xe4, 0xb8,
				0xad, 0xe5, 0x80, 0x8b, 0xe4, 0xba, 0xba, 0xe4, 0xb8, 0x80, 0xe5, 0x88, 0x87,
				0xe6, 0x8c, 0x87, 0xe5, 0x8d, 0x97, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe9,
				0x9b, 0x86, 0xe5, 0x9b, 0xa2, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe5, 0x85,
				0xb3, 0xe6, 0xb3, 0xa8, 0xe5, 0x9b, 0xa0, 0xe6, 0xad, 0xa4, 0xe7, 0x85, 0xa7,
				0xe7, 0x89, 0x87, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0x95, 0x86, 0xe4,
				0xb8, 0x9a, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,
				0x9f, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91,
				0xe7, 0xbb, 0xbc, 0xe5, 0x90, 0x88, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4,
				0xb8, 0x93, 0xe8, 0xbe, 0x91, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xba,
				0xa4, 0xe9, 0x80, 0x9a, 0xe8, 0xaf, 0x84, 0xe4, 0xbb, 0xb7, 0xe8, 0xa7, 0x89,
				0xe5, 0xbe, 0x97, 0xe7, 0xb2, 0xbe, 0xe5, 0x8d, 0x8e, 0xe5, 0xae, 0xb6, 0xe5,
				0xba, 0xad, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x84, 0x9f, 0xe8, 0xa7,
				0x89, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xb0,
				0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0xb6, 0xe5, 0xba, 0xa6, 0xe9,
				0xa3, 0x9f, 0xe5, 0x93, 0x81, 0xe8, 0x99, 0xbd, 0xe7, 0x84, 0xb6, 0xe8, 0xbd,
				0xac, 0xe8, 0xbd, 0xbd, 0xe6, 0x8a, 0xa5, 0xe4, 0xbb, 0xb7, 0xe8, 0xae, 0xb0,
				0xe8, 0x80, 0x85, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0x8c, 0xe6,
				0x94, 0xbf, 0xe4, 0xba, 0xba, 0xe6, 0xb0, 0x91, 0xe7, 0x94, 0xa8, 0xe5, 0x93,
				0x81, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe6, 0x8f, 0x90, 0xe5, 0x87, 0xba,
				0xe9, 0x85, 0x92, 0xe5, 0xba, 0x97, 0xe7, 0x84, 0xb6, 0xe5, 0x90, 0x8e, 0xe4,
				0xbb, 0x98, 0xe6, 0xac, 0xbe, 0xe7, 0x83, 0xad, 0xe7, 0x82, 0xb9, 0xe4, 0xbb,
				0xa5, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x8c, 0xe5, 0x85, 0xa8, 0xe5, 0x8f, 0x91,
				0xe5, 0xb8, 0x96, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0xa2, 0x86, 0xe5,
				0xaf, 0xbc, 0xe5, 0xb7, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5, 0x8c, 0xbb, 0xe9, 0x99,
				0xa2, 0xe7, 0x9c, 0x8b, 0xe7, 0x9c, 0x8b, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8,
				0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5,
				0x90, 0x84, 0xe7, 0xa7, 0x8d, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9d,
				0x90, 0xe6, 0x96, 0x99, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe4, 0xb9, 0x8b,
				0xe5, 0x90, 0x8e, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0x88, 0xe6,
				0x9e, 0x9c, 0xe4, 0xbb, 0x8a, 0xe5, 0xb9, 0xb4, 0xe8, 0xae, 0xba, 0xe6, 0x96,
				0x87, 0xe6, 0x88, 0x91, 0xe5, 0x9b, 0xbd, 0xe5, 0x91, 0x8a, 0xe8, 0xaf, 0x89,
				0xe7, 0x89, 0x88, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5,
				0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x89, 0x93, 0xe5, 0x8d, 0xb0, 0xe5, 0xbf,
				0xab, 0xe4, 0xb9, 0x90, 0xe6, 0x9c, 0xba, 0xe6, 0xa2, 0xb0, 0xe8, 0xa7, 0x82,
				0xe7, 0x82, 0xb9, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0xb2, 0xbe, 0xe7,
				0xa5, 0x9e, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xa9, 0xe7, 0x94,
				0xa8, 0xe7, 0xbb, 0xa7, 0xe7, 0xbb, 0xad, 0xe4, 0xbd, 0xa0, 0xe4, 0xbb, 0xac,
				0xe8, 0xbf, 0x99, 0xe4, 0xb9, 0x88, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe8,
				0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xa4, 0x9f, 0xe9, 0x9b,
				0x85, 0xe8, 0x99, 0x8e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe9, 0xa3, 0x8e,
				0xe6, 0xa0, 0xbc, 0xe4, 0xb8, 0x80, 0xe8, 0xb5, 0xb7, 0xe7, 0xa7, 0x91, 0xe5,
				0xad, 0xa6, 0xe4, 0xbd, 0x93, 0xe8, 0x82, 0xb2, 0xe7, 0x9f, 0xad, 0xe4, 0xbf,
				0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97,
				0xe8, 0xbf, 0x90, 0xe5, 0x8a, 0xa8, 0xe4, 0xba, 0xa7, 0xe4, 0xb8, 0x9a, 0xe4,
				0xbc, 0x9a, 0xe8, 0xae, 0xae, 0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe5, 0x85,
				0x88, 0xe7, 0x94, 0x9f, 0xe8, 0x81, 0x94, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0xaf,
				0xe6, 0x98, 0xaf, 0xe5, 0x95, 0x8f, 0xe9, 0xa1, 0x8c, 0xe7, 0xbb, 0x93, 0xe6,
				0x9e, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe8, 0xb0, 0x83, 0xe6, 0x9f,
				0xa5, 0xe8, 0xb3, 0x87, 0xe6, 0x96, 0x99, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
				0xe8, 0xb4, 0x9f, 0xe8, 0xb4, 0xa3, 0xe5, 0x86, 0x9c, 0xe4, 0xb8, 0x9a, 0xe8,
				0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe5, 0xae, 0x9e, 0xe6, 0x96, 0xbd, 0xe6, 0x8e,
				0xa5, 0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe9, 0x82, 0xa3,
				0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe5, 0x8a, 0xa0, 0xe5,
				0xbc, 0xba, 0xe5, 0xa5, 0xb3, 0xe6, 0x80, 0xa7, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
				0xb4, 0xe6, 0x9c, 0x8d, 0xe5, 0x8b, 0x99, 0xe4, 0xbc, 0x91, 0xe9, 0x97, 0xb2,
				0xe4, 0xbb, 0x8a, 0xe6, 0x97, 0xa5, 0xe5, 0xae, 0xa2, 0xe6, 0x9c, 0x8d, 0xe8,
				0xa7, 0x80, 0xe7, 0x9c, 0x8b, 0xe5, 0x8f, 0x82, 0xe5, 0x8a, 0xa0, 0xe7, 0x9a,
				0x84, 0xe8, 0xaf, 0x9d, 0xe4, 0xb8, 0x80, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0x9d,
				0xe8, 0xaf, 0x81, 0xe5, 0x9b, 0xbe, 0xe4, 0xb9, 0xa6, 0xe6, 0x9c, 0x89, 0xe6,
				0x95, 0x88, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a,
				0xa8, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe5, 0x86, 0xb3, 0xe5, 0xae, 0x9a,
				0xe8, 0x82, 0xa1, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0x8d, 0xe6, 0x96, 0xad, 0xe9,
				0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x8a,
				0x9e, 0xe6, 0xb3, 0x95, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe9, 0x87, 0x87,
				0xe7, 0x94, 0xa8, 0xe8, 0x90, 0xa5, 0xe9, 0x94, 0x80, 0xe6, 0x8a, 0x95, 0xe8,
				0xaf, 0x89, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0x88, 0xb1, 0xe6, 0x83,
				0x85, 0xe6, 0x91, 0x84, 0xe5, 0xbd, 0xb1, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x9b,
				0xe8, 0xa4, 0x87, 0xe8, 0xa3, 0xbd, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0xa6, 0xe6,
				0x9c, 0xba, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xa3,
				0x85, 0xe4, 0xbf, 0xae, 0xe8, 0xb4, 0xad, 0xe7, 0x89, 0xa9, 0xe5, 0x86, 0x9c,
				0xe6, 0x9d, 0x91, 0xe5, 0x85, 0xa8, 0xe9, 0x9d, 0xa2, 0xe7, 0xb2, 0xbe, 0xe5,
				0x93, 0x81, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x9e, 0xe4, 0xba, 0x8b, 0xe6, 0x83,
				0x85, 0xe6, 0xb0, 0xb4, 0xe5, 0xb9, 0xb3, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
				0xe4, 0xb8, 0x8a, 0xe5, 0xb8, 0x82, 0xe8, 0xb0, 0xa2, 0xe8, 0xb0, 0xa2, 0xe6,
				0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x95, 0x99, 0xe5, 0xb8, 0x88, 0xe4, 0xb8,
				0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe6, 0xad, 0x8c,
				0xe6, 0x9b, 0xb2, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe5, 0x88, 0x9b, 0xe6,
				0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xaa, 0xe8, 0xa6,
				0x81, 0xe6, 0x97, 0xb6, 0xe4, 0xbb, 0xa3, 0xe8, 0xb3, 0x87, 0xe8, 0xa8, 0x8a,
				0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0x9f, 0xe8,
				0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe5, 0xb1,
				0x95, 0xe7, 0xa4, 0xba, 0xe5, 0xbf, 0x83, 0xe7, 0x90, 0x86, 0xe8, 0xb4, 0xb4,
				0xe5, 0xad, 0x90, 0xe7, 0xb6, 0xb2, 0xe7, 0xab, 0x99, 0xe4, 0xb8, 0xbb, 0xe9,
				0xa1, 0x8c, 0xe8, 0x87, 0xaa, 0xe7, 0x84, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
				0xab, 0xe7, 0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe6, 0x94, 0xb9, 0xe9, 0x9d, 0xa9,
				0xe9, 0x82, 0xa3, 0xe4, 0xba, 0x9b, 0xe6, 0x9d, 0xa5, 0xe8, 0xaf, 0xb4, 0xe6,
				0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xe5, 0x88,
				0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0x88, 0xb8, 0xe8, 0x8a, 0x82,
				0xe7, 0x9b, 0xae, 0xe9, 0x87, 0x8d, 0xe7, 0x82, 0xb9, 0xe6, 0xac, 0xa1, 0xe6,
				0x95, 0xb8, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
				0x92, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x89, 0xbe, 0xe5, 0x88, 0xb0,
				0xe4, 0xbb, 0xa5, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0xa7, 0xe5, 0x85, 0xa8, 0xe4,
				0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0xb3, 0xe5, 0x9b,
				0x9e, 0xe7, 0xad, 0x94, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0x8b, 0xe4, 0xbf, 0x9d,
				0xe9, 0x9a, 0x9c, 0xe7, 0x8e, 0xb0, 0xe4, 0xbb, 0xa3, 0xe6, 0xa3, 0x80, 0xe6,
				0x9f, 0xa5, 0xe6, 0x8a, 0x95, 0xe7, 0xa5, 0xa8, 0xe5, 0xb0, 0x8f, 0xe6, 0x97,
				0xb6, 0xe6, 0xb2, 0x92, 0xe6, 0x9c, 0x89, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8,
				0xe7, 0x94, 0x9a, 0xe8, 0x87, 0xb3, 0xe4, 0xbb, 0xa3, 0xe7, 0x90, 0x86, 0xe7,
				0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe5, 0xa4,
				0x8d, 0xe5, 0x88, 0xb6, 0xe9, 0x87, 0x91, 0xe8, 0x9e, 0x8d, 0xe5, 0xb9, 0xb8,
				0xe7, 0xa6, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe6,
				0x88, 0x90, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0x8c, 0xe6, 0x83,
				0x85, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb0, 0xe6, 0x80, 0x9d, 0xe6, 0x83, 0xb3,
				0xe6, 0x80, 0x8e, 0xe6, 0xa0, 0xb7, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0xe8,
				0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x80, 0xe5, 0xa5, 0xbd, 0xe4, 0xba,
				0xa7, 0xe7, 0x94, 0x9f, 0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe6, 0x9c, 0x8d,
				0xe8, 0xa3, 0x85, 0xe5, 0xb9, 0xbf, 0xe4, 0xb8, 0x9c, 0xe5, 0x8a, 0xa8, 0xe6,
				0xbc, 0xab, 0xe9, 0x87, 0x87, 0xe8, 0xb4, 0xad, 0xe6, 0x96, 0xb0, 0xe6, 0x89,
				0x8b, 0xe7, 0xbb, 0x84, 0xe5, 0x9b, 0xbe, 0xe9, 0x9d, 0xa2, 0xe6, 0x9d, 0xbf,
				0xe5, 0x8f, 0x82, 0xe8, 0x80, 0x83, 0xe6, 0x94, 0xbf, 0xe6, 0xb2, 0xbb, 0xe5,
				0xae, 0xb9, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xa9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8a,
				0xaa, 0xe5, 0x8a, 0x9b, 0xe4, 0xba, 0xba, 0xe4, 0xbb, 0xac, 0xe5, 0x8d, 0x87,
				0xe7, 0xba, 0xa7, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0xe4, 0xba, 0xba, 0xe7,
				0x89, 0xa9, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe6, 0xb5, 0x81, 0xe8, 0xa1,
				0x8c, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97,
				0xe9, 0x9f, 0xa9, 0xe5, 0x9b, 0xbd, 0xe8, 0xb4, 0xb8, 0xe6, 0x98, 0x93, 0xe5,
				0xbc, 0x80, 0xe5, 0xb1, 0x95, 0xe7, 0x9b, 0xb8, 0xe9, 0x97, 0x9c, 0xe8, 0xa1,
				0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0xbd, 0xb1, 0xe8, 0xa7, 0x86, 0xe5, 0xa6, 0x82,
				0xe6, 0xad, 0xa4, 0xe7, 0xbe, 0x8e, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xa7, 0xe5,
				0xb0, 0x8f, 0xe6, 0x8a, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0x9d, 0xa1, 0xe6, 0xac,
				0xbe, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0xe8, 0xae, 0xb8, 0xe5, 0xa4, 0x9a,
				0xe6, 0xb3, 0x95, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0xb6, 0xe5, 0xb1, 0x85, 0xe4,
				0xb9, 0xa6, 0xe5, 0xba, 0x97, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0xab,
				0x8b, 0xe5, 0x8d, 0xb3, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0x8a, 0x80,
				0xe5, 0xb7, 0xa7, 0xe5, 0xa5, 0xa5, 0xe8, 0xbf, 0x90, 0xe7, 0x99, 0xbb, 0xe5,
				0x85, 0xa5, 0xe4, 0xbb, 0xa5, 0xe6, 0x9d, 0xa5, 0xe7, 0x90, 0x86, 0xe8, 0xae,
				0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0x87, 0xaa, 0xe7, 0x94, 0xb1,
				0xe4, 0xb8, 0xad, 0xe5, 0x8d, 0x8e, 0xe5, 0x8a, 0x9e, 0xe5, 0x85, 0xac, 0xe5,
				0xa6, 0x88, 0xe5, 0xa6, 0x88, 0xe7, 0x9c, 0x9f, 0xe6, 0xad, 0xa3, 0xe4, 0xb8,
				0x8d, 0xe9, 0x94, 0x99, 0xe5, 0x85, 0xa8, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x88,
				0xe5, 0x90, 0x8c, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0xab, 0xe4,
				0xba, 0xba, 0xe7, 0x9b, 0x91, 0xe7, 0x9d, 0xa3, 0xe5, 0x85, 0xb7, 0xe4, 0xbd,
				0x93, 0xe4, 0xb8, 0x96, 0xe7, 0xba, 0xaa, 0xe5, 0x9b, 0xa2, 0xe9, 0x98, 0x9f,
				0xe5, 0x88, 0x9b, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xbf, 0xe6, 0x8b, 0x85, 0xe5,
				0xa2, 0x9e, 0xe9, 0x95, 0xbf, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4, 0xbf,
				0x9d, 0xe6, 0x8c, 0x81, 0xe5, 0x95, 0x86, 0xe5, 0xae, 0xb6, 0xe7, 0xbb, 0xb4,
				0xe4, 0xbf, 0xae, 0xe5, 0x8f, 0xb0, 0xe6, 0xb9, 0xbe, 0xe5, 0xb7, 0xa6, 0xe5,
				0x8f, 0xb3, 0xe8, 0x82, 0xa1, 0xe4, 0xbb, 0xbd, 0xe7, 0xad, 0x94, 0xe6, 0xa1,
				0x88, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe7, 0x94, 0xb5, 0xe4, 0xbf, 0xa1,
				0xe7, 0xbb, 0x8f, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,
				0xae, 0xa3, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad,
				0xa3, 0xe5, 0xbc, 0x8f, 0xe7, 0x89, 0xb9, 0xe8, 0x89, 0xb2, 0xe4, 0xb8, 0x8b,
				0xe6, 0x9d, 0xa5, 0xe5, 0x8d, 0x8f, 0xe4, 0xbc, 0x9a, 0xe5, 0x8f, 0xaa, 0xe8,
				0x83, 0xbd, 0xe5, 0xbd, 0x93, 0xe7, 0x84, 0xb6, 0xe9, 0x87, 0x8d, 0xe6, 0x96,
				0xb0, 0xe5, 0x85, 0xa7, 0xe5, 0xae, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xaf, 0xbc,
				0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8,
				0xb3, 0xa3, 0xe5, 0xae, 0xb6, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe5, 0x9c,
				0x9f, 0xe5, 0x9c, 0xb0, 0xe6, 0xb5, 0x99, 0xe6, 0xb1, 0x9f, 0xe6, 0x94, 0xaf,
				0xe4, 0xbb, 0x98, 0xe6, 0x8e, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0xab, 0x99, 0xe9,
				0x95, 0xbf, 0xe6, 0x9d, 0xad, 0xe5, 0xb7, 0x9e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,
				0x8c, 0xe5, 0x88, 0xb6, 0xe9, 0x80, 0xa0, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x80,
				0xe6, 0x8e, 0xa8, 0xe5, 0xb9, 0xbf, 0xe7, 0x8e, 0xb0, 0xe5, 0x9c, 0xba, 0xe6,
				0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0xe4, 0xbc,
				0xa0, 0xe7, 0xbb, 0x9f, 0xe6, 0xad, 0x8c, 0xe6, 0x89, 0x8b, 0xe4, 0xbf, 0x9d,
				0xe9, 0x99, 0xa9, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c, 0xbb, 0xe7,
				0x96, 0x97, 0xe7, 0xbb, 0x8f, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x87, 0xe5, 0x8e,
				0xbb, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xb6, 0xe5, 0x85, 0xa5,
				0xe5, 0xb9, 0xb4, 0xe5, 0xba, 0xa6, 0xe6, 0x9d, 0x82, 0xe5, 0xbf, 0x97, 0xe7,
				0xbe, 0x8e, 0xe4, 0xb8, 0xbd, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe7, 0x99,
				0xbb, 0xe9, 0x99, 0x86, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d, 0xa5, 0xe5, 0x8a, 0xa0,
				0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xa3, 0xe6, 0x95, 0x99, 0xe7,
				0xa8, 0x8b, 0xe7, 0x89, 0x88, 0xe5, 0x9d, 0x97, 0xe8, 0xba, 0xab, 0xe4, 0xbd,
				0x93, 0xe9, 0x87, 0x8d, 0xe5, 0xba, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae,
				0xe6, 0x88, 0x90, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe5, 0xbc, 0x8f, 0xe5,
				0x9c, 0x9f, 0xe8, 0xb1, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x83, 0xb9, 0xe4, 0xb8,
				0x9c, 0xe6, 0x96, 0xb9, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x8d, 0x97,
				0xe4, 0xba, 0xac, 0xe6, 0xb1, 0x82, 0xe8, 0x81, 0x8c, 0xe5, 0x8f, 0x96, 0xe5,
				0xbe, 0x97, 0xe8, 0x81, 0x8c, 0xe4, 0xbd, 0x8d, 0xe7, 0x9b, 0xb8, 0xe4, 0xbf,
				0xa1, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f,
				0xe7, 0xbd, 0x91, 0xe9, 0xa1, 0xb5, 0xe7, 0xa1, 0xae, 0xe5, 0xae, 0x9a, 0xe5,
				0x9b, 0xbe, 0xe4, 0xbe, 0x8b, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0xe7, 0xa7,
				0xaf, 0xe6, 0x9e, 0x81, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xae,
				0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x9d, 0xe8, 0xb4, 0x9d, 0xe6, 0x9c, 0xba, 0xe5,
				0x85, 0xb3, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
				0x83, 0xe7, 0x97, 0x85, 0xe6, 0xaf, 0x92, 0xe5, 0xae, 0xa0, 0xe7, 0x89, 0xa9,
				0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x86, 0xe8, 0xa9, 0x95, 0xe8, 0xab, 0x96, 0xe7,
				0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x8f, 0x8a, 0xe6, 0x97, 0xb6, 0xe6, 0xb1,
				0x82, 0xe8, 0xb4, 0xad, 0xe7, 0xab, 0x99, 0xe7, 0x82, 0xb9, 0xe5, 0x84, 0xbf,
				0xe7, 0xab, 0xa5, 0xe6, 0xaf, 0x8f, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0xad, 0xe5,
				0xa4, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x86, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8,
				0xaa, 0xe5, 0xa4, 0xa9, 0xe6, 0xb4, 0xa5, 0xe5, 0xad, 0x97, 0xe4, 0xbd, 0x93,
				0xe5, 0x8f, 0xb0, 0xe7, 0x81, 0xa3, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0xe6,
				0x9c, 0xac, 0xe9, 0xa1, 0xb5, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0xae,
				0x98, 0xe6, 0x96, 0xb9, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x81, 0xe7, 0x9b, 0xb8,
				0xe6, 0x9c, 0xba, 0xe6, 0x88, 0x98, 0xe7, 0x95, 0xa5, 0xe5, 0xba, 0x94, 0xe5,
				0xbd, 0x93, 0xe5, 0xbe, 0x8b, 0xe5, 0xb8, 0x88, 0xe6, 0x96, 0xb9, 0xe4, 0xbe,
				0xbf, 0xe6, 0xa0, 0xa1, 0xe5, 0x9b, 0xad, 0xe8, 0x82, 0xa1, 0xe5, 0xb8, 0x82,
				0xe6, 0x88, 0xbf, 0xe5, 0xb1, 0x8b, 0xe6, 0xa0, 0x8f, 0xe7, 0x9b, 0xae, 0xe5,
				0x91, 0x98, 0xe5, 0xb7, 0xa5, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0xe7, 0xaa,
				0x81, 0xe7, 0x84, 0xb6, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0xac,
				0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x93, 0xe5, 0x90, 0x88, 0xe6, 0xa1, 0xa3, 0xe6,
				0xa1, 0x88, 0xe5, 0x8a, 0xb3, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0xa6, 0xe5, 0xa4,
				0x96, 0xe7, 0xbe, 0x8e, 0xe5, 0x85, 0x83, 0xe5, 0xbc, 0x95, 0xe8, 0xb5, 0xb7,
				0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe4,
				0xbc, 0x9a, 0xe8, 0xae, 0xa1, 0xe8, 0xaa, 0xaa, 0xe6, 0x98, 0x8e, 0xe9, 0x9a,
				0x90, 0xe7, 0xa7, 0x81, 0xe5, 0xae, 0x9d, 0xe5, 0xae, 0x9d, 0xe8, 0xa7, 0x84,
				0xe8, 0x8c, 0x83, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb1, 0xe5,
				0x90, 0x8c, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0, 0xe4, 0xbd, 0x93, 0xe7, 0xb3,
				0xbb, 0xe5, 0xb8, 0xa6, 0xe6, 0x9d, 0xa5, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,
				0xe7, 0x99, 0xbc, 0xe8, 0xa1, 0xa8, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe5,
				0x8a, 0xa0, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4, 0xba,
				0x8c, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe6, 0x88, 0x90,
				0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe5, 0x85, 0xb1, 0xe4,
				0xba, 0xab, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0xa5, 0xb3, 0xe5, 0xad,
				0xa9, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
				0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x80, 0x9a, 0xe4, 0xbf, 0xa1, 0xe8,
				0xb6, 0x85, 0xe7, 0xba, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xbd,
				0x93, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x98, 0xe7, 0xa7, 0x80, 0xe6, 0x80, 0xa7,
				0xe6, 0x84, 0x9f, 0xe6, 0x88, 0xbf, 0xe4, 0xba, 0xa7, 0xe9, 0x81, 0x8a, 0xe6,
				0x88, 0xb2, 0xe5, 0x87, 0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x8f, 0x90, 0xe4, 0xba,
				0xa4, 0xe5, 0xb0, 0xb1, 0xe4, 0xb8, 0x9a, 0xe4, 0xbf, 0x9d, 0xe5, 0x81, 0xa5,
				0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
				0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe5, 0xb1,
				0xb1, 0xe4, 0xb8, 0x9c, 0xe6, 0x83, 0x85, 0xe6, 0x84, 0x9f, 0xe7, 0x89, 0xb9,
				0xe6, 0xae, 0x8a, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0x9e, 0xe6, 0x90, 0x9c, 0xe5,
				0xb0, 0x8b, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe9, 0x97, 0xa8, 0xe6, 0x88,
				0xb7, 0xe8, 0xb4, 0xa2, 0xe5, 0x8a, 0xa1, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3,
				0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xb6, 0xe8, 0xb4, 0xa2, 0xe7, 0xbb, 0x8f, 0xe5,
				0x9d, 0x9a, 0xe6, 0x8c, 0x81, 0xe5, 0xb9, 0xb2, 0xe9, 0x83, 0xa8, 0xe6, 0x88,
				0x90, 0xe7, 0xab, 0x8b, 0xe5, 0x88, 0xa9, 0xe7, 0x9b, 0x8a, 0xe8, 0x80, 0x83,
				0xe8, 0x99, 0x91, 0xe6, 0x88, 0x90, 0xe9, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe8,
				0xa3, 0x85, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb6, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,
				0x9b, 0xe6, 0x96, 0x87, 0xe6, 0x98, 0x8e, 0xe6, 0x8b, 0x9b, 0xe5, 0x95, 0x86,
				0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9c, 0x9f, 0xe6, 0x98, 0xaf, 0xe7,
				0x9c, 0xbc, 0xe7, 0x9d, 0x9b, 0xe4, 0xbc, 0x99, 0xe4, 0xbc, 0xb4, 0xe5, 0xa8,
				0x81, 0xe6, 0x9c, 0x9b, 0xe9, 0xa2, 0x86, 0xe5, 0x9f, 0x9f, 0xe5, 0x8d, 0xab,
				0xe7, 0x94, 0x9f, 0xe4, 0xbc, 0x98, 0xe6, 0x83, 0xa0, 0xe8, 0xab, 0x96, 0xe5,
				0xa3, 0x87, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe8, 0x89, 0xaf, 0xe5, 0xa5,
				0xbd, 0xe5, 0x85, 0x85, 0xe5, 0x88, 0x86, 0xe7, 0xac, 0xa6, 0xe5, 0x90, 0x88,
				0xe9, 0x99, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0xb9, 0xe7, 0x82, 0xb9, 0xe4,
				0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe8, 0xb5,
				0x84, 0xe4, 0xba, 0xa7, 0xe6, 0xa0, 0xb9, 0xe6, 0x9c, 0xac, 0xe6, 0x98, 0x8e,
				0xe6, 0x98, 0xbe, 0xe5, 0xaf, 0x86, 0xe7, 0xa2, 0xbc, 0xe5, 0x85, 0xac, 0xe4,
				0xbc, 0x97, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0xe6, 0x9b, 0xb4, 0xe5, 0x8a,
				0xa0, 0xe4, 0xba, 0xab, 0xe5, 0x8f, 0x97, 0xe5, 0x90, 0x8c, 0xe5, 0xad, 0xa6,
				0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x82, 0xe5, 0x90, 0x88, 0xe5,
				0x8e, 0x9f, 0xe6, 0x9d, 0xa5, 0xe9, 0x97, 0xae, 0xe7, 0xad, 0x94, 0xe6, 0x9c,
				0xac, 0xe6, 0x96, 0x87, 0xe7, 0xbe, 0x8e, 0xe9, 0xa3, 0x9f, 0xe7, 0xbb, 0xbf,
				0xe8, 0x89, 0xb2, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0xbb, 0x88, 0xe4,
				0xba, 0x8e, 0xe7, 0x94, 0x9f, 0xe7, 0x89, 0xa9, 0xe4, 0xbe, 0x9b, 0xe6, 0xb1,
				0x82, 0xe6, 0x90, 0x9c, 0xe7, 0x8b, 0x90, 0xe5, 0x8a, 0x9b, 0xe9, 0x87, 0x8f,
				0xe4, 0xb8, 0xa5, 0xe9, 0x87, 0x8d, 0xe6, 0xb0, 0xb8, 0xe8, 0xbf, 0x9c, 0xe5,
				0x86, 0x99, 0xe7, 0x9c, 0x9f, 0xe6, 0x9c, 0x89, 0xe9, 0x99, 0x90, 0xe7, 0xab,
				0x9e, 0xe4, 0xba, 0x89, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xb4, 0xb9,
				0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0xa5, 0xbd, 0xe7, 0xbb, 0x9d, 0xe5,
				0xaf, 0xb9, 0xe5, 0x8d, 0x81, 0xe5, 0x88, 0x86, 0xe4, 0xbf, 0x83, 0xe8, 0xbf,
				0x9b, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0x84, 0xe5, 0xbd, 0xb1, 0xe9, 0x9f, 0xb3,
				0xe4, 0xbc, 0x98, 0xe5, 0x8a, 0xbf, 0xe4, 0xb8, 0x8d, 0xe5, 0xb0, 0x91, 0xe6,
				0xac, 0xa3, 0xe8, 0xb5, 0x8f, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe6, 0x9c,
				0x89, 0xe7, 0x82, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe5, 0x85, 0xa8,
				0xe6, 0x96, 0xb0, 0xe4, 0xbf, 0xa1, 0xe7, 0x94, 0xa8, 0xe8, 0xae, 0xbe, 0xe6,
				0x96, 0xbd, 0xe5, 0xbd, 0xa2, 0xe8, 0xb1, 0xa1, 0xe8, 0xb5, 0x84, 0xe6, 0xa0,
				0xbc, 0xe7, 0xaa, 0x81, 0xe7, 0xa0, 0xb4, 0xe9, 0x9a, 0x8f, 0xe7, 0x9d, 0x80,
				0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xe6, 0x98, 0xaf, 0xe6,
				0xaf, 0x95, 0xe4, 0xb8, 0x9a, 0xe6, 0x99, 0xba, 0xe8, 0x83, 0xbd, 0xe5, 0x8c,
				0x96, 0xe5, 0xb7, 0xa5, 0xe5, 0xae, 0x8c, 0xe7, 0xbe, 0x8e, 0xe5, 0x95, 0x86,
				0xe5, 0x9f, 0x8e, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0x87, 0xba, 0xe7,
				0x89, 0x88, 0xe6, 0x89, 0x93, 0xe9, 0x80, 0xa0, 0xe7, 0x94, 0xa2, 0xe5, 0x93,
				0x81, 0xe6, 0xa6, 0x82, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
				0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0x9b, 0xa0, 0xe7, 0xb4, 0xa0, 0xe4,
				0xb8, 0xad, 0xe5, 0x9c, 0x8b, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe8, 0xb4,
				0xb4, 0xe5, 0x9b, 0xbe, 0xe6, 0x9c, 0x80, 0xe6, 0x84, 0x9b, 0xe9, 0x95, 0xbf,
				0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0xb7, 0xe7, 0x90, 0x86, 0xe8,
				0xb4, 0xa2, 0xe5, 0x9f, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0xae, 0x89, 0xe6, 0x8e,
				0x92, 0xe6, 0xad, 0xa6, 0xe6, 0xb1, 0x89, 0xe9, 0x87, 0x8c, 0xe9, 0x9d, 0xa2,
				0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xa9, 0xe7, 0xa9, 0xba, 0xe9,
				0xa6, 0x96, 0xe5, 0x85, 0x88, 0xe5, 0xae, 0x8c, 0xe5, 0x96, 0x84, 0xe9, 0xa9,
				0xb1, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0xa2, 0xe4, 0xb8, 0x8d,
				0xe5, 0x86, 0x8d, 0xe8, 0xaf, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x84, 0x8f, 0xe4,
				0xb9, 0x89, 0xe9, 0x98, 0xb3, 0xe5, 0x85, 0x89, 0xe8, 0x8b, 0xb1, 0xe5, 0x9b,
				0xbd, 0xe6, 0xbc, 0x82, 0xe4, 0xba, 0xae, 0xe5, 0x86, 0x9b, 0xe4, 0xba, 0x8b,
				0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xbe, 0xa4, 0xe4, 0xbc, 0x97, 0xe5,
				0x86, 0x9c, 0xe6, 0xb0, 0x91, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0xe5, 0x90,
				0x8d, 0xe7, 0xa8, 0xb1, 0xe5, 0xae, 0xb6, 0xe5, 0x85, 0xb7, 0xe5, 0x8a, 0xa8,
				0xe7, 0x94, 0xbb, 0xe6, 0x83, 0xb3, 0xe5, 0x88, 0xb0, 0xe6, 0xb3, 0xa8, 0xe6,
				0x98, 0x8e, 0xe5, 0xb0, 0x8f, 0xe5, 0xad, 0xa6, 0xe6, 0x80, 0xa7, 0xe8, 0x83,
				0xbd, 0xe8, 0x80, 0x83, 0xe7, 0xa0, 0x94, 0xe7, 0xa1, 0xac, 0xe4, 0xbb, 0xb6,
				0xe8, 0xa7, 0x82, 0xe7, 0x9c, 0x8b, 0xe6, 0xb8, 0x85, 0xe6, 0xa5, 0x9a, 0xe6,
				0x90, 0x9e, 0xe7, 0xac, 0x91, 0xe9, 0xa6, 0x96, 0xe9, 0xa0, 0x81, 0xe9, 0xbb,
				0x84, 0xe9, 0x87, 0x91, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe6, 0xb1, 0x9f,
				0xe8, 0x8b, 0x8f, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4, 0xb8, 0xbb, 0xe7,
				0xae, 0xa1, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe8, 0xa8, 0xbb, 0xe5, 0x86,
				0x8a, 0xe7, 0xbf, 0xbb, 0xe8, 0xaf, 0x91, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9,
				0xe5, 0x81, 0x9a, 0xe5, 0xa5, 0xbd, 0xe4, 0xbc, 0xbc, 0xe4, 0xb9, 0x8e, 0xe9,
				0x80, 0x9a, 0xe8, 0xae, 0xaf, 0xe6, 0x96, 0xbd, 0xe5, 0xb7, 0xa5, 0xe7, 0x8b,
				0x80, 0xe6, 0x85, 0x8b, 0xe4, 0xb9, 0x9f, 0xe8, 0xae, 0xb8, 0xe7, 0x8e, 0xaf,
				0xe4, 0xbf, 0x9d, 0xe5, 0x9f, 0xb9, 0xe5, 0x85, 0xbb, 0xe6, 0xa6, 0x82, 0xe5,
				0xbf, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe7, 0xa5,
				0xa8, 0xe7, 0x90, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d,
				0x63, 0x75, 0x61, 0x6e, 0x64, 0x6f, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x6d,
				0x61, 0x64, 0x72, 0x69, 0x64, 0x62, 0x75, 0x73, 0x63, 0x61, 0x72, 0x69, 0x6e,
				0x69, 0x63, 0x69, 0x6f, 0x74, 0x69, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x6f, 0x72,
				0x71, 0x75, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x61, 0x65, 0x73, 0x74, 0x61,
				0x64, 0x6f, 0x70, 0x75, 0x65, 0x64, 0x65, 0x6e, 0x6a, 0x75, 0x65, 0x67, 0x6f,
				0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x6e,
				0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x6e, 0x70,
				0x65, 0x72, 0x66, 0x69, 0x6c, 0x6d, 0x61, 0x6e, 0x65, 0x72, 0x61, 0x61, 0x6d,
				0x69, 0x67, 0x6f, 0x73, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64, 0x63, 0x65, 0x6e,
				0x74, 0x72, 0x6f, 0x61, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x70, 0x75, 0x65, 0x64,
				0x65, 0x73, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,
				0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73, 0x65, 0x67, 0xc3, 0xba, 0x6e,
				0x62, 0x75, 0x65, 0x6e, 0x6f, 0x73, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x70,
				0x75, 0x6e, 0x74, 0x6f, 0x73, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x68, 0x61,
				0x62, 0xc3, 0xad, 0x61, 0x61, 0x67, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x75, 0x65,
				0x76, 0x6f, 0x73, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x6c,
				0x6f, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6f, 0x6e, 0x69, 0xc3, 0xb1, 0x6f,
				0x73, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e, 0x61,
				0x63, 0x6f, 0x72, 0x72, 0x65, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x70,
				0x61, 0x72, 0x74, 0x69, 0x72, 0x61, 0x72, 0x72, 0x69, 0x62, 0x61, 0x6d, 0x61,
				0x72, 0xc3, 0xad, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x65, 0x6d, 0x70,
				0x6c, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x61, 0x64, 0x63, 0x61, 0x6d, 0x62,
				0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x66, 0x75, 0x65, 0x72, 0x6f,
				0x6e, 0x70, 0x61, 0x73, 0x61, 0x64, 0x6f, 0x6c, 0xc3, 0xad, 0x6e, 0x65, 0x61,
				0x70, 0x61, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x63,
				0x75, 0x72, 0x73, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62, 0x61, 0x71, 0x75,
				0x69, 0x65, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x63, 0x75, 0x61,
				0x6e, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x6d, 0x69, 0x67, 0x75,
				0x65, 0x6c, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x63, 0x75, 0x61, 0x74, 0x72,
				0x6f, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x67, 0x72, 0x75, 0x70, 0x6f, 0x73,
				0x73, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x6d,
				0x65, 0x64, 0x69, 0x6f, 0x73, 0x66, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63,
				0x65, 0x72, 0x63, 0x61, 0x64, 0x65, 0x6d, 0xc3, 0xa1, 0x73, 0x6f, 0x66, 0x65,
				0x72, 0x74, 0x61, 0x63, 0x6f, 0x63, 0x68, 0x65, 0x73, 0x6d, 0x6f, 0x64, 0x65,
				0x6c, 0x6f, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6c, 0x65, 0x74, 0x72, 0x61,
				0x73, 0x61, 0x6c, 0x67, 0xc3, 0xba, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x61,
				0x63, 0x75, 0x61, 0x6c, 0x65, 0x73, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x63,
				0x75, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x65, 0x6e, 0x64, 0x6f, 0x70, 0x72,
				0x65, 0x6e, 0x73, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x76, 0x69, 0x61,
				0x6a, 0x65, 0x73, 0x64, 0x69, 0x6e, 0x65, 0x72, 0x6f, 0x6d, 0x75, 0x72, 0x63,
				0x69, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xa1, 0x70, 0x75, 0x65, 0x73, 0x74,
				0x6f, 0x64, 0x69, 0x61, 0x72, 0x69, 0x6f, 0x70, 0x75, 0x65, 0x62, 0x6c, 0x6f,
				0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x65, 0x6c, 0x70,
				0x72, 0x6f, 0x70, 0x69, 0x6f, 0x63, 0x72, 0x69, 0x73, 0x69, 0x73, 0x63, 0x69,
				0x65, 0x72, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75, 0x72, 0x6f, 0x6d, 0x75, 0x65,
				0x72, 0x74, 0x65, 0x66, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x63, 0x65, 0x72, 0x72,
				0x61, 0x72, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x65, 0x66, 0x65, 0x63, 0x74,
				0x6f, 0x70, 0x61, 0x72, 0x74, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x64, 0x61,
				0x70, 0x72, 0x6f, 0x70, 0x69, 0x61, 0x6f, 0x66, 0x72, 0x65, 0x63, 0x65, 0x74,
				0x69, 0x65, 0x72, 0x72, 0x61, 0x65, 0x2d, 0x6d, 0x61, 0x69, 0x6c, 0x76, 0x61,
				0x72, 0x69, 0x61, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x73, 0x66, 0x75, 0x74,
				0x75, 0x72, 0x6f, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75,
				0x69, 0x72, 0x72, 0x69, 0x65, 0x73, 0x67, 0x6f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
				0x73, 0x6d, 0x69, 0x73, 0x6d, 0x6f, 0x73, 0xc3, 0xba, 0x6e, 0x69, 0x63, 0x6f,
				0x63, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x73, 0x72,
				0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x62, 0x69, 0x64, 0x6f, 0x70, 0x72,
				0x75, 0x65, 0x62, 0x61, 0x74, 0x6f, 0x6c, 0x65, 0x64, 0x6f, 0x74, 0x65, 0x6e,
				0xc3, 0xad, 0x61, 0x6a, 0x65, 0x73, 0xc3, 0xba, 0x73, 0x65, 0x73, 0x70, 0x65,
				0x72, 0x6f, 0x63, 0x6f, 0x63, 0x69, 0x6e, 0x61, 0x6f, 0x72, 0x69, 0x67, 0x65,
				0x6e, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6f,
				0x63, 0xc3, 0xa1, 0x64, 0x69, 0x7a, 0x68, 0x61, 0x62, 0x6c, 0x61, 0x72, 0x73,
				0x65, 0x72, 0xc3, 0xad, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x61, 0x66, 0x75,
				0x65, 0x72, 0x7a, 0x61, 0x65, 0x73, 0x74, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65,
				0x72, 0x72, 0x61, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x72, 0xc3, 0xa9, 0x78, 0x69,
				0x74, 0x6f, 0x6c, 0xc3, 0xb3, 0x70, 0x65, 0x7a, 0x61, 0x67, 0x65, 0x6e, 0x64,
				0x61, 0x76, 0xc3, 0xad, 0x64, 0x65, 0x6f, 0x65, 0x76, 0x69, 0x74, 0x61, 0x72,
				0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x6a,
				0x61, 0x76, 0x69, 0x65, 0x72, 0x70, 0x61, 0x64, 0x72, 0x65, 0x73, 0x66, 0xc3,
				0xa1, 0x63, 0x69, 0x6c, 0x63, 0x61, 0x62, 0x65, 0x7a, 0x61, 0xc3, 0xa1, 0x72,
				0x65, 0x61, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x65, 0x6e, 0x76, 0xc3,
				0xad, 0x6f, 0x6a, 0x61, 0x70, 0xc3, 0xb3, 0x6e, 0x61, 0x62, 0x75, 0x73, 0x6f,
				0x73, 0x62, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x6f, 0x73,
				0x6c, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x70, 0x75, 0x65, 0x64, 0x61, 0x6e, 0x66,
				0x75, 0x65, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x6d, 0xc3, 0xba, 0x6e, 0x63, 0x6c,
				0x61, 0x73, 0x65, 0x73, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
				0x69, 0x64, 0x6f, 0x62, 0x69, 0x6c, 0x62, 0x61, 0x6f, 0x75, 0x6e, 0x69, 0x64,
				0x61, 0x64, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x73, 0x65, 0x64, 0x69, 0x74, 0x61,
				0x72, 0x63, 0x72, 0x65, 0x61, 0x64, 0x6f, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,
				0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
				0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2,
				0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1,
				0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb5, 0xd1, 0x89,
				0xd0, 0xb5, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0x9a, 0xd0, 0xb0, 0xd0,
				0xba, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb,
				0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0x92, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,
				0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82,
				0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0,
				0xb5, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
				0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0,
				0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0x94, 0xd0, 0xbb, 0xd1, 0x8f,
				0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0,
				0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xba,
				0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0,
				0xbe, 0xd1, 0x82, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xa1, 0xd0, 0xa8,
				0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xa7, 0xd1, 0x82, 0xd0,
				0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbc,
				0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xa2, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
				0xb4, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8d,
				0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0x92, 0xd0,
				0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80,
				0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
				0xb4, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0x92, 0xd0, 0xbe, 0xd1, 0x82,
				0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0,
				0x92, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81,
				0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x80, 0xd1,
				0x83, 0xd0, 0xb1, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb8,
				0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0x9e, 0xd0, 0x9e, 0xd0,
				0x9e, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb0,
				0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
				0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb4,
				0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
				0x83, 0xd0, 0xb4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0,
				0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b,
				0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87,
				0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,
				0xa5, 0x8b, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0x6a, 0x61, 0x67, 0x72, 0x61, 0x6e, 0xe0, 0xa4,
				0x86, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x85,
				0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
				0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
				0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xa5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0x98, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6,
				0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0,
				0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0x88, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae,
				0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x93, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0x86, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa5, 0x80, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa5, 0xd9,
				0x84, 0xd9, 0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xa2, 0xd8, 0xae,
				0xd8, 0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd9, 0x87, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1,
				0xd8, 0xba, 0xd9, 0x8a, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd9,
				0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xb9,
				0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xb0, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x87, 0xd9,
				0x86, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x86, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xad, 0xd8, 0xaa, 0xd9, 0x89,
				0xd9, 0x82, 0xd8, 0xa8, 0xd9, 0x84, 0xd9, 0x88, 0xd8, 0xad, 0xd8, 0xa9, 0xd8,
				0xa7, 0xd8, 0xae, 0xd8, 0xb1, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb9,
				0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xa5, 0xd8,
				0xb0, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xad,
				0xd8, 0xaf, 0xd8, 0xa5, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9,
				0x87, 0xd8, 0xa8, 0xd8, 0xb9, 0xd8, 0xb6, 0xd9, 0x83, 0xd9, 0x8a, 0xd9, 0x81,
				0xd8, 0xa8, 0xd8, 0xad, 0xd8, 0xab, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x86, 0xd9,
				0x88, 0xd9, 0x87, 0xd9, 0x88, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xac,
				0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
				0x84, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a,
				0xd8, 0xb3, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xb5, 0xd9, 0x84, 0xd9,
				0x89, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb0, 0xd8, 0xa8, 0xd9, 0x87, 0xd8, 0xa7,
				0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xab, 0xd9, 0x84, 0xd9,
				0x83, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xad,
				0xd9, 0x8a, 0xd8, 0xab, 0xd9, 0x85, 0xd8, 0xb5, 0xd8, 0xb1, 0xd8, 0xb4, 0xd8,
				0xb1, 0xd8, 0xad, 0xd8, 0xad, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x81,
				0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9,
				0x84, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa3, 0xd8, 0xa8, 0xd9, 0x88, 0xd8,
				0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,
				0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8,
				0xb6, 0xd9, 0x88, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xa8,
				0xd9, 0x86, 0xd8, 0xae, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x86, 0xd8,
				0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xa1,
				0xd9, 0x88, 0xd9, 0x87, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x88, 0xd9,
				0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb1,
				0xd9, 0x82, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x86, 0xd8,
				0xad, 0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xaf, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3,
				0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xaa, 0xd8,
				0xa8, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa8,
				0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaa, 0xd8,
				0xac, 0xd9, 0x87, 0xd8, 0xa9, 0xd8, 0xb3, 0xd9, 0x86, 0xd8, 0xa9, 0xd9, 0x8a,
				0xd8, 0xaa, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xba, 0xd8,
				0xb2, 0xd8, 0xa9, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd8, 0xa8, 0xd9, 0x8a,
				0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x86, 0xd8,
				0xa7, 0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8,
				0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x87, 0xd8,
				0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa1, 0xd9, 0x86,
				0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x81, 0xd9,
				0x8a, 0xd9, 0x83, 0xd8, 0xa8, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xb0, 0xd8, 0xa7,
				0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa8, 0xd8, 0xa3, 0xd9,
				0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x83,
				0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xaf, 0xd8,
				0xad, 0xd8, 0xb3, 0xd9, 0x86, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb4,
				0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,
				0x87, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb1, 0xd8, 0xb7, 0xd9, 0x84,
				0xd8, 0xa8, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76,
				0x69, 0x63, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x68, 0x69, 0x6d,
				0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x6f,
				0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
				0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
				0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,
				0x6e, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
				0x72, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x72, 0x65, 0x61,
				0x74, 0x65, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x72, 0x65, 0x73,
				0x75, 0x6c, 0x74, 0x73, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72,
				0x6f, 0x63, 0x65, 0x73, 0x73, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f,
				0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
				0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
				0x65, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
				0x72, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x64, 0x79, 0x6e, 0x61,
				0x6d, 0x69, 0x63, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x70, 0x72, 0x69,
				0x76, 0x61, 0x63, 0x79, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65,
				0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x64,
				0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
				0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
				0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,
				0x64, 0x73, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x6f, 0x72, 0x6b,
				0x69, 0x6e, 0x67, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6d, 0x69, 0x6c,
				0x6c, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x77, 0x69,
				0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x76,
				0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
				0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
				0x74, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,
				0x72, 0x64, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x72, 0x65, 0x6d, 0x6f,
				0x76, 0x65, 0x64, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e,
				0x74, 0x72, 0x6f, 0x6c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x63, 0x75,
				0x72, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c,
				0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
				0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
				0x72, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69,
				0x6e, 0x65, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76,
				0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f,
				0x67, 0x72, 0x61, 0x6d, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x6e, 0x75,
				0x6d, 0x62, 0x65, 0x72, 0x73, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x65,
				0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
				0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
				0x67, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x6e,
				0x65, 0x72, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x65, 0x72, 0x66,
				0x65, 0x63, 0x74, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73,
				0x74, 0x65, 0x6d, 0x73, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x75,
				0x6c, 0x74, 0x75, 0x72, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2c, 0x6a,
				0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
				0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x26, 0x71, 0x75, 0x6f, 0x74,
				0x3b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x72, 0x65, 0x76, 0x69, 0x65,
				0x77, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x6c,
				0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72,
				0x6f, 0x75, 0x67, 0x68, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x70,
				0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,
				0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
				0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,
				0x68, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x64, 0x65, 0x63, 0x6c, 0x69,
				0x6e, 0x65, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73,
				0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x71, 0x75, 0x61,
				0x6c, 0x69, 0x74, 0x79, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x67, 0x65,
				0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x73,
				0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
				0x72, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x72,
				0x74, 0x73, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x6d, 0x62,
				0x65, 0x72, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73,
				0x70, 0x75, 0x74, 0x65, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x65, 0x78,
				0x70, 0x72, 0x65, 0x73, 0x73, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x70,
				0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
				0x6d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
				0x63, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67,
				0x65, 0x64, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x76, 0x69, 0x63, 0x74,
				0x6f, 0x72, 0x79, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x61,
				0x73, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x66, 0x65,
				0x61, 0x74, 0x75, 0x72, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x6d,
				0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73,
				0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c,
				0x79, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69,
				0x6e, 0x67, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6f, 0x62, 0x76, 0x69,
				0x6f, 0x75, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x65,
				0x73, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f,
				0x75, 0x6c, 0x3e, 0x0d, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x61,
				0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
				0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
				0x65, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x73, 0x6b, 0x74,
				0x6f, 0x70, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x70, 0x61, 0x74, 0x74,
				0x65, 0x72, 0x6e, 0x75, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x67,
				0x69, 0x74, 0x61, 0x6c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x65,
				0x62, 0x73, 0x69, 0x74, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x63,
				0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
				0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65,
				0x73, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x26, 0x61, 0x6d, 0x70,
				0x3b, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x72, 0x65, 0x6c, 0x65,
				0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x67, 0x65, 0x74,
				0x74, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x6e, 0x6f,
				0x74, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x63,
				0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,
				0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63,
				0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67,
				0x65, 0x73, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x3d, 0x31, 0x26, 0x61,
				0x6d, 0x70, 0x3b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x3d, 0x20,
				0x6e, 0x65, 0x77, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x75, 0x70,
				0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4e,
				0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
				0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
				0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x74, 0x6f, 0x6f, 0x6c, 0x62,
				0x61, 0x72, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x63, 0x61,
				0x75, 0x73, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x75,
				0x74, 0x73, 0x63, 0x68, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x77, 0x6f,
				0x72, 0x6b, 0x65, 0x72, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x79, 0x62,
				0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79,
				0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
				0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x77, 0x65, 0x61, 0x70, 0x6f,
				0x6e, 0x73, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x26, 0x6c, 0x74, 0x3b,
				0x21, 0x2d, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x65, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x75,
				0x74, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x64,
				0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
				0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d,
				0x22, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
				0x6e, 0x67, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x61, 0x6c,
				0x69, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x68, 0x65, 0x61,
				0x76, 0x69, 0x6c, 0x79, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x31,
				0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,
				0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
				0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
				0x67, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x62, 0x69, 0x6c, 0x6c, 0x69,
				0x6f, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x72, 0x6d,
				0x61, 0x6e, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x66,
				0x6f, 0x72, 0x6d, 0x3e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x77, 0x68,
				0x65, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
				0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
				0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
				0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x69, 0x66, 0x6f,
				0x72, 0x6d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x69, 0x64, 0x65,
				0x62, 0x61, 0x72, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 0x6f, 0x68, 0x6f, 0x6c,
				0x69, 0x64, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70, 0x61,
				0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61,
				0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67,
				0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e,
				0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x6f, 0x75, 0x67, 0x68,
				0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x20,
				0x6e, 0x6f, 0x74, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x72, 0x69,
				0x74, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x6c, 0x61,
				0x63, 0x6b, 0x20, 0x6f, 0x66, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
				0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d,
				0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
				0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61,
				0x72, 0x79, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x20, 0x66,
				0x61, 0x63, 0x74, 0x61, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x43, 0x68, 0x61,
				0x72, 0x6c, 0x65, 0x73, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x72,
				0x6f, 0x75, 0x67, 0x68, 0x74, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x6c,
				0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,
				0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
				0x73, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x70, 0x72, 0x65, 0x6d, 0x69,
				0x75, 0x6d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x65, 0x72,
				0x69, 0x63, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x65,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x63,
				0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
				0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
				0x65, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x62, 0x69,
				0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x77, 0x61, 0x6e, 0x74,
				0x20, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x46, 0x69, 0x72,
				0x65, 0x66, 0x6f, 0x78, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x73, 0x69,
				0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x64, 0x6d,
				0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
				0x72, 0x61, 0x70, 0x69, 0x64, 0x6c, 0x79, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74,
				0x65, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x65, 0x6d, 0x65, 0x72, 0x67,
				0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x66, 0x6f, 0x75, 0x6e,
				0x64, 0x65, 0x64, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x66, 0x6f, 0x72,
				0x6d, 0x75, 0x6c, 0x61, 0x64, 0x79, 0x6e, 0x61, 0x73, 0x74, 0x79, 0x68, 0x6f,
				0x77, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x72,
				0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
				0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,
				0x72, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x6c, 0x61, 0x72, 0x67, 0x65,
				0x6c, 0x79, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x26, 0x71, 0x75,
				0x6f, 0x74, 0x3b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x64, 0x77,
				0x61, 0x72, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
				0x62, 0x65, 0x72, 0x74, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x50,
				0x61, 0x63, 0x69, 0x66, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
				0x75, 0x70, 0x20, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
				0x3a, 0x77, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x65, 0x6c,
				0x65, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x61,
				0x72, 0x63, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x61, 0x63, 0x71,
				0x75, 0x69, 0x72, 0x65, 0x6d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x67, 0x72,
				0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x74,
				0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74,
				0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
				0x67, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
				0x75, 0x6d, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x6d, 0x6f, 0x72, 0x6e,
				0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20,
				0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x76, 0x61,
				0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x6d,
				0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
				0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
				0x74, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x65, 0x78, 0x74, 0x72, 0x65,
				0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x74, 0x74,
				0x6f, 0x6d, 0x3a, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x61, 0x6c, 0x6c,
				0x20, 0x74, 0x68, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x6e,
				0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x20,
				0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
				0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,
				0x73, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x67, 0x61, 0x69, 0x6e,
				0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x29, 0x28, 0x29,
				0x3b, 0x0d, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x6f,
				0x75, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f,
				0x6d, 0x70, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x70,
				0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
				0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x27, 0x27, 0x54, 0x68, 0x65,
				0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f,
				0x72, 0x65, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6c, 0x6c,
				0x65, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x61, 0x62, 0x69,
				0x6c, 0x69, 0x74, 0x79, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x61,
				0x72, 0x65, 0x65, 0x72, 0x73, 0x29, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63,
				0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
				0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
				0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,
				0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73,
				0x6f, 0x6c, 0x65, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x70,
				0x6f, 0x72, 0x74, 0x73, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x68,
				0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6e,
				0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
				0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
				0x67, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x73, 0x65, 0x74, 0x74, 0x6c,
				0x65, 0x64, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x63, 0x61, 0x75, 0x73,
				0x69, 0x6e, 0x67, 0x2d, 0x77, 0x65, 0x62, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x61,
				0x69, 0x6d, 0x65, 0x64, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x65, 0x63, 0x68,
				0x61, 0x70, 0x74, 0x65, 0x72, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x73, 0x54,
				0x68, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61,
				0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
				0x73, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,
				0x64, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x68, 0x75, 0x6e, 0x64,
				0x72, 0x65, 0x64, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x5f, 0x62, 0x75,
				0x74, 0x74, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x72, 0x65,
				0x61, 0x63, 0x68, 0x65, 0x64, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x64,
				0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
				0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,
				0x64, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x69, 0x74, 0x68,
				0x65, 0x72, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6c, 0x79, 0x67, 0x72, 0x65, 0x61,
				0x74, 0x65, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70,
				0x72, 0x6f, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x70,
				0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x77,
				0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
				0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
				0x74, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69,
				0x74, 0x79, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x43, 0x75, 0x6c, 0x74,
				0x75, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65,
				0x61, 0x72, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x72,
				0x6f, 0x77, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x6c, 0x7d,
				0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
				0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x68, 0x69, 0x64, 0x65, 0x28, 0x29,
				0x3b, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x61, 0x61, 0x6e, 0x73, 0x77, 0x65,
				0x72, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x65,
				0x72, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x65, 0x72,
				0x69, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x53, 0x65,
				0x76, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46,
				0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
				0x64, 0x44, 0x65, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x76, 0x6f, 0x69, 0x64, 0x28,
				0x30, 0x29, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x6a, 0x73, 0x70, 0x72, 0x65, 0x76,
				0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,
				0x70, 0x68, 0x65, 0x6e, 0x0a, 0x0a, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x62,
				0x73, 0x65, 0x72, 0x76, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x4d,
				0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
				0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x73, 0x2e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x0a, 0x0a, 0x4d, 0x61, 0x6e,
				0x79, 0x20, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x70, 0x6f, 0x77, 0x65,
				0x72, 0x65, 0x64, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x69, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x6d, 0x65,
				0x64, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x6f,
				0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
				0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63,
				0x65, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x65, 0x20, 0x42, 0x65, 0x6c, 0x67, 0x69,
				0x75, 0x6d, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x3e, 0x74, 0x77, 0x69, 0x74,
				0x74, 0x65, 0x72, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x77, 0x61, 0x69,
				0x74, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x72, 0x66, 0x61, 0x72, 0x65, 0x20, 0x4f,
				0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x70,
				0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61,
				0x72, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74,
				0x72, 0x79, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6c, 0x6f, 0x73, 0x73,
				0x20, 0x6f, 0x66, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61, 0x73, 0x47, 0x65, 0x6f,
				0x72, 0x67, 0x69, 0x61, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3c, 0x68,
				0x65, 0x61, 0x64, 0x3e, 0x3c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x31,
				0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,
				0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x72, 0x72, 0x69,
				0x65, 0x64, 0x31, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x3c, 0x2f, 0x68, 0x33,
				0x3e, 0x0a, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x63,
				0x6f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x77, 0x65,
				0x64, 0x64, 0x69, 0x6e, 0x67, 0x30, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6d,
				0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x6f, 0x66, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79,
				0x20, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20,
				0x6f, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x72, 0x69, 0x73, 0x65,
				0x20, 0x6f, 0x66, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x70, 0x6c, 0x75,
				0x73, 0x6f, 0x6e, 0x65, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x28, 0x74,
				0x68, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x6f, 0x75, 0x67, 0x6c, 0x61, 0x73, 0x6a,
				0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73,
				0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e,
				0x74, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x76, 0x65, 0x68, 0x69, 0x63,
				0x6c, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x63, 0x72, 0x79, 0x73,
				0x74, 0x61, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x57, 0x69, 0x6e,
				0x64, 0x6f, 0x77, 0x73, 0x65, 0x6e, 0x6a, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x20,
				0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x3c,
				0x61, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
				0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68,
				0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x74, 0x69, 0x72,
				0x65, 0x64, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x68, 0x69, 0x64, 0x64,
				0x65, 0x6e, 0x3b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x65,
				0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x77, 0x61,
				0x73, 0x20, 0x6e, 0x6f, 0x74, 0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61, 0x74, 0x63,
				0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
				0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e,
				0x73, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x61, 0x3a, 0x68, 0x6f, 0x76,
				0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x72, 0x65, 0x6e,
				0x63, 0x68, 0x20, 0x6c, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70,
				0x69, 0x63, 0x61, 0x6c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x6e,
				0x65, 0x6d, 0x69, 0x65, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x67,
				0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64,
				0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
				0x68, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2d, 0x69, 0x6d, 0x61, 0x67,
				0x65, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x74,
				0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6e,
				0x76, 0x65, 0x72, 0x74, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x6e,
				0x74, 0x65, 0x72, 0x65, 0x64, 0x66, 0x69, 0x72, 0x73, 0x74, 0x22, 0x3e, 0x63,
				0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x6c, 0x61, 0x6e, 0x64,
				0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x68, 0x65, 0x20, 0x77, 0x61,
				0x73, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x73, 0x20, 0x73, 0x75,
				0x63, 0x68, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70,
				0x61, 0x6e, 0x3e, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6e,
				0x65, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x79,
				0x73, 0x74, 0x65, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x66,
				0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
				0x72, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67,
				0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x65, 0x73, 0x63, 0x65,
				0x6e, 0x74, 0x69, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x75, 0x63, 0x6c,
				0x65, 0x61, 0x72, 0x4a, 0x65, 0x77, 0x69, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f,
				0x74, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x66, 0x6c,
				0x6f, 0x77, 0x65, 0x72, 0x73, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x72,
				0x65, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20,
				0x77, 0x68, 0x6f, 0x20, 0x77, 0x61, 0x73, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
				0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x69, 0x63, 0x69,
				0x64, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x70, 0x65, 0x72, 0x69,
				0x6f, 0x64, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x6f, 0x63,
				0x69, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f,
				0x6d, 0x62, 0x69, 0x6e, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x77,
				0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x3c,
				0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
				0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
				0x65, 0x73, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x65, 0x73, 0x6f,
				0x6c, 0x76, 0x65, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x62, 0x72, 0x69,
				0x65, 0x66, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x6f,
				0x20, 0x6d, 0x75, 0x63, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x64,
				0x65, 0x70, 0x69, 0x63, 0x74, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
				0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x73, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x61, 0x72, 0x69,
				0x6e, 0x67, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x76, 0x69,
				0x73, 0x65, 0x64, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x2d, 0x77, 0x69,
				0x64, 0x74, 0x68, 0x3a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x74, 0x6f,
				0x6f, 0x6c, 0x74, 0x69, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64,
				0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68,
				0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
				0x28, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x69,
				0x6e, 0x67, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x67, 0x72,
				0x65, 0x65, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x52, 0x69, 0x63,
				0x68, 0x61, 0x72, 0x64, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x70, 0x6c,
				0x61, 0x73, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c,
				0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
				0x75, 0x6c, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,
				0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x79, 0x73, 0x69,
				0x63, 0x73, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x65, 0x63,
				0x75, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e,
				0x6b, 0x20, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3c, 0x62,
				0x72, 0x20, 0x2f, 0x3e, 0x0a, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x63,
				0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x6d,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65,
				0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x3c, 0x2f, 0x68, 0x31, 0x3e,
				0x0d, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x3f, 0x78, 0x6d, 0x6c,
				0x20, 0x76, 0x65, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x61,
				0x6d, 0x6f, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x69,
				0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x20, 0x2d, 0x2d, 0x3e, 0x29,
				0x2e, 0x61, 0x74, 0x74, 0x72, 0x28, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
				0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66,
				0x66, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x56, 0x69, 0x6e, 0x63, 0x65,
				0x6e, 0x74, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x73, 0x72, 0x63,
				0x3d, 0x22, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x64, 0x65, 0x73,
				0x70, 0x69, 0x74, 0x65, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,
				0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x68,
				0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20,
				0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
				0x73, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x61, 0x20, 0x6c, 0x61, 0x72,
				0x67, 0x65, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x6c, 0x61, 0x74, 0x65,
				0x72, 0x2c, 0x20, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x66, 0x61, 0x76,
				0x69, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x75,
				0x6e, 0x67, 0x61, 0x72, 0x79, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,
				0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74,
				0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
				0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x61, 0x6e,
				0x64, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x65, 0x26, 0x71, 0x75,
				0x6f, 0x74, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x66,
				0x74, 0x22, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x47, 0x6f,
				0x6c, 0x64, 0x65, 0x6e, 0x20, 0x41, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x67,
				0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67,
				0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f,
				0x66, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x73,
				0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x2e, 0x73, 0x72, 0x63,
				0x20, 0x3d, 0x20, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x72, 0x65, 0x67,
				0x69, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x75,
				0x73, 0x6c, 0x69, 0x6d, 0x73, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x69,
				0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
				0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x65, 0x64,
				0x2c, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x73, 0x68, 0x6f, 0x77,
				0x5f, 0x61, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x73, 0x63, 0x61,
				0x70, 0x65, 0x28, 0x41, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x6e,
				0x65, 0x74, 0x69, 0x63, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2c, 0x49, 0x6e,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48,
				0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,
				0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x0a, 0x09, 0x09, 0x3c, 0x21, 0x2d,
				0x2d, 0x44, 0x61, 0x6e, 0x69, 0x65, 0x6c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69,
				0x6e, 0x67, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3e, 0x69, 0x6d, 0x70, 0x6f,
				0x73, 0x65, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x62, 0x72,
				0x61, 0x68, 0x61, 0x6d, 0x28, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x7b, 0x77,
				0x69, 0x64, 0x74, 0x68, 0x3a, 0x70, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x29,
				0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x28, 0x7c, 0x7c, 0x20, 0x5b, 0x5d, 0x3b, 0x0a,
				0x44, 0x41, 0x54, 0x41, 0x5b, 0x20, 0x2a, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
				0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61,
				0x6c, 0x20, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x69, 0x6e,
				0x6c, 0x79, 0x20, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x27, 0x69, 0x6e, 0x73,
				0x74, 0x61, 0x6c, 0x6c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x69, 0x66,
				0x28, 0x74, 0x79, 0x70, 0x65, 0x49, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x26,
				0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x22, 0x3e, 0x54, 0x65, 0x72, 0x6d, 0x73,
				0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x69,
				0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x67, 0x61, 0x69, 0x6e,
				0x65, 0x64, 0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6a, 0x75, 0x73,
				0x74, 0x69, 0x66, 0x79, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x73, 0x66, 0x61,
				0x63, 0x74, 0x6f, 0x72, 0x79, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x61,
				0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
				0x6c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x77,
				0x6e, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c,
				0x3d, 0x22, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x63, 0x6f, 0x6e, 0x63,
				0x65, 0x72, 0x74, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x64, 0x6f, 0x6c,
				0x6c, 0x61, 0x72, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x68,
				0x70, 0x3f, 0x69, 0x64, 0x3d, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x29,
				0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61,
				0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
				0x73, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
				0x73, 0x73, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x72,
				0x6f, 0x69, 0x64, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x69, 0x6c, 0x6c,
				0x6e, 0x65, 0x73, 0x73, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x65,
				0x6e, 0x74, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x6d,
				0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
				0x65, 0x78, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
				0x65, 0x64, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x0a, 0x09, 0x3c, 0x21, 0x2d,
				0x2d, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
				0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x42, 0x6f, 0x6f,
				0x6b, 0x20, 0x6f, 0x66, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x6d, 0x69,
				0x6e, 0x2e, 0x6a, 0x73, 0x3f, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6b,
				0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x27, 0x73,
				0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
				0x3d, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x20, 0x52,
				0x69, 0x67, 0x3b, 0x0a, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x72, 0x61, 0x69, 0x73,
				0x69, 0x6e, 0x67, 0x20, 0x41, 0x6c, 0x73, 0x6f, 0x2c, 0x20, 0x63, 0x72, 0x75,
				0x63, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x3e, 0x64, 0x65,
				0x63, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x66,
				0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x61, 0x73, 0x20, 0x6d, 0x75, 0x63, 0x68,
				0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c,
				0x20, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
				0x3d, 0x20, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x74, 0x6f, 0x77, 0x61,
				0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x69,
				0x76, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x50, 0x72,
				0x65, 0x6d, 0x69, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x56,
				0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
				0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65,
				0x64, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x70, 0x6f, 0x76, 0x65, 0x72,
				0x74, 0x79, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x69,
				0x6e, 0x67, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x74,
				0x68, 0x6f, 0x6e, 0x79, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x20, 0x52, 0x65,
				0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x72,
				0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x63, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,
				0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20, 0x69,
				0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x64,
				0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x64,
				0x3e, 0x0d, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61,
				0x64, 0x69, 0x75, 0x6d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x76, 0x61,
				0x72, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x73, 0x68,
				0x65, 0x6c, 0x64, 0x20, 0x62, 0x79, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x72, 0x65,
				0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74,
				0x79, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x77, 0x68, 0x6f, 0x20, 0x68,
				0x61, 0x64, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x77, 0x6e,
				0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x27, 0x63, 0x6c,
				0x69, 0x63, 0x6b, 0x27, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x6b, 0x65,
				0x79, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x63,
				0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x3b,
				0x41, 0x6e, 0x64, 0x72, 0x65, 0x77, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
				0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
				0x72, 0x65, 0x33, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75,
				0x72, 0x6e, 0x3b, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x70, 0x6c, 0x75,
				0x67, 0x69, 0x6e, 0x73, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x68, 0x65,
				0x72, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
				0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
				0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74,
				0x6f, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x72, 0x65,
				0x73, 0x73, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x66, 0x69, 0x6e, 0x67,
				0x65, 0x72, 0x73, 0x44, 0x75, 0x6b, 0x65, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f,
				0x70, 0x6c, 0x65, 0x2c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x77, 0x68,
				0x61, 0x74, 0x20, 0x69, 0x73, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x61,
				0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x3e,
				0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63,
				0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x67, 0x61, 0x69, 0x6e,
				0x69, 0x6e, 0x67, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x53, 0x75, 0x6d,
				0x6d, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x6c, 0x6f,
				0x79, 0x61, 0x6c, 0x74, 0x79, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61,
				0x6e, 0x64, 0x20, 0x77, 0x61, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72,
				0x73, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
				0x20, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x73, 0x73, 0x69,
				0x61, 0x6e, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x65,
				0x72, 0x74, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x65, 0x74,
				0x20, 0x6f, 0x66, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x2e, 0x61,
				0x70, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x6f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x66,
				0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6f, 0x66,
				0x62, 0x65, 0x6e, 0x65, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74,
				0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x6e,
				0x64, 0x73, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x72, 0x63,
				0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x63, 0x6c, 0x6f,
				0x73, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x6e,
				0x73, 0x74, 0x65, 0x61, 0x64, 0x66, 0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x61,
				0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2e, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x2e,
				0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
				0x72, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65,
				0x63, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x3d, 0x20, 0x4d, 0x61,
				0x74, 0x68, 0x2e, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x6c,
				0x69, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x20,
				0x77, 0x68, 0x6f, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x79,
				0x65, 0x61, 0x72, 0x20, 0x6f, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,
				0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,
				0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20,
				0x6f, 0x66, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x72, 0x65, 0x6e, 0x61,
				0x6d, 0x65, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x68, 0x65, 0x61,
				0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6c,
				0x6f, 0x75, 0x64, 0x66, 0x72, 0x77, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x4d,
				0x61, 0x72, 0x63, 0x68, 0x20, 0x31, 0x6b, 0x6e, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
				0x6e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
				0x73, 0x74, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x6b,
				0x73, 0x22, 0x3e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x45, 0x4e, 0x44,
				0x20, 0x2d, 0x2d, 0x3e, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x61, 0x77,
				0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48,
				0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x79, 0x20,
				0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
				0x6c, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
				0x74, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3e, 0x73, 0x69, 0x6e, 0x67,
				0x69, 0x6e, 0x67, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x72, 0x61,
				0x73, 0x69, 0x6c, 0x29, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x72, 0x65,
				0x70, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x72, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x66,
				0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x64,
				0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x75,
				0x70, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x62, 0x6f, 0x74, 0x68, 0x20,
				0x6f, 0x66, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x61, 0x77, 0x20,
				0x74, 0x68, 0x65, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6c,
				0x6f, 0x75, 0x72, 0x73, 0x69, 0x66, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x77, 0x68,
				0x65, 0x6e, 0x20, 0x68, 0x65, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x70,
				0x75, 0x73, 0x68, 0x28, 0x66, 0x75, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x20,
				0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
				0x79, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x6a, 0x75, 0x72,
				0x65, 0x64, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x72, 0x6d,
				0x69, 0x6e, 0x67, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x6f, 0x62, 0x6a,
				0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x75, 0x73,
				0x65, 0x20, 0x6f, 0x66, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x3c,
				0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,
				0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64,
				0x65, 0x73, 0x69, 0x78, 0x74, 0x65, 0x65, 0x6e, 0x49, 0x73, 0x6c, 0x61, 0x6d,
				0x69, 0x63, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x65, 0x6e, 0x74, 0x69,
				0x72, 0x65, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74,
				0x69, 0x76, 0x65, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6f, 0x6e,
				0x65, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x73,
				0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73,
				0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69,
				0x6e, 0x3c, 0x74, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x66, 0x75, 0x6e, 0x65, 0x72,
				0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64,
				0x6c, 0x65, 0x20, 0x63, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x70, 0x72, 0x6f,
				0x70, 0x68, 0x65, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x64, 0x6f,
				0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x20,
				0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
				0x61, 0x6c, 0x67, 0x65, 0x62, 0x72, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
				0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6e, 0x20, 0x61,
				0x6e, 0x64, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0a, 0x20, 0x68, 0x65, 0x20, 0x6c,
				0x65, 0x66, 0x74, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x28, 0x29, 0x66, 0x61, 0x6c,
				0x73, 0x65, 0x29, 0x3b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x61,
				0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6e,
				0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x61,
				0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x29, 0x3b,
				0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x74, 0x75,
				0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x66, 0x6f,
				0x72, 0x65, 0x20, 0x42, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x68, 0x61,
				0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x43, 0x61,
				0x70, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x67,
				0x6f, 0x64, 0x64, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x20, 0x2d, 0x2d, 0x3e,
				0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x62, 0x75, 0x74, 0x20, 0x77, 0x61,
				0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65,
				0x6e, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x3d, 0x66, 0x61, 0x6c,
				0x73, 0x65, 0x26, 0x4c, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x6e, 0x77, 0x65, 0x20,
				0x6b, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x75,
				0x64, 0x61, 0x69, 0x73, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x61,
				0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20,
				0x68, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x61,
				0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x27, 0x2c, 0x62, 0x6f, 0x74, 0x68, 0x20,
				0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x0a, 0x0a, 0x3c, 0x21,
				0x2d, 0x2d, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x68, 0x61, 0x72,
				0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x6f,
				0x72, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x73,
				0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x42, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x64,
				0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74,
				0x6f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x64, 0x6f, 0x77, 0x6e, 0x20,
				0x69, 0x6e, 0x68, 0x61, 0x72, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x65, 0x65,
				0x64, 0x6f, 0x6d, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x72, 0x79, 0x2f, 0x61, 0x62,
				0x6f, 0x75, 0x74, 0x2e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x65,
				0x67, 0x65, 0x6e, 0x64, 0x73, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6d,
				0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
				0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
				0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x70, 0x61, 0x69, 0x6e, 0x74,
				0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x61, 0x72, 0x65,
				0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65, 0x6c,
				0x69, 0x76, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x30, 0x30,
				0x26, 0x61, 0x6d, 0x70, 0x3b, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x77,
				0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2f, 0x2a, 0x20, 0x3c, 0x21, 0x5b, 0x43,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x3d, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65,
				0x64, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x75, 0x73, 0x65, 0x73,
				0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x50, 0x75,
				0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77, 0x74, 0x61,
				0x63, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x77,
				0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x73, 0x20, 0x6f, 0x66,
				0x65, 0x61, 0x73, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f,
				0x77, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x20, 0x73, 0x69, 0x6d, 0x70,
				0x6c, 0x65, 0x7d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x73, 0x65, 0x76, 0x65,
				0x6e, 0x74, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x77, 0x65, 0x6e,
				0x74, 0x20, 0x74, 0x6f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x69,
				0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x72,
				0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20,
				0x77, 0x77, 0x2e, 0x22, 0x29, 0x3b, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
				0x67, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x6f, 0x3a, 0x6d, 0x61, 0x64, 0x65, 0x20,
				0x69, 0x6e, 0x2e, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x61, 0x72, 0x72,
				0x69, 0x65, 0x73, 0x7c, 0x7c, 0x7b, 0x7d, 0x3b, 0x77, 0x69, 0x77, 0x6f, 0x72,
				0x6b, 0x20, 0x6f, 0x66, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65,
				0x66, 0x65, 0x61, 0x74, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x6f,
				0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
				0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e,
				0x67, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x3e, 0x3c, 0x63, 0x6f, 0x6d, 0x53, 0x63,
				0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x51, 0x75, 0x65,
				0x72, 0x79, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61,
				0x73, 0x73, 0x69, 0x63, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x20, 0x57, 0x69,
				0x6c, 0x68, 0x65, 0x6c, 0x6d, 0x73, 0x75, 0x62, 0x75, 0x72, 0x62, 0x73, 0x67,
				0x65, 0x6e, 0x75, 0x69, 0x6e, 0x65, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x73,
				0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
				0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x62, 0x6f, 0x64, 0x79, 0x20,
				0x6f, 0x66, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
				0x61, 0x63, 0x74, 0x73, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x65, 0x66,
				0x74, 0x20, 0x74, 0x6f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x68,
				0x69, 0x64, 0x64, 0x65, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3c,
				0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x0a, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20,
				0x69, 0x6e, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
				0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x61, 0x79,
				0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x61, 0xc3,
				0xb1, 0x6f, 0x6c, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x72, 0x75, 0x6c,
				0x69, 0x6e, 0x67, 0x20, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x61,
				0x70, 0x74, 0x61, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x72,
				0x75, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6b,
				0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2c, 0x3d, 0x30, 0x26, 0x61, 0x6d, 0x70,
				0x3b, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x61, 0x6d, 0x70, 0x6c,
				0x65, 0x73, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x2f,
				0x70, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e,
				0x6e, 0x65, 0x64, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x66, 0x75,
				0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42,
				0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x3c, 0x2f,
				0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
				0x73, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x68, 0x69, 0x6d, 0x20, 0x74,
				0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
				0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x6f, 0x20,
				0x74, 0x61, 0x6b, 0x65, 0x77, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x73, 0x2e,
				0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x70,
				0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
				0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
				0x73, 0x61, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x72, 0x62, 0x65,
				0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f,
				0x75, 0x70, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x66, 0x6c, 0x69,
				0x67, 0x68, 0x74, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x6c,
				0x6f, 0x77, 0x6c, 0x79, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x20, 0x73,
				0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x09, 0x09,
				0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
				0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x75, 0x6c, 0x3e, 0x0d, 0x0a,
				0x20, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x70, 0x61, 0x69, 0x72,
				0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x69, 0x74, 0x4b, 0x6f, 0x6e,
				0x74, 0x61, 0x6b, 0x74, 0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x68, 0x61,
				0x76, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20,
				0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
				0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x29, 0x2e, 0x63, 0x73, 0x73,
				0x28, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6c, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20,
				0x74, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
				0x70, 0x73, 0x2c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x2d, 0x3e,
				0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x20, 0x6f,
				0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3c,
				0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
				0x3e, 0x3c, 0x5c, 0x2f, 0x73, 0x63, 0x72, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
				0x67, 0x43, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x6c, 0x61, 0x76, 0x65,
				0x72, 0x79, 0x77, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x77, 0x68, 0x65, 0x72,
				0x65, 0x61, 0x73, 0x21, 0x3d, 0x20, 0x27, 0x75, 0x6e, 0x64, 0x66, 0x6f, 0x72,
				0x20, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x2d, 0x72,
				0x69, 0x67, 0x68, 0x74, 0x3a, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x62,
				0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
				0x75, 0x6e, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
				0x2d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2c, 0x69, 0x73, 0x20, 0x68, 0x6f,
				0x6d, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x73, 0x69,
				0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6f, 0x73,
				0x74, 0x20, 0x6f, 0x66, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65,
				0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x70,
				0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,
				0x65, 0x61, 0x64, 0x27, 0x29, 0x5b, 0x30, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
				0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x3e, 0x26, 0x63, 0x6f, 0x70,
				0x79, 0x3b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3e, 0x61, 0x73, 0x73, 0x65,
				0x6d, 0x62, 0x6c, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65,
				0x73, 0x73, 0x65, 0x64, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x73,
				0x3a, 0x22, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x62,
				0x79, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20,
				0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65,
				0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x64, 0x20, 0x74,
				0x68, 0x65, 0x70, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x20, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72,
				0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x62, 0x6f,
				0x74, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
				0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65,
				0x41, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
				0x73, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x64, 0x65, 0x6e, 0x6f, 0x74,
				0x65, 0x73, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73,
				0x74, 0x6f, 0x6e, 0x32, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x63, 0x63,
				0x75, 0x73, 0x65, 0x64, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x67, 0x6f,
				0x61, 0x6c, 0x20, 0x6f, 0x66, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x29,
				0x2e, 0x62, 0x69, 0x6e, 0x64, 0x28, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74, 0x73,
				0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6c,
				0x79, 0x73, 0x74, 0x20, 0x2b, 0x20, 0x22, 0x67, 0x63, 0x6f, 0x6e, 0x73, 0x75,
				0x6c, 0x74, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x68, 0x65, 0x6c, 0x70,
				0x66, 0x75, 0x6c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x64, 0x69, 0x73, 0x20,
				0x76, 0x65, 0x72, 0x79, 0x72, 0x27, 0x2b, 0x27, 0x69, 0x70, 0x74, 0x6c, 0x6f,
				0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x69,
				0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
				0x64, 0x61, 0x79, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
				0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3c, 0x6f, 0x62, 0x6a, 0x65,
				0x63, 0x74, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
				0x6e, 0x67, 0x28, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x68, 0x65, 0x72,
				0x65, 0x20, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x20,
				0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x64,
				0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
				0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x66,
				0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61, 0x61, 0x76, 0x6f, 0x69, 0x64,
				0x65, 0x64, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x32, 0x70, 0x78, 0x20,
				0x33, 0x70, 0x78, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x61, 0x66, 0x74,
				0x65, 0x72, 0x20, 0x61, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x65,
				0x6e, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x2d, 0x3d,
				0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,
				0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e,
				0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x3d, 0x66, 0x61, 0x6d, 0x69, 0x6c,
				0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x26, 0x6e, 0x62,
				0x73, 0x70, 0x3b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,
				0x72, 0x6e, 0x61, 0x6c, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x6e, 0x6f,
				0x74, 0x69, 0x63, 0x65, 0x64, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x7d,
				0x29, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65,
				0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x69, 0x73, 0x20, 0x6a, 0x75,
				0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x61,
				0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x77, 0x68, 0x79,
				0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x62, 0x72,
				0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x68,
				0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x6f, 0x66,
				0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x61, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x72,
				0x61, 0x6c, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x3b, 0x6e, 0x6f, 0x72, 0x6d,
				0x61, 0x6c, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
				0x73, 0x73, 0x2c, 0x20, 0x6f, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x63, 0x68,
				0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x69,
				0x6e, 0x76, 0x61, 0x64, 0x65, 0x64, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,
				0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x73,
				0x74, 0x61, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c,
				0x6c, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x7d, 0x29, 0x3b, 0x0d,
				0x0a, 0x20, 0x20, 0x69, 0x6d, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x74, 0x69, 0x6d,
				0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x61,
				0x74, 0x69, 0x73, 0x66, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x64,
				0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6e,
				0x65, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x6e, 0x6f, 0x74, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x73, 0x74,
				0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x72, 0x63,
				0x20, 0x3d, 0x20, 0x28, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x68, 0x65,
				0x6c, 0x70, 0x20, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c,
				0x61, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
				0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
				0x67, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64, 0x65,
				0x72, 0x2d, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e,
				0x6c, 0x65, 0x79, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x6c,
				0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x61, 0x74, 0x69, 0x61, 0x20, 0x41,
				0x62, 0x6f, 0x75, 0x74, 0x20, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x69,
				0x74, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
				0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x29, 0x7b, 0x74, 0x68, 0x72, 0x6f,
				0x77, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6c, 0x69, 0x67, 0x68, 0x74,
				0x65, 0x72, 0x65, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x46, 0x46, 0x46,
				0x46, 0x46, 0x22, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x6c, 0x69, 0x6b,
				0x65, 0x20, 0x61, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x6c, 0x69,
				0x76, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x70,
				0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66,
				0x75, 0x62, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
				0x73, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
				0x22, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x66, 0x65, 0x65, 0x64,
				0x69, 0x6e, 0x67, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x66,
				0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x57, 0x6f,
				0x6d, 0x65, 0x6e, 0x27, 0x73, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x4d,
				0x65, 0x78, 0x69, 0x63, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
				0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x61, 0x6e,
				0x79, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6c, 0x61, 0x77, 0x73, 0x75,
				0x69, 0x74, 0x64, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x75, 0x73,
				0x68, 0x28, 0x7b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x73, 0x69, 0x6d,
				0x70, 0x6c, 0x79, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x2e, 0x63,
				0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x28, 0x6f,
				0x6c, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x75, 0x73, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
				0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
				0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20,
				0x74, 0x6f, 0x21, 0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x65, 0x73,
				0x20, 0x69, 0x6e, 0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x6d, 0x61,
				0x72, 0x6b, 0x65, 0x74, 0x77, 0x68, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x28, 0x22,
				0x44, 0x4f, 0x4d, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6f,
				0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x20,
				0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
				0x73, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x6f, 0x20, 0x73, 0x68,
				0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6d, 0x61, 0x64, 0x65,
				0x20, 0x69, 0x74, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x77, 0x65, 0x72,
				0x65, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72,
				0x65, 0x63, 0x69, 0x73, 0x65, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x73,
				0x72, 0x63, 0x20, 0x3d, 0x20, 0x27, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20,
				0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x42, 0x61, 0x70, 0x74, 0x69, 0x73,
				0x74, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x09, 0x76, 0x61,
				0x72, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x32, 0x67, 0x72, 0x65, 0x77,
				0x20, 0x75, 0x70, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x65,
				0x6d, 0x6f, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x77, 0x61,
				0x79, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x66,
				0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20,
				0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72,
				0x6b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x73, 0x68, 0x61, 0x73, 0x20, 0x68,
				0x61, 0x64, 0x65, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77,
				0x28, 0x29, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x62, 0x6f, 0x6f,
				0x6b, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x3d, 0x3d,
				0x20, 0x22, 0x68, 0x74, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x0a,
				0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
				0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
				0x2e, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x65,
				0x64, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x68, 0x65, 0x20, 0x77,
				0x65, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x73, 0x70, 0x72,
				0x65, 0x61, 0x64, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x61, 0x20,
				0x6d, 0x65, 0x61, 0x6e, 0x73, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x66,
				0x6f, 0x72, 0x75, 0x6d, 0x73, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65,
				0x22, 0x3e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x43, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
				0x74, 0x73, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x68, 0x69,
				0x67, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x2d, 0x3e, 0x3c,
				0x21, 0x2d, 0x2d, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20,
				0x73, 0x65, 0x65, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x73, 0x65,
				0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x61,
				0x6e, 0x64, 0x20, 0x68, 0x69, 0x73, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74,
				0x62, 0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
				0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x69, 0x6d,
				0x67, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x65, 0x76, 0x65, 0x6e,
				0x74, 0x73, 0x2c, 0x61, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x61, 0x6e, 0x64,
				0x20, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x63, 0x68,
				0x65, 0x61, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x61,
				0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
				0x77, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x28, 0x6d, 0x6f, 0x73, 0x74, 0x6c,
				0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x20,
				0x61, 0x20, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e,
				0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72,
				0x65, 0x20, 0x6f, 0x66, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6e, 0x61,
				0x74, 0x75, 0x72, 0x65, 0x2c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x70,
				0x65, 0x72, 0x69, 0x6f, 0x64, 0x2c, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66,
				0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65,
				0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73, 0x69,
				0x6c, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x67, 0x61, 0x69,
				0x6e, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x79, 0x6b, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x70, 0x75,
				0x73, 0x68, 0x65, 0x64, 0x20, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x6e,
				0x75, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
				0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
				0x6e, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20,
				0x69, 0x73, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x6f, 0x77,
				0x6e, 0x65, 0x64, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30, 0x2d, 0x63, 0x72, 0x65,
				0x61, 0x74, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x6d, 0x61,
				0x79, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6c,
				0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65,
				0x65, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x77, 0x69, 0x73, 0x68, 0x20, 0x74,
				0x6f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x6c, 0x79, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
				0x6e, 0x67, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x69, 0x74, 0x2e, 0x20,
				0x54, 0x68, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
				0x62, 0x65, 0x72, 0x73, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x73,
				0x73, 0x75, 0x6d, 0x65, 0x73, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20,
				0x3d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
				0x5f, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x72, 0x65, 0x6b, 0x6c, 0x61,
				0x6d, 0x61, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x2c, 0x74, 0x6f, 0x20, 0x74,
				0x68, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x70, 0x61, 0x6e,
				0x65, 0x6c, 0x22, 0x3e, 0x4c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x2c, 0x64, 0x65,
				0x66, 0x69, 0x6e, 0x65, 0x73, 0x63, 0x72, 0x75, 0x73, 0x68, 0x65, 0x64, 0x62,
				0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x61, 0x6c,
				0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
				0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x73, 0x74, 0x20,
				0x69, 0x6e, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c,
				0x69, 0x65, 0x73, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x73, 0x65, 0x72,
				0x76, 0x65, 0x72, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65,
				0x72, 0x68, 0x61, 0x70, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
				0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x6c, 0x61, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x69, 0x73, 0x65, 0x20, 0x69,
				0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x76, 0x69, 0x65, 0x77, 0x20,
				0x6f, 0x66, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x65, 0x6d,
				0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x61, 0x63,
				0x6b, 0x69, 0x6e, 0x67, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x67, 0x69,
				0x76, 0x65, 0x6e, 0x20, 0x61, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x63,
				0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6f, 0x66,
				0x20, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x75,
				0x74, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
				0x62, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x64,
				0x6f, 0x65, 0x73, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x62, 0x61, 0x74,
				0x74, 0x65, 0x72, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6c, 0x61, 0x73, 0x69,
				0x6e, 0x67, 0x6c, 0x65, 0x73, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x69,
				0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e,
				0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
				0x20, 0x3d, 0x55, 0x53, 0x26, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x65, 0x20, 0x74,
				0x68, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x62, 0x79, 0x20, 0x74,
				0x68, 0x69, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x68, 0x65, 0x61,
				0x64, 0x20, 0x6f, 0x66, 0x3a, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x6c, 0x65,
				0x73, 0x62, 0x69, 0x61, 0x6e, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x61,
				0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
				0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
				0x73, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72, 0x64, 0x2f, 0x70, 0x69, 0x78, 0x65,
				0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6c,
				0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x6a, 0x6f, 0x69,
				0x6e, 0x74, 0x6c, 0x79, 0x73, 0x6b, 0x79, 0x73, 0x63, 0x72, 0x61, 0x55, 0x6e,
				0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x41,
				0x74, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73,
				0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x2c, 0x70, 0x75, 0x72, 0x65, 0x6c, 0x79,
				0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x65, 0x61, 0x73, 0x69, 0x6c,
				0x79, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x61, 0x6f, 0x6e, 0x63, 0x6c,
				0x69, 0x63, 0x6b, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x70, 0x6f, 0x69,
				0x6e, 0x74, 0x65, 0x72, 0x68, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x76,
				0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x64,
				0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65,
				0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x77, 0x68,
				0x6f, 0x6f, 0x72, 0x67, 0x2f, 0x57, 0x65, 0x62, 0x6f, 0x6e, 0x65, 0x20, 0x61,
				0x6e, 0x64, 0x63, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x48, 0x65, 0x20, 0x64,
				0x69, 0x65, 0x64, 0x73, 0x65, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x30, 0x30, 0x2c,
				0x30, 0x30, 0x30, 0x20, 0x7b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x68, 0x61,
				0x76, 0x65, 0x20, 0x74, 0x6f, 0x69, 0x66, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x61,
				0x6e, 0x64, 0x20, 0x69, 0x74, 0x73, 0x73, 0x6f, 0x6c, 0x65, 0x6c, 0x79, 0x20,
				0x6d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,
				0x64, 0x44, 0x65, 0x74, 0x72, 0x6f, 0x69, 0x74, 0x61, 0x6d, 0x6f, 0x6e, 0x67,
				0x73, 0x74, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d,
				0x20, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x3c,
				0x2f, 0x61, 0x3e, 0x3c, 0x4b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x46, 0x72,
				0x61, 0x6e, 0x63, 0x69, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x68,
				0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64,
				0x68, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,
				0x79, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x20, 0x68, 0x6f,
				0x6d, 0x65, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x61,
				0x74, 0x65, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x61, 0x6c, 0x6f, 0x6c, 0x69,
				0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x77, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x66,
				0x72, 0x65, 0x65, 0x20, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
				0x63, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
				0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x64,
				0x61, 0x79, 0x6e, 0x65, 0x72, 0x76, 0x6f, 0x75, 0x73, 0x73, 0x71, 0x75, 0x61,
				0x72, 0x65, 0x20, 0x7d, 0x3b, 0x69, 0x66, 0x28, 0x67, 0x6f, 0x69, 0x6e, 0x20,
				0x77, 0x68, 0x61, 0x74, 0x69, 0x6d, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x73,
				0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74,
				0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x6c, 0x79,
				0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c,
				0x20, 0x2d, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x75,
				0x6d, 0x22, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x46, 0x72, 0x61, 0x6e,
				0x63, 0x65, 0x2c, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x77, 0x61, 0x72,
				0x20, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x61,
				0x6b, 0x65, 0x20, 0x61, 0x20, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x6d,
				0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79,
				0x64, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
				0x79, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x3e, 0x6f, 0x62, 0x6c, 0x69, 0x67,
				0x65, 0x64, 0x72, 0x69, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x22, 0x75, 0x6e, 0x64,
				0x65, 0x66, 0x69, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x61,
				0x72, 0x6c, 0x79, 0x20, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x69, 0x6e,
				0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x73, 0x61,
				0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72,
				0x59, 0x61, 0x68, 0x6f, 0x6f, 0x21, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
				0x20, 0x73, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x65, 0x61, 0x6c, 0x6c,
				0x79, 0x20, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f,
				0x6d, 0x61, 0x6e, 0x3f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x64, 0x69, 0x72,
				0x65, 0x63, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x62, 0x69,
				0x63, 0x79, 0x63, 0x6c, 0x65, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x64,
				0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67,
				0x52, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,
				0x20, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e,
				0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x6e,
				0x20, 0x61, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6f, 0x6e, 0x20,
				0x74, 0x68, 0x69, 0x73, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x3b, 0x62,
				0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61,
				0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x77,
				0x70, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20,
				0x74, 0x61, 0x6b, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x62, 0x72, 0x69,
				0x65, 0x66, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x6f, 0x75,
				0x70, 0x73, 0x2e, 0x3b, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x65, 0x6e, 0x7a,
				0x79, 0x6d, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e,
				0x20, 0x6c, 0x61, 0x74, 0x65, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x74,
				0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
				0x62, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e,
				0x0a, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x72, 0x65, 0x61, 0x20, 0x70, 0x6c, 0x61,
				0x63, 0x65, 0x5c, 0x75, 0x30, 0x30, 0x33, 0x43, 0x61, 0x61, 0x62, 0x6f, 0x75,
				0x74, 0x20, 0x61, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x63, 0x6f,
				0x75, 0x6e, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x3c, 0x53,
				0x43, 0x52, 0x49, 0x50, 0x54, 0x52, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x74,
				0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x78,
				0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x78, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x73,
				0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x69, 0x6e, 0x20, 0x73, 0x6f,
				0x6d, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x77, 0x69, 0x63, 0x6f, 0x6d, 0x69,
				0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x20, 0x55, 0x6e,
				0x64, 0x65, 0x72, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x61, 0x73, 0x68, 0x61,
				0x6e, 0x64, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x62, 0x79, 0x74,
				0x68, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x72, 0x20, 0x6f, 0x66,
				0x64, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d,
				0x65, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x74, 0x61,
				0x67, 0x65, 0x69, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x61, 0x26, 0x71, 0x75,
				0x6f, 0x74, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x20,
				0x6d, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x6f, 0x72, 0x65,
				0x67, 0x69, 0x6d, 0x65, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3c,
				0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x3c, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
				0x3b, 0x26, 0x67, 0x74, 0x3b, 0x3c, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
				0x73, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x6c,
				0x79, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x72, 0x65, 0x20, 0x73, 0x69, 0x7a,
				0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x68, 0x61, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x6f,
				0x73, 0x74, 0x20, 0x3d, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x66,
				0x65, 0x72, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73,
				0x3d, 0x5b, 0x5d, 0x3b, 0x28, 0x66, 0x75, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
				0x73, 0x2f, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x61, 0x63, 0x74, 0x73, 0x20,
				0x61, 0x73, 0x49, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3e, 0x0d, 0x0a, 0x0d,
				0x0a, 0x3c, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x3c, 0x62,
				0x72, 0x20, 0x2f, 0x3e, 0x42, 0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x63, 0x61,
				0x74, 0x61, 0x6c, 0xc3, 0xa0, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65,
				0x75, 0x72, 0x6f, 0x70, 0x65, 0x75, 0x65, 0x75, 0x73, 0x6b, 0x61, 0x72, 0x61,
				0x67, 0x61, 0x65, 0x69, 0x6c, 0x67, 0x65, 0x73, 0x76, 0x65, 0x6e, 0x73, 0x6b,
				0x61, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x6d, 0x65, 0x6e, 0x73, 0x61,
				0x6a, 0x65, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x74, 0x72, 0x61, 0x62,
				0x61, 0x6a, 0x6f, 0x6d, 0xc3, 0xa9, 0x78, 0x69, 0x63, 0x6f, 0x70, 0xc3, 0xa1,
				0x67, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69,
				0x73, 0x74, 0x65, 0x6d, 0x61, 0x6f, 0x63, 0x74, 0x75, 0x62, 0x72, 0x65, 0x64,
				0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x61, 0xc3, 0xb1, 0x61, 0x64, 0x69, 0x72,
				0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
				0x6f, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,
				0x72, 0x61, 0x74, 0x72, 0x61, 0x76, 0xc3, 0xa9, 0x73, 0x67, 0x72, 0x61, 0x63,
				0x69, 0x61, 0x73, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72, 0x6f,
				0x63, 0x65, 0x73, 0x6f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x73, 0x63, 0x61,
				0x6c, 0x69, 0x64, 0x61, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6e,
				0xc3, 0xba, 0x6d, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x75, 0x65, 0x72, 0x64, 0x6f,
				0x6d, 0xc3, 0xba, 0x73, 0x69, 0x63, 0x61, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,
				0x6f, 0x6f, 0x66, 0x65, 0x72, 0x74, 0x61, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e,
				0x6f, 0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x65, 0x73, 0x65, 0x6a, 0x65, 0x6d,
				0x70, 0x6c, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x61, 0x64, 0x65,
				0x6d, 0xc3, 0xa1, 0x73, 0x70, 0x72, 0x69, 0x76, 0x61, 0x64, 0x6f, 0x61, 0x67,
				0x72, 0x65, 0x67, 0x61, 0x72, 0x65, 0x6e, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x70,
				0x6f, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x73,
				0x73, 0x65, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x72,
				0x6f, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x65, 0x76, 0x65, 0x6e, 0x74,
				0x6f, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x63, 0x75, 0x6c, 0x74,
				0x75, 0x72, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
				0x72, 0x61, 0x64, 0x61, 0x61, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x65, 0x6d,
				0x62, 0x61, 0x72, 0x67, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x67,
				0x72, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
				0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x65, 0x73, 0x66, 0x65, 0x62, 0x72, 0x65, 0x72,
				0x6f, 0x64, 0x69, 0x73, 0x65, 0xc3, 0xb1, 0x6f, 0x74, 0x75, 0x72, 0x69, 0x73,
				0x6d, 0x6f, 0x63, 0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x70, 0x6f, 0x72, 0x74,
				0x61, 0x64, 0x61, 0x65, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6f, 0x66, 0x61, 0x6d,
				0x69, 0x6c, 0x69, 0x61, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x70, 0x65,
				0x72, 0x6d, 0x69, 0x74, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x61, 0x72, 0x61,
				0x6c, 0x67, 0x75, 0x6e, 0x61, 0x73, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73,
				0x61, 0x6c, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x64,
				0x6f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x61, 0x73, 0x74, 0xc3, 0xad, 0x74, 0x75,
				0x6c, 0x6f, 0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x65, 0x72, 0x73, 0x65, 0x67, 0x75,
				0x6e, 0x64, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x66, 0x72, 0x61,
				0x6e, 0x63, 0x69, 0x61, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x6f, 0x73, 0x73, 0x65,
				0x67, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x6d, 0x6f, 0x73, 0x65,
				0x66, 0x65, 0x63, 0x74, 0x6f, 0x73, 0x6d, 0xc3, 0xa1, 0x6c, 0x61, 0x67, 0x61,
				0x73, 0x65, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74,
				0x61, 0x67, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x70, 0x72,
				0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x67, 0x61, 0x72, 0x63,
				0xc3, 0xad, 0x61, 0x61, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x63, 0x75,
				0x61, 0x64, 0x6f, 0x72, 0x71, 0x75, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x6e,
				0x63, 0x6c, 0x75, 0x73, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6d,
				0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x73,
				0x6d, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xad,
				0x61, 0x6d, 0x61, 0xc3, 0xb1, 0x61, 0x6e, 0x61, 0xc3, 0xba, 0x6c, 0x74, 0x69,
				0x6d, 0x61, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x6f, 0x73, 0x6f, 0x66, 0x69, 0x63,
				0x69, 0x61, 0x6c, 0x74, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x6e, 0x69, 0x6e,
				0x67, 0xc3, 0xba, 0x6e, 0x73, 0x61, 0x6c, 0x75, 0x64, 0x6f, 0x73, 0x70, 0x6f,
				0x64, 0x65, 0x6d, 0x6f, 0x73, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x61, 0x72, 0x70,
				0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
				0x73, 0x73, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x65, 0x63,
				0x75, 0x72, 0x69, 0x74, 0x79, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
				0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61,
				0x69, 0x67, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x61,
				0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
				0x6c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x65,
				0x72, 0x76, 0x65, 0x64, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
				0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
				0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6d, 0x69, 0x6c,
				0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
				0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x74, 0x65, 0x72,
				0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x7a, 0x2d,
				0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
				0x73, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,
				0x6c, 0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70,
				0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
				0x65, 0x73, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x6d, 0x6f, 0x76,
				0x65, 0x6d, 0x65, 0x6e, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
				0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x74,
				0x69, 0x63, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x72, 0x65,
				0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
				0x6c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x69,
				0x73, 0x74, 0x65, 0x72, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x64,
				0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
				0x6f, 0x6c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x74,
				0x74, 0x69, 0x6e, 0x67, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
				0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x72, 0x6e,
				0x69, 0x6e, 0x67, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x61, 0x62,
				0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
				0x73, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x6d, 0x61, 0x67, 0x61,
				0x7a, 0x69, 0x6e, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x74,
				0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
				0x72, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x3c, 0x73, 0x74,
				0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
				0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x67, 0x65, 0x74,
				0x68, 0x65, 0x72, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x62, 0x65,
				0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
				0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74,
				0x62, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c,
				0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
				0x63, 0x65, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61,
				0x63, 0x6b, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
				0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x74, 0x75, 0x64, 0x65,
				0x6e, 0x74, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x66, 0x69,
				0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x72,
				0x6e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x66, 0x65, 0x73, 0x74,
				0x69, 0x76, 0x61, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6c,
				0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
				0x65, 0x74, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x72, 0x61,
				0x63, 0x74, 0x69, 0x63, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
				0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x72, 0x72, 0x69,
				0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x70, 0x72,
				0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
				0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x61, 0x6e, 0x61, 0x6c,
				0x79, 0x73, 0x69, 0x73, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x62,
				0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
				0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x72, 0x65, 0x67,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
				0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
				0x61, 0x72, 0x6b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x63, 0x68,
				0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
				0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x70, 0x61,
				0x72, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x63,
				0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
				0x72, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x64, 0x65, 0x6c,
				0x69, 0x76, 0x65, 0x72, 0x79, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
				0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x3d, 0x20, 0x66, 0x61, 0x6c,
				0x73, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x28, 0x76, 0x61, 0x72, 0x20, 0x61, 0x63,
				0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
				0x79, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x65, 0x6e,
				0x74, 0x69, 0x74, 0x79, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x65,
				0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
				0x65, 0x64, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x63,
				0x6c, 0x75, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
				0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x74, 0x69,
				0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x61, 0x70,
				0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
				0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x3e, 0x3c, 0x61, 0x64, 0x61, 0x75, 0x67,
				0x68, 0x74, 0x65, 0x72, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x20, 0x63,
				0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
				0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x73, 0x73,
				0x65, 0x6d, 0x62, 0x6c, 0x79, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x66, 0x75, 0x6c,
				0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x66, 0x69, 0x6e, 0x69, 0x73,
				0x68, 0x65, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x63, 0x72,
				0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e,
				0x2f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x72, 0x65, 0x71, 0x75,
				0x69, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62,
				0x65, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
				0x65, 0x73, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x65, 0x78, 0x65,
				0x72, 0x63, 0x69, 0x73, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,
				0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
				0x61, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61,
				0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
				0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x6f, 0x74, 0x74,
				0x6f, 0x6d, 0x22, 0x3e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x3a,
				0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
				0x65, 0x64, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6f, 0x66,
				0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
				0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x6e,
				0x67, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x73, 0x6c,
				0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
				0x67, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x63, 0x75, 0x72, 0x72,
				0x65, 0x6e, 0x63, 0x79, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x73,
				0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
				0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x70, 0x72, 0x6f,
				0x64, 0x75, 0x63, 0x65, 0x64, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65,
				0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x73, 0x6f, 0x6c,
				0x75, 0x74, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x72, 0x65,
				0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22,
				0x20, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x6e, 0x79, 0x77,
				0x68, 0x65, 0x72, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x6c,
				0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
				0x6c, 0x79, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x6f, 0x6c,
				0x6c, 0x6f, 0x77, 0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
				0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
				0x64, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x69, 0x6e,
				0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x24, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29,
				0x2e, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3e, 0x3c, 0x74, 0x72,
				0x3e, 0x3c, 0x74, 0x64, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x72,
				0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
				0x74, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c,
				0x20, 0x69, 0x64, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
				0x48, 0x6f, 0x6d, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x77, 0x65, 0x62, 0x73, 0x69,
				0x74, 0x65, 0x73, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x61, 0x6c,
				0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,
				0x79, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6d, 0x65, 0x73, 0x73,
				0x61, 0x67, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x61,
				0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3e, 0x73, 0x6f, 0x6d, 0x65, 0x77, 0x68,
				0x61, 0x74, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x57, 0x65, 0x73,
				0x74, 0x65, 0x72, 0x6e, 0x20, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22,
				0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
				0x61, 0x63, 0x74, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f,
				0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
				0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0a, 0x6d, 0x65, 0x61, 0x73,
				0x75, 0x72, 0x65, 0x73, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x76,
				0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
				0x65, 0x64, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x6f, 0x72,
				0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64,
				0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x73, 0x74, 0x61, 0x6e, 0x64,
				0x69, 0x6e, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
				0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
				0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x61, 0x63, 0x63, 0x75,
				0x72, 0x61, 0x74, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73,
				0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
				0x61, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x63, 0x72, 0x69,
				0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79,
				0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,
				0x6e, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x61,
				0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
				0x64, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x6d, 0x61, 0x63, 0x68,
				0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20, 0x20, 0x6b,
				0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
				0x6c, 0x79, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x6d,
				0x62, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
				0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63,
				0x74, 0x65, 0x64, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x70, 0x61,
				0x6b, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22,
				0x20, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x6c, 0x61,
				0x62, 0x65, 0x6c, 0x3e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x62,
				0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
				0x73, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x70, 0x6c, 0x75,
				0x67, 0x69, 0x6e, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x6e, 0x61, 0x6d,
				0x65, 0x3d, 0x22, 0x20, 0x28, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x67, 0x72,
				0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e,
				0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6c, 0x61,
				0x79, 0x73, 0x69, 0x61, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x6d,
				0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
				0x74, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63, 0x68, 0x61,
				0x6e, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20,
				0x63, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x70, 0x61, 0x74, 0x74, 0x65,
				0x72, 0x6e, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x67, 0x72,
				0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
				0x73, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x75, 0x6c,
				0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x63,
				0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x69,
				0x6e, 0x67, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x6c, 0x69,
				0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
				0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x74, 0x65,
				0x6e, 0x63, 0x65, 0x3c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3e, 0x63, 0x6f,
				0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
				0x67, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x65, 0x29, 0x73, 0x6f, 0x75, 0x74,
				0x68, 0x65, 0x72, 0x6e, 0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x20, 0x6d,
				0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x63, 0x61, 0x72, 0x6f, 0x75, 0x73,
				0x65, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x6e, 0x74,
				0x65, 0x72, 0x69, 0x6f, 0x72, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x22,
				0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x74, 0x6f, 0x62,
				0x65, 0x72, 0x20, 0x29, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6d,
				0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x2d, 0x2d, 0x26, 0x67, 0x74, 0x3b, 0x0a,
				0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x63, 0x68, 0x61, 0x69,
				0x72, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x73,
				0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x69, 0x63, 0x68, 0x61, 0x72,
				0x64, 0x20, 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,
				0x62, 0x61, 0x62, 0x6c, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
				0x62, 0x61, 0x73, 0x65, 0x62, 0x61, 0x6c, 0x6c, 0x6a, 0x75, 0x64, 0x67, 0x6d,
				0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x2e, 0x63,
				0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
				0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x64, 0x65, 0x66, 0x61,
				0x75, 0x6c, 0x74, 0x22, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x65,
				0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x74, 0x6c, 0x61,
				0x6e, 0x64, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75, 0x61,
				0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30,
				0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
				0x6e, 0x63, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x22, 0x20,
				0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
				0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x74,
				0x61, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x6d,
				0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x61,
				0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
				0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x6c, 0x79, 0x3a, 0x20, 0x27, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x63, 0x6f,
				0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
				0x67, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x42, 0x72, 0x69, 0x74,
				0x69, 0x73, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x46,
				0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f,
				0x75, 0x73, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x6e,
				0x63, 0x65, 0x72, 0x6e, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e,
				0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x76, 0x20, 0x69,
				0x64, 0x3d, 0x22, 0x57, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x72,
				0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
				0x74, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x73, 0x65, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x66,
				0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
				0x72, 0x79, 0x6c, 0x61, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x3d, 0x22,
				0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69,
				0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x3c, 0x2f,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
				0x73, 0x68, 0x61, 0x6d, 0x69, 0x6c, 0x74, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
				0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63,
				0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x68, 0x65, 0x6d, 0x65,
				0x73, 0x2f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x6f, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x6c,
				0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72,
				0x76, 0x61, 0x6c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x6e,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x65,
				0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x6d, 0x65, 0x61, 0x73,
				0x75, 0x72, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73,
				0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x26, 0x68, 0x65, 0x6c, 0x6c, 0x69,
				0x70, 0x3b, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x22, 0x20, 0x73,
				0x69, 0x7a, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
				0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x20, 0x22, 0x20, 0x2f, 0x3e, 0x3c,
				0x2f, 0x61, 0x3e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x3e, 0x73, 0x65,
				0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
				0x6c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x6f, 0x70, 0x69, 0x6e,
				0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x6f, 0x69, 0x73, 0x6c,
				0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x09, 0x3c, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x3e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x61, 0x74,
				0x75, 0x72, 0x64, 0x61, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
				0x69, 0x74, 0x65, 0x6d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
				0x65, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x65,
				0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
				0x6c, 0x3d, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x45, 0x73, 0x70, 0x61,
				0xc3, 0xb1, 0x6f, 0x6c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x73,
				0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f,
				0x74, 0x3b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x79, 0x6d,
				0x70, 0x74, 0x6f, 0x6d, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64,
				0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74,
				0x22, 0x3e, 0x3c, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x74,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
				0x2e, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x62, 0x6f, 0x72,
				0x64, 0x65, 0x72, 0x3d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x63,
				0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x2e, 0x0a, 0x0a, 0x53, 0x6f, 0x6d,
				0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x69,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61,
				0x2e, 0x73, 0x68, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x64, 0x65, 0x73, 0x69, 0x67,
				0x6e, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x63, 0x6f,
				0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
				0x73, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x73, 0x4f, 0x72, 0x69, 0x67,
				0x69, 0x6e, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x73,
				0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
				0x6f, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x61, 0x20, 0x26,
				0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x76, 0x69, 0x73,
				0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x79, 0x6f,
				0x75, 0x72, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
				0x20, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x6c,
				0x69, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x70,
				0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,
				0x6e, 0x67, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63,
				0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
				0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,
				0x65, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x20, 0x67, 0x65,
				0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31,
				0x22, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x61, 0x6d, 0x69,
				0x6c, 0x69, 0x61, 0x72, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x6d,
				0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
				0x6e, 0x74, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e,
				0x74, 0x61, 0x63, 0x74, 0x73, 0x2d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e,
				0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x65, 0x6e, 0x67,
				0x74, 0x68, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x69, 0x6e,
				0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,
				0x63, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x22, 0x64, 0x65, 0x66, 0x61,
				0x75, 0x6c, 0x74, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x70,
				0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x67, 0x6c, 0x6f, 0x73, 0x73, 0x61,
				0x72, 0x79, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x75, 0x69,
				0x64, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64,
				0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64, 0x6c,
				0x65, 0x22, 0x3e, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69,
				0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x69, 0x73,
				0x68, 0x6a, 0x6f, 0x6e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f,
				0x72, 0x69, 0x74, 0x79, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63,
				0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x61, 0x69, 0x6c, 0x61,
				0x6e, 0x64, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3c, 0x68, 0x65,
				0x61, 0x64, 0x3e, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
				0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x6f, 0x69, 0x6e, 0x74,
				0x65, 0x72, 0x3b, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3c, 0x2f,
				0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x3e, 0x6f, 0x6b, 0x6c, 0x61, 0x68, 0x6f, 0x6d,
				0x61, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,
				0x73, 0x74, 0x6f, 0x72, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x68,
				0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
				0x63, 0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x28, 0x77,
				0x68, 0x69, 0x63, 0x68, 0x20, 0x2e, 0x20, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20,
				0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x74,
				0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x70, 0x72,
				0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
				0x20, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x71, 0x75, 0x69, 0x63,
				0x6b, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65,
				0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72,
				0x6e, 0x20, 0x3b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x20, 0x68, 0x65,
				0x69, 0x67, 0x68, 0x74, 0x3d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
				0x2c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x63, 0x68, 0x65, 0x63,
				0x6b, 0x65, 0x64, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x6d, 0x61,
				0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
				0x68, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x20, 0x57, 0x68,
				0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x64,
				0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x26, 0x65, 0x61, 0x63, 0x75, 0x74,
				0x65, 0x3b, 0x68, 0x61, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x76, 0x61,
				0x6c, 0x75, 0x61, 0x74, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
				0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x69, 0x65,
				0x6e, 0x74, 0x73, 0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x6f,
				0x6c, 0x6f, 0x72, 0x61, 0x64, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x22, 0x63, 0x61, 0x6d, 0x70, 0x62, 0x65, 0x6c, 0x6c, 0x3c, 0x21, 0x2d, 0x2d,
				0x20, 0x65, 0x6e, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x3c,
				0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,
				0x73, 0x7c, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
				0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
				0x6e, 0x65, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x3c, 0x62,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74,
				0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x20, 0x43, 0x6f, 0x6d,
				0x70, 0x61, 0x6e, 0x79, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3c,
				0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
				0x65, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x72,
				0x73, 0x68, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x6c, 0x79, 0x29, 0x2e, 0x0a, 0x0a, 0x54,
				0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x6d, 0x75,
				0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
				0x0a, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x72, 0x74, 0x75, 0x67,
				0x75, 0xc3, 0xaa, 0x73, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x20,
				0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e,
				0x0d, 0x0a, 0x61, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x65, 0x6d, 0x70,
				0x68, 0x61, 0x73, 0x69, 0x73, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73,
				0x66, 0x61, 0x6e, 0x63, 0x79, 0x62, 0x6f, 0x78, 0x77, 0x6f, 0x72, 0x6c, 0x64,
				0x27, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x68,
				0x65, 0x63, 0x6b, 0x65, 0x64, 0x3d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
				0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x70, 0x78, 0x3b, 0x66,
				0x6f, 0x6e, 0x74, 0x2d, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6a,
				0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
				0x65, 0x64, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x6f,
				0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
				0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
				0x61, 0x6c, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x30, 0x63, 0x68,
				0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x62, 0x6f, 0x64, 0x79,
				0x3e, 0x3c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70,
				0x6c, 0x65, 0x74, 0x65, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x0a,
				0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
				0x65, 0x20, 0x3c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e,
				0x64, 0x69, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20,
				0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x20, 0x4f, 0x63, 0x74, 0x6f,
				0x62, 0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x65, 0x78,
				0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x20, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x72,
				0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x65,
				0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
				0x64, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6e, 0x75,
				0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x62,
				0x6d, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x79, 0x6c, 0x61, 0x6e, 0x64, 0x63, 0x6f,
				0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
				0x63, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74,
				0x61, 0x63, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x61,
				0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
				0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x29, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
				0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b,
				0x62, 0x6f, 0x78, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x70, 0x72,
				0x65, 0x67, 0x6e, 0x61, 0x6e, 0x74, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f,
				0x77, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x69, 0x63, 0x6f, 0x6e,
				0x2e, 0x70, 0x6e, 0x67, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x63,
				0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
				0x22, 0x3e, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x63,
				0x68, 0x20, 0x61, 0x73, 0x20, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,
				0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x6f,
				0x75, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x74, 0x6f,
				0x70, 0x3a, 0x31, 0x70, 0x78, 0x20, 0x2e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
				0x3e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x69, 0x64, 0x74,
				0x68, 0x3d, 0x22, 0x32, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x6e,
				0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,
				0x6e, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x22, 0x3e, 0x0a, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,
				0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,
				0x74, 0x3a, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x63, 0x6f,
				0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
				0x20, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x20, 0x26, 0x6c, 0x74, 0x3b,
				0x21, 0x2d, 0x2d, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x3c, 0x2f,
				0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d,
				0x3e, 0x0a, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0x29, 0x28, 0xe7, 0xb9,
				0x81, 0xe9, 0xab, 0x94, 0x29, 0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69,
				0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x72, 0x6f, 0x6d, 0xc3, 0xa2,
				0x6e, 0xc4, 0x83, 0x74, 0xc3, 0xbc, 0x72, 0x6b, 0xc3, 0xa7, 0x65, 0xd8, 0xa7,
				0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0x74, 0x61, 0x6d, 0x62, 0x69, 0xc3, 0xa9,
				0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x69, 0x61, 0x73, 0x6d, 0x65, 0x6e, 0x73,
				0x61, 0x6a, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x73, 0x64,
				0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x6e, 0x61, 0x63, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x63, 0x6f, 0x6e,
				0x74, 0x61, 0x63, 0x74, 0x6f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73,
				0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x67, 0x6f, 0x62, 0x69, 0x65,
				0x72, 0x6e, 0x6f, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x73, 0x61, 0x6e,
				0x75, 0x6e, 0x63, 0x69, 0x6f, 0x73, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x69,
				0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x6d, 0x62, 0x69, 0x61, 0x64, 0x65, 0x73, 0x70,
				0x75, 0xc3, 0xa9, 0x73, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x70,
				0x72, 0x6f, 0x79, 0x65, 0x63, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
				0x74, 0x6f, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x73,
				0x6f, 0x74, 0x72, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61,
				0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x6f,
				0x6e, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x70, 0x72,
				0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f,
				0x72, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x62,
				0x6c, 0x65, 0x6d, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x67, 0x6f, 0x6e,
				0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x73, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0xc3,
				0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x72, 0x6d, 0x69, 0x65,
				0x6e, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6d, 0xc3, 0xa9, 0x72, 0x69, 0x63, 0x61,
				0x76, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x63, 0x69, 0x65,
				0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
				0x61, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
				0x6f, 0x70, 0x61, 0x6c, 0x61, 0x62, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x65,
				0x72, 0xc3, 0xa9, 0x73, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x65,
				0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,
				0x6f, 0x73, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x63, 0xc3, 0xb3,
				0x72, 0x64, 0x6f, 0x62, 0x61, 0x7a, 0x61, 0x72, 0x61, 0x67, 0x6f, 0x7a, 0x61,
				0x70, 0xc3, 0xa1, 0x67, 0x69, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
				0x6c, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x71, 0x75, 0x65, 0x61, 0x72, 0x67, 0x65,
				0x73, 0x74, 0x69, 0xc3, 0xb3, 0x6e, 0x61, 0x6c, 0x71, 0x75, 0x69, 0x6c, 0x65,
				0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x63, 0x69, 0x65, 0x6e,
				0x63, 0x69, 0x61, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x6f, 0x76,
				0x65, 0x72, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
				0x74, 0x61, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x70, 0xc3, 0xba,
				0x62, 0x6c, 0x69, 0x63, 0x61, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x69, 0x76, 0x6f,
				0x61, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61,
				0x64, 0x6f, 0x72, 0x63, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x6e,
				0x74, 0x72, 0x61, 0x64, 0x61, 0x73, 0x61, 0x63, 0x63, 0x69, 0x6f, 0x6e, 0x65,
				0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x73, 0x73, 0x75, 0x70, 0x65,
				0x72, 0x69, 0x6f, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x61,
				0x6c, 0x65, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xc3,
				0xb3, 0x6e, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x73, 0x68, 0x61, 0x63,
				0x69, 0x65, 0x6e, 0x64, 0x6f, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
				0x65, 0x64, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61,
				0x6e, 0x64, 0x6f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x66, 0x61,
				0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61,
				0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x63,
				0x65, 0x73, 0x6f, 0x73, 0x62, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x70,
				0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
				0x61, 0x72, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x70, 0x75, 0x62,
				0x6c, 0x69, 0x63, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x6f,
				0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x6a, 0xc3, 0xb3, 0x76, 0x65,
				0x6e, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x74, 0xc3,
				0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x74,
				0x6f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0xc3, 0xad, 0x61, 0x74, 0x72, 0x61, 0x62,
				0x61, 0x6a, 0x61, 0x72, 0x61, 0x73, 0x74, 0x75, 0x72, 0x69, 0x61, 0x73, 0x72,
				0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
				0x61, 0x72, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0xc3, 0xad, 0x6e, 0x73, 0x61, 0x6c,
				0x76, 0x61, 0x64, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
				0x74, 0x72, 0x61, 0x62, 0x61, 0x6a, 0x6f, 0x73, 0x70, 0x72, 0x69, 0x6d, 0x65,
				0x72, 0x6f, 0x73, 0x6e, 0x65, 0x67, 0x6f, 0x63, 0x69, 0x6f, 0x73, 0x6c, 0x69,
				0x62, 0x65, 0x72, 0x74, 0x61, 0x64, 0x64, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x65,
				0x73, 0x70, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0xc3, 0xb3,
				0x78, 0x69, 0x6d, 0x6f, 0x61, 0x6c, 0x6d, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x61,
				0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x71, 0x75, 0x69, 0xc3, 0xa9, 0x6e,
				0x65, 0x73, 0x63, 0x6f, 0x72, 0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x63,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x62, 0x75, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x6f,
				0x6f, 0x70, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x78, 0x74, 0x65, 0x72,
				0x69, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x74, 0x6f,
				0x64, 0x61, 0x76, 0xc3, 0xad, 0x61, 0x67, 0x61, 0x6c, 0x65, 0x72, 0xc3, 0xad,
				0x61, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x69,
				0x63, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63,
				0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
				0x6f, 0x73, 0x63, 0x72, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x64, 0xc3, 0xb3,
				0x6c, 0x61, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x69, 0x61,
				0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x70, 0x65, 0x72, 0xc3, 0xad,
				0x6f, 0x64, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x74, 0x61, 0x6d, 0x61,
				0x6e, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x70, 0x65, 0x71, 0x75, 0x65, 0xc3, 0xb1,
				0x6f, 0x72, 0x65, 0x63, 0x69, 0x62, 0x69, 0x64, 0x61, 0x74, 0x72, 0x69, 0x62,
				0x75, 0x6e, 0x61, 0x6c, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x66, 0x65, 0x63,
				0x61, 0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x69,
				0x61, 0x73, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x69, 0x76,
				0x65, 0x72, 0x73, 0x6f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x63, 0x61,
				0x72, 0x65, 0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x74, 0xc3, 0xa9, 0x63, 0x6e,
				0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x76, 0x69,
				0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x7a, 0x61,
				0x73, 0x61, 0x64, 0x65, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x66, 0x75, 0x6e, 0x63,
				0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x73, 0x64,
				0x69, 0x66, 0xc3, 0xad, 0x63, 0x69, 0x6c, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64,
				0x65, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x61, 0x73, 0x61, 0x76, 0x61,
				0x6e, 0x7a, 0x61, 0x64, 0x61, 0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
				0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0xc3, 0xa1, 0x6e, 0x63,
				0x68, 0x65, 0x7a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x73, 0x6f,
				0x66, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74, 0x61,
				0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x63, 0x74,
				0x6f, 0x72, 0x65, 0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66,
				0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x64, 0x63, 0x72, 0xc3, 0xa9, 0x64, 0x69,
				0x74, 0x6f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x73, 0x73, 0x75, 0x70,
				0x75, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x73,
				0x73, 0x65, 0x67, 0x75, 0x6e, 0x64, 0x6f, 0x73, 0x70, 0x65, 0x71, 0x75, 0x65,
				0xc3, 0xb1, 0x61, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5,
				0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd1,
				0x8c, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b,
				0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
				0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
				0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0xb2, 0xd1,
				0x81, 0xd0, 0xb5, 0xd1, 0x85, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb9,
				0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0,
				0xbb, 0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb4,
				0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
				0x82, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,
				0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,
				0x81, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb4,
				0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd1, 0x84, 0xd0,
				0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
				0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb2, 0xd0,
				0xbe, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x82,
				0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,
				0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x8e, 0xd0, 0xbb, 0xd0, 0xb8,
				0xd1, 0x88, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x85, 0xd0,
				0xbf, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb5,
				0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
				0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe,
				0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x85, 0xd0, 0xbe, 0xd1,
				0x82, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x85, 0xd1, 0x81,
				0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,
				0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8,
				0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8f, 0xd1,
				0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4,
				0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1,
				0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82,
				0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x86, 0xd0, 0xb5, 0xd0,
				0xbd, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb2,
				0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
				0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8b, 0xd1, 0x82, 0xd0, 0xb5,
				0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x88, 0xd0, 0xb5, 0xd0,
				0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf,
				0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd1,
				0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0,
				0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0,
				0xb4, 0xd1, 0x8b, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8e, 0xd0, 0xbc,
				0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0,
				0xb3, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb4,
				0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
				0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb,
				0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
				0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x8e, 0xd0, 0xbd, 0xd1, 0x8f,
				0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0x95, 0xd1, 0x81, 0xd1,
				0x82, 0xd1, 0x8c, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd,
				0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd9,
				0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xac, 0xd9, 0x85,
				0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa9, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a,
				0xd9, 0x87, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf,
				0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb5, 0xd9, 0x81, 0xd8,
				0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,
				0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88, 0xd9,
				0x86, 0xd8, 0xb4, 0xd8, 0xa8, 0xd9, 0x83, 0xd8, 0xa9, 0xd9, 0x81, 0xd9, 0x8a,
				0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
				0xad, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa3, 0xd9, 0x83, 0xd8, 0xab,
				0xd8, 0xb1, 0xd8, 0xae, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xad, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x84,
				0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8,
				0xba, 0xd8, 0xb7, 0xd8, 0xaa, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x87,
				0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xad, 0xd8,
				0xa9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd8,
				0xb4, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83,
				0xd9, 0x86, 0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8,
				0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xb3,
				0xd9, 0x86, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xb7, 0xd9, 0x85, 0xd8, 0xa7, 0xd8,
				0xb0, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd8, 0xb4,
				0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8,
				0xb1, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7,
				0xd9, 0x81, 0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x82, 0xd9, 0x88, 0xd9, 0x84, 0xd9,
				0x85, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xb2, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85,
				0xd8, 0xa9, 0xd8, 0xa3, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x82, 0xd9,
				0x84, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x8a,
				0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xb7, 0xd8, 0xb1, 0xd9,
				0x8a, 0xd9, 0x82, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xac,
				0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xb1, 0xd9,
				0x89, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xa8,
				0xd8, 0xad, 0xd8, 0xab, 0xd8, 0xb9, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb6, 0xd8,
				0xa8, 0xd8, 0xb4, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xac,
				0xd9, 0x84, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xae, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8,
				0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9,
				0x88, 0xd9, 0x86, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x8a,
				0xd9, 0x88, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x81, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9,
				0x82, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xa3, 0xd9, 0x81,
				0xd8, 0xb6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xae, 0xd8,
				0xa7, 0xd9, 0x83, 0xd8, 0xab, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1,
				0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xb6, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
				0xad, 0xd9, 0x84, 0xd9, 0x89, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd9, 0x87,
				0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9,
				0x88, 0xd8, 0xaf, 0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xaf,
				0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
				0x86, 0xd9, 0x85, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xb9,
				0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xae, 0xd9, 0x84, 0xd9,
				0x85, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02,
				0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,
				0x02, 0x01, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f, 0x0e,
				0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
				0x17, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x18, 0x19, 0x1a, 0x1b,
				0x1c, 0x1d, 0x1e, 0x1f, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0xff,
				0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
				0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
				0xff, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00,
				0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00,
				0x07, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x75,
				0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f,
				0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
				0x62, 0x6c, 0x65, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44,
				0x54, 0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
				0x74, 0x69, 0x6e, 0x67, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
				0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74,
				0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x61, 0x64, 0x76,
				0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
				0x65, 0x72, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x3c, 0x2f,
				0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61,
				0x6c, 0x69, 0x61, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
				0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
				0x72, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x6f, 0x70, 0x65, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
				0x65, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x6f,
				0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f,
				0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
				0x75, 0x72, 0x65, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
				0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x74, 0x65, 0x6e,
				0x74, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x73, 0x65, 0x63, 0x6f,
				0x6e, 0x64, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
				0x74, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x65, 0x78, 0x63,
				0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0d, 0x0a, 0x73, 0x74,
				0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74,
				0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x7d,
				0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,
				0x69, 0x6f, 0x6e, 0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x74, 0x65, 0x6d, 0x70,
				0x6c, 0x61, 0x74, 0x65, 0x73, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75,
				0x73, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x64, 0x6f, 0x63,
				0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
				0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x70, 0x72,
				0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
				0x6e, 0x63, 0x65, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x3c, 0x2f, 0x65,
				0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72,
				0x61, 0x6c, 0x6c, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
				0x62, 0x65, 0x61, 0x75, 0x74, 0x69, 0x66, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x6e,
				0x73, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
				0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x70, 0x72, 0x6f,
				0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4e, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x2e, 0x66, 0x6f, 0x63, 0x75, 0x73,
				0x28, 0x29, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
				0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
				0x6e, 0x63, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a,
				0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73,
				0x20, 0x74, 0x68, 0x61, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
				0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x72, 0x61,
				0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
				0x72, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x75,
				0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
				0x61, 0x6d, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69, 0x73, 0x6d, 0x74,
				0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x77,
				0x68, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72,
				0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x65,
				0x72, 0x69, 0x61, 0x6c, 0x73, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
				0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x66, 0x66,
				0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
				0x6e, 0x3e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x69,
				0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
				0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x6f,
				0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x62, 0x69, 0x6f, 0x67, 0x72,
				0x61, 0x70, 0x68, 0x79, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65,
				0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6e,
				0xc3, 0xa7, 0x61, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x77, 0x6f, 0x6f,
				0x64, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,
				0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3e, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
				0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
				0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6f,
				0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e,
				0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
				0x3e, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x70, 0x72, 0x65, 0x73,
				0x65, 0x6e, 0x74, 0x65, 0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65,
				0x64, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f, 0x72,
				0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
				0x63, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x65,
				0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,
				0x65, 0x3e, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x6c,
				0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x73, 0x73, 0x65, 0x6e,
				0x74, 0x69, 0x61, 0x6c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
				0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
				0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72,
				0x73, 0x65, 0x49, 0x6e, 0x74, 0x28, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
				0x74, 0x79, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x3c, 0x2f,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65,
				0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x66, 0x6f,
				0x72, 0x6d, 0x65, 0x64, 0x74, 0x77, 0x6f, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73,
				0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x66, 0x6f, 0x72, 0x65, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22,
				0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x63,
				0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x20,
				0x6f, 0x66, 0x70, 0x65, 0x72, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x74, 0x72,
				0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
				0x61, 0x72, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x79, 0x65, 0x64, 0x65,
				0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x69, 0x7a, 0x61,
				0x62, 0x65, 0x74, 0x68, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,
				0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x73, 0x75,
				0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
				0x3b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6f,
				0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
				0x74, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x6f,
				0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
				0x65, 0x73, 0x2e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x3c,
				0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
				0x6e, 0x69, 0x74, 0x79, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,
				0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
				0x69, 0x74, 0x74, 0x65, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
				0x73, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6e, 0x6f, 0x20,
				0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
				0x6e, 0x67, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61,
				0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
				0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x69,
				0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
				0x69, 0x76, 0x65, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
				0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x69, 0x74,
				0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
				0x65, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20,
				0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
				0x63, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x68,
				0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
				0x6f, 0x6e, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x70,
				0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x61, 0x6e,
				0x74, 0x61, 0x67, 0x65, 0x29, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
				0x46, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76,
				0x69, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63,
				0x79, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74,
				0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69,
				0x6e, 0x67, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x63, 0x6f,
				0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73,
				0x61, 0x69, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x74, 0x20, 0x6d, 0x61,
				0x79, 0x20, 0x62, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x3c, 0x2f,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,
				0x64, 0x75, 0x6c, 0x65, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
				0x73, 0x3c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3e, 0x0a, 0x73, 0x75, 0x73,
				0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a,
				0x20, 0x30, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x3c, 0x2f,
				0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
				0x6f, 0x66, 0x74, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x64,
				0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x65, 0x64, 0x68, 0x65, 0x20, 0x62, 0x65,
				0x63, 0x61, 0x6d, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
				0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6a, 0x73, 0x68, 0x6f, 0x75, 0x73,
				0x65, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
				0x64, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x6c, 0x69, 0x74,
				0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
				0x65, 0x64, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x76, 0x61,
				0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
				0x69, 0x6e, 0x67, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63,
				0x65, 0x6e, 0x74, 0x75, 0x72, 0x69, 0x65, 0x73, 0x4a, 0x61, 0x70, 0x61, 0x6e,
				0x65, 0x73, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
				0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x6c, 0x67, 0x6f,
				0x72, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
				0x73, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64,
				0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61,
				0x67, 0x65, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e,
				0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
				0x69, 0x76, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x70,
				0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x6c, 0x74, 0x68,
				0x6f, 0x75, 0x67, 0x68, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
				0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x29, 0x2c, 0x20, 0x77,
				0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
				0x64, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x46, 0x65, 0x62,
				0x72, 0x75, 0x61, 0x72, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x75,
				0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x63, 0x6f,
				0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
				0x6e, 0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x63,
				0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e,
				0x69, 0x63, 0x61, 0x6c, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72,
				0x63, 0x65, 0x20, 0x6f, 0x66, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
				0x64, 0x48, 0x6f, 0x6e, 0x67, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x20, 0x46, 0x61,
				0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
				0x65, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x65, 0x6c,
				0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73,
				0x69, 0x76, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x09, 0x73,
				0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d,
				0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
				0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x74, 0x68, 0x6f, 0x73,
				0x65, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x64, 0x69, 0x66,
				0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
				0x65, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x63, 0x6f,
				0x6e, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
				0x69, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2e,
				0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x64, 0x65, 0x63, 0x69,
				0x73, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
				0x74, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x76, 0x6f,
				0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
				0x72, 0x22, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x6f, 0x61, 0x6c,
				0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
				0x72, 0x65, 0x64, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x41,
				0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65,
				0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
				0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x3c, 0x66, 0x75, 0x72, 0x6e,
				0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
				0x20, 0x20, 0x6f, 0x6e, 0x62, 0x6c, 0x75, 0x72, 0x3d, 0x22, 0x73, 0x75, 0x73,
				0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
				0x6e, 0x74, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f,
				0x72, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x73,
				0x68, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x77,
				0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x65, 0x6d, 0x6f, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
				0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x61, 0x64, 0x76, 0x6f,
				0x63, 0x61, 0x74, 0x65, 0x73, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,
				0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x69, 0x72,
				0x3d, 0x22, 0x6c, 0x74, 0x72, 0x22, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
				0x65, 0x73, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x20, 0x73,
				0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
				0x73, 0x6f, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x64,
				0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x70, 0x74, 0x65,
				0x6d, 0x62, 0x65, 0x72, 0x61, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28,
				0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x73, 0x75, 0x67, 0x67,
				0x65, 0x73, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65,
				0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x61,
				0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d,
				0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x63, 0x65,
				0x72, 0x74, 0x61, 0x69, 0x6e, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
				0x6c, 0x65, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x4a,
				0x65, 0x72, 0x75, 0x73, 0x61, 0x6c, 0x65, 0x6d, 0x74, 0x68, 0x65, 0x79, 0x20,
				0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67,
				0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x76,
				0x69, 0x6e, 0x63, 0x65, 0x73, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
				0x65, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x72, 0x65, 0x63,
				0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x70, 0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x74, 0x68,
				0x65, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
				0x6f, 0x75, 0x72, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x65,
				0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x62, 0x65, 0x67, 0x61, 0x6e,
				0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65,
				0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x6d, 0x75, 0x73, 0x74,
				0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61,
				0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74,
				0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,
				0x72, 0x79, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x63,
				0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
				0x6c, 0x65, 0x73, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70,
				0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x3c, 0x2f, 0x6c, 0x61, 0x62,
				0x65, 0x6c, 0x3e, 0x3c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6b, 0x69, 0x6e, 0x64,
				0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65,
				0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x65, 0x20, 0x2d, 0x2d,
				0x26, 0x67, 0x74, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x77, 0x65,
				0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x72, 0x61,
				0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61,
				0x76, 0x65, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x73,
				0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
				0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x65,
				0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
				0x79, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x20, 0x73,
				0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x65,
				0x72, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x6e, 0x74, 0x3e, 0x3c, 0x2f, 0x4e, 0x6f,
				0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
				0x69, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x70,
				0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x28, 0x6e, 0x65, 0x77, 0x20,
				0x44, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
				0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x66, 0x74, 0x65,
				0x72, 0x20, 0x74, 0x68, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x72, 0x65, 0x67,
				0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
				0x65, 0x72, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x69,
				0x6e, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d,
				0x65, 0x6e, 0x61, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x74,
				0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x22, 0x3e, 0x73, 0x75, 0x62, 0x73, 0x74,
				0x61, 0x6e, 0x63, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
				0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x41, 0x6d, 0x6f, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
				0x64, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x41, 0x69, 0x72,
				0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
				0x6f, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6d,
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
				0x20, 0x69, 0x74, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63,
				0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x73,
				0x74, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
				0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e,
				0x20, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x6f, 0x6c,
				0x65, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69,
				0x73, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,
				0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68,
				0x6f, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64,
				0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6e, 0x67, 0x61,
				0x70, 0x6f, 0x72, 0x65, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x20, 0x6f, 0x66,
				0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x66,
				0x6c, 0x69, 0x63, 0x74, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x70, 0x3e,
				0x0a, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x77, 0x65, 0x72,
				0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x78,
				0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x6d,
				0x6f, 0x72, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x63,
				0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x74,
				0x69, 0x63, 0x61, 0x6c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73,
				0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x70, 0x72, 0x69, 0x73,
				0x6f, 0x6e, 0x65, 0x72, 0x73, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f,
				0x66, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x21, 0x5b,
				0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x22, 0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
				0x63, 0x74, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x62, 0x67,
				0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
				0x20, 0x6f, 0x66, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69,
				0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x6d, 0x69,
				0x74, 0x74, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
				0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x69,
				0x63, 0x69, 0x61, 0x6c, 0x73, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6c,
				0x79, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x69,
				0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x69,
				0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
				0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x68, 0x20, 0x74,
				0x68, 0x61, 0x74, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x6d,
				0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x2f, 0x62, 0x75, 0x74,
				0x74, 0x6f, 0x6e, 0x3e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x69, 0x6e, 0x63, 0x72,
				0x65, 0x61, 0x73, 0x65, 0x73, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x70,
				0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,
				0x2d, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69,
				0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,
				0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x77,
				0x61, 0x73, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x65, 0x7a,
				0x75, 0x65, 0x6c, 0x61, 0x28, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79,
				0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x70, 0x65, 0x72, 0x73,
				0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
				0x63, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x76,
				0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,
				0x69, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x76, 0x69,
				0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
				0x77, 0x61, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43,
				0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
				0x69, 0x63, 0x61, 0x6c, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74,
				0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
				0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
				0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x6c, 0x79, 0x64, 0x69, 0x73,
				0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,
				0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x26,
				0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x77,
				0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e,
				0x69, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
				0x46, 0x72, 0x69, 0x65, 0x64, 0x72, 0x69, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20,
				0x66, 0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
				0x20, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x66, 0x6f, 0x72,
				0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69,
				0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68,
				0x79, 0x73, 0x69, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,
				0x20, 0x69, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73,
				0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x70, 0x61, 0x6e, 0x20,
				0x69, 0x64, 0x3d, 0x22, 0x73, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f,
				0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x72, 0x76,
				0x69, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3e, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x61, 0x73, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x65, 0x78,
				0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x61,
				0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6c, 0x65, 0x76, 0x65, 0x6c,
				0x73, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
				0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x6d,
				0x69, 0x73, 0x73, 0x65, 0x64, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73,
				0x74, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x73, 0x64, 0x75, 0x70,
				0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
				0x76, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6c,
				0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
				0x69, 0x65, 0x73, 0x7b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x67, 0x69, 0x6f,
				0x6e, 0x20, 0x6f, 0x66, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
				0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x67, 0x20,
				0x61, 0x6c, 0x74, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72,
				0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x74,
				0x68, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
				0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6e, 0x65,
				0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72,
				0x65, 0x61, 0x74, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,
				0x65, 0x65, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65,
				0x64, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x6e,
				0x69, 0x64, 0x65, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x68, 0x65, 0x20,
				0x57, 0x6f, 0x72, 0x6c, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,
				0x66, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x65,
				0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
				0x22, 0x3e, 0x63, 0x61, 0x72, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x6d, 0x61,
				0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
				0x20, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61,
				0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x70, 0x72, 0x65, 0x64, 0x69,
				0x63, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68,
				0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
				0x65, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
				0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74,
				0x65, 0x6e, 0x20, 0x20, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0d, 0x0a, 0x70, 0x72,
				0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
				0x73, 0x6f, 0x72, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x72,
				0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x73, 0x61, 0x79, 0x73, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x68, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
				0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x48, 0x75, 0x6e, 0x67,
				0x61, 0x72, 0x69, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
				0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x20, 0x61, 0x73, 0x55, 0x6e, 0x69,
				0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x66, 0x6f,
				0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x68,
				0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
				0x61, 0x72, 0x22, 0x3e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x6f, 0x6e,
				0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x6c, 0x65, 0x63,
				0x74, 0x6f, 0x72, 0x61, 0x6c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x6f,
				0x66, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74,
				0x75, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
				0x63, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x70, 0x72,
				0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67,
				0x20, 0x69, 0x6e, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x70,
				0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x0a, 0x26, 0x6c, 0x74, 0x3b,
				0x21, 0x2d, 0x2d, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66,
				0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x77, 0x61, 0x73, 0x20,
				0x74, 0x61, 0x6b, 0x65, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,
				0x65, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x65, 0x6c,
				0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x41, 0x66, 0x72, 0x69, 0x6b, 0x61, 0x61,
				0x6e, 0x73, 0x61, 0x73, 0x20, 0x66, 0x61, 0x72, 0x20, 0x61, 0x73, 0x70, 0x72,
				0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x77,
				0x69, 0x74, 0x68, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x3c,
				0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73,
				0x74, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
				0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b,
				0x20, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x61, 0x73,
				0x74, 0x6d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x3e, 0x3c, 0x73,
				0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
				0x65, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x67, 0x72,
				0x6f, 0x75, 0x70, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
				0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61,
				0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x20, 0x66,
				0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6f, 0x77, 0x6e,
				0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x20, 0x6f,
				0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x69, 0x62, 0x62, 0x65, 0x61,
				0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x73,
				0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x77, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73,
				0x69, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x3b, 0x20,
				0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69,
				0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x4a,
				0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x3c, 0x2f, 0x66, 0x6f, 0x6f,
				0x74, 0x65, 0x72, 0x3e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x6c, 0x79,
				0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
				0x73, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
				0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x54, 0x68, 0x65,
				0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
				0x3b, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x65,
				0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x63,
				0x6f, 0x6e, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78,
				0x2e, 0x70, 0x68, 0x70, 0x61, 0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
				0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x65,
				0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72,
				0x73, 0x77, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x0a, 0x3c, 0x68,
				0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x63, 0x69,
				0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
				0x6b, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x65, 0x64, 0x61,
				0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
				0x63, 0x65, 0x73, 0x2c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6f, 0x66,
				0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x76,
				0x65, 0x72, 0x74, 0x65, 0x64, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e,
				0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
				0x74, 0x3e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
				0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
				0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
				0x68, 0x65, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x61, 0x6e, 0x79, 0x20, 0x6f,
				0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
				0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63, 0x68,
				0x20, 0x6d, 0x6f, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x65,
				0x64, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x6f, 0x72, 0x69,
				0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63,
				0x61, 0x6c, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x65, 0x6e,
				0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20,
				0x6e, 0x6f, 0x74, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x77,
				0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x74, 0x68, 0x65, 0x20, 0x74,
				0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
				0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x77, 0x68, 0x61, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x79, 0x61, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
				0x6e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x6f,
				0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68,
				0x69, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f,
				0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x64,
				0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
				0x68, 0x22, 0x3e, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,
				0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x65,
				0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x76, 0x65,
				0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
				0x20, 0x3c, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3e, 0x67, 0x69,
				0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
				0x69, 0x61, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x3e, 0x70,
				0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x76, 0x69, 0x65, 0x77, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c,
				0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,
				0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x20, 0x6f,
				0x66, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x63, 0x68, 0x69,
				0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,
				0x6f, 0x66, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x6f,
				0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65,
				0x64, 0x6c, 0x79, 0x43, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x77,
				0x61, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x61,
				0x66, 0x74, 0x65, 0x72, 0x61, 0x72, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
				0x77, 0x61, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x6f,
				0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f,
				0x66, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63,
				0x68, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61,
				0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2c, 0x20,
				0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x75, 0x73, 0x65, 0x75, 0x6d,
				0x20, 0x6f, 0x66, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x69, 0x61, 0x6e, 0x61, 0x28,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69, 0x6e, 0x6e, 0x65,
				0x73, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
				0x61, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x69,
				0x6e, 0x69, 0x63, 0x61, 0x6e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6f,
				0x66, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x66,
				0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x72, 0x69,
				0x67, 0x68, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f,
				0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x3d, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x28,
				0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69,
				0x6e, 0x75, 0x65, 0x73, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
				0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
				0x6f, 0x75, 0x74, 0x20, 0x61, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x6f, 0x6d,
				0x65, 0x77, 0x68, 0x6f, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x20, 0x66,
				0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20,
				0x6f, 0x66, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x6b, 0x6e,
				0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
				0x63, 0x65, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
				0x6e, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75,
				0x72, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
				0x70, 0x61, 0x70, 0x65, 0x72, 0x62, 0x61, 0x63, 0x6b, 0x76, 0x61, 0x6c, 0x75,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65,
				0x3e, 0x3d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x74,
				0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f, 0x74,
				0x3b, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,
				0x64, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x3c, 0x2f, 0x63, 0x65, 0x6e, 0x74,
				0x65, 0x72, 0x3e, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x74,
				0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72,
				0x20, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
				0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
				0x3b, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
				0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x68, 0x69,
				0x67, 0x68, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x2d, 0x68,
				0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
				0x74, 0x3d, 0x22, 0x2f, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x74,
				0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x66, 0x72, 0x69, 0x6b,
				0x61, 0x61, 0x6e, 0x73, 0x65, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f,
				0x66, 0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x76,
				0x69, 0x65, 0xc5, 0xa1, 0x75, 0x6c, 0x69, 0x65, 0x74, 0x75, 0x76, 0x69, 0xc5,
				0xb3, 0xc4, 0x8c, 0x65, 0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xc4, 0x8d, 0x65,
				0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0,
				0xb8, 0xa2, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e, 0xe7, 0xae,
				0x80, 0xe4, 0xbd, 0x93, 0xe5, 0xad, 0x97, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94,
				0xe5, 0xad, 0x97, 0xed, 0x95, 0x9c, 0xea, 0xb5, 0xad, 0xec, 0x96, 0xb4, 0xe4,
				0xb8, 0xba, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0xe8, 0xae, 0xa1, 0xe7, 0xae,
				0x97, 0xe6, 0x9c, 0xba, 0xe7, 0xac, 0x94, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac,
				0xe8, 0xa8, 0x8e, 0xe8, 0xab, 0x96, 0xe5, 0x8d, 0x80, 0xe6, 0x9c, 0x8d, 0xe5,
				0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe4, 0xba, 0x92, 0xe8, 0x81, 0x94, 0xe7, 0xbd,
				0x91, 0xe6, 0x88, 0xbf, 0xe5, 0x9c, 0xb0, 0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xb1,
				0xe4, 0xb9, 0x90, 0xe9, 0x83, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0x89, 0x88, 0xe7,
				0xa4, 0xbe, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe9, 0x83,
				0xa8, 0xe8, 0x90, 0xbd, 0xe6, 0xa0, 0xbc, 0xe8, 0xbf, 0x9b, 0xe4, 0xb8, 0x80,
				0xe6, 0xad, 0xa5, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe5, 0xae, 0x9d, 0xe9,
				0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0xa7, 0x94, 0xe5, 0x91,
				0x98, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93,
				0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5, 0x8a, 0x9e, 0xe5,
				0x85, 0xac, 0xe5, 0xae, 0xa4, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe5, 0x8c,
				0xba, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0xb8, 0x82, 0xe6, 0x92, 0xad,
				0xe6, 0x94, 0xbe, 0xe5, 0x99, 0xa8, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe5,
				0xb8, 0x82, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe8, 0xb6,
				0x8a, 0xe6, 0x9d, 0xa5, 0xe8, 0xb6, 0x8a, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
				0xe5, 0x91, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xbd, 0x91, 0x73,
				0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3, 0xad,
				0x63, 0x75, 0x6c, 0x6f, 0x61, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x61,
				0x62, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x63, 0x75, 0x61, 0x6c,
				0x71, 0x75, 0x69, 0x65, 0x72, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x64,
				0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x73, 0x70, 0x6f, 0x6c,
				0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73,
				0x74, 0x61, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x73, 0x69,
				0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x62, 0xc3, 0xba, 0x73, 0x71, 0x75,
				0x65, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x73,
				0x65, 0x67, 0x75, 0x72, 0x69, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63,
				0x69, 0x70, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x73,
				0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x70,
				0x6f, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x65, 0x7a, 0x75, 0x65, 0x6c,
				0x61, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x73, 0x64, 0x69, 0x63,
				0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69, 0xc3,
				0xb3, 0x6e, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x73, 0x69,
				0x6d, 0x69, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x79, 0x65, 0x63,
				0x74, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x73, 0x69,
				0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76,
				0x69, 0x64, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61,
				0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0xc3, 0xad, 0x61, 0x69, 0x6d, 0xc3, 0xa1,
				0x67, 0x65, 0x6e, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,
				0x72, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x72, 0x6e, 0x65, 0x63,
				0x65, 0x73, 0x61, 0x72, 0x69, 0x6f, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0xc3,
				0xb3, 0x6e, 0x74, 0x65, 0x6c, 0xc3, 0xa9, 0x66, 0x6f, 0x6e, 0x6f, 0x63, 0x6f,
				0x6d, 0x69, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x63, 0x69, 0x6f,
				0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65,
				0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x72, 0x61, 0x6e, 0xc3, 0xa1, 0x6c,
				0x69, 0x73, 0x69, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x6f, 0x73,
				0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x76,
				0x69, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x74, 0x69, 0x71, 0x75, 0x65, 0x74, 0x61,
				0x73, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66, 0x75, 0x6e,
				0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61,
				0x64, 0x6f, 0x63, 0x61, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x72, 0x70, 0x72,
				0x6f, 0x70, 0x69, 0x65, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
				0x70, 0x69, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x64, 0x61, 0x64, 0x6d,
				0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x63,
				0x69, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x73,
				0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63, 0x6f, 0x6d, 0x65,
				0x72, 0x63, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x65,
				0x73, 0x65, 0x6a, 0x65, 0x72, 0x63, 0x69, 0x63, 0x69, 0x6f, 0x65, 0x64, 0x69,
				0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x61, 0x6c, 0x61, 0x6d, 0x61, 0x6e,
				0x63, 0x61, 0x67, 0x6f, 0x6e, 0x7a, 0xc3, 0xa1, 0x6c, 0x65, 0x7a, 0x64, 0x6f,
				0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0xc3, 0xad, 0x63,
				0x75, 0x6c, 0x61, 0x72, 0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x67,
				0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x72, 0x72, 0x61,
				0x67, 0x6f, 0x6e, 0x61, 0x70, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x69, 0x63, 0x61,
				0x6e, 0x6f, 0x76, 0x65, 0x64, 0x61, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x70,
				0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65,
				0x73, 0x74, 0xc3, 0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x6f, 0x62, 0x6a,
				0x65, 0x74, 0x69, 0x76, 0x6f, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
				0x6f, 0x73, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,
				0xb5, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x95, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x95,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0,
				0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0x64, 0x69, 0x70, 0x6c, 0x6f,
				0x64, 0x6f, 0x63, 0x73, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaf,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x94,
				0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xae,
				0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
				0x9c, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6,
				0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0,
				0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
				0x9f, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85,
				0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x8a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa6, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
				0xa6, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,
				0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x96, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
				0xac, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0x86, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
				0xa4, 0x95, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5,
				0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81,
				0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xa4, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x86,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,
				0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80,
				0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70,
				0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
				0x20, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f,
				0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79,
				0x74, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,
				0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3c, 0x61, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
				0x65, 0x6e, 0x74, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x32, 0x30, 0x31,
				0x6a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x68, 0x61,
				0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63,
				0x72, 0x75, 0x6d, 0x62, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65,
				0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x67, 0x6f,
				0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x66,
				0x6f, 0x72, 0x6e, 0x69, 0x61, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
				0x65, 0x73, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e,
				0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,
				0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x6d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62,
				0x6f, 0x78, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
				0x73, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70,
				0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x73, 0x20, 0x77, 0x65,
				0x6c, 0x6c, 0x20, 0x61, 0x73, 0x75, 0x6e, 0x74, 0x27, 0x2c, 0x20, 0x27, 0x55,
				0x41, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
				0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x65,
				0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
				0x74, 0x65, 0x64, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
				0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x3d, 0x20,
				0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
				0x73, 0x69, 0x6f, 0x6e, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x72, 0x26, 0x67, 0x74,
				0x3b, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f,
				0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x67, 0x63, 0x6f, 0x6c,
				0x6f, 0x72, 0x3d, 0x22, 0x23, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
				0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x70,
				0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x77, 0x73,
				0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
				0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x65, 0x63,
				0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x72, 0x6c, 0x69, 0x61,
				0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
				0x6e, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x2e, 0x69,
				0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x22, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
				0x75, 0x73, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x62,
				0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f,
				0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
				0x6e, 0x65, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x6f, 0x6f, 0x64,
				0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x70, 0x65, 0x72,
				0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,
				0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72,
				0x65, 0x20, 0x6f, 0x6e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x3d, 0x22, 0x3c, 0x66,
				0x6f, 0x72, 0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65,
				0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c,
				0x75, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
				0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x62, 0x73,
				0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e,
				0x6f, 0x77, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x65,
				0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70,
				0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x6e, 0x67, 0x22,
				0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x6f,
				0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70, 0x72, 0x65,
				0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f,
				0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x74, 0x65,
				0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
				0x3a, 0x22, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x22,
				0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x20, 0x64, 0x65, 0x6d,
				0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x3e,
				0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x69,
				0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x70, 0x78, 0x3b, 0x70, 0x61,
				0x64, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
				0x68, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x75,
				0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69,
				0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
				0x7a, 0x65, 0x64, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
				0x69, 0x66, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6d, 0x61, 0x69,
				0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
				0x6c, 0x61, 0x72, 0x79, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69,
				0x73, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x28, 0x29, 0x3b, 0x26, 0x61,
				0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x20, 0x74,
				0x68, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
				0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x61, 0x73, 0x73, 0x75,
				0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
				0x63, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74, 0x73, 0x65, 0x78, 0x70,
				0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61,
				0x64, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
				0x73, 0x20, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x63, 0x6f,
				0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x64, 0x65, 0x70, 0x61, 0x72,
				0x74, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x69,
				0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6e,
				0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
				0x69, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
				0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x6f,
				0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,
				0x68, 0x74, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d,
				0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x2f, 0x64, 0x65,
				0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
				0x6e, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x72,
				0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x64, 0x61, 0x70,
				0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74,
				0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x22, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69,
				0x6e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x74,
				0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x62,
				0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
				0x6e, 0x74, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x64,
				0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x61, 0x72, 0x74, 0x69,
				0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
				0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
				0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74,
				0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,
				0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x65, 0x72,
				0x65, 0x4e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x62, 0x65,
				0x79, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
				0x74, 0x65, 0x72, 0x65, 0x64, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69,
				0x73, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,
				0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x61, 0x6e, 0x67,
				0x3d, 0x22, 0x65, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3e, 0x0d, 0x0a, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x20,
				0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x74,
				0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74,
				0x72, 0x65, 0x61, 0x6d, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e,
				0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x65, 0x6d,
				0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x61, 0x62,
				0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
				0x3d, 0x22, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x20, 0x20, 0x63,
				0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6f, 0x75,
				0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
				0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x50, 0x6f, 0x72,
				0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
				0x74, 0x75, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
				0x6c, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x75,
				0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x61, 0x6c, 0x6d, 0x6f, 0x73,
				0x74, 0x20, 0x61, 0x6c, 0x6c, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69, 0x64,
				0x20, 0x23, 0x61, 0x70, 0x61, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73,
				0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45,
				0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69,
				0x7a, 0x65, 0x64, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72,
				0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6f, 0x72, 0x69,
				0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
				0x61, 0x62, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
				0x64, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x61,
				0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x69, 0x6e, 0x63, 0x6c,
				0x75, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
				0x72, 0x73, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x3d,
				0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
				0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x78, 0x3b,
				0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
				0x73, 0x66, 0x75, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
				0x73, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x6e, 0x6e, 0x69, 0x75, 0x6d, 0x68, 0x69,
				0x73, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20, 0x26,
				0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
				0x74, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x69,
				0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x6f,
				0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,
				0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
				0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x66,
				0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
				0x6e, 0x61, 0x74, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
				0x72, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65,
				0x76, 0x65, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6c, 0x63, 0x75,
				0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
				0x65, 0x64, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73,
				0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x30, 0x22, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
				0x65, 0x6c, 0x79, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
				0x66, 0x69, 0x76, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x73,
				0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
				0x68, 0x69, 0x6e, 0x67, 0x31, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f,
				0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
				0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,
				0x6f, 0x66, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6a,
				0x6f, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
				0x73, 0x6c, 0x79, 0x3e, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,
				0x6f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x62, 0x75, 0x74,
				0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,
				0x61, 0x6e, 0x74, 0x73, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
				0x2c, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x4c, 0x69,
				0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6b,
				0x65, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73,
				0x70, 0x3b, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
				0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x76,
				0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x62,
				0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
				0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x61, 0x66, 0x74,
				0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61,
				0x72, 0x6c, 0x79, 0x2c, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
				0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a,
				0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
				0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,
				0x6f, 0x66, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x61,
				0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64, 0x65,
				0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x65,
				0x6e, 0x65, 0x64, 0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b,
				0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x20,
				0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
				0x74, 0x74, 0x65, 0x72, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x3c,
				0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x27, 0x69, 0x20,
				0x3d, 0x20, 0x30, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x64, 0x69, 0x66, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73,
				0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6c, 0x74, 0x69,
				0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
				0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
				0x73, 0x6f, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x0a, 0x3c,
				0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65,
				0x64, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x3c, 0x2f,
				0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65,
				0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69,
				0x74, 0x68, 0x4d, 0x65, 0x61, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2c, 0x69,
				0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e,
				0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x63,
				0x6f, 0x6d, 0x65, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66,
				0x54, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x66,
				0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74,
				0x62, 0x61, 0x6c, 0x6c, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x73, 0x69, 0x64, 0x65,
				0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e, 0x67, 0x61, 0x6e,
				0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20,
				0x61, 0x6c, 0x74, 0x3d, 0x22, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
				0x65, 0x73, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6d,
				0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
				0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
				0x6c, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
				0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x63,
				0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x3c, 0x73, 0x74, 0x72,
				0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
				0x73, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x64, 0x69,
				0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69, 0x6c,
				0x69, 0x74, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62,
				0x6c, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x09,
				0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x6e, 0x6f,
				0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
				0x67, 0x68, 0x74, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x62, 0x75, 0x73,
				0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x72, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x70, 0x65,
				0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x4a, 0x61,
				0x6e, 0x75, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x69,
				0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x09, 0x64,
				0x69, 0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74,
				0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
				0x69, 0x6e, 0x67, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
				0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6e,
				0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69,
				0x63, 0x6b, 0x3d, 0x22, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73,
				0x6f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6d, 0x61,
				0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x75, 0x78, 0x65, 0x6d,
				0x62, 0x6f, 0x75, 0x72, 0x67, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x65,
				0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x22, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20,
				0x77, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
				0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x3d, 0x22, 0x0a, 0x3c, 0x21,
				0x2d, 0x2d, 0x20, 0x45, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
				0x69, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x6c,
				0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f,
				0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x6c, 0x69, 0x6b,
				0x65, 0x20, 0x74, 0x68, 0x65, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69,
				0x61, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72,
				0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x0a, 0x3c, 0x2f, 0x68,
				0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
				0x73, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
				0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x41, 0x6c, 0x65,
				0x78, 0x61, 0x6e, 0x64, 0x72, 0x69, 0x61, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65,
				0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
				0x73, 0x66, 0x6f, 0x75, 0x72, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0a, 0x0a,
				0x26, 0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
				0x61, 0x73, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f,
				0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x6f, 0x62, 0x6c, 0x69,
				0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
				0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x76,
				0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e,
				0x73, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x20, 0x68, 0x72, 0x65, 0x66, 0x72, 0x65,
				0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x77, 0x69, 0x6c, 0x6c, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62,
				0x6c, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x6e,
				0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x75, 0x6e, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x72, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x20, 0x66,
				0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x69, 0x7a, 0x65, 0x64, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74,
				0x6f, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x75,
				0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x72,
				0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
				0x6c, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x74,
				0x77, 0x6f, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x46, 0x65, 0x62, 0x72,
				0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
				0x20, 0x6f, 0x66, 0x73, 0x77, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
				0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x61,
				0x72, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
				0x6e, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
				0x73, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x77, 0x69,
				0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
				0x3a, 0x6c, 0x65, 0x66, 0x74, 0x69, 0x73, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c,
				0x6c, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6e,
				0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x6d, 0x79, 0x73, 0x74,
				0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
				0x65, 0x6e, 0x74, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70,
				0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e,
				0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65,
				0x64, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79,
				0x73, 0x74, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x68, 0x61, 0x73, 0x20, 0x6c,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x6e,
				0x64, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69,
				0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x65, 0x72, 0x65,
				0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69,
				0x6d, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x53, 0x63, 0x69,
				0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x6e, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b,
				0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x77, 0x69,
				0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x65, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,
				0x63, 0x65, 0x64, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,
				0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x72,
				0x69, 0x73, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,
				0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x76,
				0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x32, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61,
				0x6c, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6c,
				0x6f, 0x61, 0x74, 0x3a, 0x20, 0x6c, 0x65, 0x66, 0x44, 0x75, 0x72, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
				0x6e, 0x74, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64,
				0x65, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
				0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
				0x6e, 0x63, 0x65, 0x2f, 0x75, 0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x74, 0x68, 0x65,
				0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79,
				0x65, 0x61, 0x72, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72,
				0x65, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x79,
				0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65,
				0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x61, 0x62,
				0x6c, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x75,
				0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x75, 0x6e, 0x65, 0x78,
				0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
				0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64,
				0x61, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x75, 0x6e, 0x64,
				0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
				0x73, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f,
				0x6d, 0x69, 0x6e, 0x20, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x70, 0x6f,
				0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20,
				0x74, 0x6f, 0x20, 0x62, 0x65, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75,
				0x73, 0x20, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x6f, 0x6e, 0x6c, 0x79,
				0x20, 0x61, 0x20, 0x66, 0x65, 0x77, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x20, 0x74,
				0x68, 0x61, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
				0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x3c, 0x66, 0x69,
				0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x41, 0x72, 0x63, 0x68, 0x62, 0x69,
				0x73, 0x68, 0x6f, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e,
				0x6f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x70,
				0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76, 0x69,
				0x6c, 0x65, 0x67, 0x65, 0x73, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x6d,
				0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x45, 0x61, 0x73, 0x74,
				0x65, 0x72, 0x20, 0x65, 0x67, 0x67, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
				0x73, 0x6d, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
				0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
				0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
				0x65, 0x64, 0x22, 0x3e, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
				0x0d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x61, 0x72,
				0x72, 0x69, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x2d, 0x6a, 0x73, 0x73, 0x64,
				0x6b, 0x27, 0x29, 0x29, 0x3b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x63,
				0x61, 0x73, 0x75, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70,
				0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,
				0x61, 0x6e, 0x73, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
				0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x70, 0x72, 0x6f,
				0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20,
				0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x50, 0x68,
				0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,
				0x64, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x6f, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x74,
				0x6f, 0x77, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x67, 0x75, 0x61, 0x72,
				0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
				0x74, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30, 0x30, 0x30,
				0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d,
				0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
				0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68,
				0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x73, 0x61,
				0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x6f, 0x6e, 0x6b, 0x65, 0x79,
				0x70, 0x72, 0x65, 0x73, 0x73, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
				0x67, 0x3a, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75,
				0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70, 0x69,
				0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x69, 0x6e,
				0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
				0x20, 0x62, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
				0x67, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x73,
				0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x6f, 0x77, 0x65, 0x72,
				0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0a, 0x09, 0x09, 0x63,
				0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x74,
				0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
				0x69, 0x65, 0x73, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x65, 0x72,
				0x68, 0x65, 0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x64, 0x75, 0x65,
				0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
				0x65, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68,
				0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,
				0x70, 0x74, 0x20, 0x74, 0x6f, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72,
				0x65, 0x2c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
				0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x77, 0x61, 0x73, 0x20,
				0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
				0x6e, 0x69, 0x63, 0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
				0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x70, 0x75, 0x62,
				0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
				0x72, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75,
				0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75,
				0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x73, 0x70,
				0x69, 0x72, 0x61, 0x63, 0x79, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
				0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61,
				0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x62, 0x73,
				0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20,
				0x66, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
				0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x62, 0x73,
				0x6f, 0x6c, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x73,
				0x65, 0x64, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20,
				0x61, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x74, 0x72,
				0x61, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x70, 0x61, 0x72,
				0x61, 0x74, 0x65, 0x6c, 0x79, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x73, 0x20,
				0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x61,
				0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x66, 0x6f, 0x75, 0x6e,
				0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
				0x65, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x73, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f,
				0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x28, 0x73, 0x6f, 0x6d, 0x65, 0x74,
				0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
				0x6c, 0x69, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x75, 0x6e,
				0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x71, 0x75, 0x61, 0x72, 0x74,
				0x65, 0x72, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
				0x6c, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x69,
				0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x3c, 0x2f, 0x62, 0x75,
				0x74, 0x74, 0x6f, 0x6e, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
				0x61, 0x67, 0x65, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x22, 0x20, 0x64,
				0x69, 0x72, 0x3d, 0x22, 0x6c, 0x74, 0x72, 0x4c, 0x69, 0x65, 0x75, 0x74, 0x65,
				0x6e, 0x61, 0x6e, 0x74, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
				0x22, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x62,
				0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x64, 0x65, 0x20,
				0x75, 0x70, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61,
				0x72, 0x67, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x61,
				0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
				0x6e, 0x27, 0x73, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66,
				0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x62, 0x61, 0x73,
				0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
				0x67, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f,
				0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6f,
				0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x49, 0x6e,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74,
				0x68, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x63,
				0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f,
				0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69,
				0x66, 0x69, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
				0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x69, 0x6e, 0x20,
				0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d,
				0x77, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
				0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x70, 0x6f,
				0x6c, 0x69, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20,
				0x74, 0x6f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20,
				0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x70, 0x61, 0x72,
				0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
				0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73,
				0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,
				0x65, 0x6e, 0x20, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76,
				0x65, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
				0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,
				0x72, 0x20, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,
				0x63, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
				0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x62, 0x75, 0x74, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,
				0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65,
				0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6c, 0x61, 0x62,
				0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
				0x69, 0x62, 0x6c, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x6f,
				0x66, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x62, 0x65,
				0x67, 0x61, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x75, 0x73, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
				0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x66,
				0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2f, 0x22, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
				0x63, 0x61, 0x6c, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6f, 0x66,
				0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x70,
				0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
				0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x74, 0x6f, 0x70, 0x74, 0x68,
				0x65, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,
				0x64, 0x65, 0x20, 0x6f, 0x66, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
				0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x73,
				0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x3d, 0x22,
				0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x63, 0x61, 0x6c,
				0x6c, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x72, 0x74, 0x68,
				0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68,
				0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
				0x74, 0x69, 0x6f, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x63, 0x6f,
				0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x63, 0x75, 0x72,
				0x61, 0x74, 0x65, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x62, 0x75, 0x69,
				0x6c, 0x74, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x61,
				0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x75, 0x63, 0x68,
				0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x44, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x30,
				0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4b, 0x69, 0x6e,
				0x67, 0x64, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,
				0x74, 0x69, 0x72, 0x65, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x66, 0x6f,
				0x72, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x62,
				0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x46,
				0x72, 0x65, 0x6e, 0x63, 0x68, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x61,
				0x6e, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x3e, 0x69,
				0x73, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
				0x64, 0x75, 0x6d, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,
				0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x0a,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x20, 0x4f, 0x66, 0x66, 0x69, 0x63,
				0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65,
				0x2e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x74, 0x68,
				0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x69,
				0x74, 0x20, 0x77, 0x61, 0x73, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
				0x3d, 0x22, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x62,
				0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
				0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x6c, 0x79,
				0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x77, 0x6f, 0x72,
				0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3c, 0x2f,
				0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x73, 0x6f, 0x75, 0x6e, 0x64,
				0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f,
				0x72, 0x6d, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x69,
				0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6f, 0x70, 0x65, 0x6e,
				0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
				0x74, 0x65, 0x64, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
				0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x61, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
				0x73, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x6f,
				0x66, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x20, 0x76, 0x65,
				0x72, 0x79, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d,
				0x6f, 0x74, 0x69, 0x76, 0x65, 0x62, 0x79, 0x20, 0x66, 0x61, 0x72, 0x20, 0x74,
				0x68, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x70,
				0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c,
				0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74,
				0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64,
				0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x63, 0x63,
				0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
				0x67, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x68, 0x69,
				0x73, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x72, 0x74, 0x72, 0x65, 0x6d, 0x65,
				0x6e, 0x64, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x20,
				0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x30,
				0x20, 0x31, 0x65, 0x6d, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x42, 0x61, 0x73, 0x6b,
				0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,
				0x63, 0x73, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72,
				0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2f, 0x22, 0x20,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
				0x6e, 0x64, 0x65, 0x78, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
				0x65, 0x70, 0x69, 0x74, 0x74, 0x73, 0x62, 0x75, 0x72, 0x67, 0x68, 0x63, 0x6f,
				0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0d, 0x3c, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x3e, 0x28, 0x66, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6f,
				0x75, 0x74, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x3c,
				0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0d, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x61,
				0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65,
				0x20, 0x69, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x3e, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x20, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
				0x2c, 0x20, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x74, 0x61,
				0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x73,
				0x74, 0x72, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
				0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x3e,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20,
				0x66, 0x6f, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64,
				0x2e, 0x73, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x22, 0x2f, 0x2f, 0x76, 0x69, 0x6f,
				0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70,
				0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c,
				0x79, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x65,
				0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x64, 0x20, 0x66, 0x72, 0x6f,
				0x6d, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e,
				0x64, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0xd7,
				0xa2, 0xd7, 0x91, 0xd7, 0xa8, 0xd7, 0x99, 0xd7, 0xaa, 0xd9, 0x81, 0xd8, 0xa7,
				0xd8, 0xb1, 0xd8, 0xb3, 0xdb, 0x8c, 0x64, 0x65, 0x73, 0x61, 0x72, 0x72, 0x6f,
				0x6c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,
				0x65, 0x64, 0x75, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x70,
				0x74, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
				0x72, 0x61, 0x64, 0x6f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x63, 0x69, 0xc3, 0xb3,
				0x6e, 0x75, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x75,
				0x62, 0x6c, 0x69, 0x63, 0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x75,
				0x65, 0x73, 0x74, 0x61, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x64,
				0x6f, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x72,
				0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x64, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3,
				0xad, 0x63, 0x75, 0x6c, 0x6f, 0x73, 0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e,
				0x74, 0x65, 0x73, 0x73, 0x69, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73,
				0x72, 0x65, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x69, 0x74,
				0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
				0x65, 0x72, 0x69, 0x6f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x69, 0x64, 0x61,
				0x64, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x66, 0x6f,
				0x72, 0x6d, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x6f, 0x62, 0x6c, 0x61,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
				0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x61,
				0x63, 0x63, 0x65, 0x73, 0x6f, 0x72, 0x69, 0x6f, 0x73, 0x74, 0x65, 0x63, 0x68,
				0x6e, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
				0x6c, 0x65, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61,
				0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x64, 0x69, 0x73,
				0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
				0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69,
				0x61, 0x76, 0x61, 0x6c, 0x6c, 0x61, 0x64, 0x6f, 0x6c, 0x69, 0x64, 0x62, 0x69,
				0x62, 0x6c, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61, 0x63,
				0x69, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
				0x69, 0x6f, 0x70, 0x6f, 0x6c, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x73, 0x61,
				0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6f, 0x63, 0x75,
				0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
				0x65, 0x7a, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x73,
				0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x63, 0x6f,
				0x6e, 0xc3, 0xb3, 0x6d, 0x69, 0x63, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
				0x6f, 0x72, 0x74, 0x65, 0x72, 0x6f, 0x64, 0x72, 0xc3, 0xad, 0x67, 0x75, 0x65,
				0x7a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x65, 0x6e,
				0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75,
				0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
				0x72, 0x61, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66,
				0x72, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6d,
				0x61, 0x6e, 0x65, 0x6e, 0x74, 0x65, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65,
				0x6e, 0x74, 0x65, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbc, 0xd0,
				0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5,
				0xd0, 0xbc, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb6, 0xd0,
				0xb5, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xb1,
				0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,
				0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
				0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
				0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81,
				0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1,
				0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7,
				0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x81, 0xd0,
				0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7,
				0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb4, 0xd1,
				0x83, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0x9f,
				0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0,
				0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,
				0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0,
				0xbd, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2,
				0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,
				0xb5, 0xd0, 0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
				0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe,
				0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,
				0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xbc,
				0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
				0xb5, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd,
				0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0,
				0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,
				0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1,
				0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c,
				0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0,
				0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0,
				0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,
				0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc,
				0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb8, 0xd1,
				0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
				0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,
				0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0,
				0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
				0xbe, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,
				0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0x9f, 0xd0,
				0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba,
				0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0,
				0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x82,
				0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd1, 0x80, 0xd0,
				0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xa1, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xba,
				0xd1, 0x82, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,
				0x9a, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbd,
				0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
				0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xb9,
				0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,
				0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f,
				0xd0, 0xb7, 0xd1, 0x8c, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,
				0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x81,
				0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0x9a, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xa4, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83,
				0xd0, 0xbc, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0, 0xb5, 0xd1,
				0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbf, 0xd0, 0xbe,
				0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x81, 0xd1,
				0x8f, 0xd1, 0x87, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x86,
				0xd1, 0x86, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x82, 0xd1,
				0x80, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc,
				0xd1, 0x8b, 0xd1, 0x85, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0,
				0xb0, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x87,
				0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
				0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c,
				0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0xd1,
				0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbc, 0xd0, 0xb5,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1,
				0x81, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x85,
				0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb8, 0xd0,
				0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5,
				0xd1, 0x8e, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
				0x80, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81,
				0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd0,
				0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x86,
				0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
				0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0x90, 0xd1, 0x80,
				0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8,
				0xaf, 0xd9, 0x89, 0xd8, 0xa5, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,
				0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x85, 0xd8,
				0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,
				0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb6,
				0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xa9, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xb3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x85, 0xd9,
				0x8a, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa7, 0xd8, 0xaa,
				0xd9, 0x85, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x89, 0xd8, 0xaa, 0xd8,
				0xb9, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,
				0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8,
				0xb1, 0xd8, 0xaa, 0xd8, 0xb7, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xb9,
				0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa5, 0xd8, 0xb1, 0xd9,
				0x81, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xb7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7,
				0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd8, 0xba, 0xd8, 0xa9, 0xd8,
				0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84,
				0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,
				0x8a, 0xd8, 0xae, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,
				0x84, 0xd9, 0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x84,
				0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x87, 0xd8,
				0xa7, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7,
				0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xb9, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,
				0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0xd9, 0x83, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xb7, 0xd9, 0x81, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a,
				0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8,
				0xb1, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8,
				0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x88,
				0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x85, 0xd8,
				0xa7, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xaa,
				0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xb1, 0xd8,
				0xb4, 0xd9, 0x8a, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a,
				0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,
				0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa3, 0xd9, 0x84,
				0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,
				0x81, 0xd8, 0xb1, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x84,
				0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3,
				0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd8,
				0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd9, 0x81, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd9, 0x83, 0xd9, 0x84, 0xd9,
				0x85, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7,
				0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8,
				0xa3, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd9, 0x83, 0xd8, 0xaa,
				0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9,
				0x8a, 0xd8, 0xb1, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x84,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xa3, 0xd8, 0xaf, 0xd8, 0xa8, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,
				0xd8, 0xb7, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
				0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb7, 0xd9, 0x82, 0xd8, 0xa9, 0xd8, 0xa7,
				0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xb1, 0xd8, 0xac, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8, 0xaa, 0xd8, 0xb1,
				0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x85, 0xd9,
				0x8a, 0xd8, 0xb9, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x83, 0x73, 0x42, 0x79, 0x54,
				0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20,
				0x61, 0x6c, 0x74, 0x3d, 0x22, 0x31, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69,
				0x64, 0x20, 0x23, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d,
				0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69,
				0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70, 0x70,
				0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x6f, 0x6e, 0x63,
				0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
				0x73, 0x68, 0x65, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
				0x6e, 0x67, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,
				0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x65,
				0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x70, 0x72,
				0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d,
				0x64, 0x61, 0x73, 0x68, 0x3b, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
				0x65, 0x6c, 0x79, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x3c,
				0x2f, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x74,
				0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76,
				0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x65,
				0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
				0x6c, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
				0x79, 0x3a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e,
				0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x65, 0x76,
				0x65, 0x6e, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x72, 0x65, 0x70, 0x6c,
				0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
				0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x72,
				0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
				0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28, 0x75, 0x72, 0x6c, 0x28, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
				0x63, 0x73, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a,
				0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6e, 0x6f,
				0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x50, 0x47, 0x7c, 0x74, 0x68, 0x75,
				0x6d, 0x62, 0x7c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
				0x65, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x66,
				0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x3c, 0x6c, 0x69,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x75, 0x6e, 0x64, 0x72,
				0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76,
				0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x6f, 0x74, 0x68, 0x3b,
				0x63, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69,
				0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,
				0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x4e, 0x65, 0x77, 0x20, 0x5a, 0x65, 0x61, 0x6c,
				0x61, 0x6e, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
				0x64, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x69,
				0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x6c, 0x74,
				0x3b, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
				0x6f, 0x76, 0x65, 0x72, 0x73, 0x79, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,
				0x61, 0x6e, 0x64, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3d, 0x22,
				0x73, 0x77, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65,
				0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x65,
				0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x68,
				0x6f, 0x75, 0x67, 0x68, 0x20, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
				0x65, 0x61, 0x3e, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x69, 0x72,
				0x64, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x26,
				0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x73, 0x70, 0x65,
				0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
				0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69,
				0x63, 0x73, 0x0a, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22,
				0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
				0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x72, 0x72,
				0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x69, 0x74, 0x69, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
				0x74, 0x65, 0x64, 0x36, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
				0x22, 0x73, 0x61, 0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3b, 0x63,
				0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x73,
				0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72,
				0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
				0x20, 0x66, 0x6f, 0x72, 0x69, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
				0x62, 0x65, 0x41, 0x66, 0x67, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e,
				0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61,
				0x74, 0x68, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x73, 0x75, 0x72, 0x72,
				0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c,
				0x73, 0x6f, 0x20, 0x62, 0x65, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
				0x65, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x3c,
				0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72,
				0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x68, 0x61,
				0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f,
				0x6e, 0x20, 0x6f, 0x66, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
				0x28, 0x29, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
				0x44, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x70,
				0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c,
				0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x72,
				0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x73, 0x74, 0x72,
				0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
				0x2f, 0x2f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
				0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x2e, 0x73,
				0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x65, 0x61, 0x63, 0x68,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
				0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74,
				0x69, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x64,
				0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
				0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x20, 0x6e, 0x6f,
				0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,
				0x45, 0x61, 0x73, 0x74, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x3c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20,
				0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,
				0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x44,
				0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
				0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x66, 0x61, 0x6d,
				0x6f, 0x75, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
				0x79, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6c,
				0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x63,
				0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x73, 0x6f, 0x76, 0x65, 0x72,
				0x65, 0x69, 0x67, 0x6e, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
				0x74, 0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
				0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x64, 0x6f,
				0x63, 0x74, 0x72, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x63, 0x63, 0x75,
				0x70, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
				0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61,
				0x6e, 0x63, 0x65, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
				0x66, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x65,
				0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63,
				0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x65,
				0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,
				0x63, 0x3d, 0x22, 0x2f, 0x3c, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x6d, 0x61, 0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x73, 0x70,
				0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3c, 0x2f, 0x66, 0x69,
				0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
				0x73, 0x73, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73,
				0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
				0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65,
				0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x65,
				0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c,
				0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73,
				0x74, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x6f,
				0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79,
				0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x28, 0x65, 0x73, 0x70, 0x65, 0x63,
				0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64, 0x74,
				0x68, 0x3d, 0x22, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x30,
				0x25, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x3c,
				0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20, 0x6f, 0x6e,
				0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3d, 0x22, 0x29, 0x2e, 0x61, 0x64, 0x64,
				0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x64, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66,
				0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x62, 0x72,
				0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
				0x72, 0x67, 0x65, 0x73, 0x74, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,
				0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x63,
				0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x6f, 0x72,
				0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61,
				0x64, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
				0x22, 0x31, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b,
				0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x69, 0x6d, 0x70, 0x6c,
				0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
				0x20, 0x73, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61,
				0x73, 0x20, 0x61, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x74,
				0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x63,
				0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65,
				0x20, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x20, 0x77,
				0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x21, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
				0x61, 0x6e, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69,
				0x6e, 0x2d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,
				0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x64, 0x75, 0x72, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x63, 0x61, 0x6c,
				0x6c, 0x65, 0x64, 0x3c, 0x68, 0x34, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
				0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x67, 0x6f, 0x76,
				0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x4e, 0x6f, 0x76, 0x65,
				0x6d, 0x62, 0x65, 0x72, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
				0x68, 0x65, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
				0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73,
				0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
				0x7a, 0x65, 0x3a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69,
				0x6e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x65,
				0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x6d, 0x6f, 0x73,
				0x74, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x77, 0x69, 0x64, 0x65, 0x6c,
				0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
				0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,
				0x6f, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
				0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x49, 0x74,
				0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x74, 0x20, 0x64,
				0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
				0x72, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61,
				0x6e, 0x74, 0x73, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
				0x74, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x63,
				0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x73,
				0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x20, 0x65,
				0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20,
				0x6d, 0x6f, 0x72, 0x65, 0x70, 0x78, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69,
				0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
				0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72,
				0x65, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x6f, 0x6c, 0x65,
				0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
				0x75, 0x73, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x73, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f,
				0x66, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63,
				0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x61,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63, 0x65, 0x72, 0x74, 0x69,
				0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
				0x3d, 0x22, 0x68, 0x69, 0x67, 0x68, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
				0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x63, 0x6f,
				0x6d, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6f, 0x70,
				0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 0x20,
				0x79, 0x65, 0x61, 0x72, 0x73, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e,
				0x74, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72,
				0x79, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x70, 0x72, 0x6f,
				0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x70, 0x61, 0x72, 0x61,
				0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20,
				0x6f, 0x66, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
				0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x22, 0x77, 0x61,
				0x73, 0x20, 0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x74,
				0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
				0x65, 0x64, 0x20, 0x61, 0x73, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
				0x65, 0x6e, 0x74, 0x69, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
				0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x3a,
				0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x69, 0x67,
				0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x63, 0x65, 0x6c, 0x65, 0x62,
				0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
				0x74, 0x74, 0x65, 0x64, 0x2f, 0x6a, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72,
				0x79, 0x2e, 0x69, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,
				0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74,
				0x61, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x69, 0x74, 0x20, 0x63,
				0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0a, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x62,
				0x65, 0x65, 0x6e, 0x0d, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,
				0x3c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x54, 0x68, 0x65, 0x20, 0x63,
				0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x65, 0x20,
				0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x64, 0x75,
				0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
				0x70, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
				0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6f,
				0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x6f, 0x20, 0x73,
				0x61, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
				0x65, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
				0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74,
				0x6f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62,
				0x65, 0x6c, 0x69, 0x65, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x68, 0x6f,
				0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
				0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
				0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20,
				0x6f, 0x66, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79,
				0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x65,
				0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x6c, 0x65, 0x61, 0x76,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61,
				0x63, 0x75, 0x6c, 0x61, 0x72, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
				0x79, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x72,
				0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x65, 0x6d, 0x70, 0x68, 0x61,
				0x73, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,
				0x63, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x77, 0x69, 0x74,
				0x68, 0x20, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74,
				0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65,
				0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x74, 0x20, 0x69,
				0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x69, 0x66,
				0x72, 0x61, 0x6d, 0x65, 0x3e, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
				0x77, 0x73, 0x3a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
				0x68, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x63,
				0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x69,
				0x6e, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x6f, 0x70, 0x70, 0x6f, 0x72,
				0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x76, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
				0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x68, 0x65,
				0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x73, 0x65, 0x74, 0x49,
				0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x70,
				0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x59,
				0x6f, 0x72, 0x6b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
				0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x0a,
				0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x63,
				0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x3b, 0x3c, 0x2f, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45,
				0x76, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f,
				0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x53, 0x6f,
				0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65,
				0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,
				0x6d, 0x65, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
				0x72, 0x22, 0x3e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
				0x67, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x4d,
				0x75, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x72, 0x69,
				0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x68, 0x65, 0x69,
				0x67, 0x68, 0x74, 0x3d, 0x22, 0x32, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
				0x66, 0x20, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x45, 0x78,
				0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x65, 0x64, 0x75, 0x63,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
				0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69,
				0x74, 0x3d, 0x22, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x6f,
				0x66, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f,
				0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x72, 0x65, 0x6c,
				0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x74, 0x65, 0x6e, 0x64, 0x65,
				0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
				0x65, 0x20, 0x6f, 0x66, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x6f, 0x75,
				0x6c, 0x64, 0x64, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,
				0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x65,
				0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x69, 0x6e, 0x6e,
				0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74,
				0x75, 0x72, 0x65, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,
				0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x69,
				0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x79, 0x65, 0x61,
				0x72, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2c, 0x73, 0x61, 0x6e, 0x73,
				0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
				0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
				0x63, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
				0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f,
				0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,
				0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,
				0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
				0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73,
				0x75, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x61,
				0x69, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69,
				0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
				0x7a, 0x65, 0x3a, 0x31, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
				0x6f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20,
				0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x61, 0x6e, 0x6e, 0x69,
				0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,
				0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69,
				0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6e,
				0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,
				0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x47, 0x4d, 0x54, 0x53, 0x74,
				0x72, 0x69, 0x6e, 0x67, 0x41, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
				0x6f, 0x66, 0x69, 0x6d, 0x67, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
				0x45, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x77, 0x61,
				0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75,
				0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
				0x6f, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
				0x69, 0x73, 0x68, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61,
				0x73, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x74,
				0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e,
				0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75, 0x65,
				0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72,
				0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
				0x6f, 0x66, 0x77, 0x69, 0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x20,
				0x77, 0x65, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x63,
				0x72, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x6e, 0x20, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61,
				0x6e, 0x74, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
				0x64, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x67,
				0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x61,
				0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6d, 0x6f, 0x73, 0x74, 0x20,
				0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,
				0x66, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20,
				0x6e, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
				0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68,
				0x65, 0x79, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x75,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
				0x61, 0x6e, 0x74, 0x74, 0x68, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
				0x6c, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x63,
				0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x6f,
				0x72, 0x74, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61,
				0x6e, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
				0x75, 0x73, 0x65, 0x64, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x69, 0x74, 0x74,
				0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x68, 0x61, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x69, 0x6e,
				0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x6d,
				0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
				0x6e, 0x74, 0x2c, 0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x22,
				0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x33, 0x49, 0x6e, 0x64,
				0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x70, 0x6f, 0x70, 0x75, 0x6c,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x2d, 0x73,
				0x63, 0x61, 0x6c, 0x65, 0x2e, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67,
				0x68, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
				0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
				0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x72,
				0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x72,
				0x20, 0x6d, 0x6f, 0x72, 0x65, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
				0x65, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x68,
				0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x3c, 0x2f, 0x6f,
				0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69,
				0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
				0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20,
				0x62, 0x65, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66,
				0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69,
				0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x73, 0x75,
				0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65,
				0x61, 0x74, 0x65, 0x20, 0x61, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x73, 0x73, 0x69,
				0x70, 0x70, 0x69, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c,
				0x79, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x62,
				0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x77, 0x68, 0x61,
				0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x73, 0x69, 0x74, 0x75, 0x61,
				0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61,
				0x6d, 0x65, 0x3d, 0x22, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68,
				0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x6d, 0x6f,
				0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x6f,
				0x67, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
				0x73, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e,
				0x67, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x6d, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6c, 0x75,
				0x67, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65,
				0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65,
				0x64, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
				0x65, 0x64, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
				0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74,
				0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x66,
				0x61, 0x76, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,
				0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3c,
				0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x54, 0x68, 0x69,
				0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
				0x69, 0x7a, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,
				0x69, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6d, 0x61,
				0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6d,
				0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x50, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x6e,
				0x69, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65,
				0x72, 0x69, 0x74, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d,
				0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x6f, 0x20,
				0x72, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x74,
				0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
				0x74, 0x69, 0x76, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69,
				0x6c, 0x79, 0x49, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2c,
				0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,
				0x6b, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x75, 0x62, 0x64,
				0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
				0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,
				0x79, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x6f,
				0x75, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
				0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,
				0x6f, 0x67, 0x3d, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
				0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61,
				0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x6e, 0x75,
				0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
				0x62, 0x65, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78,
				0x22, 0x3e, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
				0x66, 0x77, 0x61, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x74,
				0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x65, 0x63,
				0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
				0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
				0x6c, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
				0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x61, 0x6d,
				0x6f, 0x6e, 0x67, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x6f,
				0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
				0x31, 0x30, 0x30, 0x25, 0x3b, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
				0x67, 0x79, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,
				0x64, 0x74, 0x6f, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x74, 0x68, 0x65, 0x73,
				0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x69, 0x76,
				0x65, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78,
				0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
				0x69, 0x63, 0x75, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x3b,
				0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x61, 0x6c,
				0x69, 0x67, 0x6e, 0x3d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x74, 0x68, 0x65, 0x20,
				0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
				0x20, 0x74, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x6d, 0x65, 0x6e,
				0x74, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,
				0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
				0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
				0x74, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20,
				0x2f, 0x3e, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,
				0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x0d, 0x0a,
				0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x76,
				0x65, 0x72, 0x73, 0x65, 0x6c, 0x79, 0x2c, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76,
				0x20, 0x69, 0x64, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
				0x3d, 0x22, 0x31, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c,
				0x79, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x63,
				0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
				0x20, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x63, 0x69, 0x74, 0x69, 0x7a,
				0x65, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
				0x69, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,
				0x68, 0x65, 0x61, 0x73, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x61, 0x73,
				0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x3c, 0x74,
				0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x69,
				0x64, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
				0x6c, 0x79, 0x20, 0x74, 0x6f, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x64,
				0x6f, 0x77, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69,
				0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x6d,
				0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6c,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x6d,
				0x6d, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77,
				0x69, 0x74, 0x68, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
				0x74, 0x65, 0x74, 0x68, 0x65, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
				0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x3e, 0x74, 0x68,
				0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x74, 0x68, 0x65, 0x20,
				0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x79, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6e, 0x61,
				0x6c, 0x6c, 0x79, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x6f,
				0x66, 0x0d, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d,
				0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x66, 0x61, 0x73,
				0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
				0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x77,
				0x68, 0x69, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
				0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x77,
				0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x72, 0x22, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62,
				0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
				0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74,
				0x68, 0x65, 0x69, 0x72, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x75, 0x72,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69,
				0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
				0x65, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
				0x29, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20,
				0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x62, 0x65, 0x67, 0x69,
				0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
				0x65, 0x6e, 0x74, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65,
				0x64, 0x65, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x61,
				0x73, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,
				0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x6e, 0x65, 0x65, 0x64, 0x73,
				0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
				0x61, 0x74, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f,
				0x75, 0x73, 0x61, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66,
				0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x61,
				0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
				0x69, 0x65, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x65, 0x64, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,
				0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73,
				0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x65,
				0x6e, 0x74, 0x2d, 0x64, 0x61, 0x79, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
				0x61, 0x6c, 0x6c, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
				0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64,
				0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,
				0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x63,
				0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
				0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x74,
				0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x64,
				0x65, 0x77, 0x61, 0x73, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x77,
				0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x62, 0x75, 0x74,
				0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x75,
				0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,
				0x69, 0x62, 0x6c, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d,
				0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x61, 0x64,
				0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20,
				0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
				0x65, 0x72, 0x72, 0x65, 0x64, 0x61, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
				0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
				0x6f, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x73,
				0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x75, 0x63,
				0x68, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x0a, 0x09, 0x3c, 0x2f, 0x73,
				0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20,
				0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x77, 0x61,
				0x73, 0x20, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x63, 0x68, 0x69, 0x6c,
				0x64, 0x72, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
				0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x74,
				0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x73, 0x77, 0x61, 0x72, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x62,
				0x79, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64,
				0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x6d, 0x69, 0x6c,
				0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65,
				0x74, 0x61, 0x72, 0x79, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
				0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,
				0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x78,
				0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x20, 0x6d,
				0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73,
				0x20, 0x61, 0x6c, 0x73, 0x6f, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
				0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72,
				0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x2e, 0x53, 0x2e, 0x72,
				0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f,
				0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
				0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
				0x61, 0x6c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
				0x69, 0x6e, 0x20, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x72, 0x65,
				0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x69,
				0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f,
				0x6d, 0x65, 0x20, 0x6f, 0x66, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
				0x6f, 0x31, 0x73, 0x74, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x20, 0x6f, 0x66, 0x63,
				0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x69,
				0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x2f, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x63, 0x61,
				0x6e, 0x20, 0x62, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74,
				0x68, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73,
				0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x61, 0x72,
				0x65, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x64, 0x64, 0x46, 0x61, 0x76,
				0x6f, 0x72, 0x69, 0x74, 0x65, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73,
				0x68, 0x69, 0x70, 0x70, 0x61, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
				0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
				0x6e, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x74, 0x6f, 0x20,
				0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b,
				0x6d, 0x69, 0x6e, 0x75, 0x73, 0x3b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
				0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
				0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x75,
				0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x79,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22,
				0x30, 0x22, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f,
				0x6b, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x66,
				0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x65,
				0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
				0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
				0x2f, 0x74, 0x64, 0x3e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
				0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f, 0x66,
				0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x77, 0x65,
				0x72, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
				0x20, 0x69, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
				0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x69,
				0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x75, 0x72,
				0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x68,
				0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x4c, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
				0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e,
				0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70,
				0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x73, 0x6f, 0x6d, 0x65,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,
				0x74, 0x68, 0x65, 0x72, 0x2c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
				0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,
				0x65, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61,
				0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x72, 0x65, 0x63,
				0x6f, 0x72, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
				0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61, 0x79, 0x20, 0x69, 0x6e, 0x63,
				0x6c, 0x75, 0x64, 0x65, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
				0x27, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f,
				0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x62, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x67, 0x6f, 0x76, 0x65,
				0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,
				0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x74,
				0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x69, 0x74,
				0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
				0x74, 0x65, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65,
				0x72, 0x61, 0x64, 0x69, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x72, 0x65,
				0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x77, 0x69, 0x74, 0x68,
				0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61,
				0x74, 0x68, 0x65, 0x72, 0x2c, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f,
				0x75, 0x6c, 0x64, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61,
				0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63,
				0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74,
				0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x20,
				0x77, 0x69, 0x74, 0x68, 0x65, 0x72, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c,
				0x69, 0x3e, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65,
				0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x64, 0x63, 0x6c,
				0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x70, 0x72, 0x65, 0x76,
				0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x65, 0x67, 0x69, 0x73, 0x6c,
				0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
				0x74, 0x6c, 0x79, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69,
				0x6e, 0x68, 0x61, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x66,
				0x6f, 0x72, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
				0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
				0x6f, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
				0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6c,
				0x61, 0x63, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x65, 0x72,
				0x65, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73,
				0x2c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x65, 0x74,
				0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x72, 0x61,
				0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x72, 0x6f, 0x6c, 0x65, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65,
				0x73, 0x75, 0x6c, 0x74, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69,
				0x6c, 0x64, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x77, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x53, 0x6f,
				0x6d, 0x65, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x64,
				0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
				0x65, 0x72, 0x73, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
				0x65, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61,
				0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6c, 0x69, 0x76,
				0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,
				0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
				0x20, 0x74, 0x68, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
				0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e,
				0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x61, 0x74,
				0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72,
				0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75,
				0x67, 0x68, 0x20, 0x69, 0x74, 0x77, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,
				0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75,
				0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x74,
				0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x74, 0x75, 0x72,
				0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x3e, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x65, 0x63, 0x6f,
				0x6e, 0x6f, 0x6d, 0x79, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,
				0x73, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79,
				0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e,
				0x64, 0x20, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x72, 0x69, 0x73, 0x65,
				0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,
				0x20, 0x77, 0x68, 0x65, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x77, 0x68,
				0x69, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x2e, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74,
				0x68, 0x65, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,
				0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x63,
				0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
				0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x6d, 0x61,
				0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x61, 0x72, 0x65, 0x61,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x74, 0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x54,
				0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x65, 0x78, 0x74,
				0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69,
				0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
				0x3d, 0x32, 0x20, 0x7c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x6f,
				0x72, 0x79, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f,
				0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x72,
				0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f,
				0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x43, 0x68, 0x72, 0x69,
				0x73, 0x74, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
				0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74,
				0x6f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x54,
				0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x72,
				0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x6d,
				0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x20, 0x65, 0x76, 0x69, 0x64,
				0x65, 0x6e, 0x63, 0x65, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
				0x6f, 0x66, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,
				0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x63, 0x6f,
				0x6d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
				0x6f, 0x63, 0x65, 0x73, 0x73, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20,
				0x74, 0x68, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
				0x2c, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74,
				0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65,
				0x20, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x62, 0x6c,
				0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x61, 0x20, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x75,
				0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
				0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f,
				0x72, 0x6e, 0x69, 0x61, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,
				0x73, 0x20, 0x61, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
				0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x6d,
				0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x09, 0x09, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x74, 0x22, 0x20, 0x76,
				0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
				0x65, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61,
				0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e,
				0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78,
				0x70, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x76, 0x3e,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,
				0x72, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x09, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
				0x2f, 0x77, 0x61, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e,
				0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20, 0x73,
				0x65, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c,
				0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
				0x6f, 0x66, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x73, 0x74, 0x65, 0x61,
				0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
				0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
				0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x73,
				0x20, 0x6f, 0x66, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
				0x6e, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x61,
				0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
				0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x61, 0x75, 0x6e, 0x63,
				0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
				0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65,
				0x73, 0x74, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
				0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x62, 0x65,
				0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x69, 0x73, 0x20, 0x61,
				0x6c, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
				0x68, 0x20, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x2c, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,
				0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74,
				0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
				0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x6e, 0x73, 0x70,
				0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
				0x65, 0x20, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64,
				0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68,
				0x69, 0x73, 0x20, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x73, 0x74,
				0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
				0x73, 0x74, 0x20, 0x74, 0x6f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
				0x78, 0x4f, 0x66, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x69,
				0x73, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74,
				0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x69, 0x73, 0x20,
				0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x65,
				0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x67, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
				0x2f, 0x6c, 0x69, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
				0x6e, 0x74, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66,
				0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x78,
				0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x74, 0x68, 0x65, 0x79, 0x20, 0x73,
				0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc4, 0x8d,
				0x69, 0x6e, 0x61, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,
				0x73, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x64, 0x61, 0x64, 0x63,
				0x6f, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x61, 0x63, 0x74,
				0x69, 0x76, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72,
				0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x65, 0x63, 0x6e, 0x6f, 0x6c, 0x6f,
				0x67, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x63, 0x69, 0xc3,
				0xb3, 0x6e, 0x70, 0x75, 0x6e, 0x74, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
				0x61, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,
				0x6e, 0x74, 0x72, 0x61, 0x73, 0x65, 0xc3, 0xb1, 0x61, 0x63, 0x61, 0x74, 0x65,
				0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x73, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
				0x72, 0x61, 0x72, 0x73, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74,
				0x6f, 0x72, 0x65, 0x67, 0xc3, 0xad, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x73,
				0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x69,
				0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x65,
				0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
				0x6e, 0x74, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
				0x69, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x64, 0x61, 0x64,
				0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x63, 0x72,
				0x65, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65,
				0x73, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0x75, 0x73, 0x63, 0x72, 0x69,
				0x62, 0x69, 0x72, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x63, 0x69,
				0xc3, 0xb3, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65,
				0x73, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65,
				0x73, 0x74, 0x75, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x72, 0x65, 0x73,
				0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
				0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x67, 0x75, 0x61, 0x64, 0x61, 0x6c, 0x61,
				0x6a, 0x61, 0x72, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x64,
				0x6f, 0x73, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64,
				0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f,
				0x74, 0x6f, 0x67, 0x72, 0x61, 0x66, 0xc3, 0xad, 0x61, 0x61, 0x75, 0x74, 0x6f,
				0x72, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x69,
				0x65, 0x72, 0xc3, 0xad, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69,
				0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69,
				0x61, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65,
				0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x69, 0x64, 0x6f, 0x73, 0x69, 0x6d,
				0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61,
				0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x76, 0x65, 0x67, 0x61, 0x63,
				0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64,
				0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
				0x3a, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x3a,
				0x22, 0x20, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61,
				0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x69,
				0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x73, 0x70, 0x65,
				0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x2f, 0x3c, 0x21,
				0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e,
				0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
				0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x68, 0x65,
				0x69, 0x67, 0x68, 0x74, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x68, 0x69, 0x70, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x77, 0x69,
				0x64, 0x74, 0x68, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x3c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d,
				0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f,
				0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x77, 0x69,
				0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x20, 0x21, 0x69,
				0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x3b, 0x61, 0x70, 0x70, 0x6c,
				0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x70,
				0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
				0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70,
				0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
				0x22, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x61, 0x6c,
				0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,
				0x38, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x61, 0x6e,
				0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x73,
				0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,
				0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x69, 0x6d, 0x67, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
				0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
				0x74, 0x75, 0x72, 0x79, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
				0x75, 0x72, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
				0x65, 0x64, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72,
				0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,
				0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x2f,
				0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6e, 0x6f,
				0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x75, 0x6e,
				0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x27, 0x29, 0x46, 0x75, 0x72, 0x74,
				0x68, 0x65, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x2c, 0x62, 0x65, 0x6c, 0x69, 0x65,
				0x76, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48,
				0x54, 0x4d, 0x4c, 0x20, 0x3d, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x63,
				0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
				0x73, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,
				0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50,
				0x65, 0x6e, 0x6e, 0x73, 0x79, 0x6c, 0x76, 0x61, 0x6e, 0x69, 0x61, 0x41, 0x73,
				0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x3c, 0x68, 0x74,
				0x6d, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x26, 0x6c, 0x74, 0x3b,
				0x2f, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x64, 0x65, 0x61, 0x6c, 0x69,
				0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x68, 0x69, 0x6c, 0x61, 0x64,
				0x65, 0x6c, 0x70, 0x68, 0x69, 0x61, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
				0x63, 0x61, 0x6c, 0x6c, 0x79, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x3e, 0x0a, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74,
				0x6f, 0x70, 0x3a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
				0x61, 0x6c, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
				0x65, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
				0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x70,
				0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3d, 0x66,
				0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x73, 0x75, 0x62,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x2e, 0x64, 0x74,
				0x64, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x74, 0x67, 0x65, 0x6f, 0x67, 0x72,
				0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69,
				0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x75,
				0x72, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x31,
				0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x45, 0x6e,
				0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x69, 0x66, 0x72,
				0x61, 0x6d, 0x65, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x64, 0x65, 0x6d, 0x6f,
				0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d,
				0x70, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
				0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
				0x70, 0x68, 0x69, 0x63, 0x73, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x3e, 0x3c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
				0x20, 0x74, 0x6f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20,
				0x6f, 0x66, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x45,
				0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0x61, 0x70,
				0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x74, 0x72, 0x61,
				0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x48,
				0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6c,
				0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x74, 0x61, 0x62, 0x69,
				0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72,
				0x69, 0x67, 0x68, 0x74, 0x3b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x77, 0x65,
				0x61, 0x6c, 0x74, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x66,
				0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
				0x68, 0x65, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e,
				0x65, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x3b,
				0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x6a, 0x75,
				0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x3c, 0x61,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x49, 0x6e, 0x20, 0x61, 0x64,
				0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20,
				0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
				0x6c, 0x6c, 0x79, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
				0x3d, 0x22, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
				0x67, 0x26, 0x6c, 0x74, 0x3b, 0x6d, 0x61, 0x74, 0x68, 0x26, 0x67, 0x74, 0x3b,
				0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
				0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x69,
				0x6d, 0x67, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x6e, 0x61, 0x76,
				0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6d, 0x70,
				0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6d, 0x70,
				0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d,
				0x22, 0x61, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
				0x65, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72,
				0x75, 0x65, 0x3b, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2f, 0x2f, 0x45, 0x4e,
				0x22, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
				0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
				0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69,
				0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61,
				0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x63, 0x61, 0x70, 0x61,
				0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3c, 0x21, 0x5b, 0x65, 0x6e,
				0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,
				0x61, 0x6e, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
				0x70, 0x6c, 0x65, 0x2c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
				0x28, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x75, 0x6e,
				0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x65,
				0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x65,
				0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
				0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
				0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x47,
				0x75, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x76,
				0x65, 0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x61, 0x67, 0x61,
				0x69, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63,
				0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x0a, 0x2e, 0x6e, 0x6f,
				0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d,
				0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x31,
				0x70, 0x78, 0x20, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,
				0x3a, 0x31, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f,
				0x66, 0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,
				0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
				0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x69,
				0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x72, 0x65,
				0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x63, 0x68, 0x69,
				0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62,
				0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68,
				0x65, 0x6c, 0x65, 0x73, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
				0x61, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
				0x69, 0x6e, 0x67, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74,
				0x64, 0x3e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,
				0x0a, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61,
				0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x72,
				0x63, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x61, 0x76,
				0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x61, 0x6c, 0x66,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74,
				0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
				0x67, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
				0x79, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,
				0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c, 0x69, 0x74,
				0x61, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
				0x65, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,
				0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x61,
				0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x76,
				0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x72, 0x65,
				0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6d, 0x70, 0x72,
				0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e,
				0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x4a, 0x65, 0x73, 0x75, 0x73, 0x20,
				0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65,
				0x6d, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67,
				0x6e, 0x3a, 0x72, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x28, 0x29, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65,
				0x73, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
				0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,
				0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x73,
				0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x79,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
				0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
				0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
				0x65, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
				0x65, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20,
				0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
				0x65, 0x74, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x61,
				0x72, 0x6d, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x72, 0x65,
				0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
				0x74, 0x69, 0x6e, 0x75, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x4e, 0x6f, 0x6e, 0x65,
				0x74, 0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x65,
				0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x0a, 0x09, 0x09, 0x3c, 0x61, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
				0x20, 0x6f, 0x66, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
				0x74, 0x68, 0x65, 0x28, 0x73, 0x65, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77,
				0x29, 0x2e, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63,
				0x68, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
				0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x74,
				0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x09, 0x09,
				0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x09, 0x09,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x65,
				0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x75,
				0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x61, 0x6c, 0x6c, 0x20, 0x6f,
				0x66, 0x20, 0x46, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65,
				0x6e, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,
				0x74, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72,
				0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
				0x76, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x7b,
				0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x74, 0x72,
				0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x6d,
				0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
				0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x6c, 0x6f,
				0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
				0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
				0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
				0x79, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
				0x6e, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
				0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x3e, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c,
				0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x62,
				0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61,
				0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x69,
				0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68,
				0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64,
				0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x09, 0x3c, 0x6c, 0x69, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
				0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x20, 0x55,
				0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
				0x67, 0x65, 0x64, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20,
				0x62, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
				0x65, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
				0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64,
				0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
				0x20, 0x66, 0x61, 0x63, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x6c, 0x69,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x61, 0x69, 0x6d, 0x70, 0x6c,
				0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x69, 0x74, 0x61,
				0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x7a,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
				0x74, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x62,
				0x62, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
				0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
				0x6f, 0x72, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,
				0x20, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74,
				0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x63, 0x3d,
				0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x70, 0x78, 0x3b, 0x20, 0x68,
				0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
				0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
				0x74, 0x75, 0x72, 0x65, 0x72, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x72, 0x69,
				0x67, 0x68, 0x74, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
				0x74, 0x79, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61,
				0x6c, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x68,
				0x75, 0x6d, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x73, 0x6e, 0x61,
				0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x65,
				0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x72, 0x65, 0x20,
				0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
				0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73,
				0x6f, 0x6e, 0x20, 0x77, 0x68, 0x6f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x67, 0x75, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x6e, 0x6f, 0x77, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x20, 0x61, 0x73, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72,
				0x6c, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
				0x65, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
				0x53, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x61, 0x76, 0x69, 0x61, 0x6e, 0x3c,
				0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x63, 0x6f,
				0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20,
				0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,
				0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3c, 0x64, 0x69, 0x76, 0x20,
				0x69, 0x64, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
				0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
				0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
				0x73, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
				0x72, 0x65, 0x64, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76,
				0x3e, 0x0a, 0x77, 0x61, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
				0x6e, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x61,
				0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x74,
				0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x61,
				0x73, 0x20, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x6e, 0x6f, 0x20,
				0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x72, 0x65, 0x73, 0x70,
				0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69,
				0x6e, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x65,
				0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72,
				0x65, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e,
				0x65, 0x72, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
				0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c,
				0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e,
				0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e,
				0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64,
				0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e,
				0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
				0x70, 0x6c, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
				0x65, 0x6c, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
				0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
				0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
				0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74,
				0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x6e,
				0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x68, 0x6f, 0x77,
				0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x79,
				0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x6a, 0x65, 0x63,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
				0x69, 0x73, 0x6d, 0x20, 0x6f, 0x66, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
				0x77, 0x68, 0x69, 0x63, 0x68, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79,
				0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74, 0x69,
				0x63, 0x6c, 0x65, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
				0x29, 0x7b, 0x49, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
				0x65, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64,
				0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72,
				0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x62, 0x65, 0x74,
				0x74, 0x65, 0x72, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x61, 0x72, 0x72, 0x61,
				0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75,
				0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63,
				0x61, 0x6c, 0x20, 0x74, 0x6f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f,
				0x75, 0x67, 0x68, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65,
				0x3d, 0x22, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,
				0x3b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
				0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x72,
				0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69,
				0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x69, 0x68, 0x74, 0x74,
				0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6c,
				0x64, 0x20, 0x57, 0x61, 0x72, 0x20, 0x49, 0x49, 0x74, 0x65, 0x73, 0x74, 0x69,
				0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
				0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66,
				0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x79,
				0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74,
				0x68, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
				0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e,
				0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65,
				0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20,
				0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d,
				0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
				0x65, 0x20, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x20, 0x62, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x22, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,
				0x73, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,
				0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63,
				0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73, 0x75,
				0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e,
				0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x70,
				0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
				0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
				0x61, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
				0x65, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65, 0x63,
				0x61, 0x6d, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
				0x64, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66,
				0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x3e,
				0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x76,
				0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x70,
				0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x76, 0x69,
				0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x61,
				0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
				0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x61, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61,
				0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20,
				0x6f, 0x66, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70,
				0x22, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66,
				0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x3c,
				0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x73, 0x61,
				0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x68, 0x69, 0x6c,
				0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x68, 0x79, 0x70, 0x6f, 0x74,
				0x68, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73,
				0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
				0x64, 0x20, 0x69, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
				0x20, 0x62, 0x79, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
				0x74, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
				0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x74,
				0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
				0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x6a,
				0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6c,
				0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x6e,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,
				0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x77, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f,
				0x62, 0x61, 0x62, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x65, 0x74,
				0x77, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72,
				0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
				0x65, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x77,
				0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x27, 0x68,
				0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x79, 0x65, 0x61,
				0x72, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x69, 0x73,
				0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x63, 0x72, 0x65,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
				0x6d, 0x65, 0x6e, 0x74, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x65,
				0x6d, 0x65, 0x6c, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
				0x0a, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x6f,
				0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x70,
				0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x73, 0x75, 0x66,
				0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x74, 0x68, 0x65, 0x20,
				0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
				0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54,
				0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74,
				0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,
				0x6e, 0x74, 0x6c, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
				0x65, 0x78, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20,
				0x6f, 0x66, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e,
				0x64, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
				0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x61,
				0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,
				0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x69, 0x76,
				0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x74,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x78, 0x70, 0x65, 0x6e,
				0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
				0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
				0x61, 0x73, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
				0x6e, 0x67, 0x3d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
				0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
				0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61,
				0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x73, 0x22,
				0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x72, 0x74,
				0x68, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
				0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
				0x79, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
				0x62, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
				0x73, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74,
				0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73,
				0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x73, 0x75,
				0x70, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x64, 0x65, 0x70,
				0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6d,
				0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e,
				0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61,
				0x6e, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x73,
				0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
				0x20, 0x61, 0x74, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65,
				0x72, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
				0x48, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74,
				0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73,
				0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x72, 0x65, 0x73,
				0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x63, 0x63,
				0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x64, 0x65, 0x66, 0x65, 0x61,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72,
				0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
				0x79, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
				0x72, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
				0x67, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f,
				0x66, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
				0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77,
				0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x3c, 0x6c,
				0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x74, 0x68, 0x65,
				0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x68, 0x65, 0x20, 0x70, 0x75,
				0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
				0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x65, 0x72, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67,
				0x68, 0x74, 0x3a, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20,
				0x6f, 0x66, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
				0x3e, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65,
				0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x49,
				0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x2c, 0x68, 0x6f,
				0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x20,
				0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x6e, 0x64, 0x20,
				0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x66, 0x65, 0x28, 0x61, 0x6c, 0x73, 0x6f,
				0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x3e, 0x3c, 0x75, 0x6c, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
				0x76, 0x65, 0x6c, 0x79, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,
				0x69, 0x6e, 0x74, 0x6f, 0x73, 0x65, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x68,
				0x61, 0x76, 0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e,
				0x6f, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74,
				0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x64,
				0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x62, 0x79, 0x49, 0x6e,
				0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2c, 0x62, 0x72, 0x6f,
				0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x72,
				0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x72, 0x65, 0x66, 0x6c, 0x65,
				0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72,
				0x79, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
				0x6f, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61,
				0x6c, 0x6c, 0x79, 0x73, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
				0x6e, 0x67, 0x61, 0x72, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c,
				0x79, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x76, 0x65, 0x72,
				0x28, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63,
				0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x72, 0x65,
				0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x6f,
				0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x6e, 0x20, 0x65,
				0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x6f, 0x72, 0x74, 0x68,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
				0x77, 0x69, 0x73, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d,
				0x20, 0x6f, 0x66, 0x68, 0x61, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,
				0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
				0x79, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
				0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69,
				0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65,
				0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x65, 0x6e, 0x74,
				0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20,
				0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x69,
				0x73, 0x74, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e,
				0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65,
				0x6c, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70,
				0x65, 0x20, 0x6f, 0x66, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20,
				0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
				0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x64,
				0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x61, 0x72,
				0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x63, 0x6f, 0x72,
				0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x61, 0x73, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70,
				0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
				0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f,
				0x72, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x66,
				0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x73,
				0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x64, 0x72, 0x65,
				0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x77, 0x61, 0x73,
				0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65,
				0x69, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x75, 0x6d,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x65, 0x61, 0x73, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69,
				0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
				0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
				0x6e, 0x73, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x66,
				0x6f, 0x72, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x20, 0x62,
				0x79, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f,
				0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x63,
				0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x53, 0x65,
				0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70,
				0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6d, 0x61, 0x72, 0x67,
				0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x2f, 0x5e, 0x5c, 0x73, 0x2b,
				0x7c, 0x5c, 0x73, 0x2b, 0x24, 0x2f, 0x67, 0x65, 0x29, 0x7b, 0x74, 0x68, 0x72,
				0x6f, 0x77, 0x20, 0x65, 0x7d, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
				0x72, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x77, 0x6f, 0x20, 0x73, 0x65, 0x70, 0x61,
				0x72, 0x61, 0x74, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20,
				0x61, 0x6e, 0x64, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,
				0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
				0x66, 0x64, 0x65, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x72, 0x65, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x09,
				0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x70, 0x72,
				0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65,
				0x20, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70,
				0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x6c, 0x69,
				0x73, 0x68, 0x20, 0x28, 0x55, 0x4b, 0x29, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
				0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0xd0, 0x9c, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
				0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xa1, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81,
				0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0,
				0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0, 0xba,
				0xd0, 0xbe, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,
				0xa9, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,
				0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7,
				0xb9, 0x81, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe6, 0x9c,
				0x89, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe4, 0xba, 0xba,
				0xe6, 0xb0, 0x91, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe9, 0x98, 0xbf, 0xe9,
				0x87, 0x8c, 0xe5, 0xb7, 0xb4, 0xe5, 0xb7, 0xb4, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc,
				0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xb9, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
				0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x94, 0xbf, 0xe7, 0xad, 0x96, 0xe6,
				0xb3, 0x95, 0xe8, 0xa7, 0x84, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x63,
				0x69, 0xc3, 0xb3, 0x6e, 0x68, 0x65, 0x72, 0x72, 0x61, 0x6d, 0x69, 0x65, 0x6e,
				0x74, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69,
				0x63, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x63, 0x69, 0xc3, 0xb3,
				0x6e, 0x63, 0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x73,
				0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x70,
				0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65,
				0x6c, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x66,
				0x6f, 0x72, 0x6d, 0xc3, 0xa1, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61,
				0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x6f, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72,
				0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x74, 0x72, 0x61, 0x62, 0x61, 0x6a,
				0x61, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61,
				0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x79, 0x75, 0x6e, 0x74, 0x61, 0x6d, 0x69,
				0x65, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x4c, 0x69,
				0x62, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x6e,
				0x6f, 0x73, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65,
				0x73, 0x63, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f,
				0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x64,
				0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x6c, 0x65,
				0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69, 0x63, 0x61, 0x61, 0x70, 0x6c, 0x69,
				0x63, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x64, 0x65, 0x73, 0x63, 0x6f,
				0x6e, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
				0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x63,
				0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x6e, 0x63, 0x69, 0x63, 0x6c, 0x6f, 0x70, 0x65,
				0x64, 0x69, 0x61, 0x65, 0x6e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x61, 0x64,
				0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
				0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x73,
				0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,
				0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x73, 0x75,
				0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0xd1, 0x82, 0xd0,
				0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xbe,
				0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
				0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb,
				0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1,
				0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5,
				0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,
				0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb0,
				0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1,
				0x81, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,
				0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0,
				0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,
				0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,
				0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe,
				0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
				0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb,
				0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0,
				0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba,
				0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0,
				0xb5, 0xd0, 0xb9, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2,
				0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1,
				0x8b, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
				0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
				0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x83,
				0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x82, 0xd0,
				0xb5, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0x9e, 0xd0, 0xb4,
				0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1,
				0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1,
				0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
				0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,
				0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
				0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb3,
				0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,
				0xb8, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb9,
				0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
				0x85, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xbe, 0xd0, 0xbf,
				0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x81, 0xd1,
				0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0,
				0xd0, 0xb6, 0xd0, 0xb4, 0xd1, 0x8b, 0xd0, 0xb9, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0,
				0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83,
				0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
				0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,
				0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
				0xb0, 0xd0, 0xbb, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd1, 0x8b,
				0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd1,
				0x8c, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd0, 0xb3, 0xd0, 0xb8,
				0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
				0xb1, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe,
				0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
				0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x83,
				0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0,
				0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc,
				0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0,
				0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,
				0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
				0xba, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,
				0xd0, 0xbc, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
				0xb9, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0,
				0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0xd1,
				0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81,
				0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0,
				0xb5, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9,
				0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,
				0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe,
				0xd1, 0x89, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0,
				0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba,
				0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5,
				0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0,
				0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xa1,
				0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbc, 0xd0,
				0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0,
				0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
				0xbb, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80,
				0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1,
				0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
				0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
				0xbc, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbd,
				0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1,
				0x85, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c,
				0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1,
				0x8f, 0xd0, 0xbd, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8f, 0xd0, 0xbc,
				0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
				0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xb0,
				0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,
				0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbb,
				0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x8f, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
				0x83, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,
				0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1,
				0x86, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x82,
				0xd1, 0x8b, 0xd0, 0x9b, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb8, 0xd0,
				0xb5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
				0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
				0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,
				0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
				0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95,
				0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0x9f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xad, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x81, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
				0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xae, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0x9d, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b,
				0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0,
				0xa4, 0xbc, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9f,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x95, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5,
				0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
				0x97, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa0,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,
				0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb7, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5,
				0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0,
				0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb9, 0xe0,
				0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x8d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,
				0x9a, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
				0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x98, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,
				0xa4, 0x9a, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x97, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x87, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0,
				0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,
				0xa4, 0x9a, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
				0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
				0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0x9c,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x9f, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
				0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x85, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x9c,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4,
				0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa5, 0x80, 0xe0,
				0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0xa4, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb5, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
				0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x8b, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,
				0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac,
				0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x9c, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac,
				0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa5, 0x8c, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
				0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa5, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8,
				0xaa, 0xd8, 0xb7, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,
				0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,
				0xb3, 0xd8, 0xb7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x81,
				0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb6, 0xd9,
				0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5,
				0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb2, 0xd9, 0x8a, 0xd8,
				0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa9,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa8,
				0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x85, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9,
				0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8,
				0xb1, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x88,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x87, 0xd8,
				0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x8a, 0xd8, 0xa7,
				0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x82, 0xd9, 0x88, 0xd9,
				0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9, 0x85,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x82, 0xd9,
				0x85, 0xd8, 0xad, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xb8, 0xd8, 0xa9, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0xd9, 0x85, 0xd8,
				0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
				0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x82, 0xd8, 0xb1, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,
				0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9,
				0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf,
				0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb3, 0xd8,
				0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88,
				0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xac, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb9, 0xd8,
				0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd9, 0x86,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x86, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xb7, 0xd9,
				0x81, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7,
				0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xaf, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1,
				0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x8a,
				0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xaa, 0xd9, 0x88, 0xd9,
				0x82, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x88,
				0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd9,
				0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xa7,
				0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
				0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xae, 0xd8, 0xb5, 0xd9, 0x8a,
				0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xae, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac,
				0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,
				0xa7, 0xd9, 0x85, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x85,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8,
				0xb9, 0xd8, 0xa9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf,
				0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8,
				0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xae, 0xd9, 0x88, 0xd9, 0x84,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb3,
				0xd8, 0xaa, 0xd8, 0xba, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,
				0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8,
				0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,
				0xb8, 0xd9, 0x8a, 0xd9, 0x85, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,
				0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,
				0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x28, 0x29, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x77, 0x69,
				0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69,
				0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e,
				0x64, 0x6f, 0x6d, 0x28, 0x29, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
				0x72, 0x61, 0x72, 0x79, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x53,
				0x74, 0x61, 0x74, 0x65, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74,
				0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43,
				0x68, 0x69, 0x6c, 0x64, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,
				0x72, 0x63, 0x3d, 0x22, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
				0x69, 0x73, 0x68, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64,
				0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x3e, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e,
				0x69, 0x63, 0x6f, 0x22, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72,
				0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x63, 0x68, 0x75,
				0x73, 0x65, 0x74, 0x74, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f,
				0x77, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
				0x6e, 0x64, 0x3a, 0x23, 0x66, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
				0x6c, 0x65, 0x66, 0x74, 0x3a, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
				0x70, 0x6c, 0x65, 0x2c, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
				0x6e, 0x65, 0x6f, 0x75, 0x73, 0x26, 0x6c, 0x74, 0x3b, 0x2f, 0x6d, 0x61, 0x74,
				0x68, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
				0x67, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
				0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x74,
				0x79, 0x70, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x65, 0x74,
				0x68, 0x6f, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x20,
				0x43, 0x6f, 0x75, 0x72, 0x74, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x6c, 0x79, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d,
				0x65, 0x72, 0x69, 0x63, 0x61, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
				0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
				0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,
				0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72,
				0x43, 0x61, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
				0x75, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,
				0x61, 0x6e, 0x63, 0x65, 0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x69,
				0x6e, 0x67, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e,
				0x67, 0x74, 0x68, 0x3d, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,
				0x61, 0x6c, 0x73, 0x65, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69, 0x6f, 0x75,
				0x73, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x72, 0x72,
				0x61, 0x6e, 0x65, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64,
				0x69, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,
				0x6e, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74,
				0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
				0x65, 0x72, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67,
				0x69, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,
				0x6e, 0x73, 0x69, 0x76, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
				0x68, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x2e, 0x68, 0x72, 0x65, 0x66, 0x77, 0x61, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c,
				0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e,
				0x63, 0x69, 0x73, 0x63, 0x6f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x28, 0x29, 0x7b, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
				0x22, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73, 0x74, 0x69,
				0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
				0x69, 0x63, 0x61, 0x6c, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,
				0x3c, 0x62, 0x6f, 0x64, 0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x68, 0x69, 0x70, 0x73, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61,
				0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74,
				0x69, 0x63, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
				0x63, 0x61, 0x73, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x42, 0x72,
				0x69, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64,
				0x64, 0x69, 0x6e, 0x67, 0x3d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
				0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
				0x64, 0x65, 0x72, 0x3d, 0x22, 0x3b, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,
				0x69, 0x7a, 0x65, 0x3a, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
				0x20, 0x66, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73,
				0x72, 0x63, 0x3d, 0x22, 0x2f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x28, 0x29, 0x20, 0x7b, 0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69,
				0x6c, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
				0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x22,
				0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
				0x72, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x70,
				0x75, 0x6c, 0x61, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
				0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x3a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70,
				0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69,
				0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20,
				0x73, 0x72, 0x63, 0x3d, 0x22, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,
				0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
				0x61, 0x74, 0x65, 0x6c, 0x79, 0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65,
				0x6e, 0x74, 0x61, 0x72, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
				0x20, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
				0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
				0x61, 0x6e, 0x74, 0x6c, 0x79, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x7c, 0x26,
				0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,
				0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
				0x63, 0x69, 0x6e, 0x67, 0x3d, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6f, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x76, 0x65,
				0x72, 0x73, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
				0x3d, 0x22, 0x6f, 0x67, 0x3a, 0x2f, 0x78, 0x2d, 0x73, 0x68, 0x6f, 0x63, 0x6b,
				0x77, 0x61, 0x76, 0x65, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68, 0x65,
				0x6c, 0x65, 0x73, 0x73, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
				0x61, 0x62, 0x6c, 0x65, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
				0x6f, 0x74, 0x20, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,
				0x61, 0x66, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,
				0x61, 0x6e, 0x63, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
				0x64, 0x20, 0x61, 0x73, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c,
				0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69,
				0x6e, 0x67, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x63, 0x74,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76,
				0x69, 0x64, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
				0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66,
				0x20, 0x76, 0x69, 0x65, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x73, 0x65, 0x78, 0x75,
				0x61, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
				0x63, 0x65, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
				0x75, 0x72, 0x65, 0x72, 0x73, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79,
				0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
				0x63, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
				0x6e, 0x64, 0x3a, 0x20, 0x23, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
				0x69, 0x63, 0x61, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x3d, 0x22, 0x30, 0x22, 0x3e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
				0x64, 0x65, 0x72, 0x65, 0x64, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,
				0x6c, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x6f, 0x2d, 0x45, 0x75, 0x72,
				0x6f, 0x70, 0x65, 0x61, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
				0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
				0x74, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65,
				0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b,
				0x20, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73,
				0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
				0x69, 0x63, 0x69, 0x61, 0x6e, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
				0x6e, 0x64, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
				0x6e, 0x64, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
				0x3d, 0x22, 0x30, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
				0x67, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
				0x6c, 0x61, 0x73, 0x73, 0x28, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,
				0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
				0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73,
				0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
				0x76, 0x65, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x66, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x77, 0x68, 0x69, 0x63, 0x68, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73,
				0x20, 0x61, 0x6c, 0x73, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
				0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64,
				0x61, 0x73, 0x68, 0x3b, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
				0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
				0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
				0x20, 0x68, 0x61, 0x76, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,
				0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
				0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x69,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x69, 0x6e,
				0x63, 0x6c, 0x75, 0x64, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65,
				0x73, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
				0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26,
				0x71, 0x75, 0x6f, 0x74, 0x3b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
				0x74, 0x69, 0x6d, 0x65, 0x73, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
				0x74, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
				0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
				0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
				0x69, 0x74, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
				0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d,
				0x70, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6a,
				0x71, 0x75, 0x65, 0x72, 0x79, 0x74, 0x77, 0x6f, 0x20, 0x64, 0x69, 0x66, 0x66,
				0x65, 0x72, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
				0x68, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
				0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
				0x65, 0x20, 0x66, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61, 0x6e,
				0x67, 0x65, 0x20, 0x6f, 0x66, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
				0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x61, 0x6c, 0x69, 0x74, 0x79, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70,
				0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64,
				0x61, 0x73, 0x68, 0x3b, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72,
				0x61, 0x63, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,
				0x74, 0x6f, 0x20, 0x62, 0x65, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
				0x6c, 0x65, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
				0x61, 0x6e, 0x74, 0x6c, 0x79, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f,
				0x76, 0x65, 0x72, 0x3d, 0x22, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x3d, 0x20,
				0x74, 0x72, 0x75, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x65, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f,
				0x20, 0x68, 0x61, 0x76, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
				0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,
				0x63, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65,
				0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74,
				0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f,
				0x73, 0x70, 0x61, 0x6e, 0x3e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,
				0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x74,
				0x74, 0x65, 0x6d, 0x70, 0x74, 0x67, 0x72, 0x65, 0x61, 0x74, 0x20, 0x64, 0x65,
				0x61, 0x6c, 0x20, 0x6f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
				0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
				0x75, 0x6c, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c,
				0x79, 0x20, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
				0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
				0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
				0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
				0x69, 0x74, 0x20, 0x69, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
				0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
				0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x79, 0x20, 0x72, 0x65, 0x66, 0x65,
				0x72, 0x20, 0x74, 0x6f, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,
				0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
				0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75,
				0x6c, 0x64, 0x20, 0x62, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x20,
				0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
				0x65, 0x64, 0x20, 0x61, 0x73, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x28, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
				0x6c, 0x61, 0x72, 0x6c, 0x79, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c,
				0x65, 0x66, 0x74, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d,
				0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x62, 0x61, 0x73, 0x69, 0x73, 0x20, 0x66, 0x6f,
				0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
				0x74, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x64, 0x75, 0x63,
				0x65, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65,
				0x6f, 0x75, 0x74, 0x3d, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x73, 0x74,
				0x61, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
				0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
				0x6e, 0x69, 0x74, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x6d, 0x20, 0x64, 0x69, 0x72,
				0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e,
				0x64, 0x74, 0x64, 0x22, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,
				0x20, 0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
				0x20, 0x74, 0x68, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x69,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
				0x6f, 0x74, 0x68, 0x65, 0x72, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x20, 0x61, 0x72, 0x65, 0x75, 0x6e, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
				0x65, 0x6e, 0x74, 0x65, 0x64, 0x69, 0x73, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c,
				0x61, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
				0x6c, 0x79, 0x20, 0x69, 0x6e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20,
				0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x09, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x69,
				0x63, 0x61, 0x6c, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
				0x6c, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,
				0x65, 0x73, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
				0x68, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
				0x79, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
				0x6c, 0x20, 0x61, 0x6e, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e,
				0x62, 0x73, 0x70, 0x3b, 0x3c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
				0x65, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65,
				0x20, 0x79, 0x65, 0x61, 0x72, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
				0x6e, 0x74, 0x20, 0x6f, 0x66, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x74,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
				0x79, 0x65, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
				0x6e, 0x74, 0x20, 0x74, 0x6f, 0x09, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
				0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x65, 0x72, 0x73, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x20,
				0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x69, 0x6e, 0x75, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
				0x65, 0x64, 0x20, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75,
				0x6e, 0x74, 0x20, 0x6f, 0x66, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3d, 0x22, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
				0x6e, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
				0x74, 0x69, 0x61, 0x74, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
				0x61, 0x62, 0x6f, 0x75, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c,
				0x65, 0x66, 0x74, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
				0x63, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
				0x6f, 0x66, 0x20, 0x61, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x73, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x61, 0x73, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x70, 0x61,
				0x72, 0x74, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
				0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x2d, 0x63,
				0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
				0x63, 0x61, 0x73, 0x65, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6f,
				0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x20, 0x62, 0x65, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
				0x20, 0x74, 0x68, 0x69, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
				0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61,
				0x69, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,
				0x61, 0x72, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74,
				0x68, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3d, 0x22, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x61,
				0x6c, 0x77, 0x61, 0x79, 0x73, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
				0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
				0x68, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
				0x20, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
				0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
				0x49, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75,
				0x6c, 0x74, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,
				0x22, 0x22, 0x20, 0x2f, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x73, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,
				0x79, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
				0x6e, 0x69, 0x74, 0x65, 0x64, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x22, 0x6d, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x74,
				0x72, 0x61, 0x63, 0x65, 0x64, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6f,
				0x6e, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75,
				0x65, 0x6e, 0x74, 0x6c, 0x79, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x69,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69,
				0x63, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
				0x6e, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,
				0x6d, 0x69, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69,
				0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
				0x6e, 0x74, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74,
				0x6f, 0x72, 0x69, 0x65, 0x73, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68,
				0x65, 0x74, 0x68, 0x65, 0x72, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f,
				0x72, 0x20, 0x69, 0x74, 0x73, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x69, 0x74,
				0x69, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
				0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
				0x61, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e,
				0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73,
				0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
				0x65, 0x64, 0x20, 0x61, 0x73, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f,
				0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
				0x6e, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
				0x75, 0x63, 0x74, 0x65, 0x64, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20,
				0x73, 0x74, 0x61, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
				0x63, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x61,
				0x64, 0x75, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,
				0x65, 0x20, 0x74, 0x77, 0x6f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
				0x72, 0x69, 0x62, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,
				0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68,
				0x65, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e,
				0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
				0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x63,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
				0x76, 0x65, 0x6c, 0x79, 0x2c, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69,
				0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,
				0x72, 0x74, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
				0x74, 0x75, 0x72, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x62, 0x6c,
				0x69, 0x73, 0x68, 0x65, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72,
				0x74, 0x62, 0x65, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
				0x73, 0x74, 0x61, 0x6e, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73,
				0x74, 0x61, 0x74, 0x65, 0x73, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
				0x65, 0x6e, 0x74, 0x61, 0x6c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61,
				0x6c, 0x66, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
				0x73, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
				0x74, 0x75, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
				0x64, 0x65, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
				0x72, 0x69, 0x7a, 0x65, 0x64, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74,
				0x65, 0x72, 0x76, 0x61, 0x6c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
				0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63,
				0x65, 0x65, 0x64, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,
				0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71,
				0x75, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,
				0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,
				0x6c, 0x75, 0x64, 0x65, 0x64, 0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x6f, 0x66,
				0x74, 0x77, 0x61, 0x72, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74,
				0x72, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f,
				0x6d, 0x20, 0x74, 0x68, 0x65, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
				0x20, 0x74, 0x68, 0x65, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
				0x20, 0x62, 0x79, 0x20, 0x61, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x6f, 0x77,
				0x65, 0x72, 0x66, 0x75, 0x6c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,
				0x20, 0x69, 0x6e, 0x20, 0x61, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
				0x74, 0x79, 0x20, 0x6f, 0x66, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
				0x20, 0x6d, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73,
				0x69, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
				0x20, 0x73, 0x6f, 0x6d, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67,
				0x68, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x65, 0x6e, 0x64, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
				0x75, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6f,
				0x72, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,
				0x6c, 0x75, 0x64, 0x65, 0x73, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74,
				0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20,
				0x41, 0x4c, 0x54, 0x45, 0x52, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
				0x72, 0x65, 0x66, 0x65, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x3f,
				0x73, 0x6f, 0x72, 0x74, 0x3d, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x64,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
				0x73, 0x20, 0x66, 0x6f, 0x72, 0x68, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,
				0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
				0x75, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
				0x69, 0x76, 0x65, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,
				0x74, 0x68, 0x6f, 0x73, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
				0x6c, 0x74, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x73,
				0x73, 0x69, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20,
				0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66,
				0x72, 0x69, 0x63, 0x61, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x73, 0x61, 0x6d, 0x65, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
				0x65, 0x6e, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
				0x20, 0x63, 0x61, 0x73, 0x65, 0x3b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61,
				0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
				0x65, 0x20, 0x61, 0x6e, 0x64, 0x3b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
				0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,
				0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d,
				0x61, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20, 0x4d,
				0x65, 0x6c, 0x61, 0x79, 0x75, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x62, 0x6f,
				0x6b, 0x6d, 0xc3, 0xa5, 0x6c, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x6e, 0x79,
				0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc5, 0xa1,
				0xc4, 0x8d, 0x69, 0x6e, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
				0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69,
				0x67, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
				0x4e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x64, 0x6d, 0x69, 0x6e,
				0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x75,
				0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x74, 0x72, 0x61,
				0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
				0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d,
				0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a,
				0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
				0x79, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e,
				0x0a, 0x3c, 0x2f, 0x3e, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d,
				0x65, 0x3d, 0x22, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
				0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
				0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,
				0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3d, 0x68, 0x74, 0x74, 0x70,
				0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x3c, 0x66, 0x6f, 0x72,
				0x6d, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x6d, 0x65, 0x74,
				0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x2f, 0x66,
				0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x7d,
				0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
				0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
				0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79,
				0x28, 0x29, 0x3b, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d,
				0x2d, 0x3e, 0x0d, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x62,
				0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e,
				0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,
				0x3b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x2f, 0x66, 0x61, 0x76, 0x69, 0x63,
				0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x3e, 0x3d, 0x27, 0x73, 0x74, 0x79,
				0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x27, 0x20, 0x69, 0x64, 0x65, 0x6e,
				0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x66,
				0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x3c, 0x6c,
				0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61,
				0x6e, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
				0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f,
				0x66, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
				0x74, 0x22, 0x20, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x28, 0x29, 0x20, 0x7b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
				0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73,
				0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x41, 0x63, 0x63,
				0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x69, 0x64,
				0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6c,
				0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x64,
				0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x64, 0x79, 0x2e,
				0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,
				0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x3d, 0x22, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x2d, 0x2d, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69,
				0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69,
				0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
				0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x3c,
				0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x68,
				0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x6d,
				0x6f, 0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x3d, 0x22, 0x74, 0x68, 0x65,
				0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x72,
				0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
				0x61, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
				0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
				0x64, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
				0x69, 0x76, 0x65, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
				0x65, 0x72, 0x65, 0x64, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,
				0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20,
				0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
				0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
				0x74, 0x72, 0x61, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x63,
				0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74,
				0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73,
				0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
				0x3a, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20,
				0x7b, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x64, 0x74, 0x64,
				0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
				0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61,
				0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x73, 0x29, 0x3b,
				0x20, 0x6a, 0x73, 0x2e, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x64, 0x22, 0x20,
				0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x72,
				0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69,
				0x63, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
				0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,
				0x68, 0x3d, 0x22, 0x31, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
				0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
				0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x61, 0x65, 0x6f,
				0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x20,
				0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
				0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63, 0x6f, 0x6d, 0x62,
				0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61,
				0x72, 0x67, 0x69, 0x6e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x72,
				0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x77,
				0x2e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28,
				0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
				0x3e, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
				0x2f, 0x61, 0x49, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,
				0x61, 0x72, 0x2c, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65,
				0x66, 0x74, 0x22, 0x20, 0x43, 0x7a, 0x65, 0x63, 0x68, 0x20, 0x52, 0x65, 0x70,
				0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b,
				0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
				0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
				0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
				0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x66, 0x75, 0x6e,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x29, 0x20, 0x7b, 0x63, 0x6f, 0x6d,
				0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70,
				0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c,
				0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
				0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
				0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x27, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a,
				0x3c, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x74, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
				0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x28, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b,
				0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x09, 0x3c, 0x6c, 0x69, 0x3e, 0x3c,
				0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
				0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x65, 0x70, 0x61,
				0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x72, 0x65, 0x66,
				0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x76,
				0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x66,
				0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
				0x20, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x6f, 0x78, 0x69,
				0x64, 0x65, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61,
				0x72, 0x63, 0x68, 0x2d, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
				0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
				0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
				0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,
				0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x54, 0x69, 0xe1, 0xba,
				0xbf, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x63, 0x68, 0x61,
				0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30,
				0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,
				0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x3c, 0x77, 0x61, 0x73, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
				0x65, 0x64, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
				0x74, 0x22, 0x20, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
				0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x63, 0x63, 0x6c, 0x65, 0x73, 0x69, 0x61,
				0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68,
				0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
				0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
				0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x61, 0x73, 0x20,
				0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65,
				0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e,
				0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x61,
				0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,
				0x69, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
				0x65, 0x64, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65,
				0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
				0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65,
				0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x65, 0x6d, 0x62,
				0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x64,
				0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x74, 0x72,
				0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69,
				0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
				0x2f, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e,
				0x6f, 0x74, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61,
				0x6c, 0x73, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
				0x6d, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x6e,
				0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61,
				0x72, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69,
				0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x20, 0x48, 0x6f,
				0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64,
				0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62,
				0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73,
				0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68,
				0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x3d, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f,
				0x73, 0x74, 0x22, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,
				0x69, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65,
				0x6c, 0x79, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
				0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c,
				0x73, 0x6f, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73,
				0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
				0x6e, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x67,
				0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x6d, 0x61, 0x6e,
				0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f,
				0x72, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x65,
				0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,
				0x73, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x0d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f,
				0x70, 0x22, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x74,
				0x73, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x20, 0x79, 0x65, 0x61, 0x72, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e,
				0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
				0x76, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65,
				0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75,
				0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x67, 0x6f, 0x76,
				0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x20,
				0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74,
				0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x6f,
				0x72, 0x3a, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68,
				0x65, 0x72, 0x65, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
				0x20, 0x66, 0x6f, 0x72, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
				0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
				0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
				0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x63,
				0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x20, 0x3c,
				0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x45, 0x6e,
				0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61,
				0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74,
				0x3a, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
				0x6f, 0x66, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
				0x77, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,
				0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
				0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
				0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x3c, 0x73, 0x70, 0x61, 0x6e,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x65, 0x73, 0x63, 0x65,
				0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61,
				0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x20, 0x61, 0x6c,
				0x69, 0x67, 0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3c, 0x2f,
				0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61,
				0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x68, 0x61, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x65,
				0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x55, 0x6e, 0x69,
				0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x63, 0x65, 0x6e, 0x74,
				0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69,
				0x63, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,
				0x69, 0x64, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20,
				0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
				0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x66, 0x6f, 0x6e, 0x74, 0x2d,
				0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70, 0x78, 0x65, 0x78, 0x70, 0x6c,
				0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
				0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x77, 0x72,
				0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x09,
				0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
				0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,
				0x74, 0x6f, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
				0x6e, 0x64, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x61, 0x69, 0x6e, 0x73, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20,
				0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x69,
				0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70,
				0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69, 0x6e,
				0x70, 0x75, 0x74, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73,
				0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x28,
				0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x28, 0x29,
				0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,
				0x74, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f,
				0x70, 0x6c, 0x65, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
				0x73, 0x68, 0x65, 0x64, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,
				0x68, 0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69,
				0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x77, 0x68, 0x69, 0x63, 0x68,
				0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x77, 0x68, 0x69, 0x63,
				0x68, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x73,
				0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68,
				0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
				0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
				0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f,
				0x66, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x75, 0x73,
				0x65, 0x64, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x68,
				0x61, 0x76, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
				0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
				0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x61, 0x73, 0x20, 0x66,
				0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x74, 0x65,
				0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64,
				0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x61,
				0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0d,
				0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,
				0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x78, 0x4d, 0x4c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
				0x65, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71,
				0x75, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x6c, 0x61,
				0x72, 0x67, 0x65, 0x73, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6d, 0x70,
				0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
				0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63,
				0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72, 0x65,
				0x69, 0x67, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65,
				0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x65, 0x73,
				0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69,
				0x73, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
				0x6f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66,
				0x74, 0x65, 0x72, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
				0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x66,
				0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
				0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
				0x20, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x72,
				0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x3c, 0x73, 0x70,
				0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x70, 0x65,
				0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x28,
				0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0d,
				0x69, 0x66, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69,
				0x66, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
				0x77, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4e, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
				0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
				0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,
				0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x41, 0x73, 0x73, 0x6f, 0x63,
				0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x68,
				0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x6c, 0x6f, 0x63,
				0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73,
				0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x28,
				0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
				0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
				0x61, 0x6c, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
				0x6f, 0x73, 0x74, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f,
				0x74, 0x68, 0x65, 0x72, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
				0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
				0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x72,
				0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x61, 0x62,
				0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x6c, 0x6f,
				0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x7d, 0x0a, 0x2e, 0x0a, 0x3c, 0x73, 0x70,
				0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65,
				0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x65,
				0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x3e,
				0x0d, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
				0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
				0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
				0x65, 0x64, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74,
				0x68, 0x3d, 0x22, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69,
				0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x20,
				0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x21,
				0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x69,
				0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68,
				0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
				0x6f, 0x66, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
				0x73, 0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
				0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76,
				0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75,
				0x67, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x68, 0x69, 0x73, 0x74, 0x68, 0x65, 0x20,
				0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x6f, 0x6d,
				0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70,
				0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73,
				0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x6c, 0x79, 0x20,
				0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x0d,
				0x0a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
				0x6c, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
				0x74, 0x68, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
				0x75, 0x73, 0x65, 0x64, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c,
				0x79, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,
				0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x65, 0x73, 0x73, 0x65,
				0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x69, 0x73, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x68, 0x61, 0x76, 0x65,
				0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x22, 0x20, 0x73,
				0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e,
				0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x73,
				0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66,
				0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,
				0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20,
				0x6f, 0x66, 0x49, 0x49, 0x2c, 0x20, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f,
				0x6d, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x69,
				0x72, 0x20, 0x6f, 0x77, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
				0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64,
				0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x20, 0x6f,
				0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x20, 0x65,
				0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x67, 0x72,
				0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f,
				0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61,
				0x72, 0x65, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79,
				0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
				0x6e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74,
				0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69,
				0x6e, 0x20, 0x61, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,
				0x2f, 0x75, 0x6c, 0x3e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66,
				0x6f, 0x6f, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x73, 0x70, 0x65,
				0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x62,
				0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
				0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68,
				0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,
				0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6e,
				0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61,
				0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x62, 0x79, 0x48,
				0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
				0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f,
				0x66, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x74, 0x6f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
				0x6c, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,
				0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61,
				0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x48, 0x69, 0x73,
				0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
				0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x66, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x6f, 0x20, 0x73,
				0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x67,
				0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
				0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
				0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68,
				0x69, 0x73, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
				0x69, 0x74, 0x68, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
				0x73, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
				0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x09, 0x09, 0x3c, 0x64, 0x69,
				0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20,
				0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x72, 0x65, 0x70,
				0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6d, 0x61,
				0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x65,
				0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
				0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65,
				0x6e, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x22, 0x63, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65, 0x61,
				0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
				0x6c, 0x61, 0x72, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
				0x20, 0x69, 0x6e, 0x74, 0x6f, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
				0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x72, 0x70, 0x73, 0x6b, 0x6f,
				0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x74, 0x69, 0xe1, 0xba, 0xbf,
				0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0xd0, 0xa0, 0xd1, 0x83,
				0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x80, 0xd1,
				0x83, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x69, 0x6e,
				0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,
				0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
				0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd0,
				0xb5, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,
				0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
				0x8b, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2,
				0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
				0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
				0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb,
				0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb2, 0xd1, 0x80, 0xd0,
				0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe,
				0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x8f, 0xd1, 0x81, 0xd0,
				0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x81,
				0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,
				0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8,
				0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,
				0x8b, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81,
				0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0,
				0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1,
				0x89, 0xd1, 0x8c, 0xd1, 0x8e, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,
				0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe,
				0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x87, 0xd0,
				0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5,
				0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0x93, 0xd0,
				0xbb, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xb8,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1,
				0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb0,
				0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
				0x8f, 0xd0, 0xa1, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82,
				0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x83,
				0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
				0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0,
				0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
				0xb5, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88,
				0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd1,
				0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x80,
				0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0,
				0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xa0,
				0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x89,
				0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
				0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb6, 0xd9, 0x88,
				0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9,
				0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,
				0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8,
				0xa7, 0xd8, 0xa6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1,
				0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
				0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,
				0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xaa, 0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xa7, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9,
				0x84, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa6, 0xd8, 0xac, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x82, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,
				0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb6, 0xd8, 0xba, 0xd8, 0xb7, 0xd8, 0xa7,
				0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xaf, 0xd9,
				0x8a, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xad,
				0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,
				0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb9,
				0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
				0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
				0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xa3, 0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
				0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb7, 0xd8, 0xb1,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xaa, 0xd9, 0x85, 0xd8,
				0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88,
				0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
				0xad, 0xd8, 0xa9, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,
				0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,
				0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd9, 0x88,
				0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
				0xaf, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
				0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x85, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xa7, 0xd8, 0xba, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0x63, 0x75, 0x72,
				0x73, 0x6f, 0x72, 0x3a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x3c,
				0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61,
				0x20, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
				0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
				0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
				0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x2f, 0x61,
				0x3e, 0x20, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
				0x3c, 0x21, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68, 0x74, 0x6d,
				0x6c, 0x3e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65,
				0x65, 0x6e, 0x22, 0x20, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
				0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
				0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x68, 0x61,
				0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
				0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22,
				0x20, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,
				0x6c, 0x3e, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69,
				0x63, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
				0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
				0x67, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x72, 0x65, 0x70, 0x72,
				0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x73, 0x75,
				0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22,
				0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
				0x22, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6f, 0x75, 0x74, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66,
				0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76,
				0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
				0x74, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x6e, 0x65,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,
				0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e,
				0x3c, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
				0x68, 0x65, 0x64, 0x29, 0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,
				0x61, 0x6c, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x29, 0x2e, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x65, 0x63, 0x61,
				0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f,
				0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
				0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
				0x22, 0x2f, 0x7d, 0x62, 0x6f, 0x64, 0x79, 0x7b, 0x6d, 0x61, 0x72, 0x67, 0x69,
				0x6e, 0x3a, 0x30, 0x3b, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
				0x64, 0x69, 0x61, 0x20, 0x6f, 0x66, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x2e, 0x63, 0x72, 0x65, 0x61,
				0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x6e, 0x61, 0x6d,
				0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
				0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x20, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
				0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
				0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x72, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73,
				0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
				0x72, 0x69, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
				0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x49, 0x6e, 0x20, 0x6f, 0x74,
				0x68, 0x65, 0x72, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x64, 0x69, 0x73,
				0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x63,
				0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
				0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20,
				0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x63,
				0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0d, 0x0a, 0x09, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
				0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
				0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
				0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x2e, 0x6a, 0x73,
				0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x20,
				0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
				0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62,
				0x65, 0x65, 0x6e, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c, 0x61, 0x6e,
				0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
				0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x73,
				0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f,
				0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c,
				0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
				0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,
				0x79, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22,
				0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
				0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,
				0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x4f, 0x72, 0x74,
				0x68, 0x6f, 0x64, 0x6f, 0x78, 0x20, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x73,
				0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c,
				0x3d, 0x22, 0x73, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x68, 0x69,
				0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a,
				0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x6f, 0x74, 0x68, 0x65,
				0x72, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x63, 0x6f,
				0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
				0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,
				0x61, 0x6e, 0x64, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,
				0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
				0x75, 0x6e, 0x64, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x61, 0x72, 0x67, 0x75, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x72,
				0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22, 0x20, 0x69,
				0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
				0x65, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63,
				0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
				0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
				0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x65, 0x76, 0x65,
				0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72,
				0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64,
				0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x6f, 0x66, 0x76, 0x65, 0x72, 0x79, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
				0x72, 0x20, 0x74, 0x6f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x61, 0x6c, 0x69, 0x67, 0x6e,
				0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x77, 0x6f, 0x75,
				0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69,
				0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x3d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
				0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
				0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x64,
				0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61,
				0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
				0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x74, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77,
				0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
				0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
				0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x73,
				0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x69,
				0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
				0x64, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x61,
				0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
				0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20,
				0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,
				0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
				0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
				0x6f, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73,
				0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63,
				0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,
				0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x20, 0x63, 0x6f, 0x6d,
				0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x48, 0x69, 0x73,
				0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,
				0x65, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,
				0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x55, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
				0x64, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x09, 0x3c, 0x64, 0x69,
				0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x73,
				0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74,
				0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
				0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20, 0x74,
				0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
				0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x62, 0x6c,
				0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x66, 0x75, 0x6e,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x49,
				0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
				0x74, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29,
				0x7b, 0x76, 0x61, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
				0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72,
				0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f,
				0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e,
				0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74,
				0x22, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
				0x64, 0x20, 0x62, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64, 0x61, 0x73,
				0x68, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
				0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6a, 0x73, 0x22, 0x3e, 0x3c,
				0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x75, 0x6c, 0x3e,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61,
				0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x61, 0x74,
				0x68, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74,
				0x20, 0x74, 0x6f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
				0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
				0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
				0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x20, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x69, 0x73,
				0x20, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,
				0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd,
				0x93, 0x29, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x69, 0x6c,
				0x69, 0x64, 0x61, 0x64, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
				0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
				0x63, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x72, 0x65,
				0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x65, 0xe0, 0xa4, 0x89,
				0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
				0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
				0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
				0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
				0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0,
				0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0,
				0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb9,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0,
				0xa5, 0x83, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,
				0xac, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xaa, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
				0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
				0x8c, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4,
				0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xa6, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9b,
				0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0xb6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x89,
				0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
				0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4,
				0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xab, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
				0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf,
				0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9b, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x9b, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
				0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97,
				0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x8f, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
				0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x98,
				0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae,
				0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa6, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
				0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa,
				0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb7, 0xe0,
				0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
				0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4,
				0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb5,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0,
				0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xa4, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0,
				0xa5, 0x87, 0x72, 0x73, 0x73, 0x2b, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69,
				0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,
				0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65,
				0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d,
				0x65, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d,
				0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
				0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x76, 0x65, 0x72,
				0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74,
				0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a,
				0x73, 0x22, 0x3e, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
				0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x7d, 0x29, 0x28, 0x29,
				0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,
				0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x29, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
				0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d,
				0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73,
				0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,
				0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
				0x70, 0x73, 0x65, 0x3a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
				0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x42, 0x61, 0x68, 0x61, 0x73, 0x61,
				0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x45, 0x6e, 0x67,
				0x6c, 0x69, 0x73, 0x68, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
				0x3c, 0x74, 0x65, 0x78, 0x74, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x73, 0x70, 0x61,
				0x63, 0x65, 0x3d, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64,
				0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,
				0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x6f, 0x76, 0x65, 0x72,
				0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x69,
				0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
				0x2f, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
				0x74, 0x65, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
				0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x2e, 0x6a, 0x73, 0x22,
				0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f, 0x66,
				0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f,
				0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79,
				0x73, 0x74, 0x65, 0x6d, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
				0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x53, 0x74, 0x61,
				0x74, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
				0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x6c, 0x65,
				0x66, 0x74, 0x3b, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
				0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
				0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x6f, 0x75,
				0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x29,
				0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d,
				0x0a, 0x3c, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,
				0x69, 0x67, 0x68, 0x74, 0x3a, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
				0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20,
				0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e,
				0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
				0x6c, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
				0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
				0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65,
				0x3b, 0x22, 0x3e, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b,
				0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x0a, 0x20, 0x20, 0x28, 0x66, 0x75, 0x6e,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x68, 0x65, 0x20,
				0x31, 0x35, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x2e,
				0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
				0x74, 0x28, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
				0x72, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e,
				0x65, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6a, 0x70, 0x67, 0x7c,
				0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x6c, 0x65, 0x66, 0x74, 0x7c, 0x76, 0x61,
				0x73, 0x74, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f,
				0x66, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63,
				0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
				0x73, 0x69, 0x74, 0x79, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x64, 0x6f, 0x6d,
				0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
				0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
				0x57, 0x61, 0x72, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x68, 0x65, 0x20,
				0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
				0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c,
				0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x73, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x68, 0x65,
				0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20,
				0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
				0x66, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
				0x3a, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x73,
				0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
				0x65, 0x72, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x6f, 0x72,
				0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,
				0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
				0x20, 0x6f, 0x66, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63,
				0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x46, 0x6f, 0x72, 0x20,
				0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2c, 0x2e,
				0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
				0x0a, 0x09, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,
				0x73, 0x29, 0x5b, 0x30, 0x5d, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
				0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x6c, 0x69,
				0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x69, 0x63, 0x6f, 0x6e, 0x22,
				0x20, 0x27, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x27, 0x27, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x27, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
				0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x61,
				0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x2f, 0x70, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x70, 0x61, 0x67,
				0x65, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x62, 0x61, 0x68, 0x61,
				0x73, 0x61, 0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x65,
				0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x73, 0x69, 0x6d, 0x70, 0x6c,
				0x65, 0x29, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce, 0xb7, 0xce, 0xbd, 0xce,
				0xb9, 0xce, 0xba, 0xce, 0xac, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb0,
				0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x8f,
				0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1,
				0x8f, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8,
				0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
				0xb2, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7,
				0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0,
				0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82,
				0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
				0x82, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8,
				0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
				0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbe,
				0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1,
				0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86,
				0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
				0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe,
				0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0xbf,
				0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1,
				0x8c, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x8e, 0xd1, 0x82,
				0xd1, 0x81, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0,
				0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc,
				0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0,
				0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,
				0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
				0xb2, 0xd0, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,
				0xd8, 0xb6, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,
				0xa6, 0xd9, 0x8a, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
				0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd9, 0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,
				0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
				0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83,
				0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
				0xb3, 0xd8, 0xb9, 0xd9, 0x88, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
				0xd8, 0xad, 0xd8, 0xb5, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
				0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
				0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8,
				0xaa, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
				0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
				0x85, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,
				0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8,
				0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0x72, 0x6f, 0x62, 0x6f,
				0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74,
				0x65, 0x72, 0x22, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65,
				0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20,
				0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x2e,
				0x6a, 0x70, 0x67, 0x7c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x7c, 0x74, 0x68, 0x75,
				0x6d, 0x62, 0x7c, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x66, 0x72,
				0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
				0x20, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
				0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x66, 0x6f, 0x6e,
				0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,
				0x3b, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x26,
				0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x67,
				0x69, 0x6e, 0x3a, 0x30, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a,
				0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c,
				0x6f, 0x77, 0x22, 0x20, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x65, 0x6e, 0x74,
				0x69, 0x65, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x65,
				0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x70,
				0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x45,
				0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e,
				0x63, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0d, 0x0a, 0x69, 0x6e,
				0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
				0x75, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65,
				0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x61, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
				0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x63, 0x6f, 0x6e,
				0x74, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x65, 0x72, 0x69,
				0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
				0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x0a, 0x3c, 0x2f, 0x62, 0x6f,
				0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x73,
				0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
				0x7a, 0x65, 0x3a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x6c, 0x61, 0x6e,
				0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x41, 0x72, 0x69, 0x61, 0x6c, 0x2c,
				0x20, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2c, 0x3c, 0x2f,
				0x61, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x73,
				0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
				0x61, 0x6c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x74, 0x64, 0x3e,
				0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
				0x3c, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
				0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
				0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x6c, 0x3d,
				0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,
				0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74,
				0x65, 0x28, 0x27, 0x3c, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
				0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
				0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
				0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
				0x74, 0x68, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
				0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,
				0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x20, 0x74,
				0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
				0x22, 0x3e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41,
				0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x77, 0x77, 0x77, 0x2e, 0x6d, 0x61, 0x6e,
				0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f,
				0x66, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,
				0x65, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x6d,
				0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x72, 0x63,
				0x68, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x6f,
				0x66, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x43, 0x61, 0x72, 0x6f, 0x6c,
				0x69, 0x6e, 0x61, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c,
				0x6f, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76,
				0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x64, 0x69,
				0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
				0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6b, 0x6e,
				0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
				0x63, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x64, 0x65, 0x63,
				0x6c, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
				0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x62,
				0x79, 0x20, 0x74, 0x68, 0x65, 0x42, 0x65, 0x6e, 0x6a, 0x61, 0x6d, 0x69, 0x6e,
				0x20, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x6e, 0x72, 0x6f, 0x6c, 0x65,
				0x2d, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65,
				0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
				0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72,
				0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f,
				0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50,
				0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x47, 0x75, 0x74, 0x65, 0x6e, 0x62,
				0x65, 0x72, 0x67, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65,
				0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,
				0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
				0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65,
				0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e,
				0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
				0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x69, 0x6d, 0x67,
				0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f,
				0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79,
				0x20, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x20, 0x72,
				0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73,
				0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63,
				0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
				0x72, 0x65, 0x64, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x65,
				0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74,
				0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69,
				0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,
				0x67, 0x6f, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
				0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce,
				0xb7, 0xce, 0xbd, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xac, 0x0a, 0x74, 0x61, 0x6b,
				0x65, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f,
				0x66, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x69, 0x63, 0x72,
				0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
				0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x65, 0x6e,
				0x74, 0x75, 0x72, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x64, 0x69, 0x76, 0x20, 0x63,
				0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
				0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
				0x74, 0x68, 0x65, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x78,
				0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65,
				0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
				0x6e, 0x74, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
				0x67, 0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x73, 0x6f,
				0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
				0x65, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
				0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x6c, 0x64, 0x20,
				0x54, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x66, 0x72, 0x69,
				0x63, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73,
				0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,
				0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f,
				0x70, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6d,
				0x61, 0x6b, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
				0x62, 0x6c, 0x65, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x67, 0x75, 0x61, 0x62,
				0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
				0x3e, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x3d,
				0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e,
				0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74,
				0x68, 0x20, 0x74, 0x68, 0x65, 0x74, 0x77, 0x6f, 0x2d, 0x74, 0x68, 0x69, 0x72,
				0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x44, 0x75, 0x72, 0x69,
				0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c,
				0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,
				0x72, 0x69, 0x6f, 0x64, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x69,
				0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61,
				0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e,
				0x74, 0x6c, 0x79, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74,
				0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69,
				0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f,
				0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20,
				0x61, 0x73, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61,
				0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6f, 0x63, 0x63,
				0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65,
				0x64, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x62, 0x73,
				0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
				0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x70, 0x6f,
				0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
				0x76, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
				0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6a, 0x61, 0x78, 0x2f, 0x6c,
				0x69, 0x62, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x31, 0x2e,
				0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
				0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70,
				0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x67,
				0x75, 0x61, 0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
				0x3d, 0x22, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d,
				0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
				0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e, 0x65,
				0x28, 0x22, 0x25, 0x33, 0x43, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73,
				0x72, 0x63, 0x3d, 0x27, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,
				0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x4f, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64,
				0x2c, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x72,
				0x69, 0x67, 0x68, 0x74, 0x7c, 0x32, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,
				0x61, 0x74, 0x3a, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68,
				0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
				0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a,
				0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c,
				0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x6e,
				0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c,
				0x64, 0x3b, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
				0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x22,
				0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,
				0x22, 0x30, 0x22, 0x20, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x69, 0x6e, 0x6b,
				0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
				0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x34, 0x2f, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x2e,
				0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
				0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3c, 0x2f,
				0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62,
				0x6c, 0x65, 0x3e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,
				0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x66, 0x6f, 0x72, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,
				0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
				0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x3c, 0x73, 0x70,
				0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e,
				0x74, 0x2d, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74, 0x61, 0x74,
				0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x64,
				0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
				0x70, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x69,
				0x64, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66,
				0x20, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74,
				0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x3c, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
				0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x22, 0x3e,
				0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,
				0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x63, 0x65,
				0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
				0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32,
				0x46, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
				0x61, 0x72, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20,
				0x2f, 0x3e, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
				0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72,
				0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x74,
				0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20,
				0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x78, 0x66, 0x6f,
				0x72, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
				0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f,
				0x72, 0x64, 0x73, 0x22, 0x20, 0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
				0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74, 0x68,
				0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b, 0x69, 0x6e, 0x67,
				0x64, 0x6f, 0x6d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x67, 0x6f,
				0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20,
				0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
				0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,
				0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x64, 0x69,
				0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64,
				0x65, 0x72, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
				0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,
				0x6c, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
				0x72, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
				0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x65, 0x6c, 0x65,
				0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68,
				0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79,
				0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x65, 0x73,
				0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x63,
				0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76,
				0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,
				0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,
				0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
				0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x22, 0x20, 0x73,
				0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
				0x77, 0x2e, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
				0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x63, 0x6f,
				0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
				0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
				0x77, 0x22, 0x20, 0x74, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f, 0x6d, 0x61,
				0x6e, 0x20, 0x45, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x61, 0x6c, 0x6d, 0x6f,
				0x73, 0x74, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c,
				0x79, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
				0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,
				0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x63, 0x75,
				0x6c, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x43, 0x49, 0x41, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
				0x46, 0x61, 0x63, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x65, 0x20, 0x6d,
				0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
				0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
				0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x3c, 0x6c, 0x69,
				0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
				0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,
				0x63, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
				0x6c, 0x79, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x73,
				0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
				0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
				0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
				0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72,
				0x65, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
				0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x41, 0x6e, 0x20, 0x49, 0x6e, 0x74, 0x72,
				0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
				0x74, 0x68, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65,
				0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
				0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x70, 0x65,
				0x6f, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x69,
				0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x66,
				0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x68, 0x61,
				0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
				0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64,
				0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74,
				0x68, 0x72, 0x65, 0x65, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x20,
				0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x69, 0x73, 0x20, 0x72,
				0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f,
				0x72, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
				0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
				0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x69,
				0x64, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64,
				0x20, 0x61, 0x73, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d,
				0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64,
				0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
				0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x52, 0x65, 0x70,
				0x75, 0x62, 0x6c, 0x69, 0x63, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c,
				0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65,
				0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
				0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x61, 0x76,
				0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
				0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
				0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
				0x61, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x73, 0x20, 0x61,
				0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,
				0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75,
				0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,
				0x6e, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x63, 0x6f,
				0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x69,
				0x64, 0x65, 0x6f, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x63, 0x20, 0x6c,
				0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f,
				0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
				0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f,
				0x6d, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,
				0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
				0x77, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76, 0x65,
				0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x20,
				0x6f, 0x66, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65,
				0x61, 0x72, 0x63, 0x68, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x49, 0x6e, 0x20, 0x70,
				0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x20, 0x74, 0x68,
				0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x6f,
				0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65,
				0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x68,
				0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x65,
				0x61, 0x72, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76,
				0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a,
				0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x69, 0x6e, 0x64, 0x65,
				0x78, 0x2e, 0x70, 0x68, 0x70, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61,
				0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x6e,
				0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x3e, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65,
				0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x72, 0x6f,
				0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
				0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d,
				0x74, 0x6f, 0x70, 0x3a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
				0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x61, 0x64,
				0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
				0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
				0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x28, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x48, 0x6f,
				0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x3b,
				0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a,
				0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x67,
				0x61, 0x69, 0x6e, 0x73, 0x74, 0x30, 0x3b, 0x20, 0x76, 0x65, 0x72, 0x74, 0x69,
				0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x55, 0x6e, 0x66,
				0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x20, 0x74,
				0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65,
				0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
				0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66,
				0x69, 0x78, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x09, 0x09, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x0a, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
				0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0xd0, 0x91, 0xd1, 0x8a, 0xd0, 0xbb, 0xd0,
				0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb1,
				0xd1, 0x8a, 0xd0, 0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0,
				0xba, 0xd0, 0xb8, 0xd0, 0xa4, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80,
				0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1,
				0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe,
				0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0,
				0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,
				0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbf, 0xd1,
				0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc,
				0xd1, 0x8b, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
				0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x81,
				0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb0,
				0xd0, 0xbb, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0,
				0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbf, 0xd0, 0xbe,
				0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
				0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87,
				0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
				0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf,
				0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
				0xbc, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1,
				0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f,
				0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
				0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,
				0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb8, 0xd0,
				0xb7, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
				0xd1, 0x8f, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,
				0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0x90, 0xd0, 0xbb, 0xd0, 0xb5,
				0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x80, 0xe0,
				0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaa, 0xe0,
				0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
				0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6,
				0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa1, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4,
				0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9a,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xa6, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x85, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0x91, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8b,
				0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4,
				0xbc, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb6,
				0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0,
				0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa,
				0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaf, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
				0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0,
				0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4,
				0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,
				0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5,
				0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0,
				0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x82, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0,
				0xa4, 0xaa, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xa7, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0,
				0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
				0x89, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80,
				0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa7, 0xe0,
				0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6, 0xe0,
				0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
				0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86,
				0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x8f, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
				0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81,
				0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xac, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
				0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xa5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5,
				0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8,
				0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
				0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x88,
				0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8,
				0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xaf,
				0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,
				0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,
				0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8,
				0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
				0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xb4, 0xd9,
				0x88, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7,
				0xd8, 0xa8, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
				0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xaa,
				0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,
				0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xb1,
				0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,
				0x84, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a,
				0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,
				0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
				0x64, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
				0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78,
				0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67,
				0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x74,
				0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61,
				0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
				0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x74, 0x61,
				0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
				0x6e, 0x67, 0x3d, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
				0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x74, 0x65, 0x78,
				0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, 0x74,
				0x65, 0x72, 0x3b, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x76, 0x65,
				0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x62, 0x61, 0x63, 0x6b,
				0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
				0x20, 0x23, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x2f, 0x64, 0x69, 0x76, 0x3e,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64,
				0x3d, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x23, 0x22, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,
				0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
				0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x2f,
				0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x77, 0x77, 0x77, 0x2e, 0x77, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,
				0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x22, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
				0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x63,
				0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x27,
				0x3c, 0x73, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20,
				0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x73, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
				0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72,
				0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x2e,
				0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
				0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67,
				0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20,
				0x0a, 0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c,
				0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2f,
				0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c,
				0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,
				0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x65, 0x6e,
				0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38,
				0x22, 0x3f, 0x3e, 0x0a, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
				0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x3f, 0x61, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
				0x77, 0x77, 0x2e, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79,
				0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
				0x64, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,
				0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x20,
				0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a,
				0x74, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
				0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
				0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,
				0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x68,
				0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d,
				0x75, 0x74, 0x66, 0x2d, 0x38, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
				0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x74, 0x61,
				0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30,
				0x30, 0x25, 0x22, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
				0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
				0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
				0x73, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x76, 0x65,
				0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72,
				0x74, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74,
				0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61,
				0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x3d, 0x67, 0x62,
				0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f,
				0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,
				0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6d, 0x45,
				0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x20,
				0x6f, 0x66, 0x20, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x64, 0x69,
				0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70,
				0x6c, 0x61, 0x79, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x67, 0x65,
				0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28,
				0x69, 0x64, 0x29, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63,
				0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d,
				0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x29,
				0x3b, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65,
				0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a, 0xd0, 0x91, 0xd1, 0x8a, 0xd0,
				0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8,
				0x0a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
				0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3e, 0x50, 0x72, 0x69, 0x76, 0x61,
				0x63, 0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e,
				0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
				0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
				0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
				0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61,
				0x72, 0x67, 0x69, 0x6e, 0x3a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x3e, 0x3c,
				0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x69, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71,
				0x75, 0x6f, 0x74, 0x3b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72, 0x65, 0x66,
				0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x74,
				0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x70, 0x75,
				0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57,
				0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x20, 0x44, 0x2e,
				0x43, 0x2e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
				0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x61, 0x6d, 0x6f, 0x6e, 0x67,
				0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
				0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
				0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
				0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
				0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x66,
				0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72,
				0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x20,
				0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x69,
				0x73, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
				0x67, 0x20, 0x6f, 0x66, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,
				0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x73, 0x74, 0x79,
				0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x2f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x20, 0x55,
				0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x65, 0x78, 0x70, 0x61,
				0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
				0x64, 0x65, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x66,
				0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x64, 0x69, 0x63,
				0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
				0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
				0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
				0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
				0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62,
				0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
				0x6f, 0x66, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x3e,
				0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74,
				0x61, 0x62, 0x6c, 0x65, 0x3e, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
				0x20, 0x6f, 0x66, 0x20, 0x49, 0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x0a, 0x3c,
				0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
				0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e,
				0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
				0x74, 0x68, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x77,
				0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,
				0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
				0x68, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x72,
				0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6d, 0x70, 0x6c, 0x69,
				0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65,
				0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
				0x6c, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66,
				0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
				0x73, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
				0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x4e,
				0x6f, 0x74, 0x65, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
				0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20,
				0x74, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
				0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,
				0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,
				0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72,
				0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x65,
				0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65,
				0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
				0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x79,
				0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,
				0x72, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,
				0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d,
				0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x70,
				0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x6f, 0x66, 0x20, 0x42, 0x72, 0x69, 0x74,
				0x69, 0x73, 0x68, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x68,
				0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69,
				0x63, 0x69, 0x7a, 0x65, 0x64, 0x28, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75,
				0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
				0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,
				0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x30, 0x22, 0x20,
				0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22,
				0x30, 0x22, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20,
				0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x72, 0x65, 0x64, 0x69,
				0x72, 0x65, 0x63, 0x74, 0x73, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x20, 0x46,
				0x6f, 0x72, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
				0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x25, 0x33, 0x45, 0x25, 0x33,
				0x43, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x25, 0x33, 0x45, 0x22, 0x29,
				0x29, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x3c, 0x6c, 0x69, 0x3e,
				0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
				0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78,
				0x74, 0x2d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
				0x6e, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69,
				0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3c, 0x6d,
				0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69,
				0x76, 0x3d, 0x22, 0x58, 0x2d, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65,
				0x28, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78,
				0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
				0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
				0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76,
				0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
				0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x72, 0x65,
				0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76,
				0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a,
				0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x74, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74,
				0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x68, 0x6f, 0x72, 0x74,
				0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,
				0x66, 0x3d, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73, 0x63,
				0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x3d, 0x2f, 0x61, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20,
				0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
				0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d, 0x43, 0x6f,
				0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e,
				0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20,
				0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x2f, 0x75,
				0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x73, 0x73, 0x6f, 0x63,
				0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
				0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x2f, 0x61, 0x3e,
				0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,
				0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x72,
				0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d,
				0x65, 0x3d, 0x22, 0x71, 0x22, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77,
				0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x62,
				0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73,
				0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65,
				0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
				0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
				0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x36, 0x3e, 0x3c, 0x75, 0x6c,
				0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
				0x22, 0x20, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,
				0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20,
				0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
				0x22, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
				0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x20, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x2f, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
				0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x68, 0x74, 0x6d,
				0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74,
				0x66, 0x2d, 0x38, 0x22, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x74, 0x72, 0x61,
				0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x74, 0x65, 0x0d, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
				0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x3e,
				0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,
				0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c,
				0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e,
				0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69,
				0x6d, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68,
				0x65, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x63,
				0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x20, 0x6d,
				0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
				0x6f, 0x6e, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69,
				0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x21, 0x44, 0x4f,
				0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x3c, 0x68,
				0x74, 0x6d, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,
				0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61,
				0x6d, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
				0x74, 0x3a, 0x76, 0x6f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x22, 0x65, 0x66,
				0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f,
				0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d,
				0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x67,
				0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73,
				0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
				0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
				0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a,
				0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
				0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c,
				0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x6f,
				0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63,
				0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
				0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x64, 0x75, 0x72, 0x69,
				0x6e, 0x67, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
				0x6d, 0x65, 0x2c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
				0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63,
				0x6f, 0x6e, 0x22, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
				0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x69,
				0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x65,
				0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x6d,
				0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
				0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
				0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
				0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c,
				0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,
				0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65,
				0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x20,
				0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69,
				0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x26, 0x61, 0x6d, 0x70,
				0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x62,
				0x73, 0x70, 0x3b, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
				0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x71, 0x75, 0x69,
				0x74, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20,
				0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x69,
				0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
				0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
				0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x63,
				0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
				0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20,
				0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,
				0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x20, 0x76,
				0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
				0x73, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
				0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x28, 0x64, 0x6f, 0x63, 0x75,
				0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
				0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x67,
				0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
				0x70, 0x65, 0x64, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
				0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x20, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
				0x20, 0x2f, 0x3e, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
				0x67, 0x65, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6d, 0x6f,
				0x72, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,
				0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x61,
				0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74,
				0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x74, 0x68,
				0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x70, 0x65, 0x72, 0x70, 0x65, 0x6e, 0x64,
				0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
				0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
				0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
				0x22, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73,
				0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c,
				0x6f, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
				0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x70, 0x72,
				0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e,
				0x6f, 0x6d, 0x69, 0x63, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
				0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72,
				0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
				0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61,
				0x6c, 0x20, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f,
				0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0x20, 0x28, 0x45, 0x75, 0x72,
				0x6f, 0x70, 0x65, 0x75, 0x29, 0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0,
				0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
				0x83, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81,
				0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
				0x81, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9,
				0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
				0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84,
				0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,
				0xb8, 0xd1, 0x83, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb,
				0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
				0xbe, 0xd0, 0xb1, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbc,
				0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
				0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0, 0xbd,
				0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,
				0xb8, 0xd1, 0x8f, 0xd0, 0xa0, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x83,
				0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
				0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,
				0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1,
				0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0xd1, 0x82,
				0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
				0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82,
				0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd8,
				0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xac,
				0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
				0xb4, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,
				0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,
				0xa7, 0xd8, 0xad, 0xd8, 0xa7, 0xd8, 0xaa, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20,
				0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, 0x38,
				0x22, 0x20, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28,
				0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x64, 0x69, 0x73,
				0x70, 0x6c, 0x61, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,
				0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,
				0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f,
				0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x3c, 0x69, 0x6d, 0x67, 0x20,
				0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
				0x77, 0x77, 0x2e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x68,
				0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63,
				0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22,
				0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,
				0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x3c, 0x2f, 0x61, 0x3e,
				0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61,
				0x73, 0x73, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,
				0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c,
				0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22,
				0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
				0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
				0x2f, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61,
				0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0d, 0x0a, 0x3c,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x74, 0x65, 0x78, 0x74, 0x2f, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
				0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a,
				0x28, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65,
				0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x7d, 0x68, 0x65, 0x69, 0x67, 0x68,
				0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
				0x31, 0x22, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x52,
				0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x3c,
				0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
				0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65,
				0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x6e, 0x64, 0x65,
				0x72, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
				0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64,
				0x69, 0x76, 0x3e, 0x0a, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
				0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c,
				0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,
				0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x23, 0x76, 0x69, 0x65, 0x77, 0x70,
				0x6f, 0x72, 0x74, 0x7b, 0x6d, 0x69, 0x6e, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68,
				0x74, 0x3a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72,
				0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
				0x61, 0x6c, 0x75, 0x65, 0x3d, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x72, 0x65,
				0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20,
				0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74,
				0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x3c, 0x21, 0x44, 0x4f, 0x43,
				0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x21,
				0x2d, 0x2d, 0x5b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
				0x6e, 0x61, 0x6c, 0x20, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3e, 0x0a,
				0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
				0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x77, 0xe0, 0xb8, 0xa0, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xb2,
				0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xa2, 0xe1, 0x83, 0xa5, 0xe1,
				0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0xa3, 0xe1, 0x83,
				0x9a, 0xe1, 0x83, 0x98, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad,
				0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94, 0x29, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0,
				0xa4, 0xa1, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5,
				0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c,
				0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
				0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4,
				0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
				0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4,
				0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0,
				0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
				0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0,
				0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
				0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
				0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0,
				0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xa8,
				0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,
				0xa4, 0xaa, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
				0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xad, 0xe0, 0xa4,
				0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
				0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
				0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8d,
				0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0,
				0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
				0xbe, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa1, 0x64,
				0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x63,
				0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d,
				0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
				0x70, 0x72, 0x6f, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,
				0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d,
				0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x3c, 0x6d, 0x65, 0x74,
				0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74,
				0x66, 0x2d, 0x38, 0x22, 0x3e, 0x3a, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x63, 0x6f,
				0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
				0x2f, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,
				0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x73, 0x74, 0x79,
				0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
				0x2f, 0x63, 0x73, 0x73, 0x22, 0x3e, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
				0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
				0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39,
				0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x74, 0x79,
				0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
				0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
				0x6e, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
				0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x20,
				0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65,
				0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e,
				0x22, 0x20, 0x2f, 0x3e, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
				0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,
				0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
				0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c, 0x2f, 0x61, 0x3e,
				0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d,
				0x22, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,
				0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,
				0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x79,
				0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e,
				0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
				0x74, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70,
				0x6c, 0x69, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44,
				0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x65, 0x6c,
				0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20,
				0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75,
				0x65, 0x3d, 0x22, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
				0x73, 0x70, 0x61, 0x6e, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x73, 0x0a,
				0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
				0x61, 0x67, 0x65, 0x3d, 0x22, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69,
				0x70, 0x74, 0x22, 0x20, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
				0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
				0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
				0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d, 0x65,
				0x64, 0x69, 0x61, 0x3d, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,
				0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x27, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63,
				0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x70, 0x65,
				0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72,
				0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
				0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31,
				0x22, 0x20, 0x3d, 0x27, 0x2b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,
				0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x3c, 0x6c,
				0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61, 0x6c, 0x74, 0x65,
				0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x2c,
				0x20, 0x74, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2c, 0x20, 0x74,
				0x65, 0x78, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
				0x22, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x6d,
				0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20,
				0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x0a, 0x3c, 0x61, 0x20,
				0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
				0x77, 0x77, 0x77, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,
				0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,
				0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
				0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x6e, 0x67,
				0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64,
				0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3e, 0xc2, 0xb7,
				0x3c, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x6c, 0x3d, 0x30,
				0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74,
				0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
				0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x75, 0x72,
				0x6c, 0x28, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69,
				0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x09, 0x09,
				0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
				0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20,
				0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22,
				0x74, 0x72, 0x75, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
				0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c,
				0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x74, 0x69,
				0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
				0x61, 0x6c, 0x75, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
				0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
				0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68,
				0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x65, 0x3d, 0x28, 0x6e,
				0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54,
				0x69, 0x6d, 0x65, 0x28, 0x29, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3,
				0xaa, 0x73, 0x20, 0x28, 0x64, 0x6f, 0x20, 0x42, 0x72, 0x61, 0x73, 0x69, 0x6c,
				0x29, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
				0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0,
				0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,
				0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
				0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,
				0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2,
				0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0,
				0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f,
				0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
				0xbd, 0xd0, 0xb0, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20,
				0x68, 0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x22,
				0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x3c, 0x6d, 0x65,
				0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,
				0x3d, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
				0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68,
				0x74, 0x74, 0x70, 0x3a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c,
				0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
				0x77, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20,
				0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x54, 0x44, 0x54,
				0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x6e,
				0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x77, 0x77, 0x77,
				0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68,
				0x74, 0x6d, 0x6c, 0x31, 0x2f, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65,
				0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x27, 0x3b, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
				0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70,
				0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x73,
				0x65, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3c, 0x69, 0x6e, 0x70,
				0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64,
				0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6a, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70,
				0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
				0x63, 0x72, 0x69, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x29,
				0x2e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
				0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x69, 0x6d, 0x61,
				0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
				0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x55, 0x41, 0x2d, 0x43, 0x6f, 0x6d,
				0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
				0x65, 0x6e, 0x74, 0x3d, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72,
				0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,
				0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68,
				0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x3c, 0x6c,
				0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c,
				0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,
				0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x3d, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
				0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d,
				0x65, 0x6e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22,
				0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
				0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74,
				0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x70, 0x75,
				0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
				0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x20,
				0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
				0x63, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
				0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
				0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
				0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x64, 0x74, 0x64,
				0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e,
				0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43,
				0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e,
				0x30, 0x31, 0x20, 0x54, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
				0x4e, 0x61, 0x6d, 0x65, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,
				0x29, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x3c, 0x73,
				0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
				0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x22, 0x20, 0x73, 0x74,
				0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
				0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
				0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
				0x42, 0x79, 0x49, 0x64, 0x28, 0x3d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
				0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
				0x6e, 0x74, 0x28, 0x27, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,
				0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
				0x27, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
				0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64,
				0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
				0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x73, 0x6e, 0x69, 0x63,
				0x61, 0x6c, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,
				0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x43, 0x2f, 0x2f, 0x44, 0x54,
				0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e, 0x30, 0x31, 0x20, 0x54,
				0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20,
				0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73,
				0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74,
				0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
				0x22, 0x3e, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e,
				0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d,
				0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43,
				0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x64, 0x69,
				0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,
				0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x68, 0x74, 0x6d, 0x6c,
				0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66,
				0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
				0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e,
				0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
				0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
				0x77, 0x77, 0x2e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,
				0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,
				0x3e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
				0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
				0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf, 0xd1,
				0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0,
				0xb7, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe,
				0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82,
				0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,
				0xa4, 0xb8, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87,
				0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0,
				0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
				0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89,
				0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0,
				0xa4, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
				0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
				0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
				0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
				0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
				0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe
			};

			private static unsafe int ToUpperCase(byte* p) 
			{
				if (p[0] < 0xc0) { if (p[0] >= 'a' && p[0] <= 'z') { p[0] ^= 32; } return 1; }
				/* An overly simplified uppercasing model for UTF-8. */
				if (p[0] < 0xe0) { p[1] ^= 32; return 2; }
				/* An arbitrary transform for three byte characters. */
				p[2] ^= 5; return 3;
			}

			private static unsafe int TransformDictionaryWord(byte* dst, byte* word, int len, int transform) 
			{
				var idx = 0;
				{ fixed (char* kps = kPrefixSuffix) { var prefix = &kps[kTransforms[transform].prefix_id]; while (*prefix != 0) { dst[idx++] = (byte) *prefix++; } } }
				{
					int t = kTransforms[transform].transform; var i = 0;
					var skip = t - ((int) WordTransformType.kOmitFirst1 - 1);
					if (skip > 0) { word += skip; len -= skip; }
					else if (t <= (int) WordTransformType.kOmitLast9) { len -= t; }
					while (i < len) { dst[idx++] = word[i++]; }
					if (t == (int) WordTransformType.kUppercaseFirst) { ToUpperCase(&dst[idx - len]); }
					else if (t == (int) WordTransformType.kUppercaseAll) 
					{
						var uppercase = &dst[idx - len];
						while (len > 0) { var step = ToUpperCase(uppercase); uppercase += step; len -= step; }
					}
				}
				{
					fixed (char* kps = kPrefixSuffix) { var suffix = &kps[kTransforms[transform].suffix_id]; while (*suffix != 0) { dst[idx++] = (byte) *suffix++; } }
					return idx;
				}
			}

			private static unsafe size_t ComputeDistanceCode(size_t distance, size_t max_distance, int* dist_cache)
			{
				if (distance <= max_distance)
				{
					size_t distance_plus_3 = distance + 3; size_t offset0 = distance_plus_3 - (size_t)dist_cache[0];
					size_t offset1 = distance_plus_3 - (size_t)dist_cache[1];
					if (distance == (size_t)dist_cache[0]) { return 0; } else if (distance == (size_t)dist_cache[1]) { return 1; }
					else if (offset0 < 7) { return (0x9750468 >> (int) (4 * offset0)) & 0xF; }
					else if (offset1 < 7) { return (0xFDB1ACE >> (int) (4 * offset1)) & 0xF; }
					else if (distance == (size_t)dist_cache[2]) { return 2; } else if (distance == (size_t)dist_cache[3]) { return 3; }
				}
				return distance + BROTLI_NUM_DISTANCE_SHORT_CODES - 1;
			}

			private static unsafe void BrotliCreateBackwardReferences(size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
				BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals)
			{
				switch (params_->hasher.type) 
				{
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 40:
					case 41:
					case 42:
					case 54:
						fixed (ushort* ksdh = kStaticDictionaryHash)
						{
							kHashers[params_->hasher.type].CreateBackwardReferences(ksdh, num_bytes,
							position, ringbuffer, ringbuffer_mask, params_, hasher, dist_cache, last_insert_len, commands, num_commands, num_literals);
						}
						break;
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct ZopfliNode 
			{
				public struct u_ 
				{
					private uint v;

					/* Smallest cost to get to this byte from the beginning, as found so far. */
					public unsafe float cost 
					{
						get { uint vv = v; return *(float*)(&vv); }
						set { v = *(uint*) &value; }
					}

					/* Offset to the next node on the path. Equals to command_length() of the
					   next node on the path. For last node equals to BROTLI_UINT32_MAX */
					public uint next { get { return v; } set { v = value; } }

					/* Node position that provides next distance for distance cache. */
					public uint shortcut { get { return v; } set { v = value; } }
				}

				/* best length to get up to this byte (not including this byte itself)
				   highest 8 bit is used to reconstruct the length code */
				public uint length;

				/* distance associated with the length
				   highest 7 bit contains distance short code + 1 (or zero if no short code)
				*/
				public uint distance;

				/* number of literal inserts before this copy */
				public uint insert_length;

				/* This union holds information used by dynamic-programming. During forward
				   pass |cost| it used to store the goal function. When node is processed its
				   |cost| is invalidated in favor of |shortcut|. On path back-tracing pass
				   |next| is assigned the offset to next node on the path. */
				public u_ u;
			}

			/* Histogram based cost model for zopflification. */
			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct ZopfliCostModel {
				/* The insert and copy length symbols. */
				public fixed float cost_cmd_[BROTLI_NUM_COMMAND_SYMBOLS];

				public fixed float cost_dist_[BROTLI_NUM_DISTANCE_SYMBOLS];

				/* Cumulative costs of literals per position in the stream. */
				public float* literal_costs_;

				public float min_cost_cmd_; public size_t num_bytes_;
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct PosData { public size_t pos; public fixed int distance_cache[4]; public float costdiff; public float cost; }

			/* Maintains the smallest 8 cost difference together with their positions */
			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct StartPosQueue 
			{
				private PosData q0, q1, q2, q3, q4, q5, q6, q7;
				public size_t idx_;

				public PosData* q_ { get { fixed (PosData* q = &q0) return q; }}
			}

			private static unsafe void InitStartPosQueue(StartPosQueue* self) { self->idx_ = 0; }

			private static unsafe void BrotliInitZopfliNodes(ZopfliNode* array, size_t length) 
			{
				ZopfliNode stub = new ZopfliNode();
				size_t i; stub.length = 1; stub.distance = 0;
				stub.insert_length = 0; stub.u.cost = kInfinity;
				for (i = 0; i < length; ++i) array[i] = stub;
			}

			private static unsafe void CleanupZopfliCostModel(ref MemoryManager m, ZopfliCostModel* self) { BrotliFree(ref m, self->literal_costs_); }

			private static unsafe uint ZopfliNodeCopyLength(ZopfliNode* self) { return self->length & 0xffffff; }

			private static unsafe uint ZopfliNodeLengthCode(ZopfliNode* self) { uint modifier = self->length >> 24; return ZopfliNodeCopyLength(self) + 9u - modifier; }

			private static unsafe uint ZopfliNodeCopyDistance(ZopfliNode* self) { return self->distance & 0x1ffffff; }

			private static unsafe uint ZopfliNodeDistanceCode(ZopfliNode* self) 
			{
				uint short_code = self->distance >> 25;
				return short_code == 0 ? ZopfliNodeCopyDistance(self) + BROTLI_NUM_DISTANCE_SHORT_CODES - 1 : short_code - 1;
			}

			private static unsafe uint ZopfliNodeCommandLength(ZopfliNode* self) { return ZopfliNodeCopyLength(self) + self->insert_length; }

			private static unsafe void InitZopfliCostModel(ref MemoryManager m, ZopfliCostModel* self, size_t num_bytes)  { self->num_bytes_ = num_bytes; self->literal_costs_ = (float*) BrotliAllocate(ref m, (num_bytes + 2) * sizeof(float)); }

			private static unsafe void ZopfliCostModelSetFromLiteralCosts(ZopfliCostModel* self, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
			{
				float* literal_costs = self->literal_costs_;
				float* cost_dist = self->cost_dist_;
				float* cost_cmd = self->cost_cmd_;
				size_t num_bytes = self->num_bytes_; size_t i;
				BrotliEstimateBitCostsForLiterals(position, num_bytes, ringbuffer_mask, ringbuffer, &literal_costs[1]);
				literal_costs[0] = 0.0f;
				for (i = 0; i < num_bytes; ++i) { literal_costs[i + 1] += literal_costs[i]; }
				for (i = 0; i < BROTLI_NUM_COMMAND_SYMBOLS; ++i) { cost_cmd[i] = (float) FastLog2(11 + (uint) i); }
				for (i = 0; i < BROTLI_NUM_DISTANCE_SYMBOLS; ++i) { cost_dist[i] = (float) FastLog2(20 + (uint) i); }
				self->min_cost_cmd_ = (float) FastLog2(11);
			}

			private static unsafe float ZopfliCostModelGetCommandCost(ZopfliCostModel* self, ushort cmdcode) { return self->cost_cmd_[cmdcode]; }

			private static unsafe float ZopfliCostModelGetDistanceCost(ZopfliCostModel* self, size_t distcode) { return self->cost_dist_[distcode]; }

			private static unsafe float ZopfliCostModelGetLiteralCosts( ZopfliCostModel* self, size_t from, size_t to) { return self->literal_costs_[to] - self->literal_costs_[from]; }

			private static unsafe float ZopfliCostModelGetMinCostCmd( ZopfliCostModel* self) { return self->min_cost_cmd_; }

			/* Fills in dist_cache[0..3] with the last four distances (as defined by
			   Section 4. of the Spec) that would be used at (block_start + pos) if we
			   used the shortest path of commands from block_start, computed from
			   nodes[0..pos]. The last four distances at block_start are in
			   starting_dist_cache[0..3].
			   REQUIRES: nodes[pos].cost < kInfinity
			   REQUIRES: nodes[0..pos] satisfies that "ZopfliNode array invariant". */
			private static unsafe void ComputeDistanceCache(size_t pos, int* starting_dist_cache, ZopfliNode* nodes, int* dist_cache) 
			{
				int idx = 0; size_t p = nodes[pos].u.shortcut;
				while (idx < 4 && p > 0) 
				{
					size_t ilen = nodes[p].insert_length; size_t clen = ZopfliNodeCopyLength(&nodes[p]);
					size_t dist = ZopfliNodeCopyDistance(&nodes[p]); dist_cache[idx++] = (int) dist;
					/* Because of prerequisite, p >= clen + ilen >= 2. */
					p = nodes[p - clen - ilen].u.shortcut;
				}
				for (; idx < 4; ++idx) { dist_cache[idx] = *starting_dist_cache++; }
			}

			/* REQUIRES: nodes[pos].cost < kInfinity
				REQUIRES: nodes[0..pos] satisfies that "ZopfliNode array invariant". */
			private static unsafe uint ComputeDistanceShortcut(size_t block_start, size_t pos, size_t max_backward, ZopfliNode* nodes) 
			{
				size_t clen = ZopfliNodeCopyLength(&nodes[pos]);
				size_t ilen = nodes[pos].insert_length;
				size_t dist = ZopfliNodeCopyDistance(&nodes[pos]);
				/* Since |block_start + pos| is the end position of the command, the copy part
				   starts from |block_start + pos - clen|. Distances that are greater than
				   this or greater than |max_backward| are private static unsafe dictionary references, and
				   do not update the last distances. Also distance code 0 (last distance)
				   does not update the last distances. */
				if (pos == 0) { return 0; }
				else if (dist + clen <= block_start + pos && dist <= max_backward && ZopfliNodeDistanceCode(&nodes[pos]) > 0) { return (uint) pos; } else { return nodes[pos - clen - ilen].u.shortcut; }
			}

			private static unsafe size_t StartPosQueueSize(StartPosQueue* self) { return Math.Min(self->idx_, 8); }

			private static unsafe void StartPosQueuePush(StartPosQueue* self, PosData* posdata) 
			{
				size_t offset = ~(self->idx_++) & 7;
				size_t len = StartPosQueueSize(self); size_t i;
				PosData* q = self->q_; q[offset] = *posdata;
				/* Restore the sorted order. In the list of |len| items at most |len - 1|
				   adjacent element comparisons / swaps are required. */
				for (i = 1; i < len; ++i) { if (q[offset & 7].costdiff > q[(offset + 1) & 7].costdiff) { PosData tmp = q[offset & 7]; q[offset & 7] = q[(offset + 1) & 7]; q[(offset + 1) & 7] = tmp; } ++offset; }
			}

			/* Maintains "ZopfliNode array invariant" and pushes node to the queue, if it
			   is eligible. */
			private static unsafe void EvaluateNode( size_t block_start, size_t pos, size_t max_backward_limit, int* starting_dist_cache, ZopfliCostModel* model, StartPosQueue* queue, ZopfliNode* nodes) 
			{
				/* Save cost, because ComputeDistanceCache invalidates it. */
				float node_cost = nodes[pos].u.cost;
				nodes[pos].u.shortcut = ComputeDistanceShortcut(block_start, pos, max_backward_limit, nodes);
				if (node_cost <= ZopfliCostModelGetLiteralCosts(model, 0, pos)) 
				{
					PosData posdata; posdata.pos = pos; posdata.cost = node_cost;
					posdata.costdiff = node_cost - ZopfliCostModelGetLiteralCosts(model, 0, pos);
					ComputeDistanceCache(pos, starting_dist_cache, nodes, posdata.distance_cache);
					StartPosQueuePush(queue, &posdata);
				}
			}

			private static unsafe PosData* StartPosQueueAt(StartPosQueue* self, size_t k) { return &self->q_[(k - self->idx_) & 7]; }

			/* Returns the minimum possible copy length that can improve the cost of any */
			/* future position. */
			private static unsafe size_t ComputeMinimumCopyLength(float start_cost, ZopfliNode* nodes, size_t num_bytes, size_t pos) 
			{
				/* Compute the minimum possible cost of reaching any future position. */
				float min_cost = start_cost; size_t len = 2;
				size_t next_len_bucket = 4; size_t next_len_offset = 10;
				while (pos + len <= num_bytes && nodes[pos + len].u.cost <= min_cost) 
				{
					/* We already reached (pos + len) with no more cost than the minimum
					   possible cost of reaching anything from this pos, so there is no point in
					   looking for lengths <= len. */
					++len;
					if (len == next_len_offset) 
					{
						/* We reached the next copy length code bucket, so we add one more
						   extra bit to the minimum cost. */
						min_cost += 1.0f; next_len_offset += next_len_bucket; next_len_bucket *= 2;
					}
				}
				return len;
			}

			/* REQUIRES: len >= 2, start_pos <= pos */
			/* REQUIRES: cost < kInfinity, nodes[start_pos].cost < kInfinity */
			/* Maintains the "ZopfliNode array invariant". */
			private static unsafe void UpdateZopfliNode(ZopfliNode* nodes, size_t pos,
				size_t start_pos, size_t len, size_t len_code, size_t dist, size_t short_code, float cost) 
			{
				ZopfliNode* next = &nodes[pos + len];
				next->length = (uint) (len | ((len + 9u - len_code) << 24));
				next->distance = (uint) (dist | (short_code << 25));
				next->insert_length = (uint) (pos - start_pos); next->u.cost = cost;
			}

			/* Returns longest copy length. */
			private static unsafe size_t UpdateNodes( size_t num_bytes, size_t block_start, size_t pos, byte* ringbuffer, size_t ringbuffer_mask, BrotliEncoderParams* params_, 
				size_t max_backward_limit, int* starting_dist_cache, size_t num_matches, BackwardMatch* matches, ZopfliCostModel* model, StartPosQueue* queue, ZopfliNode* nodes) 
			{
				size_t cur_ix = block_start + pos;
				size_t cur_ix_masked = cur_ix & ringbuffer_mask;
				size_t max_distance = Math.Min(cur_ix, max_backward_limit);
				size_t max_len = num_bytes - pos;
				size_t max_zopfli_len = MaxZopfliLen(params_);
				size_t max_iters = MaxZopfliCandidates(params_);
				size_t min_len; size_t result = 0; size_t k;

				EvaluateNode(block_start, pos, max_backward_limit, starting_dist_cache, model, queue, nodes);

				{
					PosData* posdata = StartPosQueueAt(queue, 0);
					float min_cost = (posdata->cost + ZopfliCostModelGetMinCostCmd(model) + ZopfliCostModelGetLiteralCosts(model, posdata->pos, pos));
					min_len = ComputeMinimumCopyLength(min_cost, nodes, num_bytes, pos);
				}

				/* Go over the command starting positions in order of increasing cost
				   difference. */
				for (k = 0; k < max_iters && k < StartPosQueueSize(queue); ++k) 
				{
					PosData* posdata = StartPosQueueAt(queue, k);
					size_t start = posdata->pos;
					ushort inscode = GetInsertLengthCode(pos - start);
					float start_costdiff = posdata->costdiff;
					float base_cost = start_costdiff + (float) GetInsertExtra(inscode) + ZopfliCostModelGetLiteralCosts(model, 0, pos);

					/* Look for last distance matches using the distance cache from this
					   starting position. */
					size_t best_len = min_len - 1;
					size_t j = 0;
					for (; j < BROTLI_NUM_DISTANCE_SHORT_CODES && best_len < max_len; ++j) 
					{
						size_t idx = kDistanceCacheIndex[j];
						size_t backward = (size_t) (posdata->distance_cache[idx] + kDistanceCacheOffset[j]);
						size_t prev_ix = cur_ix - backward;
						if (prev_ix >= cur_ix) { continue; }
						if ((backward > max_distance)) { continue; }
						prev_ix &= ringbuffer_mask;

						if (cur_ix_masked + best_len > ringbuffer_mask || prev_ix + best_len > ringbuffer_mask || ringbuffer[cur_ix_masked + best_len] != ringbuffer[prev_ix + best_len]) { continue; }
						{
							size_t len = FindMatchLengthWithLimit(&ringbuffer[prev_ix], &ringbuffer[cur_ix_masked], max_len);
							float dist_cost = base_cost + ZopfliCostModelGetDistanceCost(model, j);
							size_t l;
							for (l = best_len + 1; l <= len; ++l) 
							{
								ushort copycode = GetCopyLengthCode(l);
								ushort cmdcode = CombineLengthCodes(inscode, copycode, j == 0);
								float cost = (cmdcode < 128 ? base_cost : dist_cost) + (float) GetCopyExtra(copycode) + ZopfliCostModelGetCommandCost(model, cmdcode);
								if (cost < nodes[pos + l].u.cost) { UpdateZopfliNode(nodes, pos, start, l, l, backward, j + 1, cost); result = Math.Max(result, l); }
								best_len = l;
							}
						}
					}

					/* At higher iterations look only for new last distance matches, since
					   looking only for new command start positions with the same distances
					   does not help much. */
					if (k >= 2) continue;

					{
						/* Loop through all possible copy lengths at this position. */
						size_t len = min_len;
						for (j = 0; j < num_matches; ++j) 
						{
							BackwardMatch match = matches[j];
							size_t dist = match.distance;
							bool is_dictionary_match = (dist > max_distance);
							/* We already tried all possible last distance matches, so we can use
							   normal distance code here. */
							size_t dist_code = dist + BROTLI_NUM_DISTANCE_SHORT_CODES - 1;
							ushort dist_symbol;
							uint distextra;
							uint distnumextra;
							float dist_cost;
							size_t max_match_len;
							PrefixEncodeCopyDistance(dist_code, 0, 0, &dist_symbol, &distextra);
							distnumextra = distextra >> 24;
							dist_cost = base_cost + (float) distnumextra + ZopfliCostModelGetDistanceCost(model, dist_symbol);

							/* Try all copy lengths up until the maximum copy length corresponding
							   to this distance. If the distance refers to the private static unsafe dictionary, or
							   the maximum length is long enough, try only one maximum length. */
							max_match_len = BackwardMatchLength(&match);
							if (len < max_match_len && (is_dictionary_match || max_match_len > max_zopfli_len)) { len = max_match_len; }
							for (; len <= max_match_len; ++len) 
							{
								size_t len_code = is_dictionary_match ? BackwardMatchLengthCode(&match) : len;
								ushort copycode = GetCopyLengthCode(len_code);
								ushort cmdcode = CombineLengthCodes(inscode, copycode, false);
								float cost = dist_cost + (float) GetCopyExtra(copycode) + ZopfliCostModelGetCommandCost(model, cmdcode);
								if (cost < nodes[pos + len].u.cost)  { UpdateZopfliNode(nodes, pos, start, len, len_code, dist, 0, cost); result = Math.Max(result, len); }
							}
						}
					}
				}
				return result;
			}

			private static unsafe size_t ComputeShortestPathFromNodes(size_t num_bytes, ZopfliNode* nodes) 
			{
				size_t index = num_bytes; size_t num_commands = 0;
				while (nodes[index].insert_length == 0 && nodes[index].length == 1) --index;
				nodes[index].u.next = uint.MaxValue;
				while (index != 0) { size_t len = ZopfliNodeCommandLength(&nodes[index]); index -= len; nodes[index].u.next = (uint) len; num_commands++; }
				return num_commands;
			}

			/* REQUIRES: nodes != NULL and len(nodes) >= num_bytes + 1 */
			private static unsafe size_t BrotliZopfliComputeShortestPath(ref MemoryManager m, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
				BrotliEncoderParams* params_, size_t max_backward_limit, int* dist_cache, HasherHandle hasher, ZopfliNode* nodes) 
			{
				size_t max_zopfli_len = MaxZopfliLen(params_);
				ZopfliCostModel model; StartPosQueue queue;
				BackwardMatch* matches = stackalloc BackwardMatch[MAX_NUM_MATCHES_H10];
				HashToBinaryTreeH10 h10 = (HashToBinaryTreeH10) kHashers[10];
				size_t store_end = num_bytes >= h10.StoreLookahead() ? position + num_bytes - h10.StoreLookahead() + 1 : position;
				size_t i; nodes[0].length = 0; nodes[0].u.cost = 0; InitZopfliCostModel(ref m, &model, num_bytes);
				ZopfliCostModelSetFromLiteralCosts(&model, position, ringbuffer, ringbuffer_mask);
				InitStartPosQueue(&queue);
				for (i = 0; i + h10.HashTypeLength() - 1 < num_bytes; i++) 
				{
					size_t pos = position + i;
					size_t max_distance = Math.Min(pos, max_backward_limit);
					size_t num_matches = HashToBinaryTreeH10.FindAllMatches(hasher, ringbuffer, ringbuffer_mask, pos, num_bytes - i, max_distance, params_, matches);
					size_t skip;
					if (num_matches > 0 && BackwardMatchLength(&matches[num_matches - 1]) > max_zopfli_len)  { matches[0] = matches[num_matches - 1]; num_matches = 1; }
					skip = UpdateNodes(num_bytes, position, i, ringbuffer, ringbuffer_mask, params_, max_backward_limit, dist_cache, num_matches, matches, &model, &queue, nodes);
					if (skip < BROTLI_LONG_COPY_QUICK_STEP) skip = 0;
					if (num_matches == 1 && BackwardMatchLength(&matches[0]) > max_zopfli_len) { skip = Math.Max(BackwardMatchLength(&matches[0]), skip); }
					if (skip > 1) 
					{
						/* Add the tail of the copy to the hasher. */
						h10.StoreRange(hasher, ringbuffer, ringbuffer_mask, pos + 1, Math.Min(pos + skip, store_end));
						skip--;
						while (skip != 0) 
						{
							i++;
							if (i + h10.HashTypeLength() - 1 >= num_bytes) break;
							EvaluateNode(position, i, max_backward_limit, dist_cache, &model, &queue, nodes); skip--;
						}
					}
				}
				CleanupZopfliCostModel(ref m, &model);
				return ComputeShortestPathFromNodes(num_bytes, nodes);
			}

			/* REQUIRES: nodes != NULL and len(nodes) >= num_bytes + 1 */
			private static unsafe void BrotliZopfliCreateCommands(size_t num_bytes, size_t block_start, size_t max_backward_limit, ZopfliNode* nodes, int* dist_cache,
				size_t* last_insert_len, Command* commands, size_t* num_literals) 
			{
				size_t pos = 0; uint offset = nodes[0].u.next; size_t i;
				for (i = 0; offset != uint.MaxValue; i++) 
				{
					ZopfliNode* next = &nodes[pos + offset]; size_t copy_length = ZopfliNodeCopyLength(next);
					size_t insert_length = next->insert_length; pos += insert_length; offset = next->u.next;
					if (i == 0) { insert_length += *last_insert_len; *last_insert_len = 0; }
					{
						size_t distance = ZopfliNodeCopyDistance(next); size_t len_code = ZopfliNodeLengthCode(next);
						size_t max_distance = Math.Min(block_start + pos, max_backward_limit); bool is_dictionary = (distance > max_distance);
						size_t dist_code = ZopfliNodeDistanceCode(next);

						InitCommand(&commands[i], insert_length, copy_length, len_code, dist_code);

						if (!is_dictionary && dist_code > 0) { dist_cache[3] = dist_cache[2]; dist_cache[2] = dist_cache[1]; dist_cache[1] = dist_cache[0]; dist_cache[0] = (int) distance; }
					}

					*num_literals += insert_length; pos += copy_length;
				}
				*last_insert_len += num_bytes - pos;
			}

			private static unsafe void BrotliCreateZopfliBackwardReferences( ref MemoryManager m, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
				BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals) 
			{
				size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin); ZopfliNode* nodes;
				nodes = (ZopfliNode*) BrotliAllocate(ref m, (num_bytes + 1) * sizeof(ZopfliNode));
				BrotliInitZopfliNodes(nodes, num_bytes + 1);
				*num_commands += BrotliZopfliComputeShortestPath(ref m, num_bytes, position, ringbuffer, ringbuffer_mask, params_, max_backward_limit, dist_cache, hasher, nodes);
				BrotliZopfliCreateCommands(num_bytes, position, max_backward_limit, nodes, dist_cache, last_insert_len, commands, num_literals);
				BrotliFree(ref m, nodes);
			}

			private static unsafe void SetCost(uint* histogram, size_t histogram_size, float* cost) 
			{
				size_t sum = 0; float log2sum; size_t i;
				for (i = 0; i < histogram_size; i++) { sum += histogram[i]; }
				log2sum = (float) FastLog2(sum);
				for (i = 0; i < histogram_size; i++) 
				{
					if (histogram[i] == 0) { cost[i] = log2sum + 2; continue; }
					/* Shannon bits for this symbol. */
					cost[i] = log2sum - (float) FastLog2(histogram[i]);
					/* Cannot be coded with less than 1 bit */
					if (cost[i] < 1) cost[i] = 1;
				}
			}

			private static unsafe void ZopfliCostModelSetFromCommands(ZopfliCostModel* self, size_t position, byte* ringbuffer, size_t ringbuffer_mask, Command* commands,
				size_t num_commands, size_t last_insert_len) 
			{
				uint* histogram_literal = stackalloc uint[BROTLI_NUM_LITERAL_SYMBOLS];
				uint* histogram_cmd = stackalloc uint[BROTLI_NUM_COMMAND_SYMBOLS];
				uint* histogram_dist = stackalloc uint[BROTLI_NUM_DISTANCE_SYMBOLS];
				float* cost_literal = stackalloc float[BROTLI_NUM_LITERAL_SYMBOLS];
				size_t pos = position - last_insert_len;
				float min_cost_cmd = kInfinity; size_t i; float* cost_cmd = self->cost_cmd_;

				memset(histogram_literal, 0, BROTLI_NUM_LITERAL_SYMBOLS * sizeof(uint));
				memset(histogram_cmd, 0, BROTLI_NUM_COMMAND_SYMBOLS * sizeof(uint));
				memset(histogram_dist, 0, BROTLI_NUM_DISTANCE_SYMBOLS * sizeof(uint));

				for (i = 0; i < num_commands; i++) 
				{
					size_t inslength = commands[i].insert_len_; size_t copylength = CommandCopyLen(&commands[i]);
					size_t distcode = commands[i].dist_prefix_; size_t cmdcode = commands[i].cmd_prefix_;
					size_t j; histogram_cmd[cmdcode]++;
					if (cmdcode >= 128) histogram_dist[distcode]++;
					for (j = 0; j < inslength; j++) { histogram_literal[ringbuffer[(pos + j) & ringbuffer_mask]]++; }
					pos += inslength + copylength;
				}

				SetCost(histogram_literal, BROTLI_NUM_LITERAL_SYMBOLS, cost_literal);
				SetCost(histogram_cmd, BROTLI_NUM_COMMAND_SYMBOLS, cost_cmd);
				SetCost(histogram_dist, BROTLI_NUM_DISTANCE_SYMBOLS, self->cost_dist_);

				for (i = 0; i < BROTLI_NUM_COMMAND_SYMBOLS; ++i) { min_cost_cmd = Math.Min(min_cost_cmd, cost_cmd[i]); }
				self->min_cost_cmd_ = min_cost_cmd;

				{
					float* literal_costs = self->literal_costs_; size_t num_bytes = self->num_bytes_; literal_costs[0] = 0.0f;
					for (i = 0; i < num_bytes; ++i) { literal_costs[i + 1] = literal_costs[i] + cost_literal[ringbuffer[(position + i) & ringbuffer_mask]]; }
				}
			}

			private static unsafe size_t ZopfliIterate(size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask, BrotliEncoderParams* params_,
				size_t max_backward_limit, int* dist_cache, ZopfliCostModel* model, uint* num_matches, BackwardMatch* matches, ZopfliNode* nodes) 
			{
				size_t max_zopfli_len = MaxZopfliLen(params_); StartPosQueue queue; size_t cur_match_pos = 0; size_t i;
				nodes[0].length = 0; nodes[0].u.cost = 0; InitStartPosQueue(&queue);
				for (i = 0; i + 3 < num_bytes; i++) 
				{
					size_t skip = UpdateNodes(num_bytes, position, i, ringbuffer, ringbuffer_mask, params_, max_backward_limit, dist_cache, num_matches[i], &matches[cur_match_pos], model, &queue, nodes);
					if (skip < BROTLI_LONG_COPY_QUICK_STEP) skip = 0;
					cur_match_pos += num_matches[i];
					if (num_matches[i] == 1 && BackwardMatchLength(&matches[cur_match_pos - 1]) > max_zopfli_len) { skip = Math.Max( BackwardMatchLength(&matches[cur_match_pos - 1]), skip); }
					if (skip > 1) 
					{
						skip--;
						while (skip != 0) 
						{
							i++;
							if (i + 3 >= num_bytes) break;
							EvaluateNode( position, i, max_backward_limit, dist_cache, model, &queue, nodes); cur_match_pos += num_matches[i]; skip--;
						}
					}
				}
				return ComputeShortestPathFromNodes(num_bytes, nodes);
			}

			private static unsafe void BrotliCreateHqZopfliBackwardReferences(ref MemoryManager m, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
				BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals) 
			{
				size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);
				uint* num_matches = (uint*) BrotliAllocate(ref m, num_bytes * sizeof(uint));
				size_t matches_size = 4 * num_bytes; Hasher h = kHashers[10];
				size_t store_end = num_bytes >= h.StoreLookahead() ? position + num_bytes - h.StoreLookahead() + 1 : position;
				size_t cur_match_pos = 0; size_t i; size_t orig_num_literals; size_t orig_last_insert_len;
				int* orig_dist_cache = stackalloc int[4]; size_t orig_num_commands; ZopfliCostModel model; ZopfliNode* nodes;
				BackwardMatch* matches = (BackwardMatch*) BrotliAllocate(ref m, matches_size * sizeof(BackwardMatch));
				for (i = 0; i + h.HashTypeLength() - 1 < num_bytes; ++i) 
				{
					size_t pos = position + i; size_t max_distance = Math.Min(pos, max_backward_limit);
					size_t max_length = num_bytes - i; size_t num_found_matches; size_t cur_match_end;
					/* Ensure that we have enough free slots. */
					BrotliEnsureCapacity(ref m, sizeof(BackwardMatch), (void**) &matches, &matches_size, cur_match_pos + MAX_NUM_MATCHES_H10);
					num_found_matches = HashToBinaryTreeH10.FindAllMatches(hasher, ringbuffer, ringbuffer_mask, pos, max_length, max_distance, params_, &matches[cur_match_pos]);
					cur_match_end = cur_match_pos + num_found_matches;
					num_matches[i] = (uint) num_found_matches;
					if (num_found_matches > 0) 
					{
						size_t match_len = BackwardMatchLength(&matches[cur_match_end - 1]);
						if (match_len > MAX_ZOPFLI_LEN_QUALITY_11) 
						{
							size_t skip = match_len - 1; matches[cur_match_pos++] = matches[cur_match_end - 1]; num_matches[i] = 1;
							/* Add the tail of the copy to the hasher. */
							h.StoreRange(hasher, ringbuffer, ringbuffer_mask, pos + 1, Math.Min(pos + match_len, store_end));
							memset(&num_matches[i + 1], 0, skip * sizeof(uint)); i += skip;
						} else { cur_match_pos = cur_match_end; }
					}
				}
				orig_num_literals = *num_literals; orig_last_insert_len = *last_insert_len;
				memcpy(orig_dist_cache, dist_cache, 4 * sizeof(int)); orig_num_commands = *num_commands;
				nodes = (ZopfliNode*) BrotliAllocate(ref m, (num_bytes + 1) * sizeof(ZopfliNode));
				InitZopfliCostModel(ref m, &model, num_bytes);
				for (i = 0; i < 2; i++) 
				{
					BrotliInitZopfliNodes(nodes, num_bytes + 1);
					if (i == 0) { ZopfliCostModelSetFromLiteralCosts(&model, position, ringbuffer, ringbuffer_mask); } else {
						ZopfliCostModelSetFromCommands(&model, position, ringbuffer, ringbuffer_mask, commands, *num_commands - orig_num_commands, orig_last_insert_len); }
					*num_commands = orig_num_commands; *num_literals = orig_num_literals; *last_insert_len = orig_last_insert_len;
					memcpy(dist_cache, orig_dist_cache, 4 * sizeof(int));
					*num_commands += ZopfliIterate(num_bytes, position, ringbuffer, ringbuffer_mask, params_, max_backward_limit, dist_cache, &model, num_matches, matches, nodes);
					BrotliZopfliCreateCommands(num_bytes, position, max_backward_limit, nodes, dist_cache, last_insert_len, commands, num_literals);
				}
				CleanupZopfliCostModel(ref m, &model); BrotliFree(ref m, nodes); BrotliFree(ref m, matches); BrotliFree(ref m, num_matches);
			}

			private static unsafe double ShannonEntropy(uint* population, size_t size, size_t* total)
			{
				size_t sum = 0; double retval = 0; uint* population_end = population + size; size_t p;
				if ((size & 1) != 0) { p = *population++; sum += p; retval -= (double)p * FastLog2(p); }
				while (population < population_end)
				{
					p = *population++; sum += p; retval -= (double)p * FastLog2(p);
					p = *population++; sum += p; retval -= (double)p * FastLog2(p);
				}
				if (sum != 0) retval += (double)sum * FastLog2(sum);
				*total = sum;
				return retval;
			}

			private static unsafe double BitsEntropy(uint* population, size_t size)
			{
				size_t sum; double retval = ShannonEntropy(population, size, &sum);
				if (retval < sum) { /* At least one bit per literal is needed. */ retval = (double)sum; }
				return retval;
			}

			private unsafe class BitCostLiteral 
			{
				public static double BrotliPopulationCost(HistogramLiteral* histogram) 
				{
					const double kOneSymbolHistogramCost = 12; const double kTwoSymbolHistogramCost = 20;
					const double kThreeSymbolHistogramCost = 28; const double kFourSymbolHistogramCost = 37;

					size_t data_size = HistogramLiteral.HistogramDataSize();
					int count = 0; size_t* s = stackalloc size_t[5]; double bits = 0.0; size_t i;
					if (histogram->total_count_ == 0) { return kOneSymbolHistogramCost; }
					for (i = 0; i < data_size; ++i) { if (histogram->data_[i] > 0) { s[count] = i; ++count; if (count > 4) break; } }
					if (count == 1) { return kOneSymbolHistogramCost; }
					if (count == 2) { return (kTwoSymbolHistogramCost + (double)histogram->total_count_); }
					if (count == 3)
					{
						uint histo0 = histogram->data_[s[0]];
						uint histo1 = histogram->data_[s[1]];
						uint histo2 = histogram->data_[s[2]];
						uint histomax = Math.Max(histo0, Math.Max(histo1, histo2));
						return (kThreeSymbolHistogramCost + 2 * (histo0 + histo1 + histo2) - histomax);
					}
					if (count == 4)
					{
						uint* histo = stackalloc uint[4]; uint h23; uint histomax;
						for (i = 0; i < 4; ++i) { histo[i] = histogram->data_[s[i]]; }
						/* Sort */
						for (i = 0; i < 4; ++i)
						{
							size_t j;
							for (j = i + 1; j < 4; ++j) { if (histo[j] > histo[i]) { uint tmp = histo[j]; histo[j] = histo[i]; histo[i] = tmp; } }
						}
						h23 = histo[2] + histo[3]; histomax = Math.Max(h23, histo[0]);
						return (kFourSymbolHistogramCost + 3 * h23 + 2 * (histo[0] + histo[1]) - histomax);
					}

					{
						/* In this loop we compute the entropy of the histogram and simultaneously
						   build a simplified histogram of the code length codes where we use the
						   zero repeat code 17, but we don't use the non-zero repeat code 16. */
						size_t max_depth = 1;
						uint* depth_histo = stackalloc uint[BROTLI_CODE_LENGTH_CODES];
						memset(depth_histo, 0, BROTLI_CODE_LENGTH_CODES * sizeof(uint));
						double log2total = FastLog2(histogram->total_count_);
						for (i = 0; i < data_size;)
						{
							if (histogram->data_[i] > 0)
							{
								/* Compute -log2(P(symbol)) = -log2(count(symbol)/total_count) =
															= log2(total_count) - log2(count(symbol)) */
								double log2p = log2total - FastLog2(histogram->data_[i]);
								/* Approximate the bit depth by round(-log2(P(symbol))) */
								size_t depth = (size_t)(log2p + 0.5); bits += histogram->data_[i] * log2p;
								if (depth > 15) { depth = 15; }
								if (depth > max_depth) { max_depth = depth; }
								++depth_histo[depth]; ++i;
							}
							else
							{
								/* Compute the run length of zeros and add the appropriate number of 0
								   and 17 code length codes to the code length code histogram. */
								uint reps = 1; size_t k;
								for (k = i + 1; k < data_size && histogram->data_[k] == 0; ++k) { ++reps; }
								i += reps;
								if (i == data_size) { /* Don't add any cost for the last zero run, since these are encoded only implicitly. */ break; }
								if (reps < 3) { depth_histo[0] += reps; }
								else { reps -= 2; while (reps > 0) { ++depth_histo[BROTLI_REPEAT_ZERO_CODE_LENGTH]; /* Add the 3 extra bits for the 17 code length code. */ bits += 3; reps >>= 3; } }
							}
						}
						/* Add the estimated encoding cost of the code length code histogram. */
						bits += (double)(18 + 2 * max_depth);
						/* Add the entropy of the code length code histogram. */
						bits += BitsEntropy(depth_histo, BROTLI_CODE_LENGTH_CODES);
					}
					return bits;
				}
			}

			private unsafe class BitCostCommand
			{
				public static double BrotliPopulationCost(HistogramCommand* histogram)
				{
					const double kOneSymbolHistogramCost = 12; const double kTwoSymbolHistogramCost = 20;
					const double kThreeSymbolHistogramCost = 28; const double kFourSymbolHistogramCost = 37;

					size_t data_size = HistogramCommand.HistogramDataSize(); int count = 0; 
					size_t* s = stackalloc size_t[5]; double bits = 0.0; size_t i;
					if (histogram->total_count_ == 0) { return kOneSymbolHistogramCost; }
					for (i = 0; i < data_size; ++i) { if (histogram->data_[i] > 0) { s[count] = i; ++count; if (count > 4) break; } }
					if (count == 1) { return kOneSymbolHistogramCost; }
					if (count == 2) { return (kTwoSymbolHistogramCost + (double)histogram->total_count_); }
					if (count == 3)
					{
						uint histo0 = histogram->data_[s[0]];
						uint histo1 = histogram->data_[s[1]];
						uint histo2 = histogram->data_[s[2]];
						uint histomax = Math.Max(histo0, Math.Max(histo1, histo2));
						return (kThreeSymbolHistogramCost + 2 * (histo0 + histo1 + histo2) - histomax);
					}
					if (count == 4)
					{
						uint* histo = stackalloc uint[4];
						uint h23;
						uint histomax;
						for (i = 0; i < 4; ++i) { histo[i] = histogram->data_[s[i]]; }
						/* Sort */
						for (i = 0; i < 4; ++i)
						{
							size_t j;
							for (j = i + 1; j < 4; ++j) { if (histo[j] > histo[i]) { uint tmp = histo[j]; histo[j] = histo[i]; histo[i] = tmp; } }
						}
						h23 = histo[2] + histo[3];
						histomax = Math.Max(h23, histo[0]);
						return (kFourSymbolHistogramCost + 3 * h23 + 2 * (histo[0] + histo[1]) - histomax);
					}

					{
						/* In this loop we compute the entropy of the histogram and simultaneously
						   build a simplified histogram of the code length codes where we use the
						   zero repeat code 17, but we don't use the non-zero repeat code 16. */
						size_t max_depth = 1;
						uint* depth_histo = stackalloc uint[BROTLI_CODE_LENGTH_CODES];
						memset(depth_histo, 0, BROTLI_CODE_LENGTH_CODES * sizeof(uint));
						double log2total = FastLog2(histogram->total_count_);
						for (i = 0; i < data_size;)
						{
							if (histogram->data_[i] > 0)
							{
								/* Compute -log2(P(symbol)) = -log2(count(symbol)/total_count) =
															= log2(total_count) - log2(count(symbol)) */
								double log2p = log2total - FastLog2(histogram->data_[i]);
								/* Approximate the bit depth by round(-log2(P(symbol))) */
								size_t depth = (size_t)(log2p + 0.5);
								bits += histogram->data_[i] * log2p;
								if (depth > 15) { depth = 15; }
								if (depth > max_depth) { max_depth = depth; }
								++depth_histo[depth]; ++i;
							}
							else
							{
								/* Compute the run length of zeros and add the appropriate number of 0
								   and 17 code length codes to the code length code histogram. */
								uint reps = 1; size_t k;
								for (k = i + 1; k < data_size && histogram->data_[k] == 0; ++k) { ++reps; }
								i += reps;
								if (i == data_size) { /* Don't add any cost for the last zero run, since these are encoded only implicitly. */ break; }
								if (reps < 3) { depth_histo[0] += reps; }
								else
								{
									reps -= 2;
									while (reps > 0)
									{
										++depth_histo[BROTLI_REPEAT_ZERO_CODE_LENGTH];
										/* Add the 3 extra bits for the 17 code length code. */
										bits += 3; reps >>= 3;
									}
								}
							}
						}
						/* Add the estimated encoding cost of the code length code histogram. */
						bits += (double)(18 + 2 * max_depth);
						/* Add the entropy of the code length code histogram. */
						bits += BitsEntropy(depth_histo, BROTLI_CODE_LENGTH_CODES);
					}
					return bits;
				}
			}

			private unsafe class BitCostDistance
			{
				public static double BrotliPopulationCost(HistogramDistance* histogram)
				{
					const double kOneSymbolHistogramCost = 12; const double kTwoSymbolHistogramCost = 20;
					const double kThreeSymbolHistogramCost = 28; const double kFourSymbolHistogramCost = 37;

					size_t data_size = HistogramDistance.HistogramDataSize(); int count = 0;
					size_t* s = stackalloc size_t[5]; double bits = 0.0; size_t i;
					if (histogram->total_count_ == 0) { return kOneSymbolHistogramCost; }
					for (i = 0; i < data_size; ++i) { if (histogram->data_[i] > 0) { s[count] = i; ++count; if (count > 4) break; } }
					if (count == 1){ return kOneSymbolHistogramCost; }
					if (count == 2) { return (kTwoSymbolHistogramCost + (double)histogram->total_count_); }
					if (count == 3)
					{
						uint histo0 = histogram->data_[s[0]];
						uint histo1 = histogram->data_[s[1]];
						uint histo2 = histogram->data_[s[2]];
						uint histomax = Math.Max(histo0, Math.Max(histo1, histo2));
						return (kThreeSymbolHistogramCost + 2 * (histo0 + histo1 + histo2) - histomax);
					}
					if (count == 4)
					{
						uint* histo = stackalloc uint[4];
						uint h23;
						uint histomax;
						for (i = 0; i < 4; ++i) { histo[i] = histogram->data_[s[i]]; }
						/* Sort */
						for (i = 0; i < 4; ++i)
						{
							size_t j;
							for (j = i + 1; j < 4; ++j) { if (histo[j] > histo[i]) { uint tmp = histo[j]; histo[j] = histo[i]; histo[i] = tmp; } }
						}
						h23 = histo[2] + histo[3]; histomax = Math.Max(h23, histo[0]);
						return (kFourSymbolHistogramCost + 3 * h23 + 2 * (histo[0] + histo[1]) - histomax);
					}

					{
						/* In this loop we compute the entropy of the histogram and simultaneously
						   build a simplified histogram of the code length codes where we use the
						   zero repeat code 17, but we don't use the non-zero repeat code 16. */
						size_t max_depth = 1;
						uint* depth_histo = stackalloc uint[BROTLI_CODE_LENGTH_CODES];
						memset(depth_histo, 0, BROTLI_CODE_LENGTH_CODES * sizeof(uint));
						double log2total = FastLog2(histogram->total_count_);
						for (i = 0; i < data_size;)
						{
							if (histogram->data_[i] > 0)
							{
								/* Compute -log2(P(symbol)) = -log2(count(symbol)/total_count) =
															= log2(total_count) - log2(count(symbol)) */
								double log2p = log2total - FastLog2(histogram->data_[i]);
								/* Approximate the bit depth by round(-log2(P(symbol))) */
								size_t depth = (size_t)(log2p + 0.5); bits += histogram->data_[i] * log2p;
								if (depth > 15) { depth = 15; }
								if (depth > max_depth) { max_depth = depth; }
								++depth_histo[depth]; ++i;
							}
							else
							{
								/* Compute the run length of zeros and add the appropriate number of 0
								   and 17 code length codes to the code length code histogram. */
								uint reps = 1; size_t k;
								for (k = i + 1; k < data_size && histogram->data_[k] == 0; ++k) { ++reps; }
								i += reps;
								if (i == data_size) { /* Don't add any cost for the last zero run, since these are encoded only implicitly. */ break; }
								if (reps < 3) { depth_histo[0] += reps; }
								else
								{
									reps -= 2;
									while (reps > 0)
									{
										++depth_histo[BROTLI_REPEAT_ZERO_CODE_LENGTH];
										/* Add the 3 extra bits for the 17 code length code. */
										bits += 3;
										reps >>= 3;
									}
								}
							}
						}
						/* Add the estimated encoding cost of the code length code histogram. */
						bits += (double)(18 + 2 * max_depth);
						/* Add the entropy of the code length code histogram. */
						bits += BitsEntropy(depth_histo, BROTLI_CODE_LENGTH_CODES);
					}
					return bits;
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct BlockTypeCodeCalculator { public size_t last_type; public size_t second_last_type; }

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct BlockSplitCode 
			{
				public BlockTypeCodeCalculator type_code_calculator; public fixed byte type_depths[BROTLI_MAX_BLOCK_TYPE_SYMBOLS];
				public fixed ushort type_bits[BROTLI_MAX_BLOCK_TYPE_SYMBOLS]; public fixed byte length_depths[BROTLI_NUM_BLOCK_LEN_SYMBOLS];
				public fixed ushort length_bits[BROTLI_NUM_BLOCK_LEN_SYMBOLS];
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct BlockEncoder 
			{
				public size_t alphabet_size_; public size_t num_block_types_;
				public byte* block_types_; /* Not owned. */
				public uint* block_lengths_; /* Not owned. */
				public size_t num_blocks_;
				public BlockSplitCode block_split_code_; public size_t block_ix_; public size_t block_len_;
				public size_t entropy_ix_; public byte* depths_; public ushort* bits_;
			}

			private static uint BlockLengthPrefixCode(uint len) 
			{
				uint code = (len >= 177U) ? (len >= 753U ? 20U : 14U) : (len >= 41U ? 7U : 0U);
				while (code < (BROTLI_NUM_BLOCK_LEN_SYMBOLS - 1) && len >= kBlockLengthPrefixCode[code + 1].offset) ++code;
				return code;
			}

			private static unsafe void GetBlockLengthPrefixCode(uint len, size_t* code, uint* n_extra, uint* extra)  { *code = BlockLengthPrefixCode(len); *n_extra = kBlockLengthPrefixCode[*code].nbits; *extra = len - kBlockLengthPrefixCode[*code].offset; }

			private static unsafe void InitBlockTypeCodeCalculator(BlockTypeCodeCalculator* self) { self->last_type = 1; self->second_last_type = 0; }

			private static unsafe size_t NextBlockTypeCode(BlockTypeCodeCalculator* calculator, byte type) 
			{
				size_t type_code = (type == calculator->last_type + 1) ? 1u : (type == calculator->second_last_type) ? 0u : type + 2u;
				calculator->second_last_type = calculator->last_type; calculator->last_type = type; return type_code;
			}

			private static unsafe void InitBlockEncoder(BlockEncoder* self, size_t alphabet_size, size_t num_block_types, byte* block_types, uint* block_lengths, size_t num_blocks) 
			{
				self->alphabet_size_ = alphabet_size; self->num_block_types_ = num_block_types; self->block_types_ = block_types;
				self->block_lengths_ = block_lengths; self->num_blocks_ = num_blocks;
				InitBlockTypeCodeCalculator(&self->block_split_code_.type_code_calculator);
				self->block_ix_ = 0; self->block_len_ = num_blocks == 0 ? 0 : block_lengths[0];
				self->entropy_ix_ = 0; self->depths_ = null; self->bits_ = null;
			}

			/* Stores a number between 0 and 255. */
			private static unsafe void StoreVarLenUint8(size_t n, size_t* storage_ix, byte* storage) 
			{
				if (n == 0) { BrotliWriteBits(1, 0, storage_ix, storage); }
				else 
				{
					size_t nbits = Log2FloorNonZero(n); BrotliWriteBits(1, 1, storage_ix, storage);
					BrotliWriteBits(3, nbits, storage_ix, storage);
					BrotliWriteBits(nbits, n - ((size_t) 1 << (int) nbits), storage_ix, storage);
				}
			}

			/* Stores the block switch command with index block_ix to the bit stream. */
			private static unsafe void StoreBlockSwitch(BlockSplitCode* code, uint block_len, byte block_type, bool is_first_block, size_t* storage_ix, byte* storage) 
			{
				size_t typecode = NextBlockTypeCode(&code->type_code_calculator, block_type);
				size_t lencode; uint len_nextra; uint len_extra;
				if (!is_first_block) { BrotliWriteBits(code->type_depths[typecode], code->type_bits[typecode], storage_ix, storage); }
				GetBlockLengthPrefixCode(block_len, &lencode, &len_nextra, &len_extra);
				BrotliWriteBits(code->length_depths[lencode], code->length_bits[lencode], storage_ix, storage);
				BrotliWriteBits(len_nextra, len_extra, storage_ix, storage);
			}

			/* Builds a BlockSplitCode data structure from the block split given by the
	   vector of block types and block lengths and stores it to the bit stream. */
			private static unsafe void BuildAndStoreBlockSplitCode(byte* types, uint* lengths, size_t num_blocks, size_t num_types, HuffmanTree* tree, BlockSplitCode* code, size_t* storage_ix, byte* storage) 
			{
				uint* type_histo = stackalloc uint[BROTLI_MAX_BLOCK_TYPE_SYMBOLS];
				uint* length_histo = stackalloc uint[BROTLI_NUM_BLOCK_LEN_SYMBOLS];
				size_t i; BlockTypeCodeCalculator type_code_calculator;
				memset(type_histo, 0, (num_types + 2) * sizeof(uint));
				memset(length_histo, 0, BROTLI_NUM_BLOCK_LEN_SYMBOLS * sizeof(uint));
				InitBlockTypeCodeCalculator(&type_code_calculator);
				for (i = 0; i < num_blocks; ++i) 
				{
					size_t type_code = NextBlockTypeCode(&type_code_calculator, types[i]);
					if (i != 0) ++type_histo[type_code];
					++length_histo[BlockLengthPrefixCode(lengths[i])];
				}
				StoreVarLenUint8(num_types - 1, storage_ix, storage);
				if (num_types > 1) 
				{
					/* TODO: else? could StoreBlockSwitch occur? */
					BuildAndStoreHuffmanTree(&type_histo[0], num_types + 2, tree, &code->type_depths[0], &code->type_bits[0], storage_ix, storage);
					BuildAndStoreHuffmanTree(&length_histo[0], BROTLI_NUM_BLOCK_LEN_SYMBOLS, tree, &code->length_depths[0], &code->length_bits[0], storage_ix, storage);
					StoreBlockSwitch(code, lengths[0], types[0], true, storage_ix, storage);
				}
			}

			/* Creates entropy codes of block lengths and block types and stores them
			   to the bit stream. */
			private static unsafe void BuildAndStoreBlockSwitchEntropyCodes(BlockEncoder* self, HuffmanTree* tree, size_t* storage_ix, byte* storage) { BuildAndStoreBlockSplitCode(self->block_types_, self->block_lengths_, self->num_blocks_, self->num_block_types_, tree, &self->block_split_code_, storage_ix, storage); }

			/* Stores a context map where the histogram type is always the block type. */
			private static unsafe void StoreTrivialContextMap(size_t num_types, size_t context_bits, HuffmanTree* tree, size_t* storage_ix, byte* storage) 
			{
				StoreVarLenUint8(num_types - 1, storage_ix, storage);
				if (num_types > 1) 
				{
					size_t repeat_code = context_bits - 1u;
					size_t repeat_bits = (1u << (int) repeat_code) - 1u;
					size_t alphabet_size = num_types + repeat_code;
					uint* histogram = stackalloc uint[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];
					byte* depths = stackalloc byte[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];
					ushort* bits = stackalloc ushort[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];
					size_t i; memset(histogram, 0, alphabet_size * sizeof(uint));
					/* Write RLEMAX. */
					BrotliWriteBits(1, 1, storage_ix, storage); BrotliWriteBits(4, repeat_code - 1, storage_ix, storage);
					histogram[repeat_code] = (uint) num_types; histogram[0] = 1;
					for (i = context_bits; i < alphabet_size; ++i) { histogram[i] = 1; }
					BuildAndStoreHuffmanTree(histogram, alphabet_size, tree, depths, bits, storage_ix, storage);
					for (i = 0; i < num_types; ++i) 
					{
						size_t code = (i == 0 ? 0 : i + context_bits - 1);
						BrotliWriteBits(depths[code], bits[code], storage_ix, storage);
						BrotliWriteBits(depths[repeat_code], bits[repeat_code], storage_ix, storage);
						BrotliWriteBits(repeat_code, repeat_bits, storage_ix, storage);
					}
					/* Write IMTF (inverse-move-to-front) bit. */
					BrotliWriteBits(1, 1, storage_ix, storage);
				}
			}

			private static unsafe size_t IndexOf(byte* v, size_t v_size, byte value) 
			{
				size_t i = 0;
				for (; i < v_size; ++i) { if (v[i] == value) return i; }
				return i;
			}

			private static unsafe void MoveToFront(byte* v, size_t index) 
			{
				byte value = v[index]; size_t i;
				for (i = index; i != 0; --i) { v[i] = v[i - 1]; }
				v[0] = value;
			}

			private static unsafe void MoveToFrontTransform(uint* v_in, size_t v_size, uint* v_out) 
			{
				size_t i; byte* mtf = stackalloc byte[256]; uint max_value;
				if (v_size == 0) { return; }
				max_value = v_in[0];
				for (i = 1; i < v_size; ++i) { if (v_in[i] > max_value) max_value = v_in[i]; }
				for (i = 0; i <= max_value; ++i) { mtf[i] = (byte) i; }
				{
					size_t mtf_size = max_value + 1;
					for (i = 0; i < v_size; ++i) 
					{
						size_t index = IndexOf(mtf, mtf_size, (byte) v_in[i]);
						v_out[i] = (uint) index;
						MoveToFront(mtf, index);
					}
				}
			}

			/* Finds runs of zeros in v[0..in_size) and replaces them with a prefix code of
			   the run length plus extra bits (lower 9 bits is the prefix code and the rest
			   are the extra bits). Non-zero values in v[] are shifted by
			   *max_length_prefix. Will not create prefix codes bigger than the initial
			   value of *max_run_length_prefix. The prefix code of run length L is simply
			   Log2Floor(L) and the number of extra bits is the same as the prefix code. */
			private static unsafe void RunLengthCodeZeros(size_t in_size, uint* v, size_t* out_size, uint* max_run_length_prefix) 
			{
				uint max_reps = 0; size_t i; uint max_prefix;
				for (i = 0; i < in_size;) 
				{
					uint reps = 0;
					for (; i < in_size && v[i] != 0; ++i) ;
					for (; i < in_size && v[i] == 0; ++i) { ++reps; }
					max_reps = Math.Max(reps, max_reps);
				}
				max_prefix = max_reps > 0 ? Log2FloorNonZero(max_reps) : 0;
				max_prefix = Math.Min(max_prefix, *max_run_length_prefix);
				*max_run_length_prefix = max_prefix; *out_size = 0;
				for (i = 0; i < in_size;) 
				{
					if (v[i] != 0) { v[*out_size] = v[i] + *max_run_length_prefix; ++i; ++(*out_size); }
					else 
					{
						uint reps = 1; size_t k;
						for (k = i + 1; k < in_size && v[k] == 0; ++k) { ++reps; }
						i += reps;
						while (reps != 0) 
						{
							if (reps < (2u << (int) max_prefix)) 
							{
								uint run_length_prefix = Log2FloorNonZero(reps);
								uint extra_bits = reps - (1u << (int) run_length_prefix);
								v[*out_size] = run_length_prefix + (extra_bits << 9);
								++(*out_size);
								break;
							}
							else 
							{
								uint extra_bits = (1u << (int) max_prefix) - 1u;
								v[*out_size] = max_prefix + (extra_bits << 9);
								reps -= (2u << (int) max_prefix) - 1u;
								++(*out_size);
							}
						}
					}
				}
			}

			private const int SYMBOL_BITS = 9;

			private static unsafe void EncodeContextMap(ref MemoryManager m, uint* context_map, size_t context_map_size, size_t num_clusters, HuffmanTree* tree, size_t* storage_ix, byte* storage) 
			{
				size_t i; uint* rle_symbols;
				uint max_run_length_prefix = 6; size_t num_rle_symbols = 0;
				uint* histogram = stackalloc uint[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];
				const uint kSymbolMask = (1u << SYMBOL_BITS) - 1u;
				byte* depths = stackalloc byte[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];
				ushort* bits = stackalloc ushort[BROTLI_MAX_CONTEXT_MAP_SYMBOLS];

				StoreVarLenUint8(num_clusters - 1, storage_ix, storage);

				if (num_clusters == 1) { return; }

				rle_symbols = (uint*) BrotliAllocate(ref m, context_map_size * sizeof(uint));

				MoveToFrontTransform(context_map, context_map_size, rle_symbols);
				RunLengthCodeZeros(context_map_size, rle_symbols, &num_rle_symbols, &max_run_length_prefix);
				memset(histogram, 0, BROTLI_MAX_CONTEXT_MAP_SYMBOLS * sizeof(uint));
				for (i = 0; i < num_rle_symbols; ++i) { ++histogram[rle_symbols[i] & kSymbolMask]; }
				{
					bool use_rle = (max_run_length_prefix > 0);
					BrotliWriteBits(1, use_rle ? 1U : 0U, storage_ix, storage);
					if (use_rle) { BrotliWriteBits(4, max_run_length_prefix - 1, storage_ix, storage); }
				}
				BuildAndStoreHuffmanTree(histogram, num_clusters + max_run_length_prefix, tree, depths, bits, storage_ix, storage);
				for (i = 0; i < num_rle_symbols; ++i) 
				{
					uint rle_symbol = rle_symbols[i] & kSymbolMask;
					uint extra_bits_val = rle_symbols[i] >> SYMBOL_BITS;
					BrotliWriteBits(depths[rle_symbol], bits[rle_symbol], storage_ix, storage);
					if (rle_symbol > 0 && rle_symbol <= max_run_length_prefix) { BrotliWriteBits(rle_symbol, extra_bits_val, storage_ix, storage); }
				}
				BrotliWriteBits(1, 1, storage_ix, storage); /* use move-to-front */
				BrotliFree(ref m, rle_symbols);
			}

			/* Stores the next symbol with the entropy code of the current block type.
			   Updates the block type and block length at block boundaries. */
			private static unsafe void StoreSymbol(BlockEncoder* self, size_t symbol, size_t* storage_ix, byte* storage) 
			{
				if (self->block_len_ == 0) 
				{
					size_t block_ix = ++self->block_ix_; uint block_len = self->block_lengths_[block_ix];
					byte block_type = self->block_types_[block_ix]; self->block_len_ = block_len;
					self->entropy_ix_ = block_type * self->alphabet_size_;
					StoreBlockSwitch(&self->block_split_code_, block_len, block_type, false, storage_ix, storage);
				}
				--self->block_len_;
				{ size_t ix = self->entropy_ix_ + symbol; BrotliWriteBits(self->depths_[ix], self->bits_[ix], storage_ix, storage); }
			}

			/* Stores the next symbol with the entropy code of the current block type and
			   context value.
			   Updates the block type and block length at block boundaries. */
			private static unsafe void StoreSymbolWithContext(BlockEncoder* self, size_t symbol, size_t context, uint* context_map, size_t* storage_ix, byte* storage, size_t context_bits) 
			{
				if (self->block_len_ == 0) 
				{
					size_t block_ix = ++self->block_ix_; uint block_len = self->block_lengths_[block_ix];
					byte block_type = self->block_types_[block_ix]; self->block_len_ = block_len;
					self->entropy_ix_ = (size_t) block_type << (int) context_bits;
					StoreBlockSwitch(&self->block_split_code_, block_len, block_type, false, storage_ix, storage);
				}
				--self->block_len_;
				{
					size_t histo_ix = context_map[self->entropy_ix_ + context];
					size_t ix = histo_ix * self->alphabet_size_ + symbol;
					BrotliWriteBits(self->depths_[ix], self->bits_[ix], storage_ix, storage);
				}
			}

			private static unsafe void CleanupBlockEncoder(ref MemoryManager m, BlockEncoder* self) { BrotliFree(ref m, self->depths_); BrotliFree(ref m, self->bits_); }

			private static unsafe void BrotliStoreMetaBlock(ref MemoryManager m, byte* input, size_t start_pos, size_t length, size_t mask, byte prev_byte, byte prev_byte2,
				bool is_last, uint num_direct_distance_codes, uint distance_postfix_bits, ContextType literal_context_mode, Command* commands, size_t n_commands,
				MetaBlockSplit* mb, size_t* storage_ix, byte* storage) 
			{
				size_t pos = start_pos; size_t i;
				size_t num_distance_codes = BROTLI_NUM_DISTANCE_SHORT_CODES + num_direct_distance_codes + (48u << (int) distance_postfix_bits);
				HuffmanTree* tree;
				BlockEncoder literal_enc; BlockEncoder command_enc; BlockEncoder distance_enc;

				StoreCompressedMetaBlockHeader(is_last, length, storage_ix, storage);

				tree = (HuffmanTree*) BrotliAllocate(ref m, MAX_HUFFMAN_TREE_SIZE * sizeof(HuffmanTree));

				InitBlockEncoder(&literal_enc, 256, mb->literal_split.num_types, mb->literal_split.types, mb->literal_split.lengths, mb->literal_split.num_blocks);
				InitBlockEncoder(&command_enc, BROTLI_NUM_COMMAND_SYMBOLS, mb->command_split.num_types, mb->command_split.types, mb->command_split.lengths, mb->command_split.num_blocks);
				InitBlockEncoder(&distance_enc, num_distance_codes, mb->distance_split.num_types, mb->distance_split.types, mb->distance_split.lengths, mb->distance_split.num_blocks);

				BuildAndStoreBlockSwitchEntropyCodes(&literal_enc, tree, storage_ix, storage);
				BuildAndStoreBlockSwitchEntropyCodes(&command_enc, tree, storage_ix, storage);
				BuildAndStoreBlockSwitchEntropyCodes(&distance_enc, tree, storage_ix, storage);

				BrotliWriteBits(2, distance_postfix_bits, storage_ix, storage);
				BrotliWriteBits(4, num_direct_distance_codes >> (int) distance_postfix_bits, storage_ix, storage);
				for (i = 0; i < mb->literal_split.num_types; ++i) { BrotliWriteBits(2, (ulong) literal_context_mode, storage_ix, storage); }

				if (mb->literal_context_map_size == 0) { StoreTrivialContextMap(mb->literal_histograms_size, BROTLI_LITERAL_CONTEXT_BITS, tree, storage_ix, storage); }
				else { EncodeContextMap(ref m, mb->literal_context_map, mb->literal_context_map_size, mb->literal_histograms_size, tree, storage_ix, storage); }

				if (mb->distance_context_map_size == 0)  { StoreTrivialContextMap(mb->distance_histograms_size, BROTLI_DISTANCE_CONTEXT_BITS, tree, storage_ix, storage); }
				else { EncodeContextMap(ref m, mb->distance_context_map, mb->distance_context_map_size, mb->distance_histograms_size, tree, storage_ix, storage); }

				BlockEncoderLiteral.BuildAndStoreEntropyCodes(ref m, &literal_enc, mb->literal_histograms, mb->literal_histograms_size, tree, storage_ix, storage);

				BlockEncoderCommand.BuildAndStoreEntropyCodes(ref m, &command_enc, mb->command_histograms, mb->command_histograms_size, tree, storage_ix, storage);

				BlockEncoderDistance.BuildAndStoreEntropyCodes(ref m, &distance_enc, mb->distance_histograms, mb->distance_histograms_size, tree, storage_ix, storage);

				BrotliFree(ref m, tree);

				for (i = 0; i < n_commands; ++i) 
				{
					Command cmd = commands[i];
					size_t cmd_code = cmd.cmd_prefix_;
					StoreSymbol(&command_enc, cmd_code, storage_ix, storage);
					StoreCommandExtra(&cmd, storage_ix, storage);
					if (mb->literal_context_map_size == 0) 
					{
						size_t j;
						for (j = cmd.insert_len_; j != 0; --j) { StoreSymbol(&literal_enc, input[pos & mask], storage_ix, storage); ++pos; }
					}
					else 
					{
						size_t j;
						for (j = cmd.insert_len_; j != 0; --j) 
						{
							size_t context = Context(prev_byte, prev_byte2, literal_context_mode); byte literal = input[pos & mask];
							StoreSymbolWithContext(&literal_enc, literal, context, mb->literal_context_map, storage_ix, storage, BROTLI_LITERAL_CONTEXT_BITS);
							prev_byte2 = prev_byte; prev_byte = literal; ++pos;
						}
					}
					pos += CommandCopyLen(&cmd);
					if (CommandCopyLen(&cmd) != 0) 
					{
						prev_byte2 = input[(pos - 2) & mask]; prev_byte = input[(pos - 1) & mask];
						if (cmd.cmd_prefix_ >= 128) 
						{
							size_t dist_code = cmd.dist_prefix_; uint distnumextra = cmd.dist_extra_ >> 24;
							ulong distextra = cmd.dist_extra_ & 0xffffff;
							if (mb->distance_context_map_size == 0) { StoreSymbol(&distance_enc, dist_code, storage_ix, storage); }
							else 
							{
								size_t context = CommandDistanceContext(&cmd);
								StoreSymbolWithContext(&distance_enc, dist_code, context, mb->distance_context_map, storage_ix, storage, BROTLI_DISTANCE_CONTEXT_BITS);
							}
							BrotliWriteBits(distnumextra, distextra, storage_ix, storage);
						}
					}
				}
				CleanupBlockEncoder(ref m, &distance_enc); CleanupBlockEncoder(ref m, &command_enc); CleanupBlockEncoder(ref m, &literal_enc);
				if (is_last) { JumpToByteBoundary(storage_ix, storage); }
			}

			/* |nibblesbits| represents the 2 bits to encode MNIBBLES (0-3)
			   REQUIRES: length > 0
			   REQUIRES: length <= (1 << 24) */
			private static unsafe void BrotliEncodeMlen(size_t length, ulong* bits, size_t* numbits, ulong* nibblesbits) 
			{
				size_t lg = (length == 1) ? 1 : Log2FloorNonZero((uint) (length - 1)) + 1;
				size_t mnibbles = (lg < 16 ? 16 : (lg + 3)) / 4;
				*nibblesbits = mnibbles - 4; *numbits = mnibbles * 4; *bits = length - 1;
			}

			private static unsafe void JumpToByteBoundary(size_t* storage_ix, byte* storage) { *storage_ix = (*storage_ix + 7u) & ~7u; storage[*storage_ix >> 3] = 0; }

			/* Stores the compressed meta-block header.
			   REQUIRES: length > 0
			   REQUIRES: length <= (1 << 24) */
			private static unsafe void StoreCompressedMetaBlockHeader(bool is_final_block, size_t length, size_t* storage_ix, byte* storage) 
			{
				ulong lenbits; size_t nlenbits; ulong nibblesbits;

				/* Write ISLAST bit. */
				BrotliWriteBits(1, is_final_block ? 1U : 0U, storage_ix, storage);
				/* Write ISEMPTY bit. */
				if (is_final_block) { BrotliWriteBits(1, 0, storage_ix, storage); }

				BrotliEncodeMlen(length, &lenbits, &nlenbits, &nibblesbits);
				BrotliWriteBits(2, nibblesbits, storage_ix, storage);
				BrotliWriteBits(nlenbits, lenbits, storage_ix, storage);

				if (!is_final_block) { /* Write ISUNCOMPRESSED bit. */ BrotliWriteBits(1, 0, storage_ix, storage); }
			}

			private static unsafe void StoreCommandExtra(Command* cmd, size_t* storage_ix, byte* storage) 
			{
				uint copylen_code = CommandCopyLenCode(cmd);
				ushort inscode = GetInsertLengthCode(cmd->insert_len_);
				ushort copycode = GetCopyLengthCode(copylen_code);
				uint insnumextra = GetInsertExtra(inscode);
				ulong insextraval = cmd->insert_len_ - GetInsertBase(inscode);
				ulong copyextraval = copylen_code - GetCopyBase(copycode);
				ulong bits = (copyextraval << (int) insnumextra) | insextraval;
				BrotliWriteBits(insnumextra + GetCopyExtra(copycode), bits, storage_ix, storage);
			}

			private static unsafe void StoreDataWithHuffmanCodes(byte* input, size_t start_pos, size_t mask, Command* commands, size_t n_commands,
				byte* lit_depth, ushort* lit_bits, byte* cmd_depth, ushort* cmd_bits, byte* dist_depth, ushort* dist_bits, size_t* storage_ix, byte* storage) 
			{
				size_t pos = start_pos; size_t i;
				for (i = 0; i < n_commands; ++i) 
				{
					Command cmd = commands[i]; size_t cmd_code = cmd.cmd_prefix_; size_t j;
					BrotliWriteBits(cmd_depth[cmd_code], cmd_bits[cmd_code], storage_ix, storage);
					StoreCommandExtra(&cmd, storage_ix, storage);
					for (j = cmd.insert_len_; j != 0; --j) { byte literal = input[pos & mask]; BrotliWriteBits(lit_depth[literal], lit_bits[literal], storage_ix, storage); ++pos; }
					pos += CommandCopyLen(&cmd);
					if (CommandCopyLen(&cmd) != 0 && cmd.cmd_prefix_ >= 128) 
					{
						size_t dist_code = cmd.dist_prefix_; uint distnumextra = cmd.dist_extra_ >> 24; uint distextra = cmd.dist_extra_ & 0xffffff;
						BrotliWriteBits(dist_depth[dist_code], dist_bits[dist_code], storage_ix, storage);
						BrotliWriteBits(distnumextra, distextra, storage_ix, storage);
					}
				}
			}

			private static unsafe void BuildHistograms(byte* input, size_t start_pos, size_t mask, Command* commands, size_t n_commands, HistogramLiteral* lit_histo,
				HistogramCommand* cmd_histo, HistogramDistance* dist_histo) 
			{
				size_t pos = start_pos; size_t i;
				for (i = 0; i < n_commands; ++i) 
				{
					Command cmd = commands[i]; size_t j;
					HistogramCommand.HistogramAdd(cmd_histo, cmd.cmd_prefix_);
					for (j = cmd.insert_len_; j != 0; --j)  { HistogramLiteral.HistogramAdd(lit_histo, input[pos & mask]); ++pos; }
					pos += CommandCopyLen(&cmd);
					if (CommandCopyLen(&cmd) != 0 && cmd.cmd_prefix_ >= 128) { HistogramDistance.HistogramAdd(dist_histo, cmd.dist_prefix_); }
				}
			}

			private static unsafe void StoreSimpleHuffmanTree(byte* depths, size_t* symbols, size_t num_symbols, size_t max_bits, size_t* storage_ix, byte* storage) 
			{
				/* value of 1 indicates a simple Huffman code */
				BrotliWriteBits(2, 1, storage_ix, storage);
				BrotliWriteBits(2, num_symbols - 1, storage_ix, storage); /* NSYM - 1 */

				{
					/* Sort */
					size_t i;
					for (i = 0; i < num_symbols; i++) 
					{
						size_t j;
						for (j = i + 1; j < num_symbols; j++)  { if (depths[symbols[j]] < depths[symbols[i]])  { size_t tmp = symbols[j]; symbols[j] = symbols[i]; symbols[i] = tmp; } }
					}
				}

				if (num_symbols == 2) { BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage); }
				else if (num_symbols == 3) { BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage);
					BrotliWriteBits(max_bits, symbols[2], storage_ix, storage); }
				else 
				{
					BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage); 
					BrotliWriteBits(max_bits, symbols[2], storage_ix, storage); BrotliWriteBits(max_bits, symbols[3], storage_ix, storage);
					/* tree-select */
					BrotliWriteBits(1, depths[symbols[0]] == 1 ? 1U : 0U, storage_ix, storage);
				}
			}

			/* Builds a Huffman tree from histogram[0:length] into depth[0:length] and
				bits[0:length] and stores the encoded tree to the bit stream. */
			private static unsafe void BuildAndStoreHuffmanTree(uint* histogram, size_t length, HuffmanTree* tree, byte* depth, ushort* bits, size_t* storage_ix, byte* storage) 
			{
				size_t count = 0; size_t* s4 = stackalloc size_t[4];
				memset(s4, 0, 4 * sizeof(size_t)); size_t i; size_t max_bits = 0;
				for (i = 0; i < length; i++) { if (histogram[i] != 0) { if (count < 4) { s4[count] = i; } else if (count > 4) { break; } count++; } }

				{ size_t max_bits_counter = length - 1; while (max_bits_counter != 0) { max_bits_counter >>= 1; ++max_bits; } }
				
				if (count <= 1) { BrotliWriteBits(4, 1, storage_ix, storage); BrotliWriteBits(max_bits, s4[0], storage_ix, storage); depth[s4[0]] = 0; bits[s4[0]] = 0; return; }

				memset(depth, 0, length); BrotliCreateHuffmanTree(histogram, length, 15, tree, depth);
				BrotliConvertBitDepthsToSymbols(depth, length, bits);

				if (count <= 4)  { StoreSimpleHuffmanTree(depth, s4, count, max_bits, storage_ix, storage); } else { BrotliStoreHuffmanTree(depth, length, tree, storage_ix, storage); }
				
			}

			private static unsafe void BrotliStoreMetaBlockTrivial(ref MemoryManager m, byte* input, size_t start_pos, size_t length, size_t mask, bool is_last,
				Command* commands, size_t n_commands, size_t* storage_ix, byte* storage) 
			{
				HistogramLiteral lit_histo; HistogramCommand cmd_histo; HistogramDistance dist_histo;
				byte* lit_depth = stackalloc byte[BROTLI_NUM_LITERAL_SYMBOLS];
				ushort* lit_bits = stackalloc ushort[BROTLI_NUM_LITERAL_SYMBOLS];
				byte* cmd_depth = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
				ushort* cmd_bits = stackalloc ushort[BROTLI_NUM_COMMAND_SYMBOLS];
				byte* dist_depth = stackalloc byte[SIMPLE_DISTANCE_ALPHABET_SIZE];
				ushort* dist_bits = stackalloc ushort[SIMPLE_DISTANCE_ALPHABET_SIZE];
				HuffmanTree* tree;

				StoreCompressedMetaBlockHeader(is_last, length, storage_ix, storage);

				HistogramLiteral.HistogramClear(&lit_histo); HistogramCommand.HistogramClear(&cmd_histo);
				HistogramDistance.HistogramClear(&dist_histo);

				BuildHistograms(input, start_pos, mask, commands, n_commands, &lit_histo, &cmd_histo, &dist_histo);

				BrotliWriteBits(13, 0, storage_ix, storage);

				tree = (HuffmanTree*) BrotliAllocate(ref m, MAX_HUFFMAN_TREE_SIZE * sizeof(HuffmanTree));
				BuildAndStoreHuffmanTree(lit_histo.data_, BROTLI_NUM_LITERAL_SYMBOLS, tree, lit_depth, lit_bits, storage_ix, storage);
				BuildAndStoreHuffmanTree(cmd_histo.data_, BROTLI_NUM_COMMAND_SYMBOLS, tree, cmd_depth, cmd_bits, storage_ix, storage);
				BuildAndStoreHuffmanTree(dist_histo.data_, SIMPLE_DISTANCE_ALPHABET_SIZE, tree, dist_depth, dist_bits, storage_ix, storage);
				BrotliFree(ref m, tree);
				StoreDataWithHuffmanCodes(input, start_pos, mask, commands, n_commands, lit_depth, lit_bits, cmd_depth, cmd_bits, dist_depth, dist_bits, storage_ix, storage);
				if (is_last) { JumpToByteBoundary(storage_ix, storage); }
			}

			private static unsafe void BrotliStoreMetaBlockFast(ref MemoryManager m, byte* input, size_t start_pos, size_t length,
				size_t mask, bool is_last, Command* commands, size_t n_commands, size_t* storage_ix, byte* storage) 
			{
				StoreCompressedMetaBlockHeader(is_last, length, storage_ix, storage);

				BrotliWriteBits(13, 0, storage_ix, storage);

				if (n_commands <= 128) 
				{
					uint* histogram = stackalloc uint[BROTLI_NUM_LITERAL_SYMBOLS];
					memset(histogram, 0, BROTLI_NUM_LITERAL_SYMBOLS * sizeof(uint));
					size_t pos = start_pos; size_t num_literals = 0; size_t i;
					byte* lit_depth = stackalloc byte[BROTLI_NUM_LITERAL_SYMBOLS];
					ushort* lit_bits = stackalloc ushort[BROTLI_NUM_LITERAL_SYMBOLS];
					for (i = 0; i < n_commands; ++i) 
					{
						Command cmd = commands[i]; size_t j;
						for (j = cmd.insert_len_; j != 0; --j) { ++histogram[input[pos & mask]]; ++pos; }
						num_literals += cmd.insert_len_; pos += CommandCopyLen(&cmd);
					}
					BrotliBuildAndStoreHuffmanTreeFast(ref m, histogram, num_literals, /* max_bits = */ 8, lit_depth, lit_bits, storage_ix, storage);
					StoreStaticCommandHuffmanTree(storage_ix, storage);
					StoreStaticDistanceHuffmanTree(storage_ix, storage);
					fixed (byte* command_code_depth = kStaticCommandCodeDepth)
					fixed (ushort* command_code_bits = kStaticCommandCodeBits)
					fixed (byte* distance_code_depth = kStaticDistanceCodeDepth)
					fixed (ushort* distance_code_bits = kStaticDistanceCodeBits)
						StoreDataWithHuffmanCodes(input, start_pos, mask, commands,
							n_commands, lit_depth, lit_bits, command_code_depth,
							command_code_bits, distance_code_depth, 
							distance_code_bits, storage_ix, storage);
				}
				else 
				{
					HistogramLiteral lit_histo; HistogramCommand cmd_histo; HistogramDistance dist_histo;
					byte* lit_depth = stackalloc byte[BROTLI_NUM_LITERAL_SYMBOLS];
					ushort* lit_bits = stackalloc ushort[BROTLI_NUM_LITERAL_SYMBOLS];
					byte* cmd_depth = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
					ushort* cmd_bits = stackalloc ushort[BROTLI_NUM_COMMAND_SYMBOLS];
					byte* dist_depth = stackalloc byte[SIMPLE_DISTANCE_ALPHABET_SIZE];
					ushort* dist_bits = stackalloc ushort[SIMPLE_DISTANCE_ALPHABET_SIZE];
					HistogramLiteral.HistogramClear(&lit_histo); HistogramCommand.HistogramClear(&cmd_histo); 
					HistogramDistance.HistogramClear(&dist_histo);
					BuildHistograms(input, start_pos, mask, commands, n_commands, &lit_histo, &cmd_histo, &dist_histo);
					BrotliBuildAndStoreHuffmanTreeFast(ref m, lit_histo.data_, lit_histo.total_count_, /* max_bits = */ 8, lit_depth, lit_bits, storage_ix, storage);
					BrotliBuildAndStoreHuffmanTreeFast(ref m, cmd_histo.data_, cmd_histo.total_count_, /* max_bits = */ 10, cmd_depth, cmd_bits, storage_ix, storage);
					BrotliBuildAndStoreHuffmanTreeFast(ref m, dist_histo.data_, dist_histo.total_count_, /* max_bits = */ SIMPLE_DISTANCE_ALPHABET_BITS, 
						dist_depth, dist_bits, storage_ix, storage);
					StoreDataWithHuffmanCodes(input, start_pos, mask, commands, n_commands, lit_depth, lit_bits, cmd_depth, cmd_bits, dist_depth, dist_bits, storage_ix, storage);
				}

				if (is_last) { JumpToByteBoundary(storage_ix, storage); }
			}

			/* This is for storing uncompressed blocks (simple raw storage of
				bytes-as-bytes). */
			private static unsafe void BrotliStoreUncompressedMetaBlock(bool is_final_block, byte* input, size_t position, size_t mask, size_t len, size_t* storage_ix, byte* storage) 
			{
				size_t masked_pos = position & mask;
				BrotliStoreUncompressedMetaBlockHeader(len, storage_ix, storage);
				JumpToByteBoundary(storage_ix, storage);

				if (masked_pos + len > mask + 1) 
				{
					size_t len1 = mask + 1 - masked_pos; memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len1);
					*storage_ix += len1 << 3; len -= len1; masked_pos = 0;
				}
				memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len); *storage_ix += len << 3;

				/* We need to clear the next 4 bytes to continue to be
				   compatible with BrotliWriteBits. */
				BrotliWriteBitsPrepareStorage(*storage_ix, storage);

				/* Since the uncompressed block itself may not be the final block, add an
				   empty one after this. */
				if (is_final_block) 
				{
					BrotliWriteBits(1, 1, storage_ix, storage); /* islast */
					BrotliWriteBits(1, 1, storage_ix, storage); /* isempty */
					JumpToByteBoundary(storage_ix, storage);
				}
			}

			/* Stores the uncompressed meta-block header.
			   REQUIRES: length > 0
			   REQUIRES: length <= (1 << 24) */
			private static unsafe void BrotliStoreUncompressedMetaBlockHeader(size_t length, size_t* storage_ix, byte* storage) 
			{
				ulong lenbits; size_t nlenbits; ulong nibblesbits;

				/* Write ISLAST bit.
				   Uncompressed block cannot be the last one, so set to 0. */
				BrotliWriteBits(1, 0, storage_ix, storage);
				BrotliEncodeMlen(length, &lenbits, &nlenbits, &nibblesbits);
				BrotliWriteBits(2, nibblesbits, storage_ix, storage);
				BrotliWriteBits(nlenbits, lenbits, storage_ix, storage);
				/* Write ISUNCOMPRESSED bit. */
				BrotliWriteBits(1, 1, storage_ix, storage);
			}

			private static unsafe void BrotliStoreHuffmanTreeToBitMask(size_t huffman_tree_size, byte* huffman_tree, byte* huffman_tree_extra_bits, byte* code_length_bitdepth,
				ushort* code_length_bitdepth_symbols, size_t* storage_ix, byte* storage) 
			{
				size_t i;
				for (i = 0; i < huffman_tree_size; ++i) 
				{
					size_t ix = huffman_tree[i]; BrotliWriteBits(code_length_bitdepth[ix], code_length_bitdepth_symbols[ix], storage_ix, storage);
					/* Extra bits */
					switch ((int) ix) 
					{
						case BROTLI_REPEAT_PREVIOUS_CODE_LENGTH: BrotliWriteBits(2, huffman_tree_extra_bits[i], storage_ix, storage); break;
						case BROTLI_REPEAT_ZERO_CODE_LENGTH: BrotliWriteBits(3, huffman_tree_extra_bits[i], storage_ix, storage); break;
					}
				}
			}

			private static unsafe void BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask(int num_codes, byte* code_length_bitdepth, size_t* storage_ix, byte* storage) 
			{
				byte[] kStorageOrder = { 1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
				/* The bit lengths of the Huffman code over the code length alphabet
				   are compressed with the following private static unsafe Huffman code:
					 Symbol   Code
					 ------   ----
					 0          00
					 1        1110
					 2         110
					 3          01
					 4          10
					 5        1111 */
				byte[] kHuffmanBitLengthHuffmanCodeSymbols = { 0, 7, 3, 2, 1, 15 };
				byte[] kHuffmanBitLengthHuffmanCodeBitLengths = { 2, 4, 3, 2, 2, 4 };

				size_t skip_some = 0; /* skips none. */

				/* Throw away trailing zeros: */
				size_t codes_to_store = BROTLI_CODE_LENGTH_CODES;
				if (num_codes > 1) { for (; codes_to_store > 0; --codes_to_store) { if (code_length_bitdepth[kStorageOrder[codes_to_store - 1]] != 0) { break; } } }
				if (code_length_bitdepth[kStorageOrder[0]] == 0 && code_length_bitdepth[kStorageOrder[1]] == 0) { skip_some = 2; /* skips two. */ if (code_length_bitdepth[kStorageOrder[2]] == 0) { skip_some = 3; /* skips three. */ } }
				BrotliWriteBits(2, skip_some, storage_ix, storage);
				{
					size_t i;
					for (i = skip_some; i < codes_to_store; ++i) { size_t l = code_length_bitdepth[kStorageOrder[i]]; BrotliWriteBits(kHuffmanBitLengthHuffmanCodeBitLengths[l], kHuffmanBitLengthHuffmanCodeSymbols[l], storage_ix, storage); }
				}
			}

			/* num = alphabet size
			   depths = symbol depths */
			private static unsafe void BrotliStoreHuffmanTree(byte* depths, size_t num, HuffmanTree* tree, size_t* storage_ix, byte* storage) 
			{
				/* Write the Huffman tree into the brotli-representation.
				   The command alphabet is the largest, so this allocation will fit all
				   alphabets. */
				byte* huffman_tree = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
				byte* huffman_tree_extra_bits = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
				size_t huffman_tree_size = 0;
				byte* code_length_bitdepth = stackalloc byte[BROTLI_CODE_LENGTH_CODES];
				memset(code_length_bitdepth, 0, BROTLI_CODE_LENGTH_CODES);
				ushort* code_length_bitdepth_symbols = stackalloc ushort[BROTLI_CODE_LENGTH_CODES];
				uint* huffman_tree_histogram = stackalloc uint[BROTLI_CODE_LENGTH_CODES];
				memset(huffman_tree_histogram, 0, BROTLI_CODE_LENGTH_CODES * sizeof(uint));
				size_t i; int num_codes = 0; size_t code = 0;

				BrotliWriteHuffmanTree(depths, num, &huffman_tree_size, huffman_tree, huffman_tree_extra_bits);

				/* Calculate the statistics of the Huffman tree in brotli-representation. */
				for (i = 0; i < huffman_tree_size; ++i) { ++huffman_tree_histogram[huffman_tree[i]]; }

				for (i = 0; i < BROTLI_CODE_LENGTH_CODES; ++i)  { if (huffman_tree_histogram[i] != 0) { if (num_codes == 0) { code = i; num_codes = 1; } else if (num_codes == 1) { num_codes = 2; break; } } }

				/* Calculate another Huffman tree to use for compressing both the
				   earlier Huffman tree with. */
				BrotliCreateHuffmanTree(huffman_tree_histogram, BROTLI_CODE_LENGTH_CODES, 5, tree, code_length_bitdepth);
				BrotliConvertBitDepthsToSymbols(code_length_bitdepth, BROTLI_CODE_LENGTH_CODES, code_length_bitdepth_symbols);

				/* Now, we have all the data, let's start storing it */
				BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask(num_codes, code_length_bitdepth, storage_ix, storage);

				if (num_codes == 1) { code_length_bitdepth[code] = 0; }

				/* Store the real Huffman tree now. */
				BrotliStoreHuffmanTreeToBitMask(huffman_tree_size, huffman_tree, huffman_tree_extra_bits, code_length_bitdepth, code_length_bitdepth_symbols, storage_ix, storage);
			}

			private static unsafe bool SortHuffmanTreeBitStream(HuffmanTree* v0, HuffmanTree* v1) { return (v0->total_count_ < v1->total_count_); }

			private static unsafe void BrotliBuildAndStoreHuffmanTreeFast(ref MemoryManager m, uint* histogram, size_t histogram_total, size_t max_bits,
				byte* depth, ushort* bits, size_t* storage_ix, byte* storage) 
			{
				size_t count = 0; size_t* symbols = stackalloc size_t[4]; memset(symbols, 0, 4 * sizeof(size_t)); size_t length = 0; size_t total = histogram_total;
				while (total != 0)  { if (histogram[length] != 0) { if (count < 4) { symbols[count] = length; }  ++count; total -= histogram[length]; } ++length; }

				if (count <= 1) { BrotliWriteBits(4, 1, storage_ix, storage); BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); depth[symbols[0]] = 0; bits[symbols[0]] = 0; return; }

				memset(depth, 0, length);
				{
					size_t max_tree_size = 2 * length + 1;
					HuffmanTree* tree = (HuffmanTree*) BrotliAllocate(ref m, max_tree_size * sizeof(HuffmanTree));
					uint count_limit;

					for (count_limit = 1;; count_limit *= 2) 
					{
						HuffmanTree* node = tree; size_t l;
						for (l = length; l != 0;) 
						{
							--l;
							if (histogram[l] != 0) { if ((histogram[l] >= count_limit)) { InitHuffmanTree(node, histogram[l], -1, (short) l); } else { InitHuffmanTree(node, count_limit, -1, (short) l); } ++node; }
						}
						{
							int n = (int) (node - tree); HuffmanTree sentinel;
							int i = 0; /* Points to the next leaf node. */
							int j = n + 1; /* Points to the next non-leaf node. */ int k;

							SortHuffmanTreeItems(tree, (size_t) n, SortHuffmanTreeBitStream);
							/* The nodes are:
							   [0, n): the sorted leaf nodes that we start with.
							   [n]: we add a sentinel here.
							   [n + 1, 2n): new parent nodes are added here, starting from
											(n+1). These are naturally in ascending order.
							   [2n]: we add a sentinel at the end as well.
							   There will be (2n+1) elements at the end. */
							InitHuffmanTree(&sentinel, uint.MaxValue, -1, -1); *node++ = sentinel; *node++ = sentinel;

							for (k = n - 1; k > 0; --k) 
							{
								int left, right;
								if (tree[i].total_count_ <= tree[j].total_count_) { left = i; ++i; } else { left = j; ++j; }
								if (tree[i].total_count_ <= tree[j].total_count_) { right = i; ++i; } else { right = j; ++j; }
								/* The sentinel node becomes the parent node. */
								node[-1].total_count_ = tree[left].total_count_ + tree[right].total_count_;
								node[-1].index_left_ = (short) left; node[-1].index_right_or_value_ = (short) right;
								/* Add back the last sentinel node. */
								*node++ = sentinel;
							}
							if (BrotliSetDepth(2 * n - 1, tree, depth, 14)) { /* We need to pack the Huffman tree in 14 bits. If this was not successful, add fake entities to the lowest values and retry. */ break; }
						}
					}
					BrotliFree(ref m, tree);
				}

				BrotliConvertBitDepthsToSymbols(depth, length, bits);
				if (count <= 4) 
				{
					size_t i;
					/* value of 1 indicates a simple Huffman code */
					BrotliWriteBits(2, 1, storage_ix, storage); BrotliWriteBits(2, count - 1, storage_ix, storage); /* NSYM - 1 */

					/* Sort */
					for (i = 0; i < count; i++) 
					{
						size_t j;
						for (j = i + 1; j < count; j++) { if (depth[symbols[j]] < depth[symbols[i]])  { size_t tmp = symbols[j]; symbols[j] = symbols[i]; symbols[i] = tmp; } }
					}

					if (count == 2) { BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage); }
					else if (count == 3) 
					{
						BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage); BrotliWriteBits(max_bits, symbols[2], storage_ix, storage);
					}
					else {
						BrotliWriteBits(max_bits, symbols[0], storage_ix, storage); BrotliWriteBits(max_bits, symbols[1], storage_ix, storage);
						BrotliWriteBits(max_bits, symbols[2], storage_ix, storage); BrotliWriteBits(max_bits, symbols[3], storage_ix, storage);
						/* tree-select */
						BrotliWriteBits(1, depth[symbols[0]] == 1 ? 1U : 0U, storage_ix, storage);
					}
				}
				else 
				{
					byte previous_value = 8; size_t i;
					/* Complex Huffman Tree */
					StoreStaticCodeLengthCode(storage_ix, storage);

					/* Actual RLE coding. */
					for (i = 0; i < length;) 
					{
						byte value = depth[i]; size_t reps = 1; size_t k;
						for (k = i + 1; k < length && depth[k] == value; ++k) { ++reps; }
						i += reps;
						if (value == 0) { BrotliWriteBits(kZeroRepsDepth[reps], kZeroRepsBits[reps], storage_ix, storage); }
						else 
						{
							if (previous_value != value)  { BrotliWriteBits(kCodeLengthDepth[value], kCodeLengthBits[value], storage_ix, storage); --reps; }
							if (reps < 3)  { while (reps != 0)  { reps--; BrotliWriteBits(kCodeLengthDepth[value], kCodeLengthBits[value], storage_ix, storage); } }
							else { reps -= 3; BrotliWriteBits(kNonZeroRepsDepth[reps], kNonZeroRepsBits[reps], storage_ix, storage); }
							previous_value = value;
						}
					}
				}
			}

			private static unsafe class BlockEncoderLiteral 
			{
				public static unsafe void BuildAndStoreEntropyCodes(ref MemoryManager m, BlockEncoder* self,
					HistogramLiteral* histograms, size_t histograms_size, HuffmanTree* tree, size_t* storage_ix, byte* storage)
				{
					size_t alphabet_size = self->alphabet_size_; size_t table_size = histograms_size * alphabet_size;
					self->depths_ = (byte*)BrotliAllocate(ref m, table_size * sizeof(byte));
					self->bits_ = (ushort*)BrotliAllocate(ref m, table_size * sizeof(ushort));
					{
						size_t i;
						for (i = 0; i < histograms_size; ++i)
						{
							size_t ix = i * alphabet_size;
							BuildAndStoreHuffmanTree(&histograms[i].data_[0], alphabet_size, tree, &self->depths_[ix], &self->bits_[ix], storage_ix, storage);
						}
					}
				}
			}

			private static unsafe class BlockEncoderDistance
			{
				public static unsafe void BuildAndStoreEntropyCodes(ref MemoryManager m, BlockEncoder* self, HistogramDistance* histograms, 
					size_t histograms_size, HuffmanTree* tree, size_t* storage_ix, byte* storage)
				{
					size_t alphabet_size = self->alphabet_size_; size_t table_size = histograms_size * alphabet_size;
					self->depths_ = (byte*)BrotliAllocate(ref m, table_size * sizeof(byte));
					self->bits_ = (ushort*)BrotliAllocate(ref m, table_size * sizeof(ushort));
					{
						size_t i;
						for (i = 0; i < histograms_size; ++i)
						{
							size_t ix = i * alphabet_size;
							BuildAndStoreHuffmanTree(&histograms[i].data_[0], alphabet_size, tree, &self->depths_[ix], &self->bits_[ix], storage_ix, storage);
						}
					}
				}
			}

			private static unsafe class BlockEncoderCommand
			{
				public static unsafe void BuildAndStoreEntropyCodes(ref MemoryManager m, BlockEncoder* self,
					HistogramCommand* histograms, size_t histograms_size, HuffmanTree* tree, size_t* storage_ix, byte* storage)
				{
					size_t alphabet_size = self->alphabet_size_; size_t table_size = histograms_size * alphabet_size;
					self->depths_ = (byte*)BrotliAllocate(ref m, table_size * sizeof(byte));
					self->bits_ = (ushort*)BrotliAllocate(ref m, table_size * sizeof(ushort));
					{
						size_t i;
						for (i = 0; i < histograms_size; ++i)
						{
							size_t ix = i * alphabet_size;
							BuildAndStoreHuffmanTree(&histograms[i].data_[0], alphabet_size, tree, &self->depths_[ix], &self->bits_[ix], storage_ix, storage);
						}
					}
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct BlockSplit
			{
				public size_t num_types;  /* Amount of distinct types */
				public size_t num_blocks;  /* Amount of values in types and length */
				public byte* types; public uint* lengths;

				public size_t types_alloc_size; public size_t lengths_alloc_size;
			}

			private static unsafe size_t CountLiterals(Command* cmds, size_t num_commands)
			{
				/* Count how many we have. */
				size_t total_length = 0; size_t i;
				for (i = 0; i < num_commands; ++i) { total_length += cmds[i].insert_len_; }
				return total_length;
			}

			private static unsafe void CopyLiteralsToByteArray(Command* cmds, size_t num_commands, byte* data, size_t offset, size_t mask, byte* literals)
			{
				size_t pos = 0; size_t from_pos = offset & mask; size_t i;
				for (i = 0; i < num_commands; ++i)
				{
					size_t insert_len = cmds[i].insert_len_;
					if (from_pos + insert_len > mask)
					{
						size_t head_size = mask + 1 - from_pos; memcpy(literals + pos, data + from_pos, head_size);
						from_pos = 0; pos += head_size; insert_len -= head_size;
					}
					if (insert_len > 0) { memcpy(literals + pos, data + from_pos, insert_len); pos += insert_len; }
					from_pos = (from_pos + insert_len + CommandCopyLen(&cmds[i])) & mask;
				}
			}

			private static unsafe void BrotliInitBlockSplit(BlockSplit* self)
			{
				self->num_types = 0; self->num_blocks = 0; self->types = null;
				self->lengths = null; self->types_alloc_size = 0; self->lengths_alloc_size = 0;
			}

			private static unsafe uint MyRand(uint* seed)
			{
				*seed *= 16807U;
				if (*seed == 0) { *seed = 1; }
				return *seed;
			}

			private static unsafe void BrotliDestroyBlockSplit(ref MemoryManager m, BlockSplit* self) { BrotliFree(ref m, self->types); BrotliFree(ref m, self->lengths); }

			private static double BitCost(size_t count) { return count == 0 ? -2.0 : FastLog2(count); }

			private static unsafe void BrotliSplitBlock(ref MemoryManager m, Command* cmds, size_t num_commands, byte* data, size_t pos, 
				size_t mask, BrotliEncoderParams* params_, BlockSplit* literal_split, BlockSplit* insert_and_copy_split, BlockSplit* dist_split)
			{
				{
					size_t literals_count = CountLiterals(cmds, num_commands);
					byte* literals = (byte*)BrotliAllocate(ref m, literals_count * sizeof(byte));
					/* Create a continuous array of literals. */
					CopyLiteralsToByteArray(cmds, num_commands, data, pos, mask, literals);
					/* Create the block split on the array of literals.
					   Literal histograms have alphabet size 256. */
					BlockSplitterLiteral.SplitByteVector(ref m, literals, literals_count, kSymbolsPerLiteralHistogram, kMaxLiteralHistograms, kLiteralStrideLength, kLiteralBlockSwitchCost, params_, literal_split);
					BrotliFree(ref m, literals);
				}

				{
					/* Compute prefix codes for commands. */
					ushort* insert_and_copy_codes = (ushort*)BrotliAllocate(ref m, num_commands * sizeof(ushort));
					size_t i;

					for (i = 0; i < num_commands; ++i) { insert_and_copy_codes[i] = cmds[i].cmd_prefix_; }
					/* Create the block split on the array of command prefixes. */
					BlockSplitterCommand.SplitByteVector( ref m, insert_and_copy_codes, num_commands, kSymbolsPerCommandHistogram, kMaxCommandHistograms,
						kCommandStrideLength, kCommandBlockSwitchCost, params_, insert_and_copy_split);

					/* TODO: reuse for distances? */
					BrotliFree(ref m, insert_and_copy_codes);
				}

				{
					/* Create a continuous array of distance prefixes. */
					ushort* distance_prefixes = (ushort*)BrotliAllocate(ref m, num_commands * sizeof(ushort));
					size_t j = 0; size_t i;

					for (i = 0; i < num_commands; ++i) { Command* cmd = &cmds[i]; if (CommandCopyLen(cmd) != 0 && cmd->cmd_prefix_ >= 128) { distance_prefixes[j++] = cmd->dist_prefix_; } }
					/* Create the block split on the array of distance prefixes. */
					BlockSplitterDistance.SplitByteVector( ref m, distance_prefixes, j, kSymbolsPerDistanceHistogram, kMaxCommandHistograms, kCommandStrideLength, kDistanceBlockSwitchCost, params_, dist_split);

					BrotliFree(ref m, distance_prefixes);
				}
			}

			private static readonly size_t kMaxLiteralHistograms = 100; private static readonly size_t kMaxCommandHistograms = 50;
			private const double kLiteralBlockSwitchCost = 28.1; private const double kCommandBlockSwitchCost = 13.5;
			private const double kDistanceBlockSwitchCost = 14.6; private static readonly size_t kLiteralStrideLength = 70;
			private static readonly size_t kCommandStrideLength = 40; private static readonly size_t kSymbolsPerLiteralHistogram = 544;
			private static readonly size_t kSymbolsPerCommandHistogram = 530; private static readonly size_t kSymbolsPerDistanceHistogram = 544;
			private static readonly size_t kMinLengthForBlockSplitting = 128; private static readonly size_t kIterMulForRefining = 2;
			private static readonly size_t kMinItersForRefining = 100;

			private unsafe partial struct BlockSplitterLiteral 
			{

				private static void InitialEntropyCodes(byte* data, size_t length, size_t stride, size_t num_histograms, HistogramLiteral* histograms) 
				{
					uint seed = 7; size_t block_length = length / num_histograms; size_t i;
					HistogramLiteral.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < num_histograms; ++i) 
					{
						size_t pos = length * i / num_histograms;
						if (i != 0) { pos += MyRand(&seed) % block_length; }
						if (pos + stride >= length) { pos = length - stride - 1; }
						HistogramLiteral.HistogramAddVector(&histograms[i], data + pos, stride);
					}
				}

				private static unsafe void RandomSample(uint* seed, byte* data, size_t length, size_t stride, HistogramLiteral* sample) 
				{
					size_t pos = 0;
					if (stride >= length) { pos = 0; stride = length; } else { pos = MyRand(seed) % (length - stride + 1); }
					HistogramLiteral.HistogramAddVector(sample, data + pos, stride);
				}

				private static unsafe void RefineEntropyCodes(byte* data, size_t length, size_t stride, size_t num_histograms, HistogramLiteral* histograms) 
				{
					size_t iters = kIterMulForRefining * length / stride + kMinItersForRefining; uint seed = 7; size_t iter;
					iters = ((iters + num_histograms - 1) / num_histograms) * num_histograms;
					for (iter = 0; iter < iters; ++iter) 
					{
						HistogramLiteral sample;
						HistogramLiteral.HistogramClear(&sample);
						RandomSample(&seed, data, length, stride, &sample);
						HistogramLiteral.HistogramAddHistogram(&histograms[iter % num_histograms], &sample);
					}
				}

				/* Assigns a block id from the range [0, num_histograms) to each data element
				   in data[0..length) and fills in block_id[0..length) with the assigned values.
				   Returns the number of blocks, i.e. one plus the number of block switches. */
				private static unsafe size_t FindBlocks(byte* data, size_t length, double block_switch_bitcost, size_t num_histograms, HistogramLiteral* histograms,
					double* insert_cost, double* cost, byte* switch_signal, byte* block_id) 
				{
					size_t data_size = HistogramLiteral.HistogramDataSize();
					size_t bitmaplen = (num_histograms + 7) >> 3;
					size_t num_blocks = 1;
					size_t i;
					size_t j;
					if (num_histograms <= 1) { for (i = 0; i < length; ++i) { block_id[i] = 0; } return 1; }
					memset(insert_cost, 0, sizeof(double) * data_size * num_histograms);
					for (i = 0; i < num_histograms; ++i) { insert_cost[i] = FastLog2((uint) histograms[i].total_count_); }
					for (i = data_size; i != 0;) { --i; for (j = 0; j < num_histograms; ++j) { insert_cost[i * num_histograms + j] = insert_cost[j] - BitCost(histograms[j].data_[i]); } }
					memset(cost, 0, sizeof(double) * num_histograms);
					memset(switch_signal, 0, sizeof(byte) * length * bitmaplen);
					/* After each iteration of this loop, cost[k] will contain the difference
					   between the minimum cost of arriving at the current byte position using
					   entropy code k, and the minimum cost of arriving at the current byte
					   position. This difference is capped at the block switch cost, and if it
					   reaches block switch cost, it means that when we trace back from the last
					   position, we need to switch here. */
					for (i = 0; i < length; ++i) 
					{
						size_t byte_ix = i;
						size_t ix = byte_ix * bitmaplen;
						size_t insert_cost_ix = data[byte_ix] * num_histograms;
						double min_cost = 1e99;
						double block_switch_cost = block_switch_bitcost;
						size_t k;
						for (k = 0; k < num_histograms; ++k) { /* We are coding the symbol in data[byte_ix] with entropy code k. */ cost[k] += insert_cost[insert_cost_ix + k]; if (cost[k] < min_cost) { min_cost = cost[k]; block_id[byte_ix] = (byte) k; } }
						/* More blocks for the beginning. */
						if (byte_ix < 2000) { block_switch_cost *= 0.77 + 0.07 * (double) byte_ix / 2000; }
						for (k = 0; k < num_histograms; ++k) 
						{
							cost[k] -= min_cost; if (cost[k] >= block_switch_cost) { byte mask = (byte) (1u << (int) (k & 7)); cost[k] = block_switch_cost; switch_signal[ix + (k >> 3)] |= mask; }
						}
					}
					{
						/* Trace back from the last position and switch at the marked places. */
						size_t byte_ix = length - 1;
						size_t ix = byte_ix * bitmaplen;
						byte cur_id = block_id[byte_ix];
						while (byte_ix > 0) 
						{
							byte mask = (byte) (1u << (cur_id & 7));
							--byte_ix;
							ix -= bitmaplen;
							if ((switch_signal[ix + (cur_id >> 3)] & mask) != 0) { if (cur_id != block_id[byte_ix]) { cur_id = block_id[byte_ix]; ++num_blocks; } }
							block_id[byte_ix] = cur_id;
						}
					}
					return num_blocks;
				}

				private static size_t RemapBlockIds(byte* block_ids, size_t length, ushort* new_id, size_t num_histograms) 
				{
					const ushort kInvalidId = 256;
					ushort next_id = 0;
					size_t i;
					for (i = 0; i < num_histograms; ++i) { new_id[i] = kInvalidId; }
					for (i = 0; i < length; ++i) { if (new_id[block_ids[i]] == kInvalidId) { new_id[block_ids[i]] = next_id++; } }
					for (i = 0; i < length; ++i) { block_ids[i] = (byte) new_id[block_ids[i]]; }
					return next_id;
				}

				private static unsafe void BuildBlockHistograms(byte* data, size_t length, byte* block_ids, size_t num_histograms, HistogramLiteral* histograms) 
				{
					size_t i;
					HistogramLiteral.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < length; ++i) { HistogramLiteral.HistogramAdd(&histograms[block_ids[i]], data[i]); }
				}

				private static unsafe void ClusterBlocks(ref MemoryManager m, byte* data, size_t length, size_t num_blocks, byte* block_ids, BlockSplit* split) 
				{
					uint* histogram_symbols = (uint*) BrotliAllocate(ref m, num_blocks * sizeof(uint));
					uint* block_lengths = (uint*) BrotliAllocate(ref m, num_blocks * sizeof(uint));
					size_t expected_num_clusters = CLUSTERS_PER_BATCH * (num_blocks + HISTOGRAMS_PER_BATCH - 1) / HISTOGRAMS_PER_BATCH;
					size_t all_histograms_size = 0;
					size_t all_histograms_capacity = expected_num_clusters;
					HistogramLiteral* all_histograms = (HistogramLiteral*) BrotliAllocate(ref m, all_histograms_capacity * sizeof(HistogramLiteral));
					size_t cluster_size_size = 0;
					size_t cluster_size_capacity = expected_num_clusters;
					uint* cluster_size = (uint*) BrotliAllocate(ref m, cluster_size_capacity * sizeof(uint));
					size_t num_clusters = 0;
					HistogramLiteral* histograms = (HistogramLiteral*) BrotliAllocate(ref m,
						Math.Min(num_blocks, HISTOGRAMS_PER_BATCH) * sizeof(HistogramLiteral));
					size_t max_num_pairs = HISTOGRAMS_PER_BATCH * HISTOGRAMS_PER_BATCH / 2;
					size_t pairs_capacity = max_num_pairs + 1;
					HistogramPair* pairs = (HistogramPair*) BrotliAllocate(ref m, pairs_capacity * sizeof(HistogramPair));
					size_t pos = 0;
					uint* clusters;
					size_t num_final_clusters;
					const uint kInvalidIndex = uint.MaxValue;
					uint* new_index;
					size_t i;
					uint* sizes = stackalloc uint[HISTOGRAMS_PER_BATCH];
					memset(sizes, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* new_clusters = stackalloc uint[HISTOGRAMS_PER_BATCH];
					memset(new_clusters, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* symbols = stackalloc uint[HISTOGRAMS_PER_BATCH];
					memset(symbols, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* remap = stackalloc uint[HISTOGRAMS_PER_BATCH];
					memset(remap, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));


					memset(block_lengths, 0, num_blocks * sizeof(uint));

					{ size_t block_idx = 0; for (i = 0; i < length; ++i) { ++block_lengths[block_idx]; if (i + 1 == length || block_ids[i] != block_ids[i + 1]) { ++block_idx; } } }

					for (i = 0; i < num_blocks; i += HISTOGRAMS_PER_BATCH) 
					{
						size_t num_to_combine = Math.Min(num_blocks - i, HISTOGRAMS_PER_BATCH);
						size_t num_new_clusters;
						size_t j;
						for (j = 0; j < num_to_combine; ++j) 
						{
							size_t k;
							HistogramLiteral.HistogramClear(&histograms[j]);
							for (k = 0; k < block_lengths[i + j]; ++k) { HistogramLiteral.HistogramAdd(&histograms[j], data[pos++]); }
							histograms[j].bit_cost_ = BitCostLiteral.BrotliPopulationCost(&histograms[j]);
							new_clusters[j] = (uint) j;
							symbols[j] = (uint) j;
							sizes[j] = 1;
						}
						num_new_clusters = ClusterLiteral.BrotliHistogramCombine( histograms, sizes, symbols, new_clusters, pairs, num_to_combine, num_to_combine, HISTOGRAMS_PER_BATCH, max_num_pairs);

						BrotliEnsureCapacity(ref m, sizeof(HistogramLiteral), (void**)&all_histograms, &all_histograms_capacity, all_histograms_size + num_new_clusters);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&cluster_size, &cluster_size_capacity, cluster_size_size + num_new_clusters);

						for (j = 0; j < num_new_clusters; ++j) { all_histograms[all_histograms_size++] = histograms[new_clusters[j]]; cluster_size[cluster_size_size++] = sizes[new_clusters[j]]; remap[new_clusters[j]] = (uint) j; }
						for (j = 0; j < num_to_combine; ++j) { histogram_symbols[i + j] = (uint) num_clusters + remap[symbols[j]]; }
						num_clusters += num_new_clusters;
					}
					BrotliFree(ref m, histograms);

					max_num_pairs = Math.Min(64 * num_clusters, (num_clusters / 2) * num_clusters);
					if (pairs_capacity < max_num_pairs + 1) { BrotliFree(ref m, pairs); pairs = (HistogramPair*) BrotliAllocate(ref m, (max_num_pairs + 1) * sizeof(HistogramPair)); }

					clusters = (uint*) BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) { clusters[i] = (uint) i; }
					num_final_clusters = ClusterLiteral.BrotliHistogramCombine( all_histograms, cluster_size, histogram_symbols, clusters, pairs, num_clusters, num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES, max_num_pairs);
					BrotliFree(ref m, pairs);
					BrotliFree(ref m, cluster_size);

					new_index = (uint*) BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) new_index[i] = kInvalidIndex;
					pos = 0;
					{
						uint next_index = 0;
						for (i = 0; i < num_blocks; ++i) 
						{
							HistogramLiteral histo;
							size_t j;
							uint best_out;
							double best_bits;
							HistogramLiteral.HistogramClear(&histo);
							for (j = 0; j < block_lengths[i]; ++j) { HistogramLiteral.HistogramAdd(&histo, data[pos++]); }
							best_out = (i == 0) ? histogram_symbols[0] : histogram_symbols[i - 1];
							best_bits = ClusterLiteral.BrotliHistogramBitCostDistance(&histo, &all_histograms[best_out]);
							for (j = 0; j < num_final_clusters; ++j) 
							{
								double cur_bits = ClusterLiteral.BrotliHistogramBitCostDistance(&histo, &all_histograms[clusters[j]]);
								if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; }
							}
							histogram_symbols[i] = best_out;
							if (new_index[best_out] == kInvalidIndex) { new_index[best_out] = next_index++; }
						}
					}
					BrotliFree(ref m, clusters);
					BrotliFree(ref m, all_histograms);

					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, num_blocks);

					{
						uint cur_length = 0;
						size_t block_idx = 0;
						byte max_type = 0;
						for (i = 0; i < num_blocks; ++i) 
						{
							cur_length += block_lengths[i];
							if (i + 1 == num_blocks || histogram_symbols[i] != histogram_symbols[i + 1]) 
							{
								byte id = (byte) new_index[histogram_symbols[i]];
								split->types[block_idx] = id;
								split->lengths[block_idx] = cur_length;
								max_type = Math.Max(max_type, id);
								cur_length = 0;
								++block_idx;
							}
						}
						split->num_blocks = block_idx;
						split->num_types = (size_t) max_type + 1;
					}
					BrotliFree(ref m, new_index);
					BrotliFree(ref m, block_lengths);
					BrotliFree(ref m, histogram_symbols);
				}

				public static unsafe void SplitByteVector(ref MemoryManager m, byte* data, size_t length, size_t literals_per_histogram, size_t max_histograms,
					size_t sampling_stride_length, double block_switch_cost, BrotliEncoderParams* params_, BlockSplit* split) 
				{
					size_t data_size = HistogramLiteral.HistogramDataSize();
					size_t num_histograms = length / literals_per_histogram + 1;
					HistogramLiteral* histograms;
					if (num_histograms > max_histograms) { num_histograms = max_histograms; }
					if (length == 0) { split->num_types = 1; return; }
					else if (length < kMinLengthForBlockSplitting) 
					{
						BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, split->num_blocks + 1);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, split->num_blocks + 1);

						split->num_types = 1;
						split->types[split->num_blocks] = 0;
						split->lengths[split->num_blocks] = (uint) length;
						split->num_blocks++;
						return;
					}
					histograms = (HistogramLiteral*) BrotliAllocate(ref m, num_histograms * sizeof(HistogramLiteral));

					/* Find good entropy codes. */
					InitialEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					RefineEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					{
						/* Find a good path through literals with the good entropy codes. */
						byte* block_ids = (byte*) BrotliAllocate(ref m, length * sizeof(byte));
						size_t num_blocks = 0;
						size_t bitmaplen = (num_histograms + 7) >> 3;
						double* insert_cost = (double*) BrotliAllocate(ref m, data_size * num_histograms * sizeof(double));
						double* cost = (double*) BrotliAllocate(ref m, num_histograms * sizeof(double));
						byte* switch_signal = (byte*) BrotliAllocate(ref m, length * bitmaplen * sizeof(byte));
						ushort* new_id = (ushort*) BrotliAllocate(ref m, num_histograms * sizeof(ushort));
						size_t iters = params_->quality < HQ_ZOPFLIFICATION_QUALITY ? 3 : 10;
						size_t i;

						for (i = 0; i < iters; ++i) 
						{
							num_blocks = FindBlocks(data, length, block_switch_cost, num_histograms, histograms, insert_cost, cost, switch_signal, block_ids);
							num_histograms = RemapBlockIds(block_ids, length, new_id, num_histograms);
							BuildBlockHistograms(data, length, block_ids, num_histograms, histograms);
						}
						BrotliFree(ref m, insert_cost);
						BrotliFree(ref m, cost);
						BrotliFree(ref m, switch_signal);
						BrotliFree(ref m, new_id);
						BrotliFree(ref m, histograms);
						ClusterBlocks(ref m, data, length, num_blocks, block_ids, split);

						BrotliFree(ref m, block_ids);
					}
				}
			
			}

			private unsafe partial struct BlockSplitterCommand
			{

				private static void InitialEntropyCodes(ushort* data, size_t length, size_t stride, size_t num_histograms, HistogramCommand* histograms)
				{
					uint seed = 7; size_t block_length = length / num_histograms; size_t i; HistogramCommand.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < num_histograms; ++i)
					{
						size_t pos = length * i / num_histograms;
						if (i != 0)
						{ pos += MyRand(&seed) % block_length; }
						if (pos + stride >= length) { pos = length - stride - 1; }
						HistogramCommand.HistogramAddVector(&histograms[i], data + pos, stride);
					}
				}

				private static unsafe void RandomSample(uint* seed, ushort* data, size_t length, size_t stride, HistogramCommand* sample)
				{
					size_t pos = 0;
					if (stride >= length) { pos = 0; stride = length; } else { pos = MyRand(seed) % (length - stride + 1); }
					HistogramCommand.HistogramAddVector(sample, data + pos, stride);
				}

				private static unsafe void RefineEntropyCodes(ushort* data, size_t length, size_t stride, size_t num_histograms, HistogramCommand* histograms)
				{
					size_t iters = kIterMulForRefining * length / stride + kMinItersForRefining; uint seed = 7; size_t iter;
					iters = ((iters + num_histograms - 1) / num_histograms) * num_histograms;
					for (iter = 0; iter < iters; ++iter)
					{
						HistogramCommand sample; HistogramCommand.HistogramClear(&sample);
						RandomSample(&seed, data, length, stride, &sample);
						HistogramCommand.HistogramAddHistogram(&histograms[iter % num_histograms], &sample);
					}
				}

				/* Assigns a block id from the range [0, num_histograms) to each data element
				   in data[0..length) and fills in block_id[0..length) with the assigned values.
				   Returns the number of blocks, i.e. one plus the number of block switches. */
				private static unsafe size_t FindBlocks(ushort* data, size_t length, double block_switch_bitcost, size_t num_histograms, HistogramCommand* histograms, 
					double* insert_cost, double* cost, byte* switch_signal, byte* block_id)
				{
					size_t data_size = HistogramCommand.HistogramDataSize();
					size_t bitmaplen = (num_histograms + 7) >> 3; size_t num_blocks = 1; size_t i; size_t j;
					if (num_histograms <= 1) { for (i = 0; i < length; ++i) { block_id[i] = 0; } return 1; }
					memset(insert_cost, 0, sizeof(double) * data_size * num_histograms);
					for (i = 0; i < num_histograms; ++i) { insert_cost[i] = FastLog2((uint)histograms[i].total_count_); }
					for (i = data_size; i != 0;) { --i; for (j = 0; j < num_histograms; ++j) { insert_cost[i * num_histograms + j] = insert_cost[j] - BitCost(histograms[j].data_[i]); } }
					memset(cost, 0, sizeof(double) * num_histograms);
					memset(switch_signal, 0, sizeof(byte) * length * bitmaplen);
					/* After each iteration of this loop, cost[k] will contain the difference
					   between the minimum cost of arriving at the current byte position using
					   entropy code k, and the minimum cost of arriving at the current byte
					   position. This difference is capped at the block switch cost, and if it
					   reaches block switch cost, it means that when we trace back from the last
					   position, we need to switch here. */
					for (i = 0; i < length; ++i)
					{
						size_t byte_ix = i; size_t ix = byte_ix * bitmaplen; size_t insert_cost_ix = data[byte_ix] * num_histograms;
						double min_cost = 1e99; double block_switch_cost = block_switch_bitcost; size_t k;
						for (k = 0; k < num_histograms; ++k) { /* We are coding the symbol in data[byte_ix] with entropy code k. */ cost[k] += insert_cost[insert_cost_ix + k]; if (cost[k] < min_cost) { min_cost = cost[k]; block_id[byte_ix] = (byte)k; } }
						/* More blocks for the beginning. */
						if (byte_ix < 2000) { block_switch_cost *= 0.77 + 0.07 * (double)byte_ix / 2000; }
						for (k = 0; k < num_histograms; ++k)
						{ cost[k] -= min_cost; if (cost[k] >= block_switch_cost) { byte mask = (byte)(1u << (int)(k & 7)); cost[k] = block_switch_cost; switch_signal[ix + (k >> 3)] |= mask; } }
					}
					{
						/* Trace back from the last position and switch at the marked places. */
						size_t byte_ix = length - 1; size_t ix = byte_ix * bitmaplen; byte cur_id = block_id[byte_ix];
						while (byte_ix > 0)
						{
							byte mask = (byte)(1u << (cur_id & 7)); --byte_ix; ix -= bitmaplen;
							if ((switch_signal[ix + (cur_id >> 3)] & mask) != 0) { if (cur_id != block_id[byte_ix]) { cur_id = block_id[byte_ix]; ++num_blocks; } }
							block_id[byte_ix] = cur_id;
						}
					}
					return num_blocks;
				}

				private static size_t RemapBlockIds(byte* block_ids, size_t length, ushort* new_id, size_t num_histograms)
				{
					const ushort kInvalidId = 256; ushort next_id = 0; size_t i;
					for (i = 0; i < num_histograms; ++i) { new_id[i] = kInvalidId; }
					for (i = 0; i < length; ++i) { if (new_id[block_ids[i]] == kInvalidId) { new_id[block_ids[i]] = next_id++; } }
					for (i = 0; i < length; ++i) { block_ids[i] = (byte)new_id[block_ids[i]]; }
					return next_id;
				}

				private static unsafe void BuildBlockHistograms(ushort* data, size_t length, byte* block_ids, size_t num_histograms, HistogramCommand* histograms)
				{
					size_t i; HistogramCommand.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < length; ++i) { HistogramCommand.HistogramAdd(&histograms[block_ids[i]], data[i]); }
				}

				private static unsafe void ClusterBlocks(ref MemoryManager m, ushort* data, size_t length,
					size_t num_blocks, byte* block_ids, BlockSplit* split)
				{
					uint* histogram_symbols = (uint*)BrotliAllocate(ref m, num_blocks * sizeof(uint));
					uint* block_lengths = (uint*)BrotliAllocate(ref m, num_blocks * sizeof(uint));
					size_t expected_num_clusters = CLUSTERS_PER_BATCH * (num_blocks + HISTOGRAMS_PER_BATCH - 1) / HISTOGRAMS_PER_BATCH;
					size_t all_histograms_size = 0; size_t all_histograms_capacity = expected_num_clusters;
					HistogramCommand* all_histograms = (HistogramCommand*)BrotliAllocate(ref m, all_histograms_capacity * sizeof(HistogramCommand));
					size_t cluster_size_size = 0; size_t cluster_size_capacity = expected_num_clusters;
					uint* cluster_size = (uint*)BrotliAllocate(ref m, cluster_size_capacity * sizeof(uint)); size_t num_clusters = 0;
					HistogramCommand* histograms = (HistogramCommand*)BrotliAllocate(ref m, Math.Min(num_blocks, HISTOGRAMS_PER_BATCH) * sizeof(HistogramCommand));
					size_t max_num_pairs = HISTOGRAMS_PER_BATCH * HISTOGRAMS_PER_BATCH / 2; size_t pairs_capacity = max_num_pairs + 1;
					HistogramPair* pairs = (HistogramPair*)BrotliAllocate(ref m, pairs_capacity * sizeof(HistogramPair));
					size_t pos = 0; uint* clusters; size_t num_final_clusters; const uint kInvalidIndex = uint.MaxValue; uint* new_index; size_t i;
					uint* sizes = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(sizes, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* new_clusters = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(new_clusters, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* symbols = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(symbols, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* remap = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(remap, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));

					memset(block_lengths, 0, num_blocks * sizeof(uint));

					{
						size_t block_idx = 0;
						for (i = 0; i < length; ++i) { ++block_lengths[block_idx]; if (i + 1 == length || block_ids[i] != block_ids[i + 1]) { ++block_idx; } }
					}

					for (i = 0; i < num_blocks; i += HISTOGRAMS_PER_BATCH)
					{
						size_t num_to_combine = Math.Min(num_blocks - i, HISTOGRAMS_PER_BATCH);
						size_t num_new_clusters; size_t j;
						for (j = 0; j < num_to_combine; ++j)
						{
							size_t k; HistogramCommand.HistogramClear(&histograms[j]);
							for (k = 0; k < block_lengths[i + j]; ++k) { HistogramCommand.HistogramAdd(&histograms[j], data[pos++]); }
							histograms[j].bit_cost_ = BitCostCommand.BrotliPopulationCost(&histograms[j]);
							new_clusters[j] = (uint)j; symbols[j] = (uint)j; sizes[j] = 1;
						}
						num_new_clusters = ClusterCommand.BrotliHistogramCombine(histograms, sizes, symbols, new_clusters, pairs, num_to_combine, num_to_combine, HISTOGRAMS_PER_BATCH, max_num_pairs);

						BrotliEnsureCapacity(ref m, sizeof(HistogramCommand), (void**)&all_histograms, &all_histograms_capacity, all_histograms_size + num_new_clusters);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&cluster_size, &cluster_size_capacity, cluster_size_size + num_new_clusters);

						for (j = 0; j < num_new_clusters; ++j)
						{
							all_histograms[all_histograms_size++] = histograms[new_clusters[j]];
							cluster_size[cluster_size_size++] = sizes[new_clusters[j]]; remap[new_clusters[j]] = (uint)j;
						}
						for (j = 0; j < num_to_combine; ++j) { histogram_symbols[i + j] = (uint)num_clusters + remap[symbols[j]]; }
						num_clusters += num_new_clusters;
					}
					BrotliFree(ref m, histograms);

					max_num_pairs = Math.Min(64 * num_clusters, (num_clusters / 2) * num_clusters);
					if (pairs_capacity < max_num_pairs + 1) { BrotliFree(ref m, pairs); pairs = (HistogramPair*)BrotliAllocate(ref m, (max_num_pairs + 1) * sizeof(HistogramPair)); }

					clusters = (uint*)BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) { clusters[i] = (uint)i; }
					num_final_clusters = ClusterCommand.BrotliHistogramCombine( all_histograms, cluster_size, histogram_symbols, clusters, pairs,
						num_clusters, num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES, max_num_pairs);
					BrotliFree(ref m, pairs); BrotliFree(ref m, cluster_size);

					new_index = (uint*)BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) new_index[i] = kInvalidIndex;
					pos = 0;
					{
						uint next_index = 0;
						for (i = 0; i < num_blocks; ++i)
						{
							HistogramCommand histo; size_t j; uint best_out; double best_bits;
							HistogramCommand.HistogramClear(&histo);
							for (j = 0; j < block_lengths[i]; ++j) { HistogramCommand.HistogramAdd(&histo, data[pos++]); }
							best_out = (i == 0) ? histogram_symbols[0] : histogram_symbols[i - 1];
							best_bits = ClusterCommand.BrotliHistogramBitCostDistance(&histo, &all_histograms[best_out]);
							for (j = 0; j < num_final_clusters; ++j)
							{
								double cur_bits = ClusterCommand.BrotliHistogramBitCostDistance(&histo, &all_histograms[clusters[j]]);
								if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; }
							}
							histogram_symbols[i] = best_out;
							if (new_index[best_out] == kInvalidIndex) { new_index[best_out] = next_index++; }
						}
					}
					BrotliFree(ref m, clusters);
					BrotliFree(ref m, all_histograms);

					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, num_blocks);

					{
						uint cur_length = 0; size_t block_idx = 0; byte max_type = 0;
						for (i = 0; i < num_blocks; ++i)
						{
							cur_length += block_lengths[i];
							if (i + 1 == num_blocks || histogram_symbols[i] != histogram_symbols[i + 1])
							{
								byte id = (byte)new_index[histogram_symbols[i]];
								split->types[block_idx] = id; split->lengths[block_idx] = cur_length; 
								max_type = Math.Max(max_type, id); cur_length = 0; ++block_idx;
							}
						}
						split->num_blocks = block_idx; split->num_types = (size_t)max_type + 1;
					}
					BrotliFree(ref m, new_index); BrotliFree(ref m, block_lengths); BrotliFree(ref m, histogram_symbols);
				}

				public static unsafe void SplitByteVector(ref MemoryManager m, ushort* data, size_t length, size_t literals_per_histogram,
					size_t max_histograms, size_t sampling_stride_length, double block_switch_cost, BrotliEncoderParams* params_, BlockSplit* split)
				{
					size_t data_size = HistogramCommand.HistogramDataSize(); size_t num_histograms = length / literals_per_histogram + 1; HistogramCommand* histograms;
					if (num_histograms > max_histograms) { num_histograms = max_histograms; }
					if (length == 0) { split->num_types = 1; return; }
					else if (length < kMinLengthForBlockSplitting)
					{
						BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, split->num_blocks + 1);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, split->num_blocks + 1);

						split->num_types = 1; split->types[split->num_blocks] = 0;
						split->lengths[split->num_blocks] = (uint)length; split->num_blocks++;
						return;
					}
					histograms = (HistogramCommand*)BrotliAllocate(ref m, num_histograms * sizeof(HistogramCommand));

					/* Find good entropy codes. */
					InitialEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					RefineEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					{
						/* Find a good path through literals with the good entropy codes. */
						byte* block_ids = (byte*)BrotliAllocate(ref m, length * sizeof(byte));
						size_t num_blocks = 0; size_t bitmaplen = (num_histograms + 7) >> 3;
						double* insert_cost = (double*)BrotliAllocate(ref m, data_size * num_histograms * sizeof(double));
						double* cost = (double*)BrotliAllocate(ref m, num_histograms * sizeof(double));
						byte* switch_signal = (byte*)BrotliAllocate(ref m, length * bitmaplen * sizeof(byte));
						ushort* new_id = (ushort*)BrotliAllocate(ref m, num_histograms * sizeof(ushort));
						size_t iters = params_->quality < HQ_ZOPFLIFICATION_QUALITY ? 3 : 10; size_t i;

						for (i = 0; i < iters; ++i)
						{
							num_blocks = FindBlocks(data, length, block_switch_cost, num_histograms, histograms, insert_cost, cost, switch_signal, block_ids);
							num_histograms = RemapBlockIds(block_ids, length, new_id, num_histograms);
							BuildBlockHistograms(data, length, block_ids, num_histograms, histograms);
						}
						BrotliFree(ref m, insert_cost); BrotliFree(ref m, cost); BrotliFree(ref m, switch_signal);
						BrotliFree(ref m, new_id); BrotliFree(ref m, histograms);
						ClusterBlocks(ref m, data, length, num_blocks, block_ids, split);

						BrotliFree(ref m, block_ids);
					}
				}
			}

			private unsafe partial struct BlockSplitterDistance
			{

				private static void InitialEntropyCodes(ushort* data, size_t length, size_t stride, size_t num_histograms, HistogramDistance* histograms)
				{
					uint seed = 7; size_t block_length = length / num_histograms; size_t i;
					HistogramDistance.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < num_histograms; ++i)
					{
						size_t pos = length * i / num_histograms;
						if (i != 0) { pos += MyRand(&seed) % block_length; }
						if (pos + stride >= length) { pos = length - stride - 1; }
						HistogramDistance.HistogramAddVector(&histograms[i], data + pos, stride);
					}
				}

				private static unsafe void RandomSample(uint* seed, ushort* data, size_t length, size_t stride, HistogramDistance* sample)
				{
					size_t pos = 0;
					if (stride >= length) { pos = 0; stride = length;}
					else { pos = MyRand(seed) % (length - stride + 1); }
					HistogramDistance.HistogramAddVector(sample, data + pos, stride);
				}

				private static unsafe void RefineEntropyCodes(ushort* data, size_t length, size_t stride, size_t num_histograms, HistogramDistance* histograms)
				{
					size_t iters = kIterMulForRefining * length / stride + kMinItersForRefining; uint seed = 7; size_t iter;
					iters = ((iters + num_histograms - 1) / num_histograms) * num_histograms;
					for (iter = 0; iter < iters; ++iter)
					{
						HistogramDistance sample; HistogramDistance.HistogramClear(&sample);
						RandomSample(&seed, data, length, stride, &sample);
						HistogramDistance.HistogramAddHistogram(&histograms[iter % num_histograms], &sample);
					}
				}

				/* Assigns a block id from the range [0, num_histograms) to each data element
				   in data[0..length) and fills in block_id[0..length) with the assigned values.
				   Returns the number of blocks, i.e. one plus the number of block switches. */
				private static unsafe size_t FindBlocks(ushort* data, size_t length, double block_switch_bitcost, size_t num_histograms,
					HistogramDistance* histograms, double* insert_cost, double* cost, byte* switch_signal, byte* block_id)
				{
					size_t data_size = HistogramDistance.HistogramDataSize();
					size_t bitmaplen = (num_histograms + 7) >> 3; size_t num_blocks = 1; size_t i; size_t j;
					if (num_histograms <= 1) { for (i = 0; i < length; ++i) { block_id[i] = 0; } return 1; }
					memset(insert_cost, 0, sizeof(double) * data_size * num_histograms);
					for (i = 0; i < num_histograms; ++i) { insert_cost[i] = FastLog2((uint)histograms[i].total_count_); }
					for (i = data_size; i != 0;) { --i; for (j = 0; j < num_histograms; ++j) { insert_cost[i * num_histograms + j] = insert_cost[j] - BitCost(histograms[j].data_[i]); } }
					memset(cost, 0, sizeof(double) * num_histograms);
					memset(switch_signal, 0, sizeof(byte) * length * bitmaplen);
					/* After each iteration of this loop, cost[k] will contain the difference
					   between the minimum cost of arriving at the current byte position using
					   entropy code k, and the minimum cost of arriving at the current byte
					   position. This difference is capped at the block switch cost, and if it
					   reaches block switch cost, it means that when we trace back from the last
					   position, we need to switch here. */
					for (i = 0; i < length; ++i)
					{
						size_t byte_ix = i; size_t ix = byte_ix * bitmaplen; 
						size_t insert_cost_ix = data[byte_ix] * num_histograms;
						double min_cost = 1e99; double block_switch_cost = block_switch_bitcost; size_t k;
						for (k = 0; k < num_histograms; ++k)
						{
							/* We are coding the symbol in data[byte_ix] with entropy code k. */
							cost[k] += insert_cost[insert_cost_ix + k]; if (cost[k] < min_cost) { min_cost = cost[k]; block_id[byte_ix] = (byte)k; }
						}
						/* More blocks for the beginning. */
						if (byte_ix < 2000) { block_switch_cost *= 0.77 + 0.07 * (double)byte_ix / 2000; }
						for (k = 0; k < num_histograms; ++k) { cost[k] -= min_cost; if (cost[k] >= block_switch_cost) { byte mask = (byte)(1u << (int)(k & 7)); cost[k] = block_switch_cost; switch_signal[ix + (k >> 3)] |= mask; } }
					}
					{
						/* Trace back from the last position and switch at the marked places. */
						size_t byte_ix = length - 1; size_t ix = byte_ix * bitmaplen; byte cur_id = block_id[byte_ix];
						while (byte_ix > 0)
						{
							byte mask = (byte)(1u << (cur_id & 7)); --byte_ix; ix -= bitmaplen;
							if ((switch_signal[ix + (cur_id >> 3)] & mask) != 0) { if (cur_id != block_id[byte_ix]) { cur_id = block_id[byte_ix]; ++num_blocks; } }
							block_id[byte_ix] = cur_id;
						}
					}
					return num_blocks;
				}

				private static size_t RemapBlockIds(byte* block_ids, size_t length, ushort* new_id, size_t num_histograms)
				{
					const ushort kInvalidId = 256; ushort next_id = 0; size_t i;
					for (i = 0; i < num_histograms; ++i) { new_id[i] = kInvalidId; }
					for (i = 0; i < length; ++i) { if (new_id[block_ids[i]] == kInvalidId) { new_id[block_ids[i]] = next_id++; } }
					for (i = 0; i < length; ++i) { block_ids[i] = (byte)new_id[block_ids[i]]; }
					return next_id;
				}

				private static unsafe void BuildBlockHistograms(ushort* data, size_t length, byte* block_ids, size_t num_histograms, HistogramDistance* histograms)
				{
					size_t i; HistogramDistance.ClearHistograms(histograms, num_histograms);
					for (i = 0; i < length; ++i) { HistogramDistance.HistogramAdd(&histograms[block_ids[i]], data[i]); }
				}

				private static unsafe void ClusterBlocks(ref MemoryManager m, ushort* data, size_t length, size_t num_blocks, byte* block_ids, BlockSplit* split)
				{
					uint* histogram_symbols = (uint*)BrotliAllocate(ref m, num_blocks * sizeof(uint));
					uint* block_lengths = (uint*)BrotliAllocate(ref m, num_blocks * sizeof(uint));
					size_t expected_num_clusters = CLUSTERS_PER_BATCH * (num_blocks + HISTOGRAMS_PER_BATCH - 1) / HISTOGRAMS_PER_BATCH;
					size_t all_histograms_size = 0; size_t all_histograms_capacity = expected_num_clusters;
					HistogramDistance* all_histograms = (HistogramDistance*)BrotliAllocate(ref m, all_histograms_capacity * sizeof(HistogramDistance));
					size_t cluster_size_size = 0; size_t cluster_size_capacity = expected_num_clusters;
					uint* cluster_size = (uint*)BrotliAllocate(ref m, cluster_size_capacity * sizeof(uint)); size_t num_clusters = 0;
					HistogramDistance* histograms = (HistogramDistance*)BrotliAllocate(ref m, Math.Min(num_blocks, HISTOGRAMS_PER_BATCH) * sizeof(HistogramDistance));
					size_t max_num_pairs = HISTOGRAMS_PER_BATCH * HISTOGRAMS_PER_BATCH / 2;
					size_t pairs_capacity = max_num_pairs + 1;
					HistogramPair* pairs = (HistogramPair*)BrotliAllocate(ref m, pairs_capacity * sizeof(HistogramPair));
					size_t pos = 0; uint* clusters; size_t num_final_clusters; const uint kInvalidIndex = uint.MaxValue; uint* new_index; size_t i;
					uint* sizes = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(sizes, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* new_clusters = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(new_clusters, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* symbols = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(symbols, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));
					uint* remap = stackalloc uint[HISTOGRAMS_PER_BATCH]; memset(remap, 0, HISTOGRAMS_PER_BATCH * sizeof(uint));

					memset(block_lengths, 0, num_blocks * sizeof(uint));

					{ size_t block_idx = 0; for (i = 0; i < length; ++i) { ++block_lengths[block_idx]; if (i + 1 == length || block_ids[i] != block_ids[i + 1]) { ++block_idx; } } }

					for (i = 0; i < num_blocks; i += HISTOGRAMS_PER_BATCH)
					{
						size_t num_to_combine = Math.Min(num_blocks - i, HISTOGRAMS_PER_BATCH); size_t num_new_clusters; size_t j;
						for (j = 0; j < num_to_combine; ++j)
						{
							size_t k; HistogramDistance.HistogramClear(&histograms[j]);
							for (k = 0; k < block_lengths[i + j]; ++k) { HistogramDistance.HistogramAdd(&histograms[j], data[pos++]); }
							histograms[j].bit_cost_ = BitCostDistance.BrotliPopulationCost(&histograms[j]);
							new_clusters[j] = (uint)j; symbols[j] = (uint)j; sizes[j] = 1;
						}
						num_new_clusters = ClusterDistance.BrotliHistogramCombine(histograms, sizes, symbols, new_clusters, pairs, num_to_combine, num_to_combine, HISTOGRAMS_PER_BATCH, max_num_pairs);

						BrotliEnsureCapacity(ref m, sizeof(HistogramDistance), (void**)&all_histograms, &all_histograms_capacity, all_histograms_size + num_new_clusters);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&cluster_size, &cluster_size_capacity, cluster_size_size + num_new_clusters);

						for (j = 0; j < num_new_clusters; ++j)
						{
							all_histograms[all_histograms_size++] = histograms[new_clusters[j]];
							cluster_size[cluster_size_size++] = sizes[new_clusters[j]];
							remap[new_clusters[j]] = (uint)j;
						}
						for (j = 0; j < num_to_combine; ++j) { histogram_symbols[i + j] = (uint)num_clusters + remap[symbols[j]]; }
						num_clusters += num_new_clusters;
					}
					BrotliFree(ref m, histograms);

					max_num_pairs = Math.Min(64 * num_clusters, (num_clusters / 2) * num_clusters);
					if (pairs_capacity < max_num_pairs + 1) { BrotliFree(ref m, pairs); pairs = (HistogramPair*)BrotliAllocate(ref m, (max_num_pairs + 1) * sizeof(HistogramPair)); }

					clusters = (uint*)BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) { clusters[i] = (uint)i; }
					num_final_clusters = ClusterDistance.BrotliHistogramCombine(all_histograms, cluster_size, histogram_symbols, clusters, pairs,
						num_clusters, num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES, max_num_pairs);
					BrotliFree(ref m, pairs); BrotliFree(ref m, cluster_size);

					new_index = (uint*)BrotliAllocate(ref m, num_clusters * sizeof(uint));

					for (i = 0; i < num_clusters; ++i) new_index[i] = kInvalidIndex;
					pos = 0;
					{
						uint next_index = 0;
						for (i = 0; i < num_blocks; ++i)
						{
							HistogramDistance histo; size_t j; uint best_out; 
							double best_bits; HistogramDistance.HistogramClear(&histo);
							for (j = 0; j < block_lengths[i]; ++j) { HistogramDistance.HistogramAdd(&histo, data[pos++]); }
							best_out = (i == 0) ? histogram_symbols[0] : histogram_symbols[i - 1];
							best_bits =
								ClusterDistance.BrotliHistogramBitCostDistance(&histo, &all_histograms[best_out]);
							for (j = 0; j < num_final_clusters; ++j)
							{
								double cur_bits = ClusterDistance.BrotliHistogramBitCostDistance(&histo, &all_histograms[clusters[j]]);
								if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; }
							}
							histogram_symbols[i] = best_out;
							if (new_index[best_out] == kInvalidIndex) { new_index[best_out] = next_index++; }
						}
					}
					BrotliFree(ref m, clusters); BrotliFree(ref m, all_histograms);

					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, num_blocks);

					{
						uint cur_length = 0; size_t block_idx = 0; byte max_type = 0;
						for (i = 0; i < num_blocks; ++i)
						{
							cur_length += block_lengths[i];
							if (i + 1 == num_blocks ||
								histogram_symbols[i] != histogram_symbols[i + 1])
							{
								byte id = (byte)new_index[histogram_symbols[i]];
								split->types[block_idx] = id; split->lengths[block_idx] = cur_length;
								max_type = Math.Max(max_type, id); cur_length = 0; ++block_idx;
							}
						}
						split->num_blocks = block_idx; split->num_types = (size_t)max_type + 1;
					}
					BrotliFree(ref m, new_index); BrotliFree(ref m, block_lengths); BrotliFree(ref m, histogram_symbols);
				}

				public static unsafe void SplitByteVector(ref MemoryManager m, ushort* data, size_t length, size_t literals_per_histogram, size_t max_histograms,
					size_t sampling_stride_length, double block_switch_cost, BrotliEncoderParams* params_, BlockSplit* split)
				{
					size_t data_size = HistogramDistance.HistogramDataSize();
					size_t num_histograms = length / literals_per_histogram + 1;
					HistogramDistance* histograms;
					if (num_histograms > max_histograms) { num_histograms = max_histograms; }
					if (length == 0) { split->num_types = 1; return; }
					else if (length < kMinLengthForBlockSplitting)
					{
						BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, split->num_blocks + 1);
						BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, split->num_blocks + 1);

						split->num_types = 1; split->types[split->num_blocks] = 0; 
						split->lengths[split->num_blocks] = (uint)length; split->num_blocks++;
						return;
					}
					histograms = (HistogramDistance*)BrotliAllocate(ref m, num_histograms * sizeof(HistogramDistance));

					/* Find good entropy codes. */
					InitialEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					RefineEntropyCodes(data, length, sampling_stride_length, num_histograms, histograms);
					{
						/* Find a good path through literals with the good entropy codes. */
						byte* block_ids = (byte*)BrotliAllocate(ref m, length * sizeof(byte));
						size_t num_blocks = 0;
						size_t bitmaplen = (num_histograms + 7) >> 3;
						double* insert_cost = (double*)BrotliAllocate(ref m, data_size * num_histograms * sizeof(double));
						double* cost = (double*)BrotliAllocate(ref m, num_histograms * sizeof(double));
						byte* switch_signal = (byte*)BrotliAllocate(ref m, length * bitmaplen * sizeof(byte));
						ushort* new_id = (ushort*)BrotliAllocate(ref m, num_histograms * sizeof(ushort));
						size_t iters = params_->quality < HQ_ZOPFLIFICATION_QUALITY ? 3 : 10;
						size_t i;

						for (i = 0; i < iters; ++i)
						{
							num_blocks = FindBlocks(data, length, block_switch_cost, num_histograms, histograms, insert_cost, cost, switch_signal, block_ids);
							num_histograms = RemapBlockIds(block_ids, length, new_id, num_histograms);
							BuildBlockHistograms(data, length, block_ids, num_histograms, histograms);
						}
						BrotliFree(ref m, insert_cost);
						BrotliFree(ref m, cost);
						BrotliFree(ref m, switch_signal);
						BrotliFree(ref m, new_id);
						BrotliFree(ref m, histograms);
						ClusterBlocks(ref m, data, length, num_blocks, block_ids, split);

						BrotliFree(ref m, block_ids);
					}
				}
			
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct HistogramPair { public uint idx1; public uint idx2; public double cost_combo; public double cost_diff; }

			private static unsafe bool HistogramPairIsLess(HistogramPair* p1, HistogramPair* p2) { if (p1->cost_diff != p2->cost_diff) { return (p1->cost_diff > p2->cost_diff); } return ((p1->idx2 - p1->idx1) > (p2->idx2 - p2->idx1)); }

			/* Returns entropy reduction of the context map when we combine two clusters. */
			private static unsafe double ClusterCostDiff(size_t size_a, size_t size_b)
			{
				size_t size_c = size_a + size_b;
				return (double)size_a * FastLog2(size_a) + (double)size_b * FastLog2(size_b) - (double)size_c * FastLog2(size_c);
			}

			private unsafe class ClusterLiteral 
			{

				public static void BrotliCompareAndPushToQueue(HistogramLiteral* out_, uint* cluster_size, uint idx1, uint idx2, size_t max_num_pairs, HistogramPair* pairs, size_t* num_pairs) 
				{
					bool is_good_pair = false; HistogramPair p = new HistogramPair();
					if (idx1 == idx2) { return; }
					if (idx2 < idx1) { uint t = idx2; idx2 = idx1; idx1 = t; }
					p.idx1 = idx1; p.idx2 = idx2;
					p.cost_diff = 0.5 * ClusterCostDiff(cluster_size[idx1], cluster_size[idx2]);
					p.cost_diff -= out_[idx1].bit_cost_; p.cost_diff -= out_[idx2].bit_cost_;

					if (out_[idx1].total_count_ == 0) { p.cost_combo = out_[idx2].bit_cost_; is_good_pair = true; }
					else if (out_[idx2].total_count_ == 0) { p.cost_combo = out_[idx1].bit_cost_; is_good_pair = true; }
					else 
					{
						double threshold = *num_pairs == 0 ? 1e99 : Math.Max(0.0, pairs[0].cost_diff);
						HistogramLiteral combo = out_[idx1];
						double cost_combo;
						HistogramLiteral.HistogramAddHistogram(&combo, &out_[idx2]);
						cost_combo = BitCostLiteral.BrotliPopulationCost(&combo);
						if (cost_combo < threshold - p.cost_diff) { p.cost_combo = cost_combo; is_good_pair = true; }
					}
					if (is_good_pair) 
					{
						p.cost_diff += p.cost_combo;
						if (*num_pairs > 0 && HistogramPairIsLess(&pairs[0], &p)) 
						{
							/* Replace the top of the queue if needed. */
							if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = pairs[0]; ++(*num_pairs); }
							pairs[0] = p;
						}
						else if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = p; ++(*num_pairs); }
					}
				}

				public static size_t BrotliHistogramCombine(HistogramLiteral* out_, uint* cluster_size, uint* symbols, uint* clusters, HistogramPair* pairs,
					size_t num_clusters, size_t symbols_size, size_t max_clusters, size_t max_num_pairs) 
				{
					double cost_diff_threshold = 0.0; size_t min_cluster_size = 1; size_t num_pairs = 0;

					{
						/* We maintain a vector of histogram pairs, with the property that the pair
						   with the maximum bit cost reduction is the first. */
						size_t idx1;
						for (idx1 = 0; idx1 < num_clusters; ++idx1) 
						{
							size_t idx2;
							for (idx2 = idx1 + 1; idx2 < num_clusters; ++idx2) { BrotliCompareAndPushToQueue(out_, cluster_size, clusters[idx1], clusters[idx2], max_num_pairs, &pairs[0], &num_pairs); }
						}
					}

					while (num_clusters > min_cluster_size) 
					{
						uint best_idx1; uint best_idx2; size_t i;
						if (pairs[0].cost_diff >= cost_diff_threshold) { cost_diff_threshold = 1e99; min_cluster_size = max_clusters; continue; }
						/* Take the best pair from the top of heap. */
						best_idx1 = pairs[0].idx1; best_idx2 = pairs[0].idx2;
						HistogramLiteral.HistogramAddHistogram(&out_[best_idx1], &out_[best_idx2]);
						out_[best_idx1].bit_cost_ = pairs[0].cost_combo;
						cluster_size[best_idx1] += cluster_size[best_idx2];
						for (i = 0; i < symbols_size; ++i) { if (symbols[i] == best_idx2) { symbols[i] = best_idx1; } }
						for (i = 0; i < num_clusters; ++i) { if (clusters[i] == best_idx2) { memmove(&clusters[i], &clusters[i + 1], (num_clusters - i - 1) * sizeof(uint)); break; } }
						--num_clusters;
						{
							/* Remove pairs intersecting the just combined best pair. */
							size_t copy_to_idx = 0;
							for (i = 0; i < num_pairs; ++i) {
								HistogramPair* p = &pairs[i];
								if (p->idx1 == best_idx1 || p->idx2 == best_idx1 || p->idx1 == best_idx2 || p->idx2 == best_idx2) { /* Remove invalid pair from the queue. */ continue; }
								if (HistogramPairIsLess(&pairs[0], p)) 
								{
									/* Replace the top of the queue if needed. */
									HistogramPair front = pairs[0]; pairs[0] = *p; pairs[copy_to_idx] = front;
								}
								else { pairs[copy_to_idx] = *p; }
								++copy_to_idx;
							}
							num_pairs = copy_to_idx;
						}

						/* Push new pairs formed with the combined histogram to the heap. */
						for (i = 0; i < num_clusters; ++i) { BrotliCompareAndPushToQueue(out_, cluster_size, best_idx1, clusters[i], max_num_pairs, &pairs[0], &num_pairs); }
					}
					return num_clusters;
				}

				/* What is the bit cost of moving histogram from cur_symbol to candidate. */
				public static double BrotliHistogramBitCostDistance( HistogramLiteral* histogram, HistogramLiteral* candidate) 
				{
					if (histogram->total_count_ == 0) { return 0.0; }
					else 
					{
						HistogramLiteral tmp = *histogram; HistogramLiteral.HistogramAddHistogram(&tmp, candidate);
						return BitCostLiteral.BrotliPopulationCost(&tmp) - candidate->bit_cost_;
					}
				}

				/* Find the best 'out_' histogram for each of the 'in' histograms.
				   When called, clusters[0..num_clusters) contains the unique values from
				   symbols[0..in_size), but this property is not preserved in this function.
				   Note: we assume that out_[]->bit_cost_ is already up-to-date. */
				public static void BrotliHistogramRemap(HistogramLiteral* in_, size_t in_size, uint* clusters, size_t num_clusters, HistogramLiteral* out_, uint* symbols) 
				{
					size_t i;
					for (i = 0; i < in_size; ++i) 
					{
						uint best_out = i == 0 ? symbols[0] : symbols[i - 1];
						double best_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[best_out]);
						size_t j;
						for (j = 0; j < num_clusters; ++j) { double cur_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[clusters[j]]); if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; } }
						symbols[i] = best_out;
					}

					/* Recompute each out_ based on raw and symbols. */
					for (i = 0; i < num_clusters; ++i) { HistogramLiteral.HistogramClear(&out_[clusters[i]]); }
					for (i = 0; i < in_size; ++i) { HistogramLiteral.HistogramAddHistogram(&out_[symbols[i]], &in_[i]); }
				}

				/* Reorders elements of the out_[0..length) array and changes values in
				   symbols[0..length) array in the following way:
					 * when called, symbols[] contains indexes into out_[], and has N unique
					   values (possibly N < length)
					 * on return, symbols'[i] = f(symbols[i]) and
								  out_'[symbols'[i]] = out_[symbols[i]], for each 0 <= i < length,
					   where f is a bijection between the range of symbols[] and [0..N), and
					   the first occurrences of values in symbols'[i] come in consecutive
					   increasing order.
				   Returns N, the number of unique values in symbols[]. */
				public static size_t BrotliHistogramReindex(ref MemoryManager m, HistogramLiteral* out_, uint* symbols, size_t length) 
				{
					const uint kInvalidIndex = uint.MaxValue;
					uint* new_index = (uint*) BrotliAllocate(ref m, length * sizeof(uint));
					uint next_index;
					HistogramLiteral* tmp;
					size_t i;
					for (i = 0; i < length; ++i) { new_index[i] = kInvalidIndex; }
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == kInvalidIndex) { new_index[symbols[i]] = next_index; ++next_index; } }
					/* TODO: by using idea of "cycle-sort" we can avoid allocation of
					   tmp and reduce the number of copying by the factor of 2. */
					tmp = (HistogramLiteral*) BrotliAllocate(ref m, next_index * sizeof(HistogramLiteral));
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == next_index) { tmp[next_index] = out_[symbols[i]]; ++next_index; } symbols[i] = new_index[symbols[i]]; }
					BrotliFree(ref m, new_index);
					for (i = 0; i < next_index; ++i) { out_[i] = tmp[i]; }
					BrotliFree(ref m, tmp);
					return next_index;
				}

				public static void BrotliClusterHistograms(ref MemoryManager m, HistogramLiteral* in_, size_t in_size, size_t max_histograms, HistogramLiteral* out_, size_t* out_size, uint* histogram_symbols) 
				{
					uint* cluster_size = (uint*) BrotliAllocate(ref m, in_size * sizeof(uint));
					uint* clusters = (uint*) BrotliAllocate(ref m, in_size * sizeof(uint));
					size_t num_clusters = 0;
					size_t max_input_histograms = 64;
					size_t pairs_capacity = max_input_histograms * max_input_histograms / 2;
					/* For the first pass of clustering, we allow all pairs. */
					HistogramPair* pairs = (HistogramPair*) BrotliAllocate(ref m, (pairs_capacity + 1) * sizeof(HistogramPair));
					size_t i;
					for (i = 0; i < in_size; ++i) { cluster_size[i] = 1; }

					for (i = 0; i < in_size; ++i) { out_[i] = in_[i]; out_[i].bit_cost_ = BitCostLiteral.BrotliPopulationCost(&in_[i]); histogram_symbols[i] = (uint) i; }

					for (i = 0; i < in_size; i += max_input_histograms) 
					{
						size_t num_to_combine = Math.Min(in_size - i, max_input_histograms);
						size_t num_new_clusters;
						size_t j;
						for (j = 0; j < num_to_combine; ++j) { clusters[num_clusters + j] = (uint) (i + j); }
						num_new_clusters = BrotliHistogramCombine(out_, cluster_size, &histogram_symbols[i], &clusters[num_clusters], pairs, num_to_combine, num_to_combine, max_histograms, pairs_capacity);
						num_clusters += num_new_clusters;
					}

					{
						/* For the second pass, we limit the total number of histogram pairs.
						   After this limit is reached, we only keep searching for the best pair. */
						size_t max_num_pairs = Math.Min(
							64 * num_clusters, (num_clusters / 2) * num_clusters);
						BrotliEnsureCapacity(ref m, sizeof(HistogramPair), (void**)&pairs, &pairs_capacity, max_num_pairs + 1);

						/* Collapse similar histograms. */
						num_clusters = BrotliHistogramCombine(out_, cluster_size, histogram_symbols, clusters, pairs, num_clusters, in_size, max_histograms, max_num_pairs);
					}
					BrotliFree(ref m, pairs);
					BrotliFree(ref m, cluster_size);
					/* Find the optimal map from original histograms to the final ones. */
					BrotliHistogramRemap(in_, in_size, clusters, num_clusters, out_, histogram_symbols);
					BrotliFree(ref m, clusters);
					/* Convert the context map to a canonical form. */
					*out_size = BrotliHistogramReindex(ref m, out_, histogram_symbols, in_size);
				}
			}

			private unsafe class ClusterCommand
			{

				static void BrotliCompareAndPushToQueue(HistogramCommand* out_, uint* cluster_size, uint idx1, uint idx2, size_t max_num_pairs, HistogramPair* pairs, size_t* num_pairs)
				{
					bool is_good_pair = false;
					HistogramPair p = new HistogramPair();
					if (idx1 == idx2) { return; }
					if (idx2 < idx1) { uint t = idx2; idx2 = idx1; idx1 = t; }
					p.idx1 = idx1;
					p.idx2 = idx2;
					p.cost_diff = 0.5 * ClusterCostDiff(cluster_size[idx1], cluster_size[idx2]);
					p.cost_diff -= out_[idx1].bit_cost_;
					p.cost_diff -= out_[idx2].bit_cost_;

					if (out_[idx1].total_count_ == 0) { p.cost_combo = out_[idx2].bit_cost_; is_good_pair = true; }
					else if (out_[idx2].total_count_ == 0)
					{ p.cost_combo = out_[idx1].bit_cost_; is_good_pair = true; }
					else
					{
						double threshold = *num_pairs == 0 ? 1e99 : Math.Max(0.0, pairs[0].cost_diff);
						HistogramCommand combo = out_[idx1];
						double cost_combo;
						HistogramCommand.HistogramAddHistogram(&combo, &out_[idx2]);
						cost_combo = BitCostCommand.BrotliPopulationCost(&combo);
						if (cost_combo < threshold - p.cost_diff) { p.cost_combo = cost_combo; is_good_pair = true; }
					}
					if (is_good_pair)
					{
						p.cost_diff += p.cost_combo;
						if (*num_pairs > 0 && HistogramPairIsLess(&pairs[0], &p)) { /* Replace the top of the queue if needed. */ if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = pairs[0]; ++(*num_pairs); } pairs[0] = p; }
						else if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = p; ++(*num_pairs); }
					}
				}

				public static size_t BrotliHistogramCombine(HistogramCommand* out_, uint* cluster_size, uint* symbols, uint* clusters, HistogramPair* pairs, size_t num_clusters,
					size_t symbols_size, size_t max_clusters, size_t max_num_pairs)
				{
					double cost_diff_threshold = 0.0;
					size_t min_cluster_size = 1;
					size_t num_pairs = 0;

					{
						/* We maintain a vector of histogram pairs, with the property that the pair
						   with the maximum bit cost reduction is the first. */
						size_t idx1;
						for (idx1 = 0; idx1 < num_clusters; ++idx1) { size_t idx2; for (idx2 = idx1 + 1; idx2 < num_clusters; ++idx2) { BrotliCompareAndPushToQueue(out_, cluster_size, clusters[idx1], clusters[idx2], max_num_pairs, &pairs[0], &num_pairs); } }
					}

					while (num_clusters > min_cluster_size)
					{
						uint best_idx1;
						uint best_idx2;
						size_t i;
						if (pairs[0].cost_diff >= cost_diff_threshold) { cost_diff_threshold = 1e99; min_cluster_size = max_clusters; continue; }
						/* Take the best pair from the top of heap. */
						best_idx1 = pairs[0].idx1;
						best_idx2 = pairs[0].idx2;
						HistogramCommand.HistogramAddHistogram(&out_[best_idx1], &out_[best_idx2]);
						out_[best_idx1].bit_cost_ = pairs[0].cost_combo;
						cluster_size[best_idx1] += cluster_size[best_idx2];
						for (i = 0; i < symbols_size; ++i) { if (symbols[i] == best_idx2) { symbols[i] = best_idx1; } }
						for (i = 0; i < num_clusters; ++i) { if (clusters[i] == best_idx2) { memmove(&clusters[i], &clusters[i + 1], (num_clusters - i - 1) * sizeof(uint)); break; } }
						--num_clusters;
						{
							/* Remove pairs intersecting the just combined best pair. */
							size_t copy_to_idx = 0;
							for (i = 0; i < num_pairs; ++i)
							{
								HistogramPair* p = &pairs[i];
								if (p->idx1 == best_idx1 || p->idx2 == best_idx1 || p->idx1 == best_idx2 || p->idx2 == best_idx2) { /* Remove invalid pair from the queue. */ continue; }
								if (HistogramPairIsLess(&pairs[0], p))
								{
									/* Replace the top of the queue if needed. */
									HistogramPair front = pairs[0];
									pairs[0] = *p;
									pairs[copy_to_idx] = front;
								} else { pairs[copy_to_idx] = *p; }
								++copy_to_idx;
							}
							num_pairs = copy_to_idx;
						}

						/* Push new pairs formed with the combined histogram to the heap. */
						for (i = 0; i < num_clusters; ++i) { BrotliCompareAndPushToQueue(out_, cluster_size, best_idx1, clusters[i], max_num_pairs, &pairs[0], &num_pairs); }
					}
					return num_clusters;
				}

				/* What is the bit cost of moving histogram from cur_symbol to candidate. */
				public static double BrotliHistogramBitCostDistance(HistogramCommand* histogram, HistogramCommand* candidate)
				{
					if (histogram->total_count_ == 0) { return 0.0; }
					else
					{
						HistogramCommand tmp = *histogram;
						HistogramCommand.HistogramAddHistogram(&tmp, candidate);
						return BitCostCommand.BrotliPopulationCost(&tmp) - candidate->bit_cost_;
					}
				}

				/* Find the best 'out_' histogram for each of the 'in' histograms.
				   When called, clusters[0..num_clusters) contains the unique values from
				   symbols[0..in_size), but this property is not preserved in this function.
				   Note: we assume that out_[]->bit_cost_ is already up-to-date. */
				public static void BrotliHistogramRemap(HistogramCommand* in_, size_t in_size, uint* clusters, size_t num_clusters, HistogramCommand* out_, uint* symbols)
				{
					size_t i;
					for (i = 0; i < in_size; ++i)
					{
						uint best_out = i == 0 ? symbols[0] : symbols[i - 1];
						double best_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[best_out]);
						size_t j;
						for (j = 0; j < num_clusters; ++j)
						{
							double cur_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[clusters[j]]);
							if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; }
						}
						symbols[i] = best_out;
					}

					/* Recompute each out_ based on raw and symbols. */
					for (i = 0; i < num_clusters; ++i) { HistogramCommand.HistogramClear(&out_[clusters[i]]); }
					for (i = 0; i < in_size; ++i) { HistogramCommand.HistogramAddHistogram(&out_[symbols[i]], &in_[i]); }
				}

				/* Reorders elements of the out_[0..length) array and changes values in
				   symbols[0..length) array in the following way:
					 * when called, symbols[] contains indexes into out_[], and has N unique
					   values (possibly N < length)
					 * on return, symbols'[i] = f(symbols[i]) and
								  out_'[symbols'[i]] = out_[symbols[i]], for each 0 <= i < length,
					   where f is a bijection between the range of symbols[] and [0..N), and
					   the first occurrences of values in symbols'[i] come in consecutive
					   increasing order.
				   Returns N, the number of unique values in symbols[]. */
				public static size_t BrotliHistogramReindex(ref MemoryManager m, HistogramCommand* out_, uint* symbols, size_t length)
				{
					const uint kInvalidIndex = uint.MaxValue;
					uint* new_index = (uint*)BrotliAllocate(ref m, length * sizeof(uint));
					uint next_index;
					HistogramCommand* tmp;
					size_t i;
					for (i = 0; i < length; ++i) { new_index[i] = kInvalidIndex; }
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == kInvalidIndex) { new_index[symbols[i]] = next_index; ++next_index; } }
					/* TODO: by using idea of "cycle-sort" we can avoid allocation of
					   tmp and reduce the number of copying by the factor of 2. */
					tmp = (HistogramCommand*)BrotliAllocate(ref m, next_index * sizeof(HistogramCommand));
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == next_index) { tmp[next_index] = out_[symbols[i]]; ++next_index; } symbols[i] = new_index[symbols[i]]; }
					BrotliFree(ref m, new_index);
					for (i = 0; i < next_index; ++i) { out_[i] = tmp[i]; }
					BrotliFree(ref m, tmp);
					return next_index;
				}

				public static void BrotliClusterHistograms(ref MemoryManager m, HistogramCommand* in_, size_t in_size, size_t max_histograms, HistogramCommand* out_, size_t* out_size, uint* histogram_symbols)
				{
					uint* cluster_size = (uint*)BrotliAllocate(ref m, in_size * sizeof(uint));
					uint* clusters = (uint*)BrotliAllocate(ref m, in_size * sizeof(uint));
					size_t num_clusters = 0;
					size_t max_input_histograms = 64;
					size_t pairs_capacity = max_input_histograms * max_input_histograms / 2;
					/* For the first pass of clustering, we allow all pairs. */
					HistogramPair* pairs = (HistogramPair*)BrotliAllocate(ref m, (pairs_capacity + 1) * sizeof(HistogramPair));
					size_t i;
					for (i = 0; i < in_size; ++i) { cluster_size[i] = 1; }
					for (i = 0; i < in_size; ++i){ out_[i] = in_[i]; out_[i].bit_cost_ = BitCostCommand.BrotliPopulationCost(&in_[i]); histogram_symbols[i] = (uint)i; }
					for (i = 0; i < in_size; i += max_input_histograms)
					{
						size_t num_to_combine = Math.Min(in_size - i, max_input_histograms);
						size_t num_new_clusters;
						size_t j;
						for (j = 0; j < num_to_combine; ++j) { clusters[num_clusters + j] = (uint)(i + j); }
						num_new_clusters = BrotliHistogramCombine(out_, cluster_size, &histogram_symbols[i], &clusters[num_clusters], pairs, num_to_combine, num_to_combine, max_histograms, pairs_capacity);
						num_clusters += num_new_clusters;
					}

					{
						/* For the second pass, we limit the total number of histogram pairs.
						   After this limit is reached, we only keep searching for the best pair. */
						size_t max_num_pairs = Math.Min(64 * num_clusters, (num_clusters / 2) * num_clusters);
						BrotliEnsureCapacity(ref m, sizeof(HistogramPair), (void**)&pairs, &pairs_capacity, max_num_pairs + 1);

						/* Collapse similar histograms. */
						num_clusters = BrotliHistogramCombine(out_, cluster_size, histogram_symbols, clusters, pairs, num_clusters, in_size, max_histograms, max_num_pairs);
					}
					BrotliFree(ref m, pairs);
					BrotliFree(ref m, cluster_size);
					/* Find the optimal map from original histograms to the final ones. */
					BrotliHistogramRemap(in_, in_size, clusters, num_clusters, out_, histogram_symbols);
					BrotliFree(ref m, clusters);
					/* Convert the context map to a canonical form. */
					*out_size = BrotliHistogramReindex(ref m, out_, histogram_symbols, in_size);
				}
			
			}

			private unsafe class ClusterDistance
			{

				static void BrotliCompareAndPushToQueue(HistogramDistance* out_, uint* cluster_size, uint idx1, uint idx2, size_t max_num_pairs, HistogramPair* pairs, size_t* num_pairs)
				{
					bool is_good_pair = false; HistogramPair p = new HistogramPair();
					if (idx1 == idx2) { return; }
					if (idx2 < idx1) { uint t = idx2; idx2 = idx1; idx1 = t; }
					p.idx1 = idx1; p.idx2 = idx2;
					p.cost_diff = 0.5 * ClusterCostDiff(cluster_size[idx1], cluster_size[idx2]);
					p.cost_diff -= out_[idx1].bit_cost_; p.cost_diff -= out_[idx2].bit_cost_;

					if (out_[idx1].total_count_ == 0) { p.cost_combo = out_[idx2].bit_cost_; is_good_pair = true; }
					else if (out_[idx2].total_count_ == 0) { p.cost_combo = out_[idx1].bit_cost_; is_good_pair = true; }
					else
					{
						double threshold = *num_pairs == 0 ? 1e99 : Math.Max(0.0, pairs[0].cost_diff);
						HistogramDistance combo = out_[idx1]; double cost_combo;
						HistogramDistance.HistogramAddHistogram(&combo, &out_[idx2]);
						cost_combo = BitCostDistance.BrotliPopulationCost(&combo);
						if (cost_combo < threshold - p.cost_diff) { p.cost_combo = cost_combo; is_good_pair = true; }
					}
					if (is_good_pair)
					{
						p.cost_diff += p.cost_combo;
						if (*num_pairs > 0 && HistogramPairIsLess(&pairs[0], &p))
						{
							/* Replace the top of the queue if needed. */
							if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = pairs[0]; ++(*num_pairs); }
							pairs[0] = p;
						}
						else if (*num_pairs < max_num_pairs) { pairs[*num_pairs] = p; ++(*num_pairs); }
					}
				}

				public static size_t BrotliHistogramCombine(HistogramDistance* out_, uint* cluster_size, uint* symbols, uint* clusters, HistogramPair* pairs, size_t num_clusters,
					size_t symbols_size, size_t max_clusters, size_t max_num_pairs)
				{
					double cost_diff_threshold = 0.0; size_t min_cluster_size = 1; size_t num_pairs = 0;

					{
						/* We maintain a vector of histogram pairs, with the property that the pair
						   with the maximum bit cost reduction is the first. */
						size_t idx1;
						for (idx1 = 0; idx1 < num_clusters; ++idx1)
						{
							size_t idx2;
							for (idx2 = idx1 + 1; idx2 < num_clusters; ++idx2) { BrotliCompareAndPushToQueue(out_, cluster_size, clusters[idx1], clusters[idx2], max_num_pairs, &pairs[0], &num_pairs); }
						}
					}

					while (num_clusters > min_cluster_size)
					{
						uint best_idx1; uint best_idx2; size_t i;
						if (pairs[0].cost_diff >= cost_diff_threshold) { cost_diff_threshold = 1e99; min_cluster_size = max_clusters; continue; }
						/* Take the best pair from the top of heap. */
						best_idx1 = pairs[0].idx1; best_idx2 = pairs[0].idx2;
						HistogramDistance.HistogramAddHistogram(&out_[best_idx1], &out_[best_idx2]);
						out_[best_idx1].bit_cost_ = pairs[0].cost_combo;
						cluster_size[best_idx1] += cluster_size[best_idx2];
						for (i = 0; i < symbols_size; ++i) { if (symbols[i] == best_idx2) { symbols[i] = best_idx1; } }
						for (i = 0; i < num_clusters; ++i) { if (clusters[i] == best_idx2) { memmove(&clusters[i], &clusters[i + 1], (num_clusters - i - 1) * sizeof(uint)); break; } }
						--num_clusters;
						{
							/* Remove pairs intersecting the just combined best pair. */
							size_t copy_to_idx = 0;
							for (i = 0; i < num_pairs; ++i)
							{
								HistogramPair* p = &pairs[i];
								if (p->idx1 == best_idx1 || p->idx2 == best_idx1 || p->idx1 == best_idx2 || p->idx2 == best_idx2) { /* Remove invalid pair from the queue. */continue; }
								if (HistogramPairIsLess(&pairs[0], p)) { /* Replace the top of the queue if needed. */ HistogramPair front = pairs[0]; pairs[0] = *p; pairs[copy_to_idx] = front; }
								else { pairs[copy_to_idx] = *p; } ++copy_to_idx;
							}
							num_pairs = copy_to_idx;
						}

						/* Push new pairs formed with the combined histogram to the heap. */
						for (i = 0; i < num_clusters; ++i) { BrotliCompareAndPushToQueue(out_, cluster_size, best_idx1, clusters[i], max_num_pairs, &pairs[0], &num_pairs); }
					}
					return num_clusters;
				}

				/* What is the bit cost of moving histogram from cur_symbol to candidate. */
				public static double BrotliHistogramBitCostDistance(HistogramDistance* histogram, HistogramDistance* candidate)
				{
					if (histogram->total_count_ == 0) { return 0.0; }
					else
					{
						HistogramDistance tmp = *histogram;
						HistogramDistance.HistogramAddHistogram(&tmp, candidate);
						return BitCostDistance.BrotliPopulationCost(&tmp) - candidate->bit_cost_;
					}
				}

				/* Find the best 'out_' histogram for each of the 'in' histograms.
				   When called, clusters[0..num_clusters) contains the unique values from
				   symbols[0..in_size), but this property is not preserved in this function.
				   Note: we assume that out_[]->bit_cost_ is already up-to-date. */
				public static void BrotliHistogramRemap(HistogramDistance* in_, size_t in_size, uint* clusters, size_t num_clusters, HistogramDistance* out_, uint* symbols)
				{
					size_t i;
					for (i = 0; i < in_size; ++i)
					{
						uint best_out = i == 0 ? symbols[0] : symbols[i - 1];
						double best_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[best_out]);
						size_t j;
						for (j = 0; j < num_clusters; ++j)
						{
							double cur_bits = BrotliHistogramBitCostDistance(&in_[i], &out_[clusters[j]]);
							if (cur_bits < best_bits) { best_bits = cur_bits; best_out = clusters[j]; }
						}
						symbols[i] = best_out;
					}

					/* Recompute each out_ based on raw and symbols. */
					for (i = 0; i < num_clusters; ++i) { HistogramDistance.HistogramClear(&out_[clusters[i]]); }
					for (i = 0; i < in_size; ++i) { HistogramDistance.HistogramAddHistogram(&out_[symbols[i]], &in_[i]); }
				}

				/* Reorders elements of the out_[0..length) array and changes values in
				   symbols[0..length) array in the following way:
					 * when called, symbols[] contains indexes into out_[], and has N unique
					   values (possibly N < length)
					 * on return, symbols'[i] = f(symbols[i]) and
								  out_'[symbols'[i]] = out_[symbols[i]], for each 0 <= i < length,
					   where f is a bijection between the range of symbols[] and [0..N), and
					   the first occurrences of values in symbols'[i] come in consecutive
					   increasing order.
				   Returns N, the number of unique values in symbols[]. */
				public static size_t BrotliHistogramReindex(ref MemoryManager m, HistogramDistance* out_, uint* symbols, size_t length)
				{
					const uint kInvalidIndex = uint.MaxValue;
					uint* new_index = (uint*)BrotliAllocate(ref m, length * sizeof(uint));
					uint next_index; HistogramDistance* tmp; size_t i;
					for (i = 0; i < length; ++i) { new_index[i] = kInvalidIndex; }
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == kInvalidIndex) { new_index[symbols[i]] = next_index; ++next_index; } }
					/* TODO: by using idea of "cycle-sort" we can avoid allocation of
					   tmp and reduce the number of copying by the factor of 2. */
					tmp = (HistogramDistance*)BrotliAllocate(ref m, next_index * sizeof(HistogramDistance));
					next_index = 0;
					for (i = 0; i < length; ++i) { if (new_index[symbols[i]] == next_index) { tmp[next_index] = out_[symbols[i]]; ++next_index; } symbols[i] = new_index[symbols[i]]; }
					BrotliFree(ref m, new_index);
					for (i = 0; i < next_index; ++i) { out_[i] = tmp[i]; }
					BrotliFree(ref m, tmp); return next_index;
				}

				public static void BrotliClusterHistograms(ref MemoryManager m, HistogramDistance* in_, size_t in_size, size_t max_histograms, HistogramDistance* out_, size_t* out_size, uint* histogram_symbols)
				{
					uint* cluster_size = (uint*)BrotliAllocate(ref m, in_size * sizeof(uint));
					uint* clusters = (uint*)BrotliAllocate(ref m, in_size * sizeof(uint));
					size_t num_clusters = 0; size_t max_input_histograms = 64;
					size_t pairs_capacity = max_input_histograms * max_input_histograms / 2;
					/* For the first pass of clustering, we allow all pairs. */
					HistogramPair* pairs = (HistogramPair*)BrotliAllocate(ref m, (pairs_capacity + 1) * sizeof(HistogramPair)); size_t i;
					for (i = 0; i < in_size; ++i) { cluster_size[i] = 1; }

					for (i = 0; i < in_size; ++i) { out_[i] = in_[i]; out_[i].bit_cost_ = BitCostDistance.BrotliPopulationCost(&in_[i]); histogram_symbols[i] = (uint)i; }

					for (i = 0; i < in_size; i += max_input_histograms)
					{
						size_t num_to_combine = Math.Min(in_size - i, max_input_histograms);
						size_t num_new_clusters;
						size_t j;
						for (j = 0; j < num_to_combine; ++j) { clusters[num_clusters + j] = (uint)(i + j); }
						num_new_clusters = BrotliHistogramCombine(out_, cluster_size, &histogram_symbols[i], &clusters[num_clusters], pairs, num_to_combine, num_to_combine, max_histograms, pairs_capacity);
						num_clusters += num_new_clusters;
					}

					{
						/* For the second pass, we limit the total number of histogram pairs.
						   After this limit is reached, we only keep searching for the best pair. */
						size_t max_num_pairs = Math.Min(64 * num_clusters, (num_clusters / 2) * num_clusters);
						BrotliEnsureCapacity(ref m, sizeof(HistogramPair), (void**)&pairs, &pairs_capacity, max_num_pairs + 1);

						/* Collapse similar histograms. */
						num_clusters = BrotliHistogramCombine(out_, cluster_size, histogram_symbols, clusters, pairs, num_clusters, in_size, max_histograms, max_num_pairs);
					}
					BrotliFree(ref m, pairs);
					BrotliFree(ref m, cluster_size);
					/* Find the optimal map from original histograms to the final ones. */
					BrotliHistogramRemap(in_, in_size, clusters, num_clusters, out_, histogram_symbols);
					BrotliFree(ref m, clusters);
					/* Convert the context map to a canonical form. */
					*out_size = BrotliHistogramReindex(ref m, out_, histogram_symbols, in_size);
				}
			}

			private static readonly uint[] kInsBase = { 0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26, 34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594 };

			private static readonly uint[] kInsExtra = { 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 12, 14, 24 };

			private static readonly uint[] kCopyBase = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 22, 30, 38, 54,  70, 102, 134, 198, 326, 582, 1094,  2118 };

			private static readonly uint[] kCopyExtra = { 0, 0, 0, 0, 0, 0, 0, 0,  1,  1,  2,  2,  3,  3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 24 };

			[StructLayout(LayoutKind.Sequential)]
			internal struct Command 
			{
				public uint insert_len_;

				/* Stores copy_len in low 24 bits and copy_len XOR copy_code in high 8 bit. */
				public uint copy_len_;

				public uint dist_extra_; public ushort cmd_prefix_; public ushort dist_prefix_;
			}

			private static ushort GetInsertLengthCode(size_t insertlen)
			{
				if (insertlen < 6) { return (ushort)insertlen; }
				else if (insertlen < 130) { uint nbits = Log2FloorNonZero(insertlen - 2) - 1u; return (ushort)((nbits << 1) + ((insertlen - 2) >> (int) nbits) + 2); }
				else if (insertlen < 2114) { return (ushort)(Log2FloorNonZero(insertlen - 66) + 10); }
				else if (insertlen < 6210) { return 21; }
				else if (insertlen < 22594) { return 22; } else { return 23; }
			}

			private static unsafe ushort GetCopyLengthCode(size_t copylen)
			{
				if (copylen < 10) { return (ushort)(copylen - 2); }
				else if (copylen < 134) { uint nbits = Log2FloorNonZero(copylen - 6) - 1u; return (ushort)((nbits << 1) + ((copylen - 6) >> (int) nbits) + 4); }
				else if (copylen < 2118) { return (ushort)(Log2FloorNonZero(copylen - 70) + 12); }
				else { return 23; }
			}

			private static ushort CombineLengthCodes(ushort inscode, ushort copycode, bool use_last_distance)
			{

				ushort bits64 = (ushort)((copycode & 0x7u) | ((inscode & 0x7u) << 3));
				if (use_last_distance && inscode < 8 && copycode < 16) { return (ushort) ((copycode < 8) ? bits64 : (bits64 | 64)); }
				else
				{
					/* Specification: 5 Encoding of ... (last table) 
					offset = 2 * index, where index is in range [0..8] */
					int offset = 2 * ((copycode >> 3) + 3 * (inscode >> 3));
					/* All values in specification are K * 64,
					   where   K = [2, 3, 6, 4, 5, 8, 7, 9, 10],
						   i + 1 = [1, 2, 3, 4, 5, 6, 7, 8,  9],
					   K - i - 1 = [1, 1, 3, 0, 0, 2, 0, 1,  2] = D.
					   All values in D require only 2 bits to encode.
					   Magic ant is shifted 6 bits left, to avoid final multiplication. */
					offset = (offset << 5) + 0x40 + ((0x520D40 >> offset) & 0xC0);
					return (ushort) ((ushort)offset | bits64);
				}
			}

			/* distance_code is e.g. 0 for same-as-last short code, or 16 for offset 1. */
			private static unsafe void InitCommand(Command* self, size_t insertlen, size_t copylen, size_t copylen_code, size_t distance_code)
			{
				self->insert_len_ = (uint)insertlen; self->copy_len_ = (uint)(copylen | ((copylen_code ^ copylen) << 24));
				/* The distance prefix and extra bits are stored in this Command as if
				   npostfix and ndirect were 0, they are only recomputed later after the
				   clustering if needed. */
				PrefixEncodeCopyDistance(distance_code, 0, 0, &self->dist_prefix_, &self->dist_extra_);
				GetLengthCode(insertlen, copylen_code, (self->dist_prefix_ == 0), &self->cmd_prefix_);
			}

			private static unsafe void GetLengthCode(size_t insertlen, size_t copylen, bool use_last_distance, ushort* code) { ushort inscode = GetInsertLengthCode(insertlen); ushort copycode = GetCopyLengthCode(copylen); *code = CombineLengthCodes(inscode, copycode, use_last_distance); }

			private static unsafe uint CommandRestoreDistanceCode(Command* self)
			{
				if (self->dist_prefix_ < BROTLI_NUM_DISTANCE_SHORT_CODES) { return self->dist_prefix_; }
				else
				{
					uint nbits = self->dist_extra_ >> 24;
					uint extra = self->dist_extra_ & 0xffffff;
					/* It is assumed that the distance was first encoded with NPOSTFIX = 0 and
					   NDIRECT = 0, so the code itself is of this form:
						 BROTLI_NUM_DISTANCE_SHORT_CODES + 2 * (nbits - 1) + prefix_bit
					   Therefore, the following expression results in (2 + prefix_bit). */
					uint prefix = self->dist_prefix_ + 4u - BROTLI_NUM_DISTANCE_SHORT_CODES - 2u * nbits;
					/* Subtract 4 for offset (Chapter 4.) and
					   increase by BROTLI_NUM_DISTANCE_SHORT_CODES - 1  */
					return (prefix << (int) nbits) + extra + BROTLI_NUM_DISTANCE_SHORT_CODES - 4u;
				}
			}

			private static unsafe uint CommandCopyLenCode(Command* self) { return (self->copy_len_ & 0xFFFFFF) ^ (self->copy_len_ >> 24); }

			private static unsafe void InitInsertCommand(Command* self, size_t insertlen)
			{
				self->insert_len_ = (uint)insertlen; self->copy_len_ = 4 << 24; self->dist_extra_ = 0;
				self->dist_prefix_ = BROTLI_NUM_DISTANCE_SHORT_CODES;
				GetLengthCode(insertlen, 4, false, &self->cmd_prefix_);
			}

			private static unsafe uint CommandDistanceContext(Command* self)
			{
				uint r = (uint) (self->cmd_prefix_ >> 6); uint c = (uint) (self->cmd_prefix_ & 7);
				if ((r == 0 || r == 2 || r == 4 || r == 7) && (c <= 2)) { return c; }
				return 3;
			}

			private static unsafe uint CommandCopyLen(Command* self) { return self->copy_len_ & 0xFFFFFF; }

			private static uint GetInsertExtra(ushort inscode) { return kInsExtra[inscode]; }

			private static uint GetCopyExtra(ushort copycode) { return kCopyExtra[copycode]; }

			private static uint GetInsertBase(ushort inscode) { return kInsBase[inscode]; }

			private static uint GetCopyBase(ushort copycode) { return kCopyBase[copycode]; }

			private class CompressFragment 
			{
				private static readonly size_t MAX_DISTANCE = BROTLI_MAX_BACKWARD_LIMIT(18);

				private static unsafe uint Hash(byte* p, size_t shift) { ulong h = (*(ulong*) (p) << 24) * kHashMul32; return (uint) (h >> (int) shift); }

				private static unsafe bool IsMatch(byte* p1, byte* p2) { return (*(uint*) (p1) == *(uint*) (p2) && p1[4] == p2[4]); }

				/* REQUIRES: len <= 1 << 24. */
				private static unsafe void BrotliStoreMetaBlockHeader(size_t len, bool is_uncompressed, size_t* storage_ix, byte* storage) 
				{
					size_t nibbles = 6;
					/* ISLAST */
					BrotliWriteBits(1, 0, storage_ix, storage);
					if (len <= (1U << 16)) { nibbles = 4; } else if (len <= (1U << 20)) { nibbles = 5; }
					BrotliWriteBits(2, nibbles - 4, storage_ix, storage);
					BrotliWriteBits(nibbles * 4, len - 1, storage_ix, storage);
					/* ISUNCOMPRESSED */
					BrotliWriteBits(1, is_uncompressed ? 1U : 0U, storage_ix, storage);
				}

				private static unsafe void RewindBitPosition(size_t new_storage_ix, size_t* storage_ix, byte* storage) { size_t bitpos = new_storage_ix & 7; size_t mask = (1u << (int) bitpos) - 1; storage[new_storage_ix >> 3] &= (byte) mask; *storage_ix = new_storage_ix; }

				private static unsafe void EmitUncompressedMetaBlock(byte* begin, byte* end, size_t storage_ix_start, size_t* storage_ix, byte* storage) 
				{
					size_t len = (size_t) (end - begin);
					RewindBitPosition(storage_ix_start, storage_ix, storage);
					BrotliStoreMetaBlockHeader(len, true, storage_ix, storage);
					*storage_ix = (*storage_ix + 7u) & ~7u;
					memcpy(&storage[*storage_ix >> 3], begin, len);
					*storage_ix += len << 3; storage[*storage_ix >> 3] = 0;
				}

				/* Builds a literal prefix code into "depths" and "bits" based on the statistics
				   of the "input" string and stores it into the bit stream.
				   Note that the prefix code here is built from the pre-LZ77 input, therefore
				   we can only approximate the statistics of the actual literal stream.
				   Moreover, for long inputs we build a histogram from a sample of the input
				   and thus have to assign a non-zero depth for each literal.
				   Returns estimated compression ratio millibytes/char for encoding given input
				   with generated code. */
				private static unsafe size_t BuildAndStoreLiteralPrefixCode(ref MemoryManager m, byte* input, size_t input_size, byte* depths,
					ushort* bits, size_t* storage_ix, byte* storage) 
				{
					uint* histogram = stackalloc uint[256]; size_t histogram_total; size_t i;
					if (input_size < (1 << 15)) 
					{
						for (i = 0; i < input_size; ++i) { ++histogram[input[i]]; }
						histogram_total = input_size;
						for (i = 0; i < 256; ++i) 
						{
							/* We weigh the first 11 samples with weight 3 to account for the
								balancing effect of the LZ77 phase on the histogram. */
							uint adjust = 2 * Math.Min(histogram[i], 11u); histogram[i] += adjust; histogram_total += adjust;
						}
					}
					else 
					{
						size_t kSampleRate = 29;
						for (i = 0; i < input_size; i += kSampleRate) { ++histogram[input[i]]; }
						histogram_total = (input_size + kSampleRate - 1) / kSampleRate;
						for (i = 0; i < 256; ++i) 
						{
							/* We add 1 to each population count to avoid 0 bit depths (since this is
								only a sample and we don't know if the symbol appears or not), and we
								weigh the first 11 samples with weight 3 to account for the balancing
								effect of the LZ77 phase on the histogram (more frequent symbols are
								more likely to be in backward references instead as literals). */
							uint adjust = 1 + 2 * Math.Min(histogram[i], 11u); histogram[i] += adjust; histogram_total += adjust;
						}
					}
					BrotliBuildAndStoreHuffmanTreeFast(ref m, histogram, histogram_total, /* max_bits = */ 8, depths, bits, storage_ix, storage);

					{
						size_t literal_ratio = 0;
						for (i = 0; i < 256; ++i) { if (histogram[i] != 0) literal_ratio += histogram[i] * depths[i]; }
						/* Estimated encoding ratio, millibytes per symbol. */
						return (literal_ratio * 125) / histogram_total;
					}
				}

				/* REQUIRES: insertlen < 6210 */
				private static unsafe void EmitInsertLen(size_t insertlen, byte* depth, ushort* bits, uint* histo, size_t* storage_ix, byte* storage) 
				{
					if (insertlen < 6) { size_t code = insertlen + 40; BrotliWriteBits(depth[code], bits[code], storage_ix, storage); ++histo[code]; }
					else if (insertlen < 130) 
					{
						size_t tail = insertlen - 2; uint nbits = Log2FloorNonZero(tail) - 1u;
						size_t prefix = tail >> (int) nbits; size_t inscode = (nbits << 1) + prefix + 42;
						BrotliWriteBits(depth[inscode], bits[inscode], storage_ix, storage);
						BrotliWriteBits(nbits, tail - (prefix << (int) nbits), storage_ix, storage); ++histo[inscode];
					}
					else if (insertlen < 2114) 
					{
						size_t tail = insertlen - 66; uint nbits = Log2FloorNonZero(tail); size_t code = nbits + 50;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(nbits, tail - ((size_t) 1 << (int) nbits), storage_ix, storage); ++histo[code];
					}
					else { BrotliWriteBits(depth[61], bits[61], storage_ix, storage); BrotliWriteBits(12, insertlen - 2114, storage_ix, storage); ++histo[21]; }
				}

				private const int MIN_RATIO = 980;

				/* Acceptable loss for uncompressible speedup is 2% */
				private static unsafe bool ShouldUseUncompressedMode(byte* metablock_start, byte* next_emit, size_t insertlen, size_t literal_ratio) 
				{
					size_t compressed = (size_t) (next_emit - metablock_start);
					if (compressed * 50 > insertlen) { return false; } else { return (literal_ratio > MIN_RATIO); }
				}

				private static unsafe void EmitLongInsertLen(size_t insertlen, byte* depth, ushort* bits, uint* histo, size_t* storage_ix, byte* storage) 
				{
					if (insertlen < 22594) { BrotliWriteBits(depth[62], bits[62], storage_ix, storage); BrotliWriteBits(14, insertlen - 6210, storage_ix, storage); ++histo[22]; }
					else 
					{
						BrotliWriteBits(depth[63], bits[63], storage_ix, storage);
						BrotliWriteBits(24, insertlen - 22594, storage_ix, storage); ++histo[23];
					}
				}

				private static unsafe void EmitDistance(size_t distance, byte* depth, ushort* bits, uint* histo, size_t* storage_ix, byte* storage) 
				{
					size_t d = distance + 3; uint nbits = Log2FloorNonZero(d) - 1u; size_t prefix = (d >> (int) nbits) & 1;
					size_t offset = (2 + prefix) << (int) nbits; size_t distcode = 2 * (nbits - 1) + prefix + 80;
					BrotliWriteBits(depth[distcode], bits[distcode], storage_ix, storage);
					BrotliWriteBits(nbits, d - offset, storage_ix, storage); ++histo[distcode];
				}

				private static unsafe void EmitLiterals(byte* input, size_t len, byte* depth, ushort* bits, size_t* storage_ix, byte* storage)  { size_t j; for (j = 0; j < len; j++) { byte lit = input[j]; BrotliWriteBits(depth[lit], bits[lit], storage_ix, storage); } }

				private static unsafe void EmitCopyLenLastDistance(size_t copylen, byte* depth, ushort* bits, uint* histo, size_t* storage_ix, byte* storage) 
				{
					if (copylen < 12) { BrotliWriteBits(depth[copylen - 4], bits[copylen - 4], storage_ix, storage); ++histo[copylen - 4]; }
					else if (copylen < 72) 
					{
						size_t tail = copylen - 8; uint nbits = Log2FloorNonZero(tail) - 1;
						size_t prefix = tail >> (int) nbits; size_t code = (nbits << 1) + prefix + 4;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(nbits, tail - (prefix << (int) nbits), storage_ix, storage);
						++histo[code];
					}
					else if (copylen < 136) 
					{
						size_t tail = copylen - 8; size_t code = (tail >> 5) + 30;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(5, tail & 31, storage_ix, storage);
						BrotliWriteBits(depth[64], bits[64], storage_ix, storage); ++histo[code]; ++histo[64];
					}
					else if (copylen < 2120) 
					{
						size_t tail = copylen - 72; uint nbits = Log2FloorNonZero(tail); size_t code = nbits + 28;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(nbits, tail - ((size_t) 1 << (int) nbits), storage_ix, storage);
						BrotliWriteBits(depth[64], bits[64], storage_ix, storage); ++histo[code]; ++histo[64];
					}
					else 
					{
						BrotliWriteBits(depth[39], bits[39], storage_ix, storage);
						BrotliWriteBits(24, copylen - 2120, storage_ix, storage);
						BrotliWriteBits(depth[64], bits[64], storage_ix, storage); ++histo[47]; ++histo[64];
					}
				}

				private static unsafe uint HashBytesAtOffset(ulong v, int offset, size_t shift)  { ulong h = ((v >> (8 * offset)) << 24) * kHashMul32; return (uint) (h >> (int) shift); }

				private static unsafe void EmitCopyLen(size_t copylen, byte* depth, ushort* bits, uint* histo, size_t* storage_ix, byte* storage) 
				{
					if (copylen < 10) { BrotliWriteBits(depth[copylen + 14], bits[copylen + 14], storage_ix, storage); ++histo[copylen + 14]; }
					else if (copylen < 134) 
					{
						size_t tail = copylen - 6; uint nbits = Log2FloorNonZero(tail) - 1u;
						size_t prefix = tail >> (int) nbits; size_t code = (nbits << 1) + prefix + 20;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(nbits, tail - (prefix << (int) nbits), storage_ix, storage); ++histo[code];
					}
					else if (copylen < 2118) 
					{
						size_t tail = copylen - 70; uint nbits = Log2FloorNonZero(tail); size_t code = nbits + 28;
						BrotliWriteBits(depth[code], bits[code], storage_ix, storage);
						BrotliWriteBits(nbits, tail - ((size_t) 1 << (int) nbits), storage_ix, storage); ++histo[code];
					} else { BrotliWriteBits(depth[39], bits[39], storage_ix, storage); BrotliWriteBits(24, copylen - 2118, storage_ix, storage); ++histo[47]; }
				}

				private static unsafe bool ShouldMergeBlock(byte* data, size_t len, byte* depths) 
				{
					size_t[] histo = new size_t[256]; size_t kSampleRate = 43; size_t i;
					for (i = 0; i < len; i += kSampleRate) { ++histo[data[i]]; }
					{
						size_t total = (len + kSampleRate - 1) / kSampleRate;
						double r = (FastLog2(total) + 0.5) * (double) total + 200;
						for (i = 0; i < 256; ++i) { r -= (double) histo[i] * (depths[i] + FastLog2(histo[i])); }
						return (r >= 0.0);
					}
				}

				private static unsafe void UpdateBits(size_t n_bits, uint bits, size_t pos, byte* array) 
				{
					while (n_bits > 0) 
					{
						size_t byte_pos = pos >> 3; size_t n_unchanged_bits = pos & 7;
						size_t n_changed_bits = Math.Min(n_bits, 8 - n_unchanged_bits);
						size_t total_bits = n_unchanged_bits + n_changed_bits;
						uint mask = (~((1u << (int) total_bits) - 1u)) | ((1u << (int) n_unchanged_bits) - 1u);
						uint unchanged_bits = array[byte_pos] & mask;
						uint changed_bits = bits & ((1u << (int) n_changed_bits) - 1u);
						array[byte_pos] = (byte) ((changed_bits << (int) n_unchanged_bits) | unchanged_bits);
						n_bits -= n_changed_bits; bits >>= (int) n_changed_bits; pos += n_changed_bits;
					}
				}

				/* Builds a command and distance prefix code (each 64 symbols) into "depth" and
				   "bits" based on "histogram" and stores it into the bit stream. */
				private static unsafe void BuildAndStoreCommandPrefixCode(uint* histogram, byte* depth, ushort* bits, size_t* storage_ix, byte* storage) 
				{
					/* Tree size for building a tree over 64 symbols is 2 * 64 + 1. */
					HuffmanTree* tree = stackalloc HuffmanTree[129];
					byte* cmd_depth = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
					memset(cmd_depth, 0, BROTLI_NUM_COMMAND_SYMBOLS);
					ushort* cmd_bits = stackalloc ushort[64];

					BrotliCreateHuffmanTree(histogram, 64, 15, tree, depth);
					BrotliCreateHuffmanTree(&histogram[64], 64, 14, tree, &depth[64]);
					/* We have to jump through a few hoops here in order to compute
					   the command bits because the symbols are in a different order than in
					   the full alphabet. This looks complicated, but having the symbols
					   in this order in the command bits saves a few branches in the Emit*
					   functions. */
					memcpy(cmd_depth, depth, 24);
					memcpy(cmd_depth + 24, depth + 40, 8); memcpy(cmd_depth + 32, depth + 24, 8);
					memcpy(cmd_depth + 40, depth + 48, 8); memcpy(cmd_depth + 48, depth + 32, 8);
					memcpy(cmd_depth + 56, depth + 56, 8);
					BrotliConvertBitDepthsToSymbols(cmd_depth, 64, cmd_bits);
					memcpy(bits, cmd_bits, 48); memcpy(bits + 24, cmd_bits + 32, 16);
					memcpy(bits + 32, cmd_bits + 48, 16); memcpy(bits + 40, cmd_bits + 24, 16);
					memcpy(bits + 48, cmd_bits + 40, 16); memcpy(bits + 56, cmd_bits + 56, 16);
					BrotliConvertBitDepthsToSymbols(&depth[64], 64, &bits[64]);
					{
						/* Create the bit length array for the full command alphabet. */
						size_t i; memset(cmd_depth, 0, 64); /* only 64 first values were used */
						memcpy(cmd_depth, depth, 8); memcpy(cmd_depth + 64, depth + 8, 8);
						memcpy(cmd_depth + 128, depth + 16, 8); memcpy(cmd_depth + 192, depth + 24, 8);
						memcpy(cmd_depth + 384, depth + 32, 8);
						for (i = 0; i < 8; ++i) { cmd_depth[128 + 8 * i] = depth[40 + i]; cmd_depth[256 + 8 * i] = depth[48 + i]; cmd_depth[448 + 8 * i] = depth[56 + i]; }
						BrotliStoreHuffmanTree( cmd_depth, BROTLI_NUM_COMMAND_SYMBOLS, tree, storage_ix, storage);
					}
					BrotliStoreHuffmanTree(&depth[64], 64, tree, storage_ix, storage);
				}

				private static unsafe void BrotliCompressFragmentFastImpl(ref MemoryManager m, byte* input, size_t input_size,
					bool is_last, int* table, size_t table_bits, byte* cmd_depth, ushort* cmd_bits, size_t* cmd_code_numbits, byte* cmd_code,
					size_t* storage_ix, byte* storage) 
				{
					uint* cmd_histo = stackalloc uint[128];
					byte* ip_end;
					/* "next_emit" is a pointer to the first byte that is not covered by a
					   previous copy. Bytes between "next_emit" and the start of the next copy or
					   the end of the input will be emitted as literal bytes. */
					byte* next_emit = input;
					/* Save the start of the first block for position and distance computations. */
					byte* base_ip = input; size_t kFirstBlockSize = 3 << 15;
					size_t kMergeBlockSize = 1 << 16; size_t kInputMarginBytes = BROTLI_WINDOW_GAP; size_t kMinMatchLen = 5;
					byte* metablock_start = input; size_t block_size = Math.Min(input_size, kFirstBlockSize);
					size_t total_block_size = block_size;
					/* Save the bit position of the MLEN field of the meta-block header, so that
					   we can update it later if we decide to extend this meta-block. */
					size_t mlen_storage_ix = *storage_ix + 3;
					byte* lit_depth = stackalloc byte[256]; ushort* lit_bits = stackalloc ushort[256];
					size_t literal_ratio; byte* ip; int last_distance; size_t shift = 64u - table_bits;
					BrotliStoreMetaBlockHeader(block_size, false, storage_ix, storage);
					/* No block splits, no contexts. */
					BrotliWriteBits(13, 0, storage_ix, storage);
					literal_ratio = BuildAndStoreLiteralPrefixCode(ref m, input, block_size, lit_depth, lit_bits, storage_ix, storage);

					{
						/* Store the pre-compressed command and distance prefix codes. */
						size_t i;
						for (i = 0; i + 7 < *cmd_code_numbits; i += 8) {BrotliWriteBits(8, cmd_code[i >> 3], storage_ix, storage); }
					}
					BrotliWriteBits(*cmd_code_numbits & 7, cmd_code[*cmd_code_numbits >> 3], storage_ix, storage);

				emit_commands:
					/* Initialize the command and distance histograms. We will gather
					   statistics of command and distance codes during the processing
					   of this block and use it to update the command and distance
					   prefix codes for the next block. */
					fixed (uint* kchs = kCmdHistoSeed) { memcpy(cmd_histo, kchs, kCmdHistoSeed.Length * sizeof(uint)); }
					/* "ip" is the input pointer. */
					ip = input; last_distance = -1; ip_end = input + block_size;
					if (block_size >= kInputMarginBytes) 
					{
						/* For the last block, we need to keep a 16 bytes margin so that we can be
						   sure that all distances are at most window size - 16.
						   For all other blocks, we only need to keep a margin of 5 bytes so that
						   we don't go over the block size with a copy. */
						size_t len_limit = Math.Min(block_size - kMinMatchLen, input_size - kInputMarginBytes);
						byte* ip_limit = input + len_limit; uint next_hash;
						for (next_hash = Hash(++ip, shift);;) 
						{
							/* Step 1: Scan forward in the input looking for a 5-byte-long match.
							   If we get close to exhausting the input then goto emit_remainder.
		
							   Heuristic match skipping: If 32 bytes are scanned with no matches
							   found, start looking only at every other byte. If 32 more bytes are
							   scanned, look at every third byte, etc.. When a match is found,
							   immediately go back to looking at every byte. This is a small loss
							   (~5% performance, ~0.1% density) for compressible data due to more
							   bookkeeping, but for non-compressible data (such as JPEG) it's a huge
							   win since the compressor quickly "realizes" the data is incompressible
							   and doesn't bother looking for matches everywhere.
		
							   The "skip" variable keeps track of how many bytes there are since the
							   last match; dividing it by 32 (i.e. right-shifting by five) gives the
							   number of bytes to move ahead for each iteration. */
							uint skip = 32; byte* next_ip = ip; byte* candidate;
							trawl:
							do 
							{
								uint hash = next_hash; uint bytes_between_hash_lookups = skip++ >> 5;
								ip = next_ip; next_ip = ip + bytes_between_hash_lookups;
								if (next_ip > ip_limit) { goto emit_remainder; }
								next_hash = Hash(next_ip, shift); candidate = ip - last_distance;
								if (IsMatch(ip, candidate)) { if (candidate < ip) { table[hash] = (int) (ip - base_ip); break; } }
								candidate = base_ip + table[hash]; table[hash] = (int) (ip - base_ip);
							} while (!IsMatch(ip, candidate));

							/* Check copy distance. If candidate is not feasible, continue search.
							   Checking is done outside of hot loop to reduce overhead. */
							if (ip - candidate > MAX_DISTANCE) goto trawl;

							/* Step 2: Emit the found match together with the literal bytes from
							   "next_emit" to the bit stream, and then see if we can find a next match
							   immediately afterwards. Repeat until we find no match for the input
							   without emitting some literal bytes. */

							{
								/* We have a 5-byte match at ip, and we need to emit bytes in
								   [next_emit, ip). */
								byte* base_ = ip;
								size_t matched = 5 + FindMatchLengthWithLimit(candidate + 5, ip + 5, (size_t) (ip_end - ip) - 5);
								int distance = (int) (base_ - candidate); /* > 0 */
								size_t insert = (size_t) (base_ - next_emit);
								ip += matched;
								if (insert < 6210) { EmitInsertLen(insert, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage); }
								else if (ShouldUseUncompressedMode(metablock_start, next_emit, insert,literal_ratio)) 
								{
									EmitUncompressedMetaBlock(metablock_start, base_, mlen_storage_ix - 3, storage_ix, storage);
									input_size -= (size_t) (base_ - input); input = base_; next_emit = input;
									goto next_block;
								}
								else { EmitLongInsertLen(insert, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage); }
								EmitLiterals(next_emit, insert, lit_depth, lit_bits, storage_ix, storage);
								if (distance == last_distance) { BrotliWriteBits(cmd_depth[64], cmd_bits[64], storage_ix, storage); ++cmd_histo[64]; }
								else {EmitDistance((size_t) distance, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage); last_distance = distance; }
								EmitCopyLenLastDistance(matched, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage);
								next_emit = ip;
								if (ip >= ip_limit) { goto emit_remainder; }
								/* We could immediately start working at ip now, but to improve
								   compression we first update "table" with the hashes of some positions
								   within the last copy. */
								{
									ulong input_bytes = *(ulong*) (ip - 3);
									uint prev_hash = HashBytesAtOffset(input_bytes, 0, shift);
									uint cur_hash = HashBytesAtOffset(input_bytes, 3, shift); table[prev_hash] = (int) (ip - base_ip - 3);
									prev_hash = HashBytesAtOffset(input_bytes, 1, shift); table[prev_hash] = (int) (ip - base_ip - 2);
									prev_hash = HashBytesAtOffset(input_bytes, 2, shift); table[prev_hash] = (int) (ip - base_ip - 1);
									candidate = base_ip + table[cur_hash]; table[cur_hash] = (int) (ip - base_ip);
								}
							}

							while (IsMatch(ip, candidate)) {
								/* We have a 5-byte match at ip, and no need to emit any literal bytes
								   prior to ip. */
								byte* base_ = ip;
								size_t matched = 5 + FindMatchLengthWithLimit(candidate + 5, ip + 5, (size_t) (ip_end - ip) - 5);
								if (ip - candidate > MAX_DISTANCE) break;
								ip += matched;
								last_distance = (int) (base_ - candidate); /* > 0 */
								EmitCopyLen(matched, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage);
								EmitDistance((size_t) last_distance, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage);

								next_emit = ip;
								if (ip >= ip_limit) { goto emit_remainder; }
								/* We could immediately start working at ip now, but to improve
								   compression we first update "table" with the hashes of some positions
								   within the last copy. */
								{
									ulong input_bytes = *(ulong*) (ip - 3); uint prev_hash = HashBytesAtOffset(input_bytes, 0, shift);
									uint cur_hash = HashBytesAtOffset(input_bytes, 3, shift); table[prev_hash] = (int) (ip - base_ip - 3);
									prev_hash = HashBytesAtOffset(input_bytes, 1, shift); table[prev_hash] = (int) (ip - base_ip - 2);
									prev_hash = HashBytesAtOffset(input_bytes, 2, shift); table[prev_hash] = (int) (ip - base_ip - 1);

									candidate = base_ip + table[cur_hash]; table[cur_hash] = (int) (ip - base_ip);
								}
							}

							next_hash = Hash(++ip, shift);
						}
					}

					emit_remainder:
					input += block_size; input_size -= block_size; block_size = Math.Min(input_size, kMergeBlockSize);

					/* Decide if we want to continue this meta-block instead of emitting the
					   last insert-only command. */
					if (input_size > 0 && total_block_size + block_size <= (1 << 20) && ShouldMergeBlock(input, block_size, lit_depth)) 
					{
						/* Update the size of the current meta-block and continue emitting commands.
						   We can do this because the current size and the new size both have 5
						   nibbles. */
						total_block_size += block_size;
						UpdateBits(20, (uint) (total_block_size - 1), mlen_storage_ix, storage);
						goto emit_commands;
					}

					/* Emit the remaining bytes as literals. */
					if (next_emit < ip_end) 
					{
						size_t insert = (size_t) (ip_end - next_emit);
						if (insert < 6210) 
						{
							EmitInsertLen(insert, cmd_depth, cmd_bits, cmd_histo,storage_ix, storage);
							EmitLiterals(next_emit, insert, lit_depth, lit_bits, storage_ix, storage);
						}
						else if (ShouldUseUncompressedMode(metablock_start, next_emit, insert, literal_ratio)) { EmitUncompressedMetaBlock(metablock_start, ip_end, mlen_storage_ix - 3, storage_ix, storage); }
						else 
						{
							EmitLongInsertLen(insert, cmd_depth, cmd_bits, cmd_histo, storage_ix, storage);
							EmitLiterals(next_emit, insert, lit_depth, lit_bits, storage_ix, storage);
						}
					}
					next_emit = ip_end;

					next_block:
					/* If we have more data, write a new meta-block header and prefix codes and
					   then continue emitting commands. */
					if (input_size > 0) 
					{
						metablock_start = input; block_size = Math.Min(input_size, kFirstBlockSize); total_block_size = block_size;
						/* Save the bit position of the MLEN field of the meta-block header, so that
						   we can update it later if we decide to extend this meta-block. */
						mlen_storage_ix = *storage_ix + 3;
						BrotliStoreMetaBlockHeader(block_size, false, storage_ix, storage);
						/* No block splits, no contexts. */
						BrotliWriteBits(13, 0, storage_ix, storage);
						literal_ratio = BuildAndStoreLiteralPrefixCode(ref m, input, block_size, lit_depth, lit_bits, storage_ix, storage);
						BuildAndStoreCommandPrefixCode(cmd_histo, cmd_depth, cmd_bits, storage_ix, storage);
						goto emit_commands;
					}

					if (!is_last) 
					{
						/* If this is not the last block, update the command and distance prefix
						   codes for the next block and store the compressed forms. */
						cmd_code[0] = 0; *cmd_code_numbits = 0;
						BuildAndStoreCommandPrefixCode(cmd_histo, cmd_depth, cmd_bits, cmd_code_numbits, cmd_code);
					}
				}

				public static unsafe void BrotliCompressFragmentFast( ref MemoryManager m, byte* input, size_t input_size, bool is_last, int* table, size_t table_size, byte* cmd_depth,
					ushort* cmd_bits, size_t* cmd_code_numbits, byte* cmd_code, size_t* storage_ix, byte* storage) 
				{
					size_t initial_storage_ix = *storage_ix; size_t table_bits = Log2FloorNonZero(table_size);

					if (input_size == 0) 
					{
						BrotliWriteBits(1, 1, storage_ix, storage); /* islast */
						BrotliWriteBits(1, 1, storage_ix, storage); /* isempty */
						*storage_ix = (*storage_ix + 7u) & ~7u; return;
					}

					switch ((int) table_bits) 
					{
						case 9:
						case 11:
						case 13:
						case 15:
							BrotliCompressFragmentFastImpl(ref m, input, input_size, is_last, table, table_bits, cmd_depth, cmd_bits, cmd_code_numbits, cmd_code, storage_ix, storage);
							break;
					}

					/* If output is larger than single uncompressed block, rewrite it. */
					if (*storage_ix - initial_storage_ix > 31 + (input_size << 3)) {EmitUncompressedMetaBlock(input, input + input_size, initial_storage_ix, storage_ix, storage); }

					if (is_last) { BrotliWriteBits(1, 1, storage_ix, storage); /* islast */ BrotliWriteBits(1, 1, storage_ix, storage); /* isempty */ *storage_ix = (*storage_ix + 7u) & ~7u; }
				}
			}

			private static unsafe void BrotliCompressFragmentFast(ref MemoryManager m, byte* input, size_t input_size,
				bool is_last, int* table, size_t table_size, byte* cmd_depth, ushort* cmd_bits, size_t* cmd_code_numbits, byte* cmd_code,
				size_t* storage_ix, byte* storage) 
			{
				CompressFragment.BrotliCompressFragmentFast(ref m, input, input_size, is_last, table, table_size, cmd_depth, cmd_bits, cmd_code_numbits, cmd_code, storage_ix, storage);
			}

			private class CompressFragmentTwoPass 
			{
				private static readonly size_t MAX_DISTANCE = BROTLI_MAX_BACKWARD_LIMIT(18);

				private static unsafe uint Hash(byte* p, size_t shift)  { ulong h = (*(ulong*) (p) << 16) * kHashMul32; return (uint) (h >> (int) shift); }

				private static unsafe uint HashBytesAtOffset(ulong v, int offset, size_t shift) 
				{ulong h = ((v >> (8 * offset)) << 16) * kHashMul32; return (uint) (h >> (int) shift); }

				private static unsafe bool IsMatch(byte* p1, byte* p2) {return (*(uint*) (p1) == *(uint*) (p2) && p1[4] == p2[4] && p1[5] == p2[5]); }

				private static unsafe void EmitInsertLen(uint insertlen, uint** commands) 
				{
					if (insertlen < 6) { **commands = insertlen; }
					else if (insertlen < 130) 
					{
						uint tail = insertlen - 2; uint nbits = Log2FloorNonZero(tail) - 1u;
						uint prefix = tail >> (int) nbits; uint inscode = (nbits << 1) + prefix + 2;
						uint extra = tail - (prefix << (int) nbits); **commands = inscode | (extra << 8);
					}
					else if (insertlen < 2114) 
					{
						uint tail = insertlen - 66; uint nbits = Log2FloorNonZero(tail); uint code = nbits + 10;
						uint extra = tail - (1u << (int) nbits); **commands = code | (extra << 8);
					}
					else if (insertlen < 6210) { uint extra = insertlen - 2114; **commands = 21 | (extra << 8); }
					else if (insertlen < 22594) { uint extra = insertlen - 6210; **commands = 22 | (extra << 8); }
					else { uint extra = insertlen - 22594; **commands = 23 | (extra << 8); }
					++(*commands);
				}

				private static unsafe void EmitCopyLen(size_t copylen, uint** commands) {
					if (copylen < 10) { **commands = (uint) (copylen + 38); }
					else if (copylen < 134) 
					{
						size_t tail = copylen - 6; size_t nbits = Log2FloorNonZero(tail) - 1;
						size_t prefix = tail >> (int) nbits; size_t code = (nbits << 1) + prefix + 44;
						size_t extra = tail - (prefix << (int) nbits); **commands = (uint) (code | (extra << 8));
					}
					else if (copylen < 2118) 
					{
						size_t tail = copylen - 70; size_t nbits = Log2FloorNonZero(tail); size_t code = nbits + 52;
						size_t extra = tail - ((size_t) 1 << (int) nbits); **commands = (uint) (code | (extra << 8));
					}
					else { size_t extra = copylen - 2118; **commands = (uint) (63 | (extra << 8)); }
					++(*commands);
				}

				private static unsafe void EmitCopyLenLastDistance(size_t copylen, uint** commands) 
				{
					if (copylen < 12) { **commands = (uint) (copylen + 20); ++(*commands); }
					else if (copylen < 72)
					{
						size_t tail = copylen - 8;
						size_t nbits = Log2FloorNonZero(tail) - 1; size_t prefix = tail >> (int) nbits;
						size_t code = (nbits << 1) + prefix + 28; size_t extra = tail - (prefix << (int) nbits);
						**commands = (uint) (code | (extra << 8)); ++(*commands);
					}
					else if (copylen < 136) 
					{
						size_t tail = copylen - 8; size_t code = (tail >> 5) + 54; size_t extra = tail & 31;
						**commands = (uint) (code | (extra << 8)); ++(*commands); **commands = 64; ++(*commands);
					}
					else if (copylen < 2120) 
					{
						size_t tail = copylen - 72; size_t nbits = Log2FloorNonZero(tail);
						size_t code = nbits + 52; size_t extra = tail - ((size_t) 1 << (int) nbits);
						**commands = (uint) (code | (extra << 8)); ++(*commands); **commands = 64; ++(*commands);
					}
					else 
					{
						size_t extra = copylen - 2120;
						**commands = (uint) (63 | (extra << 8));
						++(*commands); **commands = 64; ++(*commands);
					}
				}

				private static unsafe void EmitDistance(uint distance, uint** commands) 
				{
					uint d = distance + 3; uint nbits = Log2FloorNonZero(d) - 1;
					uint prefix = (d >> (int) nbits) & 1; uint offset = (2 + prefix) << (int) nbits;
					uint distcode = 2 * (nbits - 1) + prefix + 80; uint extra = d - offset;
					**commands = distcode | (extra << 8); ++(*commands);
				}

				private static unsafe void CreateCommands(byte* input, size_t block_size, size_t input_size, byte* base_ip, int* table, size_t table_bits, byte** literals, uint** commands) 
				{
					/* "ip" is the input pointer. */
					byte* ip = input; size_t shift = 64u - table_bits; byte* ip_end = input + block_size;
					/* "next_emit" is a pointer to the first byte that is not covered by a
					   previous copy. Bytes between "next_emit" and the start of the next copy or
					   the end of the input will be emitted as literal bytes. */
					byte* next_emit = input; int last_distance = -1; size_t kInputMarginBytes = BROTLI_WINDOW_GAP; size_t kMinMatchLen = 6;

					if ((block_size >= kInputMarginBytes)) 
					{
						/* For the last block, we need to keep a 16 bytes margin so that we can be
						   sure that all distances are at most window size - 16.
						   For all other blocks, we only need to keep a margin of 5 bytes so that
						   we don't go over the block size with a copy. */
						size_t len_limit = Math.Min(block_size - kMinMatchLen,input_size - kInputMarginBytes);
						byte* ip_limit = input + len_limit; uint next_hash;
						for (next_hash = Hash(++ip, shift);;) 
						{
							/* Step 1: Scan forward in the input looking for a 6-byte-long match.
							   If we get close to exhausting the input then goto emit_remainder.

							   Heuristic match skipping: If 32 bytes are scanned with no matches
							   found, start looking only at every other byte. If 32 more bytes are
							   scanned, look at every third byte, etc.. When a match is found,
							   immediately go back to looking at every byte. This is a small loss
							   (~5% performance, ~0.1% density) for compressible data due to more
							   bookkeeping, but for non-compressible data (such as JPEG) it's a huge
							   win since the compressor quickly "realizes" the data is incompressible
							   and doesn't bother looking for matches everywhere.

							   The "skip" variable keeps track of how many bytes there are since the
							   last match; dividing it by 32 (ie. right-shifting by five) gives the
							   number of bytes to move ahead for each iteration. */
							uint skip = 32; byte* next_ip = ip; byte* candidate;
							trawl:
							do 
							{
								uint hash = next_hash; uint bytes_between_hash_lookups = skip++ >> 5;
								ip = next_ip; next_ip = ip + bytes_between_hash_lookups;
								if ((next_ip > ip_limit)) { goto emit_remainder; }
								next_hash = Hash(next_ip, shift);
								candidate = ip - last_distance;
								if (IsMatch(ip, candidate)) { if ((candidate < ip)) { table[hash] = (int) (ip - base_ip); break; } }
								candidate = base_ip + table[hash]; table[hash] = (int) (ip - base_ip);
							} while ((!IsMatch(ip, candidate)));
							/* Check copy distance. If candidate is not feasible, continue search.
							   Checking is done outside of hot loop to reduce overhead. */
							if (ip - candidate > MAX_DISTANCE) goto trawl;

							/* Step 2: Emit the found match together with the literal bytes from
							   "next_emit", and then see if we can find a next match immediately
							   afterwards. Repeat until we find no match for the input
							   without emitting some literal bytes. */

							{
								/* We have a 6-byte match at ip, and we need to emit bytes in
								   [next_emit, ip). */
								byte* base_ = ip;
								size_t matched = 6 + FindMatchLengthWithLimit(candidate + 6, ip + 6, (size_t) (ip_end - ip) - 6);
								int distance = (int) (base_ - candidate); /* > 0 */ int insert = (int) (base_ - next_emit);
								ip += matched; EmitInsertLen((uint) insert, commands); 
								memcpy(*literals, next_emit, (size_t) insert); *literals += insert;
								if (distance == last_distance) {**commands = 64; ++(*commands); }
								else { EmitDistance((uint) distance, commands); last_distance = distance; }
								EmitCopyLenLastDistance(matched, commands);

								next_emit = ip;
								if ((ip >= ip_limit)) { goto emit_remainder; }
								{
									/* We could immediately start working at ip now, but to improve
									   compression we first update "table" with the hashes of some
									   positions within the last copy. */
									ulong input_bytes = *(ulong*) (ip - 5); uint prev_hash = HashBytesAtOffset(input_bytes, 0, shift); uint cur_hash;
									table[prev_hash] = (int) (ip - base_ip - 5); prev_hash = HashBytesAtOffset(input_bytes, 1, shift);
									table[prev_hash] = (int) (ip - base_ip - 4); prev_hash = HashBytesAtOffset(input_bytes, 2, shift);
									table[prev_hash] = (int) (ip - base_ip - 3); input_bytes = *(ulong*) (ip - 2);
									cur_hash = HashBytesAtOffset(input_bytes, 2, shift); prev_hash = HashBytesAtOffset(input_bytes, 0, shift);
									table[prev_hash] = (int) (ip - base_ip - 2); prev_hash = HashBytesAtOffset(input_bytes, 1, shift);
									table[prev_hash] = (int) (ip - base_ip - 1); candidate = base_ip + table[cur_hash];
									table[cur_hash] = (int) (ip - base_ip);
								}
							}

							while (ip - candidate <= MAX_DISTANCE && IsMatch(ip, candidate)) 
							{
								/* We have a 6-byte match at ip, and no need to emit any
								   literal bytes prior to ip. */
								byte* base_ = ip;
								size_t matched = 6 + FindMatchLengthWithLimit(candidate + 6, ip + 6, (size_t) (ip_end - ip) - 6);
								ip += matched; last_distance = (int) (base_ - candidate); /* > 0 */
								EmitCopyLen(matched, commands); EmitDistance((uint) last_distance, commands); next_emit = ip;
								if ((ip >= ip_limit)) { goto emit_remainder; }
								{
									/* We could immediately start working at ip now, but to improve
									   compression we first update "table" with the hashes of some
									   positions within the last copy. */
									ulong input_bytes = *(ulong*) (ip - 5); uint prev_hash = HashBytesAtOffset(input_bytes, 0, shift);
									uint cur_hash; table[prev_hash] = (int) (ip - base_ip - 5);
									prev_hash = HashBytesAtOffset(input_bytes, 1, shift); table[prev_hash] = (int) (ip - base_ip - 4);
									prev_hash = HashBytesAtOffset(input_bytes, 2, shift); table[prev_hash] = (int) (ip - base_ip - 3);
									input_bytes = *(ulong*) (ip - 2); cur_hash = HashBytesAtOffset(input_bytes, 2, shift);
									prev_hash = HashBytesAtOffset(input_bytes, 0, shift); table[prev_hash] = (int) (ip - base_ip - 2);
									prev_hash = HashBytesAtOffset(input_bytes, 1, shift); table[prev_hash] = (int) (ip - base_ip - 1);
									candidate = base_ip + table[cur_hash]; table[cur_hash] = (int) (ip - base_ip);
								}
							}
							next_hash = Hash(++ip, shift);
						}
					}

					emit_remainder:
					/* Emit the remaining bytes as literals. */
					if (next_emit < ip_end) { uint insert = (uint) (ip_end - next_emit); EmitInsertLen(insert, commands); memcpy(*literals, next_emit, insert); *literals += insert; }
				}

				/* Acceptable loss for uncompressible speedup is 2% */
				private const double MIN_RATIO = 0.98;

				private const int SAMPLE_RATE = 43;

				private static unsafe bool ShouldCompress(byte* input, size_t input_size, size_t num_literals) 
				{
					double corpus_size = (double) input_size;
					if (num_literals < MIN_RATIO * corpus_size) { return true; }
					else 
					{
						uint* literal_histo = stackalloc uint[256];
						double max_total_bit_cost = corpus_size * 8 * MIN_RATIO / SAMPLE_RATE;
						size_t i;
						for (i = 0; i < input_size; i += SAMPLE_RATE) { ++literal_histo[input[i]]; }
						return (BitsEntropy(literal_histo, 256) < max_total_bit_cost);
					}
				}

				/* Builds a command and distance prefix code (each 64 symbols) into "depth" and
				   "bits" based on "histogram" and stores it into the bit stream. */
				private static unsafe void BuildAndStoreCommandPrefixCode(uint* histogram, byte* depth, ushort* bits, size_t* storage_ix, byte* storage)
				{
					/* Tree size for building a tree over 64 symbols is 2 * 64 + 1. */
					HuffmanTree* tree = stackalloc HuffmanTree[129]; byte* cmd_depth = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
					memset(cmd_depth, 0, BROTLI_NUM_COMMAND_SYMBOLS * sizeof(byte)); ushort* cmd_bits = stackalloc ushort[64];
					BrotliCreateHuffmanTree(histogram, 64, 15, tree, depth); BrotliCreateHuffmanTree(&histogram[64], 64, 14, tree, &depth[64]);
					/* We have to jump through a few hoops here in order to compute
					   the command bits because the symbols are in a different order than in
					   the full alphabet. This looks complicated, but having the symbols
					   in this order in the command bits saves a few branches in the Emit*
					   functions. */
					memcpy(cmd_depth, depth + 24, 24); memcpy(cmd_depth + 24, depth, 8);
					memcpy(cmd_depth + 32, depth + 48, 8); memcpy(cmd_depth + 40, depth + 8, 8);
					memcpy(cmd_depth + 48, depth + 56, 8); memcpy(cmd_depth + 56, depth + 16, 8);
					BrotliConvertBitDepthsToSymbols(cmd_depth, 64, cmd_bits); memcpy(bits, cmd_bits + 24, 16);
					memcpy(bits + 8, cmd_bits + 40, 16); memcpy(bits + 16, cmd_bits + 56, 16);
					memcpy(bits + 24, cmd_bits, 48); memcpy(bits + 48, cmd_bits + 32, 16);
					memcpy(bits + 56, cmd_bits + 48, 16); BrotliConvertBitDepthsToSymbols(&depth[64], 64, &bits[64]);
					{
						/* Create the bit length array for the full command alphabet. */
						size_t i;
						memset(cmd_depth, 0, 64);  /* only 64 first values were used */ memcpy(cmd_depth, depth + 24, 8);
						memcpy(cmd_depth + 64, depth + 32, 8); memcpy(cmd_depth + 128, depth + 40, 8);
						memcpy(cmd_depth + 192, depth + 48, 8); memcpy(cmd_depth + 384, depth + 56, 8);
						for (i = 0; i < 8; ++i) { cmd_depth[128 + 8 * i] = depth[i]; cmd_depth[256 + 8 * i] = depth[8 + i]; cmd_depth[448 + 8 * i] = depth[16 + i]; }
						BrotliStoreHuffmanTree(cmd_depth, BROTLI_NUM_COMMAND_SYMBOLS, tree, storage_ix, storage);
					}
					BrotliStoreHuffmanTree(&depth[64], 64, tree, storage_ix, storage);
				}

				private static unsafe void StoreCommands(ref MemoryManager m, byte* literals, size_t num_literals, uint* commands, size_t num_commands, size_t* storage_ix, byte* storage) 
				{
					uint[] kNumExtraBits = { 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 12, 14, 24, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4,
						0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
						9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, };
					uint[] kInsertOffset = { 0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26, 34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594, };

					byte* lit_depths = stackalloc byte[256]; ushort* lit_bits = stackalloc ushort[256];
					uint* lit_histo = stackalloc uint[256]; memset(lit_histo, 0, 256 * sizeof(uint));
					byte* cmd_depths = stackalloc byte[128]; memset(cmd_depths, 0, 128 * sizeof(byte));
					ushort* cmd_bits = stackalloc ushort[128]; memset(cmd_bits, 0, 128 * sizeof(ushort));
					uint* cmd_histo = stackalloc uint[128]; memset(cmd_histo, 0, 128 * sizeof(uint)); size_t i;
					for (i = 0; i < num_literals; ++i) {++lit_histo[literals[i]];}
					BrotliBuildAndStoreHuffmanTreeFast(ref m, lit_histo, num_literals, /* max_bits = */ 8, lit_depths, lit_bits, storage_ix, storage);
					for (i = 0; i < num_commands; ++i) { uint code = commands[i] & 0xFF; ++cmd_histo[code]; }
					cmd_histo[1] += 1; cmd_histo[2] += 1; cmd_histo[64] += 1; cmd_histo[84] += 1;
					BuildAndStoreCommandPrefixCode(cmd_histo, cmd_depths, cmd_bits, storage_ix, storage);

					for (i = 0; i < num_commands; ++i)
					{
						uint cmd = commands[i]; uint code = cmd & 0xFF; uint extra = cmd >> 8;
						BrotliWriteBits(cmd_depths[code], cmd_bits[code], storage_ix, storage);
						BrotliWriteBits(kNumExtraBits[code], extra, storage_ix, storage);
						if (code < 24)
						{
							uint insert = kInsertOffset[code] + extra; uint j;
							for (j = 0; j < insert; ++j) { byte lit = *literals; BrotliWriteBits(lit_depths[lit], lit_bits[lit], storage_ix, storage); ++literals; }
						}
					}
				}

				private static unsafe void BrotliCompressFragmentTwoPassImpl(ref MemoryManager m, byte* input, size_t input_size,
					bool is_last, uint* command_buf, byte* literal_buf, int* table, size_t table_bits, size_t* storage_ix, byte* storage) 
				{
					/* Save the start of the first block for position and distance computations.
					*/
					byte* base_ip = input;

					while (input_size > 0) 
					{
						size_t block_size = Math.Min(input_size, kCompressFragmentTwoPassBlockSize);
						uint* commands = command_buf; byte* literals = literal_buf; size_t num_literals;
						CreateCommands(input, block_size, input_size, base_ip, table, table_bits, &literals, &commands);
						num_literals = (size_t) (literals - literal_buf);
						if (ShouldCompress(input, block_size, num_literals)) 
						{
							size_t num_commands = (size_t) (commands - command_buf);
							BrotliStoreMetaBlockHeader(block_size, false, storage_ix, storage);
							/* No block splits, no contexts. */
							BrotliWriteBits(13, 0, storage_ix, storage);
							StoreCommands(ref m, literal_buf, num_literals, command_buf, num_commands, storage_ix, storage);
						}
						else 
						{
							/* Since we did not find many backward references and the entropy of
							   the data is close to 8 bits, we can simply emit an uncompressed block.
							   This makes compression speed of uncompressible data about 3x faster. */
							EmitUncompressedMetaBlock(input, block_size, storage_ix, storage);
						}
						input += block_size; input_size -= block_size;
					}
				}

				private static unsafe void RewindBitPosition(size_t new_storage_ix, size_t* storage_ix, byte* storage)  { size_t bitpos = new_storage_ix & 7; size_t mask = (1u << (int) bitpos) - 1; storage[new_storage_ix >> 3] &= (byte) mask; *storage_ix = new_storage_ix; }

				/* REQUIRES: len <= 1 << 24. */
				private static unsafe void BrotliStoreMetaBlockHeader(size_t len, bool is_uncompressed, size_t* storage_ix, byte* storage) 
				{
					size_t nibbles = 6;
					/* ISLAST */
					BrotliWriteBits(1, 0, storage_ix, storage);
					if (len <= (1U << 16)) { nibbles = 4; }
					else if (len <= (1U << 20)) { nibbles = 5; }
					BrotliWriteBits(2, nibbles - 4, storage_ix, storage);
					BrotliWriteBits(nibbles * 4, len - 1, storage_ix, storage);
					/* ISUNCOMPRESSED */
					BrotliWriteBits(1, is_uncompressed ? 1U : 0U, storage_ix, storage);
				}

				private static unsafe void EmitUncompressedMetaBlock(byte* input, size_t input_size, size_t* storage_ix, byte* storage) 
				{
					BrotliStoreMetaBlockHeader(input_size, true, storage_ix, storage);
					*storage_ix = (*storage_ix + 7u) & ~7u; memcpy(&storage[*storage_ix >> 3], input, input_size);
					*storage_ix += input_size << 3; storage[*storage_ix >> 3] = 0;
				}

				public static unsafe void BrotliCompressFragmentTwoPass(ref MemoryManager m, byte* input, size_t input_size,
					bool is_last, uint* command_buf, byte* literal_buf, int* table, size_t table_size, size_t* storage_ix, byte* storage) 
				{
					size_t initial_storage_ix = *storage_ix; size_t table_bits = Log2FloorNonZero(table_size);

					switch ((int) table_bits) 
					{
						case 8:
						case 9:
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
							BrotliCompressFragmentTwoPassImpl(ref m, input, input_size, is_last, command_buf, literal_buf, table, table_bits, storage_ix, storage);
							break;
					}

					/* If output is larger than single uncompressed block, rewrite it. */
					if (*storage_ix - initial_storage_ix > 31 + (input_size << 3)) { RewindBitPosition(initial_storage_ix, storage_ix, storage); EmitUncompressedMetaBlock(input, input_size, storage_ix, storage); }

					if (is_last) { BrotliWriteBits(1, 1, storage_ix, storage); /* islast */ BrotliWriteBits(1, 1, storage_ix, storage); /* isempty */ *storage_ix = (*storage_ix + 7u) & ~7u; }
				}
			}

			private static unsafe void BrotliCompressFragmentTwoPass(ref MemoryManager m, byte* input, size_t input_size,
				bool is_last, uint* command_buf, byte* literal_buf, int* table, size_t table_size, size_t* storage_ix, byte* storage) 
			{
				CompressFragmentTwoPass.BrotliCompressFragmentTwoPass(ref m, input, input_size, is_last, command_buf, literal_buf, table, table_size, storage_ix, storage);
			}
		
			internal const int BROTLI_MIN_WINDOW_BITS = 10; internal const int BROTLI_MAX_WINDOW_BITS = 24;
			private const int BROTLI_MIN_INPUT_BLOCK_BITS = 16; private const int BROTLI_MAX_INPUT_BLOCK_BITS = 24;
			internal const int BROTLI_MIN_QUALITY = 0; internal const int BROTLI_MAX_QUALITY = 11;

			private const int FAST_ONE_PASS_COMPRESSION_QUALITY = 0; private const int FAST_TWO_PASS_COMPRESSION_QUALITY = 1;
			private const int ZOPFLIFICATION_QUALITY = 10; private const int HQ_ZOPFLIFICATION_QUALITY = 11;

			private const int MAX_QUALITY_FOR_STATIC_ENTROPY_CODES = 2; private const int MIN_QUALITY_FOR_BLOCK_SPLIT = 4;
			private const int MIN_QUALITY_FOR_OPTIMIZE_HISTOGRAMS = 4; private const int MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH = 5;
			private const int MIN_QUALITY_FOR_CONTEXT_MODELING = 5; private const int MIN_QUALITY_FOR_HQ_CONTEXT_MODELING = 7;

			private const int BROTLI_MAX_STATIC_CONTEXTS = 13;

			private const int HISTOGRAMS_PER_BATCH = 64; private const int CLUSTERS_PER_BATCH = 16;

			private const int BROTLI_MAX_NUMBER_OF_BLOCK_TYPES = 256;

			private const int BROTLI_CONTEXT_MAP_MAX_RLE = 16;
			private const int BROTLI_MAX_CONTEXT_MAP_SYMBOLS = BROTLI_MAX_NUMBER_OF_BLOCK_TYPES + BROTLI_CONTEXT_MAP_MAX_RLE;
			private const int BROTLI_MAX_BLOCK_TYPE_SYMBOLS = (BROTLI_MAX_NUMBER_OF_BLOCK_TYPES + 2);

			private const int MAX_HUFFMAN_TREE_SIZE = (2 * BROTLI_NUM_COMMAND_SYMBOLS + 1);
			private const int SIMPLE_DISTANCE_ALPHABET_SIZE = (BROTLI_NUM_DISTANCE_SHORT_CODES + (2 * BROTLI_MAX_DISTANCE_BITS));

			private const int SIMPLE_DISTANCE_ALPHABET_BITS = 6;

			private const int MAX_NUM_DELAYED_SYMBOLS = 0x2fff;

			private const int MAX_ZOPFLI_LEN_QUALITY_10 = 150; private const int MAX_ZOPFLI_LEN_QUALITY_11 = 325; 
			private const int BROTLI_LONG_COPY_QUICK_STEP = 16384;

			private const int BROTLI_LITERAL_BYTE_SCORE = 135; private const int BROTLI_DISTANCE_BIT_PENALTY = 30;
			/* Score must be positive after applying maximal penalty. */
			private static readonly unsafe int BROTLI_SCORE_BASE = BROTLI_DISTANCE_BIT_PENALTY * 8 * sizeof(size_t);

			private const uint kCutoffTransformsCount = 10;
			/*   0,  12,   27,    23,    42,    63,    56,    48,    59,    64 */
			/* 0+0, 4+8, 8+19, 12+11, 16+26, 20+43, 24+32, 28+20, 32+27, 36+28 */
			private const ulong kCutoffTransforms = 0x071B520ADA2D3200;

			private const int BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN = 37; private const uint kInvalidMatch = 0xffffffff;

			private const int MAX_NUM_MATCHES_H10 = 128;

			private const int MIN_QUALITY_FOR_HQ_BLOCK_SPLITTING = 10;

			/* Only for "font" mode. */
			private const int MIN_QUALITY_FOR_RECOMPUTE_DISTANCE_PREFIXES = 10;

			private const uint kHashMul32 = 0x1e35a7bd; private const ulong kHashMul64 = 0x1e35a7bd1e35a7bd;
			private const ulong kHashMul64Long = 0x1fe35a7bd3579bd3; private const int kDictNumBits = 15;
			private const uint kDictHashMul32 = 0x1e35a7bd;

			private const float kInfinity = 1.7e38f;  /* ~= 2 ^ 127 */

			private const byte kUppercaseFirst = 10;

			private const double kMinUTF8Ratio = 0.75f;

			private const int MAX_HUFFMAN_BITS = 16;

			private static readonly size_t kCompressFragmentTwoPassBlockSize = 1 << 17;

			private const int BROTLI_DEFAULT_QUALITY = 11; private const int BROTLI_DEFAULT_WINDOW = 22;
			private const BrotliEncoderMode BROTLI_DEFAULT_MODE = BrotliEncoderMode.BROTLI_MODE_GENERIC;

			/* Second-order context lookup table for UTF8 byte streams.

			   If p1 and p2 are the previous two bytes, we calculate the context as

				 context = kUTF8ContextLookup[p1] | kUTF8ContextLookup[p2 + 256].

			   If the previous two bytes are ASCII characters (i.e. < 128), this will be
			   equivalent to

				 context = 4 * context1(p1) + context2(p2),

			   where context1 is based on the previous byte in the following way:

				 0  : non-ASCII control
				 1  : \t, \n, \r
				 2  : space
				 3  : other punctuation
				 4  : " '
				 5  : %
				 6  : ( < [ {
				 7  : ) > ] }
				 8  : , ; :
				 9  : .
				 10 : =
				 11 : number
				 12 : upper-case vowel
				 13 : upper-case consonant
				 14 : lower-case vowel
				 15 : lower-case consonant

			   and context2 is based on the second last byte:

				 0 : control, space
				 1 : punctuation
				 2 : upper-case letter, number
				 3 : lower-case letter

			   If the last byte is ASCII, and the second last byte is not (in a valid UTF8
			   stream it will be a continuation byte, value between 128 and 191), the
			   context is the same as if the second last byte was an ASCII control or space.

			   If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
			   be a continuation byte and the context id is 2 or 3 depending on the LSB of
			   the last byte and to a lesser extent on the second last byte if it is ASCII.

			   If the last byte is a UTF8 continuation byte, the second last byte can be:
				 - continuation byte: the next byte is probably ASCII or lead byte (assuming
				   4-byte UTF8 characters are rare) and the context id is 0 or 1.
				 - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
				 - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3

			   The possible value combinations of the previous two bytes, the range of
			   context ids and the type of the next byte is summarized in the table below:

			   |--------\-----------------------------------------------------------------|
			   |         \                         Last byte                              |
			   | Second   \---------------------------------------------------------------|
			   | last byte \    ASCII            |   cont. byte        |   lead byte      |
			   |            \   (0-127)          |   (128-191)         |   (192-)         |
			   |=============|===================|=====================|==================|
			   |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
			   |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
			   |-------------|-------------------|---------------------|------------------|
			   |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
			   |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
			   |-------------|-------------------|---------------------|------------------|
			   |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
			   |  (192-207)  |                   |  context: 0 - 1     |                  |
			   |-------------|-------------------|---------------------|------------------|
			   |  lead byte  | not valid         |  next: cont.        |  not valid       |
			   |  (208-)     |                   |  context: 2 - 3     |                  |
			   |-------------|-------------------|---------------------|------------------|
			*/
			private static readonly byte[] kUTF8ContextLookup = {
				/* Last byte. */
				/* */
				/* ASCII range. */
				0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  4,  0,  0,
				0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
				8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,
				44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
				12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,
				52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,
				12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,
				60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12,  0,
				/* UTF8 continuation byte range. */
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
				/* UTF8 lead byte range. */
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
				/* Second last byte. */
				/* */
				/* ASCII range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
				1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
				1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
				/* UTF8 continuation byte range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				/* UTF8 lead byte range. */
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			};

			/* Context lookup table for small signed integers. */
			private static readonly byte[] kSigned3BitContextLookup = {
				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
			};

			private enum ContextType { CONTEXT_LSB6 = 0, CONTEXT_MSB6 = 1, CONTEXT_UTF8 = 2, CONTEXT_SIGNED = 3 }

			private static unsafe byte Context(byte p1, byte p2, ContextType mode)
			{
				switch (mode)
				{
					case ContextType.CONTEXT_LSB6: return (byte) (p1 & 0x3f);
					case ContextType.CONTEXT_MSB6: return (byte)(p1 >> 2);
					case ContextType.CONTEXT_UTF8: return (byte) (kUTF8ContextLookup[p1] | kUTF8ContextLookup[p2 + 256]);
					case ContextType.CONTEXT_SIGNED: return (byte)((kSigned3BitContextLookup[p1] << 3) + kSigned3BitContextLookup[p2]);
					default: return 0;
				}
			}

			private static readonly ushort[] kStaticDictionaryHash = {
				32072,0,0,0,0,0,0,0,0,21860,0,0,0,0,0,0,0,40486,0,0,0,0,0,45798,0,0,0,0,0,0,1292
				,0,0,0,0,4964,278,23717,0,19972,0,0,0,0,0,0,0,0,0,0,0,0,2126,16102,0,0,0,14437,0
				,0,0,0,0,0,0,26727,2253,0,0,17252,0,0,0,0,0,0,0,0,0,3622,0,0,0,0,22984,0,0,0,0,0
				,0,16647,0,34247,0,0,0,0,0,48486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2511,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19532,0,0,24004,0,0,0,9828,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30853,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,31974,0,0,0,0,0,0,0,0,20650,2404,0,20773,1677,9031,0,6404,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51879,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6761,7206
				,0,0,21992,22983,0,0,3529,0,1864,0,0,0,0,0,0,11046,0,0,9641,0,0,0,6507,0,0,36934
				,21576,62375,0,0,0,0,0,0,0,0,0,8294,0,0,0,0,0,0,0,40807,0,0,0,39398,8136,0,0,0,0
				,0,0,0,8875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7941,0,0,25609,0,0,0,936,
				3716,3213,15687,0,0,0,0,0,52519,0,17381,0,0,0,0,1320,5797,0,21029,0,0,6472,807,0
				,0,0,0,0,0,0,0,0,0,13545,0,0,0,3624,0,0,0,29674,30820,0,31237,0,6596,0,0,0,0,0,0
				,0,0,0,64070,0,0,0,0,0,0,0,0,0,0,0,22278,0,37446,0,0,0,0,7240,423,0,24612,21705,
				17636,0,0,0,0,0,0,1833,0,0,0,328,6021,0,0,0,19974,0,0,0,0,0,0,0,0,0,62119,4178,0
				,0,0,0,12100,8617,0,0,16900,0,36678,0,0,0,35366,0,51718,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,20998,0,62086,0,0,0,0,0,5542,0,0,0,0,0,0,0,0,0,0,0,14629,10952,25927,0,0,0
				,0,19849,0,0,0,0,0,0,0,30952,3046,14314,12998,0,0,0,15268,0,40582,30216,62118,0,
				0,0,20132,0,0,0,0,0,12005,0,0,0,52358,0,0,0,0,24778,0,44,33095,0,0,0,0,0,26372,0
				,0,0,0,0,3781,0,0,17928,9479,0,0,0,0,0,0,0,0,32297,28613,0,0,0,0,0,0,0,0,0,0,0,0
				,0,47174,11723,0,0,0,0,0,0,0,0,0,2536,55143,0,0,6410,0,0,0,0,0,0,0,0,56294,11914
				,0,529,0,30184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8261,0,0,28808,58854,22633,
				965,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64135,0,0,331,3684,0,1605,0,0,0,0,0,0,
				0,0,0,0,16650,37,0,23622,3144,15429,0,0,0,0,0,0,0,0,0,0,22443,69,0,0,0,0,0,0,0,0
				,17832,0,0,0,0,0,0,0,0,0,11113,0,0,0,0,18309,0,0,0,0,0,0,0,0,0,26630,0,0,25512,
				25895,0,0,0,0,0,0,0,0,0,0,0,16901,0,0,0,27558,0,0,9418,0,0,0,3508,0,0,0,0,0,0,0,
				0,37990,9289,8517,0,0,0,0,1578,1604,23944,0,0,14916,12781,0,0,0,0,0,0,0,12105,0,
				16617,0,0,0,0,0,0,0,0,0,0,0,0,21348,11240,28870,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,5772,0,0,27812,0,0,0,0,0,0,0,8324,0,0,0,0,0,0,0,0,0,0,16748,1157,0,0,18794,
				16324,25898,935,8333,0,0,0,0,0,0,0,0,18246,0,18086,0,46854,0,0,0,0,0,0,339,0,0,
				25188,12780,12166,6409,0,0,0,0,16516,0,27012,28395,0,0,0,0,0,0,0,1420,0,0,0,9768
				,52967,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25163,324,0,0,0,0,0,0,0,0,0,64998,0,0,0,0,0,
				21893,0,0,0,0,0,47366,0,0,0,870,0,0,0,12646,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,26020,16360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1809,0,0,0,6601,15878,0,0,0,0,0,
				29092,0,28516,0,0,0,0,0,0,0,0,0,21988,0,0,0,42950,0,0,0,0,0,0,0,0,0,0,5133,1318,
				0,0,0,0,0,0,0,0,0,0,0,54982,24904,0,0,0,0,0,0,0,0,0,0,51526,0,0,0,0,0,3685,0,0,0
				,0,10062,9412,0,0,0,31460,5708,6181,0,0,0,0,0,0,0,0,0,5575,0,0,0,0,0,0,0,0,0,0,
				27144,57478,0,0,0,0,0,0,7084,0,21993,53126,0,0,0,0,8397,0,0,5733,0,0,0,0,0,2116,
				0,24742,0,11271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1133,0,4873,0,0,38310,0,0,0,0,0,
				0,0,0,0,0,0,0,17932,0,0,18053,0,0,0,25510,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17798,0,
				26214,0,0,0,0,0,0,0,0,23016,17415,20392,164,0,0,0,0,0,0,0,0,0,0,0,3239,0,46119,0
				,0,0,28580,0,0,0,0,0,0,0,0,0,7621,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41478,0,0,31016,
				55334,10056,1924,0,0,0,0,0,36614,0,36711,0,0,0,0,0,0,0,0,0,0,13994,59303,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,26501,0,5639,0,0,0,0,0,0,13897,1253,0,0,0,0,0,5095,0,0,0,
				28869,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8646,0,0,0,0,25641,17796,0,0,0,0,0,0,0,
				13316,620,6309,11819,0,0,0,0,0,0,0,0,0,904,1095,0,24229,0,0,28744,49703,0,23077,
				0,0,0,0,32392,0,0,0,0,35271,0,28740,5866,0,0,0,0,0,0,0,4361,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7917,8869,0,0,0,13924,0,0,0,0,
				0,41958,0,0,0,0,0,0,6766,13989,0,0,0,903,0,0,24010,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,64390,0,22468,0,25861,0,0,0,0,23656,5317,0,0,0,0,0,0,23017,5445,16009
				,0,0,0,0,0,0,0,0,48006,10473,0,0,14404,0,0,0,42183,0,0,0,51270,0,0,10602,24132,0
				,0,0,0,0,43782,0,0,17834,0,0,0,25576,27205,0,0,0,0,0,0,0,0,29066,0,0,0,0,0,626,
				1988,14700,0,0,0,0,0,0,0,0,0,0,0,0,57670,0,0,0,0,0,0,0,0,0,44710,0,0,0,0,3848,
				7623,0,0,0,0,0,0,0,0,0,0,0,42374,0,0,0,0,0,0,0,0,19272,6436,0,0,5256,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,19685,0,0,0,0,0,0,0,0,0,0,0,0,0,39783,0,0,0,0,30984,0,0,0,0,0,0
				,28230,0,0,0,29028,10538,3205,0,0,0,0,0,0,0,0,0,0,0,5636,840,295,0,0,8488,8198,0
				,0,0,0,0,0,0,0,0,20580,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4074,19526,0,0,0,0,
				31144,64038,0,0,0,0,0,0,16716,0,0,0,0,0,0,0,0,0,0,0,17706,0,0,0,0,0,0,50630,0,
				50503,0,0,0,0,0,0,0,0,0,0,0,25446,0,0,0,13831,0,0,0,0,0,0,2696,4039,0,0,0,0,
				25288,0,12076,2054,0,48934,0,0,0,0,16969,59431,17259,35335,0,0,0,0,0,0,0,0,0,0,0
				,0,31275,0,0,0,1097,0,0,0,0,0,0,0,0,0,0,0,776,839,0,0,29386,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,5864,12134,0,0,0,0,0,0,0,25349,0,0,0,0,0,0,0,0,0,61447
				,0,0,0,0,0,0,0,0,0,24678,0,0,0,63335,0,28836,8142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4494,0,0,0,0,0,14088,1188,0,16260,0,0,0,
				16421,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,276,0,0,17060,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24076,29445,0,33543,0,4901,0
				,0,12522,0,0,62471,0,0,0,0,0,0,0,0,0,0,4046,0,0,0,0,20486,0,15460,2217,51719,0,0
				,0,0,0,23495,0,0,0,0,0,0,15370,0,15849,0,15113,0,0,0,0,0,0,0,0,27972,7337,0,0,0,
				0,30342,0,0,0,0,0,0,0,0,32299,23940,0,17766,0,0,0,0,0,0,6184,0,20904,0,0,0,0,0,0
				,0,0,0,0,31492,0,0,0,5509,0,0,0,0,0,0,0,0,2669,50182,0,0,12299,0,0,0,0,0,0,0,
				5257,28167,0,0,0,0,0,0,0,0,0,0,0,11750,3890,0,0,26500,0,0,0,0,0,0,0,49318,0,0,0,
				0,0,0,0,10981,0,0,0,0,0,0,0,0,17961,1831,0,0,0,0,0,0,0,29638,0,0,0,0,26473,0,
				6216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,711,0,0,0,0,0,0,0,0,0,0,28683,39975
				,0,0,0,0,0,51654,0,0,0,27527,0,0,0,0,0,0,0,0,30859,3268,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28772,0,18212,0,0,0,0,25448,65446,0,0,0,0,
				0,0,3337,1670,0,0,0,0,0,19332,0,0,0,0,24936,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1043,0
				,0,0,0,15814,0,21670,0,0,0,0,0,0,0,16263,0,0,0,0,0,0,0,0,0,32454,0,30630,0,0,
				20170,9926,0,0,0,18247,0,0,14376,0,2056,17191,0,0,0,0,0,0,0,7812,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,22474,52806,1588,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10825,0,
				0,0,0,40934,0,0,0,0,0,0,0,28677,0,0,5714,0,0,0,0,0,0,0,0,0,0,0,0,0,25865,22246,0
				,0,0,0,17256,35751,0,0,0,0,0,0,0,0,8236,0,32108,0,0,0,43,14342,0,16517,0,0,30732
				,0,4012,133,0,40583,971,23942,0,0,27275,0,0,0,204,0,0,27140,7564,44327,27592,
				57958,0,0,0,0,22344,25701,0,0,0,0,0,0,0,19524,31755,0,0,28102,0,59111,0,0,0,0,0,
				0,0,12261,0,44934,0,0,0,0,31560,0,11114,0,0,0,0,0,0,0,0,0,0,0,18953,18311,0,
				45159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2059,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				19399,0,0,0,0,0,0,0,0,0,0,0,0,0,58534,0,0,0,0,0,0,0,0,0,0,0,0,22411,23943,0,0,0,
				0,0,0,11690,0,0,4069,0,0,2668,6342,0,0,0,0,0,0,27658,1766,0,0,0,0,23240,56070,0,
				0,0,0,0,0,0,0,0,0,0,0,0,34119,0,24453,0,0,0,0,21867,0,17610,9894,0,0,27976,38790
				,0,0,0,43654,0,31559,12202,23142,0,0,0,50343,0,0,0,0,0,32806,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,49895,0,0,0,0,15786,4263,0,0,0,0,4746,3814,0,0,0,0,0,0,17192,
				453,17323,0,20328,4036,0,0,0,15844,0,0,0,0,27561,31940,32296,0,0,0,0,0,0,0,11499
				,11782,0,0,0,0,9738,50471,0,0,0,0,0,35430,0,0,0,0,0,29734,0,0,0,36551,0,0,0,0,
				9257,5606,0,13829,0,7015,0,0,0,0,0,25127,0,0,19051,0,0,0,0,0,0,0,0,0,0,0,0,0,
				2572,0,0,0,0,0,0,29797,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42342,0,0,0,0,9293,
				0,17896,56038,4077,0,0,0,29899,37351,0,30823,0,8326,0,0,0,18342,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18569,54054,0,0,0,0,0,0,0,0,0,37254,0,0,31433,
				61510,0,2022,0,0,0,0,0,25381,0,0,0,0,0,0,0,0,0,0,0,0,0,2149,25289,0,0,0,0,0,0,0,
				0,0,0,12516,14185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8676,0,0,0,0,0
				,0,0,0,0,0,0,36486,0,0,0,0,10889,9607,0,28711,0,0,0,0,0,0,0,0,0,0,28490,0,0,0,0,
				26181,10283,1701,0,0,0,0,0,0,0,0,0,14980,0,7783,0,27846,0,0,0,56486,3892,0,0,0,
				5770,16583,0,26309,13422,20292,0,0,0,0,0,0,0,0,0,28742,0,0,0,0,14536,1158,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25801,0,0,0,0,0,0,0,0,0,0,0,0,42438,0,3332,0,0
				,0,0,0,0,0,0,0,8327,0,0,0,0,0,0,0,0,0,0,0,0,17353,1447,0,0,8427,48518,1359,0,0,0
				,0,0,14986,0,32168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9230,2791,0,0,0,0,0,0,0,0,
				16073,31623,4269,0,0,0,0,0,0,4519,0,0,27912,58950,0,0,0,0,0,0,0,0,8361,19812,0,0
				,0,0,6056,7877,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21701,0,0,0,0,0,0,0,0,0,0,0
				,0,9128,1125,0,16548,0,0,0,0,0,0,0,0,0,0,17292,6854,21352,0,2380,0,0,4007,0,0,0,
				0,0,24357,4202,0,0,0,0,0,0,0,0,0,0,0,0,0,10664,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,42823,3022,0,0,0,0,0,0,0,0,0,0,0,0,14373,0,20677,3304,2759,20522,64903,0,
				0,0,38,0,0,0,0,0,0,0,0,0,0,0,27814,2802,8870,3758,1255,0,0,0,0,0,0,0,0,30027,
				9510,0,0,0,0,17864,14855,0,0,0,0,0,0,0,0,0,0,23404,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				51462,0,0,0,0,0,0,0,45734,0,0,23467,32327,0,0,10826,52999,0,0,0,33222,31336,
				64326,0,0,0,0,0,0,0,32166,0,0,3891,0,0,0,7017,645,0,0,0,0,0,0,27915,46087,0,0,0,
				21863,0,34246,0,0,16715,0,0,0,0,14052,21416,0,0,0,0,0,0,0,0,39846,0,0,0,0,0,
				38982,0,0,17512,7460,0,0,0,0,0,0,0,0,0,15428,0,0,0,0,0,0,0,28356,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,25445,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11879,0,0,0,0,0,0
				,0,0,0,0,0,0,0,19911,0,20007,0,0,0,10855,943,0,0,10821,0,0,0,0,4170,0,0,0,0,0,0,
				0,0,0,9836,0,0,0,0,0,0,0,0,0,0,65415,0,0,0,0,0,0,0,0,9865,24646,0,0,0,0,0,40519,
				0,0,0,0,0,0,0,0,0,12804,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22091,23655,0,0,0,0,0,0,
				0,31686,0,0,0,58599,0,0,0,0,0,0,0,0,0,0,0,0,0,19620,0,0,0,0,0,0,0,0,0,0,0,0,0,
				24421,0,28100,0,0,0,31268,0,3204,0,0,0,0,0,0,0,0,0,14822,0,0,0,0,19947,10182,0,0
				,9480,14821,4398,0,0,14532,0,0,0,48871,1873,0,0,0,0,0,0,0,589,1541,0,0,0,0,0,
				23333,0,0,0,14149,0,0,0,0,1296,14374,0,27300,0,0,0,0,0,0,7276,0,0,0,0,0,0,47718,
				0,0,0,0,0,0,0,0,0,0,5164,1765,0,14405,0,37574,1994,0,6636,0,0,0,0,0,0,0,0,27815,
				0,0,0,0,2568,6820,0,0,0,0,0,0,0,0,0,0,11336,26247,0,0,23912,0,0,0,30536,0,0,
				34342,0,17799,0,0,0,22149,0,6118,0,25732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,26600,5190,0,0,1142,0,0,0,0,0,0,0,0,39527,0,0,0,0,0,39494,0,0,0,0,0,0,0
				,0,0,0,3085,0,0,0,0,0,0,0,4786,0,0,0,28873,6532,0,0,26664,0,9193,11719,0,0,0,0,0
				,0,31752,64646,0,0,0,0,0,0,0,0,0,0,0,11397,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25094,0
				,0,18153,20167,0,0,0,17254,0,0,878,0,0,0,0,0,0,0,0,0,0,24166,0,0,0,0,0,0,0,0,0,0
				,0,0,26059,0,0,0,0,0,0,0,0,0,0,0,0,0,31592,0,0,8167,24362,6212,0,34758,0,0,0,0,0
				,0,32520,0,0,44679,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17989,8681,29222,0,0,0,
				0,0,0,0,0,10251,4902,1452,15207,0,0,0,0,0,0,0,22822,0,10469,0,0,0,0,0,0,19337,
				17670,107,11494,0,0,0,0,27305,2565,0,0,0,0,0,0,0,64518,200,28389,0,0,0,0,31208,0
				,30762,0,0,0,0,0,29321,60518,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3209,3237,
				12490,22663,0,0,0,18789,31464,16391,0,0,0,0,0,0,0,0,0,0,0,20646,0,0,0,27238,0,0,
				0,0,0,15940,4488,6951,0,0,0,46342,0,0,0,0,0,0,0,0,0,28965,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,20584,3367,0,25350,0,0,0,0,0,0,0,0,0,0,0,0,1814,0,0,0,0,0,0,0,0,0,0,17125,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55943,0,0,0,0,0,24133,0,0,0,0,0,0,0,0,0,0,0,0,2929
				,0,0,50086,0,2918,25356,30052,115,11846,0,0,0,0,3056,0,0,0,0,17639,239,19815,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36806,0,0,0,0,0,0,0,0,0,0,0,0,0,21479,0,0,0,0,0,
				28420,11786,4772,0,0,3368,36295,0,31463,0,0,14665,996,0,20582,0,0,0,9988,0,23685
				,0,0,0,52551,0,0,0,0,0,0,0,7556,0,0,0,0,0,0,0,1895,2186,0,0,0,0,0,27755,25447,0,
				0,0,0,31052,63270,0,0,0,0,0,0,0,36742,0,24804,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,31048,0,0,0,0,0,0,0,0,0,21290,2276,0,0,0,0,26475,0,0,0,0,0,0,0,0,0
				,0,15332,0,0,0,0,0,0,0,0,3176,19431,0,0,0,0,0,0,0,62726,0,0,0,25380,0,0,27883,
				1316,0,0,7724,3015,0,0,0,0,6697,0,0,47910,0,0,0,0,0,0,0,0,0,3141,0,0,0,14820,0,0
				,0,0,9326,0,0,0,0,0,0,0,0,0,0,31493,0,0,0,0,0,6566,0,0,0,0,0,0,6569,1348,0,25638
				,0,0,0,0,0,20324,0,0,17067,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11876,0,41030,0,0,0,26405
				,0,0,0,0,0,0,0,0,0,11431,28137,14950,0,10151,0,0,0,0,0,0,0,29574,0,0,0,0,27176,
				57446,0,0,0,0,28650,57574,1387,0,0,0,0,0,0,0,0,0,0,58247,0,0,0,0,0,0,0,16805,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3526,0,15781,0,5572,13352,0,0,0,0,0,18665
				,23463,0,0,0,0,0,0,15405,6885,0,0,0,0,15272,0,0,0,0,0,0,0,0,9861,0,0,0,0,0,0,0,0
				,9512,4037,0,0,11563,49639,0,0,0,0,0,0,27880,57830,0,0,0,0,0,41831,0,21924,0,0,0
				,0,0,0,0,25509,0,27462,0,18085,0,0,0,0,0,0,0,0,0,0,0,0,13898,8068,26441,0,0,0,0,
				0,0,25316,0,0,0,0,16298,7397,5706,19239,0,0,0,0,0,0,0,0,1392,50919,0,0,0,0,0,
				53863,0,0,0,0,1451,0,0,0,0,0,0,0,0,0,0,35847,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,17801,15813,0,12740,0,0,0,32967,0,0,0,0,0,0,5389,0,0,0,0,0,0,0,0,0,0,31143,0,
				20548,0,0,0,0,0,0,0,0,0,51686,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				12109,19015,0,34983,0,21732,3600,0,0,0,0,47750,17288,43975,22857,47559,0,0,0,0,
				26408,48358,0,0,0,0,0,0,0,0,0,0,0,0,0,30470,0,0,23560,4581,0,22404,0,49286,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49831,0,0,0,27525,31691,7,0,0,25835,0,0,0,0,0,
				4201,16485,0,20676,0,0,0,0,3753,23303,16264,3878,0,0,0,0,0,0,11434,0,0,0,0,0,0,
				7589,0,0,0,0,0,0,0,0,0,57095,0,0,0,0,0,0,0,0,0,0,0,22820,11146,49158,0,23623,0,0
				,0,0,0,0,0,13893,0,0,0,0,0,0,11722,60071,1258,0,0,0,0,0,0,18564,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,27945,0,0,0,0,5479,0,20006,17608,3431,10988,30180,0,0,0,0,0,0,0,
				24581,14,0,0,0,0,0,0,25572,0,0,0,28612,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53543,0
				,0,0,0,0,0,0,0,0,0,0,33670,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8710,0,14116,0,0,116,
				292,0,0,0,37831,0,43078,0,0,0,0,0,0,0,0,21832,0,0,32134,783,0,0,30982,0,0,0,68,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5932,0,0,0,18505,
				15175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3630,16965,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,17797,0,0,0,0,0,0,520,42150,0,0,3122,0,0,0,22506,0,0,0,0,0,0,0,0,28550,0,
				0,0,50278,0,0,13641,5958,0,35238,0,0,0,0,0,0,0,0,29993,18724,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,20619,9319,0,0,0,0,23977,0,5193,0,0,12196,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,24390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20105,677,0,0,0,0
				,0,0,0,0,29419,0,0,0,0,0,0,0,0,0,20266,0,0,0,0,10631,0,0,0,0,0,0,0,0,0,47655,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26628,12744,0,20648,0,0,0,432,0,0
				,0,0,0,0,0,0,0,0,646,0,25604,0,0,0,0,0,0,0,0,0,0,0,0,0,63782,0,0,0,0,24616,0,0,0
				,21291,0,0,0,0,0,0,0,0,0,0,45638,0,0,0,0,1931,0,0,0,20521,59975,0,20614,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,56231,0,0,0,0,0,29991,0,52871,0,20934,0,0,0,0,0,0,0,16871,
				0,0,0,0,0,0,0,0,0,0,0,0,0,7237,0,0,0,0,0,47558,0,0,0,0,0,0,0,0,0,0,0,10406,0,0,0
				,0,0,0,0,43046,0,0,2930,0,12936,0,0,0,0,0,0,0,0,0,0,0,0,31141,0,0,0,0,0,0,0,
				37639,0,17572,0,0,0,0,0,0,0,0,0,0,31240,0,0,0,0,0,688,0,0,0,0,0,1648,0,0,0,0,
				10055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,6345,199,0,34982,0,0
				,0,0,0,0,0,0,0,0,0,0,0,56839,0,0,0,0,0,48902,0,13412,0,0,0,0,0,0,0,0,2441,4420,0
				,0,0,0,20428,933,0,0,0,0,0,0,0,45383,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,54726,0,0,0,0,0,0,0,0,0,0,0,0,17036,741,0,0,0,0,0,0,0,27589,0,0,30282
				,18950,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2248,0,0,0,0,0,0,0,0,0,25993,0,0,0,
				2443,0,0,31622,0,14150,0,0,0,28679,0,0,0,0,0,0,15464,0,0,0,0,54694,0,0,0,0,0,0,
				3827,0,0,0,3756,0,9897,0,0,0,0,0,19082,31239,0,0,0,0,0,0,0,0,0,0,0,24580,0,0,0,0
				,0,0,0,0,0,16580,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27625,0,0,0,784,4647,32652,0,0,
				63494,0,0,0,0,0,0,0,21062,0,0,0,0,0,0,0,0,0,0,3404,58470,0,32325,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,18634,2789,0,0,0,0,0,0,0,8548,0,0,0,22501,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,15881,0,0,0,0,35879,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7978,17956,0,0,0,
				0,0,0,0,24324,0,0,4937,0,0,0,8168,0,13420,10340,0,0,0,0,0,11780,0,0,0,0,0,0,0,0,
				0,0,16712,0,0,0,0,0,0,0,17640,17991,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,2953,0,0,0,0,0,0,0,9100,16806,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30667,0,0,
				19013,0,0,0,0,0,0,205,15334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1969,0,0,0,0,0,0,0,26248
				,52518,0,49798,0,0,0,0,0,0,0,9668,0,0,0,0,0,4742,0,0,21641,0,0,0,0,0,0,53574,0,0
				,0,0,0,0,5707,0,0,0,0,0,0,0,3018,12454,0,0,0,0,2920,262,0,0,0,0,0,0,0,0,0,0,3593
				,0,0,0,0,0,0,0,0,0,0,23910,0,0,0,0,0,0,0,55879,0,0,0,0,0,775,0,43270,5066,48967,
				0,0,22986,4165,8971,44838,0,0,0,0,0,62279,272,0,0,0,0,51430,0,0,0,0,0,0,28234,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13349,0,0,0,51111,20265,13861,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,585,7494,0,0,0,0,0,0,0,0,21768,62407,0,0,0,0,7979,166,0,
				0,0,0,0,0,0,0,0,38918,0,56742,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16296,5767,0,0,0,0,0,0
				,0,32068,0,0,0,0,0,0,0,0,0,0,0,0,0,29796,0,0,0,0,0,0,0,0,23916,30183,0,58791,0,0
				,0,0,0,0,0,20518,0,0,0,0,8969,0,0,0,183,0,0,0,0,0,2314,17445,0,0,0,0,0,0,0,0,0,
				23748,0,0,8139,4839,27914,0,0,0,0,0,0,0,0,0,0,0,0,29478,0,0,16552,26663,0,53767,
				0,0,13960,8039,18696,0,0,0,0,0,0,0,0,0,0,0,782,16005,0,0,0,0,0,0,0,0,6258,56806,
				16456,12455,0,0,0,0,0,0,0,23780,0,0,0,0,0,0,9355,0,0,0,7273,41063,24780,57766,0,
				0,0,0,0,0,0,0,0,0,3820,2597,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29225,61126,0,0,0,58439,
				15691,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37190,22408,967,0,0,0,
				23078,26858,0,0,0,19753,0,0,0,0,0,0,0,0,0,5416,13702,0,0,0,0,0,52742,20394,38567
				,0,0,0,51079,0,0,136,8516,0,0,0,0,0,0,0,0,0,0,0,27588,0,0,0,0,0,0,0,0,0,0,531,0,
				0,0,0,0,0,0,0,0,8936,5031,12520,19334,0,0,22827,30247,28074,31140,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,27497,18148,20104,59079,0,0,0,0,0,0,0,0,0,24389,0,0,6125,0,0,0,0,
				9541,0,0,24553,29095,0,0,0,0,0,0,0,25444,0,0,9643,0,0,63047,0,0,0,0,0,0,0,0,0,
				39558,0,0,0,0,0,0,20620,11815,499,0,5128,2278,0,0,0,0,0,46310,0,0,0,0,0,0,0,0,
				23530,40166,2440,0,0,0,0,0,0,0,0,0,0,15174,0,0,0,0,0,0,0,0,0,0,26922,0,0,0,0,0,0
				,0,0,0,0,26758,0,0,0,0,0,51911,0,0,23532,0,0,0,0,51238,25737,44486,12622,0,0,0,0
				,0,0,3078,0,9253,0,0,1128,22023,0,0,0,21350,0,16420,0,0,0,0,0,0,0,65094,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22532,0,48774,0,34503,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,9797,0,0,0,0,0,0,0,13797,0,38279,0,0,1738,0,489,46343,0,45382,0,0,0,0,0,0,
				0,0,0,29030,0,0,0,0,0,0,6220,56550,0,0,0,0,0,26885,0,28806,0,0,0,0,0,0,0,0,0,0,0
				,45958,0,0,0,0,20553,49927,0,0,0,0,0,0,3019,12358,0,0,0,0,0,0,0,0,0,0,26571,
				13319,0,0,653,23399,0,0,0,0,0,0,0,0,22316,0,0,21188,0,0,0,0,0,0,0,0,0,27556,0,0,
				0,0,0,0,0,27878,21483,27653,0,29701,237,0,10632,0,0,0,0,33766,0,0,0,0,0,0,31563,
				0,0,0,0,0,1416,2439,0,0,0,0,0,0,0,0,0,0,9611,0,0,0,0,0,0,0,5611,16581,26601,
				35462,0,0,0,26756,0,59271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26984,57734,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,7882,0,0,0,19528,6469,0,0,1161,0,0,0,7688,20935,425,0,
				0,0,0,0,0,0,0,12519,0,12902,0,0,0,0,0,0,0,0,0,0,2411,0,11725,26086,0,0,20201,0,0
				,0,0,0,0,0,0,11045,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30471,0,0,0,0,0,0,0,0,0,0,0,
				21541,1141,21190,0,9188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,1093,0,0,0,0,0,0,0,0,
				4842,0,13672,0,0,12230,0,0,0,10532,0,0,8937,0,0,0,0,0,0,0,0,0,0,28996,0,0,11720,
				26982,0,46182,0,43911,31754,0,1160,3940,0,20772,0,0,0,0,0,24549,0,32582,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,31845,0,0,0,0,0,0,0,2310,11788,0,0,43047,0,0,0,18853,0
				,0,0,0,0,0,0,0,0,63622,0,0,7048,17318,0,0,0,21957,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,1039,6279,0,0,0,0,0,0,0,0,0,0,0,0,0,12197,0,0,0,0,0,0,0,0,0,
				46470,0,0,24,19719,0,0,0,0,0,0,0,0,0,39335,0,0,0,0,0,0,0,0,0,0,21353,3846,0,0,0,
				0,0,0,0,36679,0,0,0,0,0,0,0,0,0,0,0,11268,0,0,0,0,0,9382,0,0,0,0,0,0,0,0,0,0,0,0
				,0,29926,0,33606,0,4708,2828,0,0,29543,0,0,0,0,0,29893,0,0,0,0,0,0,0,0,3663,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10920,7111,0,0,0,0,0,0,0,0,0,0
				,9384,0,0,0,0,0,0,0,0,0,0,0,0,20388,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37094,0,0,0,
				27110,0,0,0,0,0,0,21865,0,27753,30214,0,0,0,0,0,57895,0,0,0,0,0,0,0,0,0,0,12648,
				5446,0,0,0,0,0,0,0,0,0,0,19784,17124,0,52007,0,0,0,0,0,0,0,0,758,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,24900,0,0,0,0,0,1476,0,65031,0,0,1205,46663,0,30023,11625,
				1094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10058,0,0,0,0,0,0,28455,0,0,0,0,0,0,0,0,0,0,0,
				14788,0,0,0,0,16808,0,0,742,0,0,0,0,0,0,0,0,0,0,0,21636,0,0,0,0,0,0,0,0,0,0,0,0,
				15944,23207,0,0,0,0,247,0,0,0,0,24743,0,0,0,5252,0,0,0,0,0,0,0,0,29961,18660,
				21099,46791,0,7045,0,0,0,0,25707,0,0,17412,3828,0,0,0,0,0,0,0,0,0,0,0,5803,5637,
				0,38151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60103,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,853,0,0,0,0,0,0,30215,0,0,0,0,0,0,0,8741,0,0,0,0,0,27366,0,0,0,0,171,
				4070,0,0,0,0,0,0,0,0,24073,7366,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2184,5189,0,
				20932,1545,4996,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7684,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6313,0,0,0,0,0,0,0,30826,0,0,0,0,0,0,
				0,0,0,0,27463,0,0,0,0,0,0,0,0,0,0,21640,63303,0,0,3275,31111,0,0,0,0,0,0,0,11556
				,0,14756,0,0,0,15108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23914,28966,0,0,0,4965,0,0,0,0,
				0,0,0,0,0,0,10216,5223,0,0,0,0,0,0,0,0,0,27142,0,0,1173,20198,0,0,0,0,0,56614,0,
				0,0,0,0,4612,0,0,0,0,0,0,0,0,0,0,11822,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17769,7910,
				0,0,31880,0,0,6055,0,0,0,0,0,0,0,0,0,0,8970,0,0,0,0,0,0,0,0,0,0,0,16840,23879,0,
				0,11051,0,0,0,32552,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20842,13701,0,0,0,37191,7373,
				10471,17482,25348,0,0,0,38502,0,0,0,0,0,0,0,0,0,21509,6058,0,0,0,0,0,0,3173,0,0,
				0,9543,0,0,0,0,0,0,17768,12708,0,0,0,0,0,37030,0,0,0,0,0,0,0,0,0,0,12748,48743,0
				,11718,0,0,25194,0,0,0,9033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5028,0,30118,0,0,0,0,0,
				42759,0,0,3720,0,0,0,0,0,0,25190,0,0,0,0,0,0,0,0,0,0,5450,5125,0,58086,0,0,0,0,0
				,27716,0,0,0,0,0,0,0,0,0,22052,0,0,0,0,26249,0,15947,3460,0,0,0,35814,0,0,0,7813
				,19500,32167,0,18597,0,0,0,0,0,28644,0,0,0,60743,0,0,0,0,0,29636,0,0,0,0,0,0,0,0
				,0,0,0,0,0,17220,15885,9414,9642,0,0,0,593,0,0,24228,0,0,0,0,0,40422,0,26244,0,
				23109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64902,0,0,0,0,3979,60007,0,0,0,28199
				,0,0,0,43142,0,0,0,0,0,0,0,29158,0,30532,0,0,0,0,13256,0,0,0,0,16549,0,0,0,0,0,
				26116,0,0,0,0,0,0,0,0,22825,0,0,0,0,0,0,0,1065,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,18985,4805,0,0,0,0,0,17702,0,0,0,0,0,0,0,0,0,0,3468,0,0,0,0,13447,0,0,0
				,0,0,0,0,0,0,0,0,56871,0,0,1776,15780,0,0,2603,0,10280,31366,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,11592,3591,0,2372,0,0,0,0,0,0,0,20004,0,0,0,0,0,0,12072,518,0,0,1960,
				8999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7178,32999,0,0,0,0,0,0,1641,0,0,0,0,0,0,0,6764,
				9893,490,4005,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25258,5541,0,14053,306,20743,0,0,
				9422,0,0,0,0,0,0,0,11977,260,0,35175,0,0,0,0,0,0,0,18405,0,0,0,16582,0,0,0,22470
				,0,0,0,0,0,0,2792,0,0,0,14026,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14858,3909,0,0,0
				,57671,0,0,0,0,0,0,15979,0,0,0,2794,15239,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26884,
				9070,0,0,0,0,51846,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19499,37127,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,19205,10350,11910,0,0,0,0,15083,23108,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,15274,41735,0,56774,0,0,2825,0,14025,
				389,0,0,0,0,0,0,0,0,21482,31910,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20456,710,0,0,25032,
				21797,0,0,0,0,0,0,0,0,0,0,32427,21252,0,30150,0,43174,0,0,0,0,0,0,0,0,0,0,0,0,
				11403,0,0,1029,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6892,9252,0,63206,
				3496,14406,0,0,0,0,0,0,0,0,0,0,22568,0,0,21253,0,0,0,0,0,0,0,39623,0,0,10189,0,0
				,0,0,0,0,0,0,0,0,0,0,0,30729,59910,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3305,0,0,0,0,0,0,
				0,0,0,7660,24871,0,838,0,0,0,0,0,0,0,0,0,0,0,0,12013,13252,0,551,0,0,0,43207,0,
				30567,0,0,0,0,0,0,0,0,28394,30724,0,0,0,0,0,0,0,0,0,0,22665,22725,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,29414,0,0,0,0,16074,8966,245,1445,0,0,0,0,24872,0,0,0,0,
				13124,0,35527,0,0,0,0,0,0,13259,10917,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				25191,0,0,0,13956,0,0,0,0,0,0,0,54631,19625,12070,3083,0,0,0,0,14436,0,0,0,0,0,0
				,0,0,0,0,0,0,0,21766,0,15463,29322,0,0,0,0,0,0,29990,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,23653,0,0,0,0,0,0,0,0,2643,0,0,21223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,4114,0,0,0,0,0,0,0,0,34790,0,0,0,0,0,0,0,16103,0,0,0,0,0,0,297,3620,3338,
				10372,0,14727,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29924,22473,13895,
				15529,32455,30378,13540,0,28807,0,0,0,0,0,0,0,64582,18380,0,0,0,0,0,0,0,0,0,0,0,
				0,38598,0,0,0,0,0,0,0,0,1236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32710,0,0,0,0,4590,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64935,0,0,0,0,0,0,0,0,0,0,0,0,16744,0,0,
				0,0,0,0,20005,0,0,13608,1191,0,0,0,62183,0,0,0,0,0,24484,0,0,0,0,0,0,0,0,0,0,
				17643,0,0,0,0,0,0,0,0,0,0,0,0,5380,0,0,32328,0,0,63814,0,0,0,2919,0,0,0,0,17034,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,60295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,7690,486,0,0,0,39270,0,49094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12555,0,0,0,0,0,0,0,0
				,0,0,0,0,20967,17993,12647,0,0,0,16036,32616,0,0,0,0,16294,8555,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35174,0,0,0,0,0,0,30346,0,0,0,0,0,0,0,
				14797,3652,0,0,8268,12934,0,54950,0,0,0,0,2632,33959,0,23175,0,0,0,0,0,36262,0,0
				,0,0,0,0,32684,26918,0,32676,0,0,0,0,0,0,0,0,0,0,15625,11943,1206,0,0,0,0,18052,
				0,0,0,0,0,16422,0,0,0,26404,0,0,28777,0,0,24902,0,0,408,45351,0,35719,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,3658,17446,0,165,0,0,0,0,0,0,0,6151,0,0,24424,0,0,0,0,0,0,0,
				24170,24293,0,0,0,0,0,0,0,0,0,11847,0,39591,0,0,0,0,0,0,9549,2788,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1010,0,0,0,0,0,0,26055,31724,0,24233,
				1828,0,0,0,0,0,0,0,0,0,17284,0,0,0,0,19464,0,0,0,0,0,0,0,0,32452,0,0,0,28871,0,0
				,0,0,17704,53383,0,0,0,0,0,0,0,0,0,17892,1938,0,0,0,0,0,16362,0,0,21605,0,0,5003
				,0,0,0,0,0,0,22693,0,22342,0,0,0,55846,0,0,0,0,0,0,0,0,0,22853,0,0,0,0,0,0,0,0,
				6600,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24836,0,0,0,0,0,0,0,0,0,
				40711,0,0,0,0,0,33894,0,0,0,0,0,0,13000,0,0,0,0,0,0,0,0,0,0,30308,0,0,0,0,0,0,
				5386,0,0,0,0,0,0,27844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17740,0,0,0,0
				,25093,29064,0,0,0,0,0,0,0,12680,11462,0,0,0,0,0,0,0,0,84,7303,0,0,0,0,0,0,0,0,0
				,0,0,27044,457,0,22924,58246,19016,0,2606,45703,0,5157,0,25028,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,2065,0,0,0,0,0,31946,0,0,0,0,0,0,0,0,0,0,0,0,33382,0,
				47878,0,0,0,0,0,0,0,0,25004,0,0,0,0,0,0,0,26153,35654,0,58055,30668,0,0,0,0,
				25988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,7560,20583,0,0,0,0,0,0,0,0,0,37510,0,0,0,0,0,0,0,0,0,42822,0,0,0,0,0,0,0,0,
				0,0,0,1733,0,0,0,8196,0,0,11241,0,30572,60326,0,15013,0,0,0,40646,0,23812,0,
				10022,0,0,0,0,0,0,0,0,12874,31015,0,0,0,0,0,0,1608,0,0,0,0,18308,0,0,0,0,27114,0
				,0,0,0,0,0,0,7944,1382,0,11813,0,0,0,0,0,0,0,0,0,0,0,0,0,24517,0,11621,0,0,0,0,0
				,0,0,0,0,0,0,21702,0,0,13100,8262,2644,7973,0,0,0,0,0,0,0,0,0,0,0,0,1033,12581,0
				,25221,0,0,0,40998,16301,62983,0,0,0,0,1263,9318,0,0,0,18854,0,0,1741,33895,0,0,
				0,0,0,0,26377,0,0,0,0,0,0,0,0,0,0,32165,0,51143,0,0,0,0,0,29412,0,0,0,0,0,0,0,0,
				1674,4230,0,0,0,0,0,10502,0,0,0,0,5545,0,0,0,0,0,2099,45158,0,0,0,0,0,0,0,0,0,0,
				14157,0,26955,0,0,0,0,0,0,0,0,0,17096,0,0,0,0,0,0,0,0,0,0,0,0,0,27050,6726,0,0,0
				,0,0,0,0,0,28554,0,0,7142,0,0,0,0,16936,0,0,0,25833,0,4399,6980,0,46214,0,0,0,0,
				0,10630,21164,0,0,0,0,0,0,0,2446,48551,0,0,0,0,0,0,0,0,0,0,0,13381,0,0,0,0,0,0,0
				,0,15400,12135,0,0,0,0,0,4774,586,0,0,0,0,0,0,0,0,23751,9736,4548,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25577,29607,6250,1637,0,0,0,0,
				22024,0,0,0,0,22308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37414,24044,0,0,0,14474,29735,
				0,7077,0,45990,0,0,0,0,30568,40039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				6150,0,4228,0,0,0,0,0,27687,0,0,0,0,0,0,0,24548,21513,1350,0,0,0,33607,0,0,0,0,0
				,0,0,0,11784,1414,0,0,0,0,0,0,0,18244,940,0,0,0,0,0,0,7270,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,16709,0,0,0,0,0,0,0,48935,0,0,0,0,0,0,23660,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,53350,0,0,0,0,0,0,4236,16358,0,4422,6665,32644,0,0,744,18084,0,11014,0,0,0,0,0,
				29508,0,0,0,0,0,0,0,7686,0,0,13289,5478,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,12872,0,0,24134,1005,22916,0,31429,23400,0,0,0,0,0,0,0,28424,0,0,0,
				25706,27109,0,0,26345,0,0,0,0,0,0,25126,0,0,88,0,0,0,0,0,0,0,17032,0,0,21799,0,0
				,10060,0,12296,21892,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20777,14311,0,58182,
				32232,0,10282,0,2121,11527,0,0,0,12325,0,0,0,0,0,0,0,28804,2344,8133,0,0,0,0,
				21864,62695,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2771,0,0,
				23204,0,0,0,0,0,6278,0,0,0,0,0,26597,0,0,0,0,23144,0,0,0,0,0,31816,20070,0,0,0,0
				,0,0,0,0,0,0,24456,2118,0,0,0,0,6570,1156,0,0,0,0,0,0,0,30406,0,0,0,28388,3572,0
				,0,26599,12426,5286,0,0,0,0,0,4967,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24970,24167,0,0,0
				,0,28745,4678,0,0,0,0,0,0,0,1444,236,0,0,0,0,0,0,0,0,19428,0,0,0,0,0,0,2092,0,0,
				0,0,0,0,0,0,0,2827,0,0,0,0,0,19881,19204,0,11749,0,0,0,0,0,0,0,17958,0,17894,0,
				18726,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,21510,5033,0,0,0,0,22855,0,0,0,0,0,14598,0,29605,0,0,0,0,0,0,0,0,
				617,0,0,0,0,47142,0,0,0,0,0,0,0,0,0,0,3627,0,0,0,0,0,0,0,0,0,0,0,0,0,2225,14823,
				0,0,2637,6182,78,15078,0,0,0,0,20264,0,0,0,0,0,0,36743,4140,44551,17352,25703,0,
				0,0,0,0,0,0,0,0,0,0,0,14024,0,0,0,0,0,0,28004,0,0,0,0,0,7588,0,0,0,0,0,0,0,2087,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18028,0,0,0,300,14212,0,0,1386,40327,0,0,0,0
				,0,0,31082,0,0,22374,0,0,0,0,0,35718,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				26532,7756,0,0,18982,0,0,0,0,0,0,0,0,6440,1159,7180,0,0,0,0,0,0,45766,0,57798,0,
				16740,0,0,6802,60454,0,0,0,26470,0,0,0,0,0,65382,4362,7750,0,0,0,0,0,0,9096,4743
				,334,0,0,0,0,0,0,39974,0,0,0,25828,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3027,0,0,
				0,15816,0,0,0,0,0,0,0,0,48327,0,0,0,0,0,0,0,0,0,0,16168,41799,0,0,24458,8581,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12292,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,54503,0,0,0,0,5097,30852,18664,0,0,0,0,0,0,16484,0,0,27337,0,0,0,
				0,0,0,0,0,0,0,0,0,35942,0,0,0,0,0,0,0,4356,0,0,0,0,0,57030,0,0,1417,41191,0,0,0,
				0,0,23429,0,0,0,0,10024,21735,0,0,10126,0,0,0,0,19046,0,0,0,0,0,0,24105,4710,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4394,0,0,0,0,13253,0,56391,0,0,0,0,0,0,0,0,0,0,
				0,19174,0,0,0,0,0,0,0,0,0,55974,0,0,0,52070,0,15620,0,0,0,0,0,2660,0,0,0,0,21644
				,0,0,52455,0,0,0,0,0,0,0,0,0,8902,0,0,0,0,0,0,3116,0,464,34726,0,0,0,0,0,0,25003
				,12423,0,27172,1896,7335,0,0,0,0,0,35686,0,0,0,0,3472,0,0,0,0,22406,0,0,0,0,0,0,
				0,0,0,45254,0,0,0,0,0,0,0,0,0,0,0,0,0,21124,23594,33127,0,0,0,0,0,0,16684,22087,
				0,0,0,0,0,0,0,0,0,0,0,0,8714,0,0,0,0,0,0,0,0,0,0,55814,0,0,0,0,0,0,4109,23460,0,
				0,8874,0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,29960,63398,1302,0,0,0,0,
				0,0,0,0,24806,0,0,0,0,0,0,0,0,0,9799,0,0,0,0,0,0,0,31333,0,0,0,0,0,19557,0,0,0,0
				,0,5701,0,0,0,63014,0,0,0,0,0,0,0,21254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12484,0,0,
				0,48326,0,0,0,0,0,0,0,0,0,0,0,15783,0,0,1202,0,0,0,0,23174,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,3086,49191,0,0,5387,15141,0,0,0,3365,0,0,0,0,20076,14021,
				0,0,0,0,0,0,0,0,0,0,376,40198,0,0,0,52039,0,24932,0,0,0,0,808,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,9860,0,0,0,0,0,23719,0,21476,0,0,0,0,20776,4807,0,0,3177,16678,0,0,110
				,10853,0,0,0,17382,0,0,0,0,0,0,0,0,0,43462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,7500,4966,0,0,0,0,0,0,0,52102,0,24516,0,0,0,0,0,0,0,0,0,0,0,0,0,26535,0,0
				,0,46247,0,0,0,15557,0,0,0,0,76,52327,0,0,0,0,17866,0,0,0,0,0,0,0,0,0,0,46758,0,
				0,0,0,0,19173,0,0,0,0,0,0,0,0,0,44038,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2985,0
				,0,0,0,0,0,14310,0,0,2125,45831,0,0,0,0,0,0,9838,0,13227,19492,0,0,0,29764,0,0,0
				,0,686,30053,0,0,0,0,0,30789,139,20837,0,0,0,0,502,18533,0,0,0,0,0,19111,0,0,0,0
				,0,31396,0,0,0,17444,0,0,0,0,0,0,0,49862,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25610,550,0
				,0,561,0,29034,0,0,0,3528,0,0,0,1715,14661,18,63463,0,0,0,0,0,0,0,0,0,0,14186,0,
				0,0,0,0,0,0,0,0,0,0,29578,59014,0,39430,0,0,0,0,2250,16612,0,31780,0,0,0,0,0,0,
				462,16967,0,29029,0,0,0,0,0,23462,0,0,0,0,0,0,0,0,1768,0,6025,16998,1804,0,0,
				54182,0,0,0,0,0,0,0,0,14124,0,6154,29702,0,0,0,0,0,7716,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,48807,0,8292,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16389,5933,0,
				14857,51303,0,0,0,0,0,0,0,0,0,0,0,35623,9097,23047,0,0,23112,0,0,0,0,0,438,0,0,0
				,0,0,0,0,151,9254,1390,0,0,0,0,0,0,54215,0,0,0,0,6187,0,0,0,0,13095,0,0,0,0,0,0,
				0,0,0,0,0,0,9866,0,0,59622,0,0,0,0,0,0,0,0,0,25286,0,0,23848,32069,0,0,0,0,0,0,0
				,0,0,9255,2187,15270,437,0,0,0,0,0,0,0,0,0,0,19493,0,0,0,0,0,0,0,0,0,0,0,11748,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16902,0,0,0,0,0,0,0,0,0,22212,1865,17543,0,
				0,0,0,0,0,21996,0,0,0,0,55975,0,0,0,0,0,0,0,0,32138,21156,0,0,0,0,0,0,14249,0,0,
				0,2388,0,0,0,0,6823,0,0,0,0,0,0,0,0,0,0,0,0,0,26694,0,0,6059,53511,0,0,0,0,0,0,0
				,49542,6159,0,0,0,0,0,0,0,0,0,0,0,0,0,1036,24036,0,2501,0,0,0,0,0,0,17419,51271,
				3377,15142,0,0,0,0,0,0,5007,62374,0,56935,0,0,0,0,0,0,0,0,0,0,0,24422,0,0,0,0,0,
				0,0,0,942,0,0,0,0,0,0,0,0,0,0,28263,0,0,0,0,0,0,0,15622,0,19749,0,0,1611,0,22219
				,48583,25129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17476,0,0,0,0,0,0,0,0,0,0,
				721,0,0,0,0,32518,0,0,0,18469,0,0,0,0,0,0,5896,29927,3657,23046,0,0,3214,0,0,0,0
				,0,0,0,0,0,112,0,0,0,0,0,3048,455,0,31012,0,0,0,0,0,0,0,23270,0,32677,0,0,0,0,0,
				38086,0,0,0,0,0,0,0,0,0,0,0,0,0,4900,0,0,0,0,0,0,0,0,0,25541,0,18788,0,0,22248,
				1351,0,61734,4524,30629,0,14887,242,29063,0,0,14408,4741,0,0,0,37318,0,0,0,0,0,0
				,0,0,0,0,0,0,8106,0,32107,0,0,0,0,0,0,0,0,0,0,0,1481,0,0,28132,0,25798,0,59783,0
				,0,0,0,0,59078,0,0,0,23366,0,0,0,0,0,0,0,30887,0,0,0,0,16200,0,0,0,335,0,0,0,714
				,0,0,0,0,0,0,0,0,0,0,0,0,0,30730,9478,0,0,0,0,0,0,0,0,0,0,0,18790,0,0,0,0,663,0,
				0,0,1034,31431,0,0,0,0,0,0,0,0,0,0,30120,0,0,0,0,13925,0,0,0,0,0,0,2280,13414,0,
				0,0,0,0,0,22028,23687,3017,11047,0,0,21738,18630,0,0,0,0,0,0,0,30246,0,0,0,0,0,0
				,0,0,0,0,0,0,17257,0,21896,63783,0,0,0,21094,0,18662,0,25700,0,22533,0,0,0,0,0,
				6341,5800,11111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15399,
				12970,6501,0,0,3179,26438,0,0,0,0,0,0,0,15750,0,13062,0,0,0,0,0,0,0,0,0,0,142,0,
				0,0,0,21284,11177,4391,0,0,0,0,19595,40647,0,0,0,0,0,11877,0,0,0,26439,0,0,0,0,
				695,49126,27467,11972,0,0,0,0,0,0,9961,0,0,0,31722,62982,0,0,0,0,15817,52710,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24614,0,0,0,0,0,20550,0,0,5034,3942,0,0,0,
				45927,0,0,0,0,0,0,0,0,0,0,2548,0,0,0,0,0,0,45606,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,3405,12582,15563,54087,0,0,0,0,0,0,0,0,0,0,0,0,24202,5893,0,0,0,
				44230,0,0,0,5605,0,47782,0,32230,0,0,0,0,0,0,0,0,0,0,0,7014,0,0,0,0,16488,3175,0
				,27237,0,0,0,0,0,40902,0,0,0,0,0,0,0,32004,31434,0,24392,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,29130,58214,0,0,0,0,0,0,29002,0,0,0,0,0,0,0,0,0,0,55366,0,0,0,0,0,0,0
				,0,0,0,0,37926,0,0,0,0,0,0,0,0,1290,0,0,0,4713,0,0,0,0,0,0,0,0,0,0,0,0,0,20812,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1803,966,0,17700,0,0,654,19109,0,51655,0,0,0,0,0,
				10470,1584,0,0,0,0,0,0,0,2506,0,0,25159,4303,0,0,0,395,15879,0,0,0,0,0,0,0,0,0,0
				,1352,6535,0,19652,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4722,7909,0,0,0,0
				,30152,0,0,64742,0,0,0,0,0,0,2153,9125,0,0,279,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,41894,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,1328,17030,0,0,0,0,0,0,0,54151,0,0,0,0,1775,54535,0,0,0,0,31624,0,0,0,
				7150,0,0,0,0,0,0,0,1840,35943,0,0,0,0,0,56455,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				64486,0,0,0,51174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4134
				,0,0,0,0,0,0,0,0,0,0,0,17092,0,0,0,0,0,0,0,0,0,0,0,0,12,16134,19883,39943,10281,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44711,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				14125,2407,0,0,0,0,0,0,0,0,0,0,26921,0,0,0,0,0,22188,0,20810,10053,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28170,0,15208,0,0
				,32517,5736,19271,3562,10534,0,0,0,59655,0,0,0,0,27084,60422,0,0,24969,0,0,0,
				2636,0,0,0,0,26277,0,0,0,0,0,0,0,0,0,0,0,30596,3594,0,0,0,8362,14565,0,0,0,0,0,0
				,10793,12326,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5906,59686,0,0,23081,517,0,15556,0,0,0,
				8486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19877
				,0,0,0,0,0,0,0,0,7497,0,0,26085,0,0,23784,63591,6568,6310,0,0,0,0,0,0,0,0,0,
				10054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7018,14470,18858,0,5641,10660,0,0,0,0,0,0,0,
				35526,1515,0,0,0,0,0,0,0,0,0,0,0,27656,0,0,9606,0,39590,0,0,0,0,0,0,0,0,0,0,0,
				53926,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,4327,12649,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,20199,0,0,0,0,0,0,26730,0,0,0,19400,14695,0,31334,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19589,0,0,0,0,0,0,0,0,5064,11908,0,27333,0,
				0,0,0,0,0,0,47751,0,0,0,26662,0,0,0,0,0,0,0,55655,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,6245,0,0,0,0,0,0,0,0,23368,63911,0,0,0,0,0,0,0,0,1974,0,0,0,0,0,0,0,
				8520,24037,0,0,0,0,0,0,0,26279,0,0,0,22886,0,0,0,27782,0,30694,0,0,0,0,0,0,0,0,0
				,0,0,33703,0,0,0,30405,0,34598,0,51047,0,0,0,0,1908,0,0,0,0,0,0,0,0,0,0,1511,
				21897,0,0,0,0,0,0,51398,0,24870,0,32647,0,0,0,35015,0,0,0,0,0,0,0,11204,0,0,0,0,
				0,0,7758,57991,0,0,0,30949,0,0,22,15140,9162,0,0,0,0,0,0,25540,20136,7108,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16427,10789,9805,0,0,0,0,0,0,0,0,0,4680,0,0,52679,
				0,0,0,0,0,14884,0,0,0,16804,0,0,0,0,0,0,9578,5287,0,0,0,0,0,0,0,34054,0,0,0,0,0,
				19076,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7627,55719,0,39463,14446,58374,0,0,0,0,23465,
				15845,0,0,0,0,0,38534,0,0,0,17893,10922,0,7176,678,0,0,0,0,0,0,0,0,3113,46279,0,
				0,0,0,0,0,0,23334,0,0,18088,23268,0,62342,0,0,0,16613,0,0,0,0,0,0,0,0,0,38182,0,
				0,0,0,0,0,25292,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10344,71,6446,0,0,1893,0,0,
				1106,0,28680,30756,0,41126,0,0,1492,0,15341,0,0,0,0,17575,0,21220,0,0,0,0,0,
				25060,2088,21828,0,0,0,0,0,358,0,0,0,0,0,16708,0,0,0,1668,0,0,0,0,0,12260,0,0,0,
				0,0,0,0,0,4078,0,0,0,0,0,12713,6215,0,0,20329,0,0,0,0,0,0,0,0,0,0,31204,0,0,0,0,
				0,0,0,0,0,0,3732,0,1646,0,0,27460,0,34406,17128,14341,0,0,0,0,0,19527,0,0,0,0,0,
				0,0,0,0,0,6120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8551,21546,10212,3020,
				2951,0,17638,0,0,6985,44999,2218,8197,0,0,30472,63366,0,26660,0,0,0,0,0,0,0,0,0,
				0,0,0,1265,0,0,0,0,0,0,0,2610,0,0,0,11278,20295,0,0,0,0,0,19780,0,0,0,0,0,0,2353
				,10852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5421,24292,0,0,0,0,0,0,0,0,0,0,0,0,0,34407,0,
				0,0,0,0,0,15432,20774,0,0,0,0,0,0,0,0,12360,10757,0,0,0,33126,0,0,0,0,0,0,0,0,0,
				0,0,29573,0,2343,0,0,0,0,0,63079,0,0,0,0,0,0,0,0,0,43015,0,16038,0,0,0,0,0,0,0,0
				,1480,25573,0,0,0,0,0,0,0,8839,0,0,0,0,0,0,0,24645,0,0,0,0,0,0,0,0,0,0,0,0,0,
				5063,0,0,0,0,0,45830,0,0,0,0,0,0,0,0,0,0,823,0,0,64039,0,0,0,0,0,0,0,0,0,0,0,0,0
				,15300,0,0,0,0,0,0,2924,46759,6760,19268,0,0,0,0,0,0,0,0,0,34182,0,0,3977,18149,
				0,0,0,32199,0,0,0,0,0,0,0,0,0,23524,25994,0,0,10343,0,0,0,9733,0,0,0,0,0,0,0,0,0
				,4740,0,0,0,0,0,0,0,0,0,16741,0,0,4626,23367,0,0,31400,0,0,3557,0,0,4234,0,0,0,0
				,0,0,28486,0,0,0,0,0,14213,0,57191,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,65318,29832,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29989,0,31846,0,0,8170,0,0,4421,27626,30884,0
				,0,20204,0,0,0,0,44614,534,20868,0,0,0,0,0,0,0,0,0,0,0,0,0,28710,0,10277,0,0,0,0
				,0,29511,0,19813,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27020,0,0,0,0,0,0,53094
				,0,35207,0,0,0,37542,0,61766,8584,8037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12488
				,22757,0,0,0,0,0,0,0,0,0,0,0,0,0,23814,0,0,0,0,0,0,0,0,0,19973,0,0,0,63943,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36006,0,0,0,19012,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,8580,0,0,0,0,0,0,0,18021,0,0,0,0,0,0,0,0,80,1254,0,0,0,42630,0,0,0,0,0,
				0,0,16262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2124,25479,0,0,0,0,16873,0,0,0,0,3142,
				0,0,18443,0,0,0,0,0,3917,0,8841,1190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,20645,0,0,0,0,0,0,0,0,0,0,0,9284,0,0,24394,41351,0,0,0,42087,0,62566,0,0,0,0,
				0,0,0,0,0,0,6728,4199,0,0,0,0,25515,0,1231,0,374,15623,0,29956,0,14118,0,0,0,0,0
				,19047,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31718,0,0,0,0,0,0,0,0,0,0,0,20900,0,16743,0
				,0,0,28902,0,0,0,0,0,0,0,0,0,0,0,0,2578,0,0,0,0,0,0,0,0,0,13838,0,0,10052,0,0,0,
				0,7432,43783,17097,0,0,0,0,0,873,0,0,0,398,0,0,0,0,0,0,0,0,0,8459,23559,0,53030,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35750,0,4071,0,0,0,38662,0,41414,0,0,0,0,11656,0,0
				,0,0,0,4011,42695,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25353,0,0,0,0,0,0,0,27177,22372,0,
				0,0,0,0,30980,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46278,3976,12711
				,0,0,0,0,0,0,0,0,0,0,0,20517,0,0,0,0,0,0,0,0,0,0,0,0,4072,11078,0,0,16553,2405,0
				,0,0,0,0,0,0,0,2670,0,0,0,0,0,0,32998,0,0,0,0,0,0,0,47046,0,30533,0,0,11050,9734
				,13129,0,0,0,0,23494,0,0,0,0,0,58310,0,0,0,57543,0,0,0,0,0,0,0,0,0,0,0,0,0,454,0
				,0,0,0,0,0,5163,59687,2220,0,0,0,0,0,0,29510,0,0,0,0,0,0,0,0,0,0,0,17316,0,20069
				,0,0,0,0,0,0,0,0,0,5319,0,0,0,0,0,0,0,0,0,27174,0,0,0,0,0,0,0,22949,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,19208,0,0,0,0,0,0,20933,0,0,6026,8742,0,0,0,17380,0,13127,2797,0
				,0,30116,0,0,5963,8004,0,57126,0,0,0,0,0,42854,14792,30759,0,24964,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,16933,0,0,0,0,0,0,15176,40839,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				788,30341,0,0,0,0,21036,24102,0,0,0,0,30123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				22597,31531,26789,0,59559,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9352,29863,0,0,0,0,0,0,0,0
				,0,24551,0,0,0,0,0,0,0,20516,0,0,0,39462,3665,0,28265,0,8778,64262,0,57414,9132,
				0,0,18276,0,0,0,0,0,0,0,0,0,0,26344,30725,524,19751,0,13796,0,0,0,0,0,0,0,0,0,0,
				18155,0,12841,0,74,24998,13579,1061,0,64199,0,0,8776,0,0,60231,0,25412,0,0,0,
				59143,0,0,0,0,0,0,14344,1510,0,0,0,38374,0,0,0,0,0,0,0,0,13353,0,0,0,0,0,0,0,0,0
				,0,9446,0,0,0,0,0,0,0,32613,0,0,0,0,0,0,0,0,0,0,0,0,0,19844,0,0,0,0,14859,0,0,0,
				0,6662,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14154,0,29770,0,0,0,0,0,
				16520,2182,0,0,0,0,0,36102,3340,0,0,0,0,0,0,0,0,25189,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,15720,0,0,0,0,0,0,22758,0,0,304,0,3243,14117,0,0,0,0,0,0,0,0,0,0,5130,
				12679,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21733,10441,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,36103,0,0,0,0,0,23590,0,57479,0,0,0,0,0,0,0,0,0,0,0,0,10824,
				18372,0,0,0,0,0,35078,15722,12967,0,0,0,0,0,34599,0,0,0,0,0,0,0,0,0,0,0,0,0,
				53639,0,38630,0,0,0,0,0,0,31017,11333,0,0,0,0,19144,0,9513,0,0,0,0,0,0,0,0,56711
				,24042,0,1197,0,0,58502,0,0,0,0,0,0,0,0,0,8230,6121,18628,0,0,0,0,0,0,25290,0,0,
				0,0,0,1514,0,0,0,0,0,0,0,14378,9798,32363,0,0,0,0,0,9577,0,0,0,0,0,0,26788,0,0,0
				,0,0,0,330,10533,0,0,0,0,0,42246,0,0,0,0,0,0,5074,21028,0,38119,0,0,0,0,0,0,248,
				0,31176,62054,0,53287,0,0,0,0,271,0,0,0,0,0,0,0,0,0,0,0,0,0,9224,2117,0,0,0,0,
				15818,5607,0,52582,0,0,0,0,0,0,0,0,18248,24005,23018,0,0,0,0,0,0,0,0,0,0,0,0,0,
				427,0,0,39910,0,0,7080,11399,0,0,0,0,0,0,0,0,0,0,22220,57894,0,0,0,0,0,0,0,13156
				,0,1413,1007,0,0,0,0,21415,0,21543,0,0,0,0,0,0,0,0,0,41702,22538,9573,0,0,0,8806
				,0,0,6920,56359,0,0,0,0,0,0,0,0,0,0,0,42215,0,0,13708,0,0,0,0,0,0,0,0,0,0,16453,
				0,0,0,0,0,0,1582,1764,3282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11653,0,0,0,0,12139,0,
				29482,31076,1673,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40262,0,0,0,33862,0
				,0,0,0,0,20996,0,0,0,0,0,4615,0,0,0,0,0,0,0,0,0,0,0,43943,333,19367,0,0,0,0,0,0,
				0,26821,0,32389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4936,11687,0,0,0,0,0,0,0,0,0,10885,0
				,0,0,0,0,25926,0,0,0,0,0,0,15851,0,0,0,0,0,0,0,0,0,8360,0,17130,7942,0,11460,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,18150,14248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				22310,0,0,0,42758,0,0,0,0,0,0,0,0,29354,5574,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,31109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11236,0,0,0,0,0,0,0,0
				,0,0,0,0,0,9156,0,0,1801,14023,0,0,0,0,0,62406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				23620,0,0,0,0,0,0,0,0,0,0,31018,65510,0,0,0,0,0,0,0,26182,0,0,0,0,0,0,0,27717,0,
				0,0,0,0,0,0,46950,0,0,0,0,0,0,0,0,0,0,0,0,0,31108,0,11366,0,0,0,3717,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8552,6054,3339,0,0,0,0,51622,0,
				0,0,0,0,0,0,3718,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28358,0,2756,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,1462,0,0,27622,0,0,0,0,0,0,0,62502,14410,56743,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,12206,0,0,0,0,0,0,0,0,0,0,0,0,36550,0,38054,0,0,0,
				21221,0,0,0,0,0,0,0,27077,0,0,16906,0,12587,12101,0,0,0,0,0,0,10414,28775,21769,
				60167,0,56646,0,0,0,0,0,20740,0,0,0,0,0,0,5931,5351,0,65478,0,0,0,0,0,0,7977,
				52647,0,4868,0,0,0,55463,0,0,0,0,0,32197,0,0,0,0,0,13445,0,0,0,26631,0,0,0,0,0,
				11237,0,0,0,0,209,1285,0,0,1928,0,0,0,0,43334,23849,23172,0,0,0,0,0,0,0,0,24712,
				62439,8811,3463,20457,0,0,0,0,0,0,0,0,0,16008,56263,0,0,0,0,0,0,0,0,0,0,0,60358,
				22761,6565,0,0,30888,27686,0,0,0,17093,0,0,0,0,22121,0,0,0,7593,14182,0,28103,0,
				0,0,0,0,45126,0,0,0,0,0,0,0,0,0,0,0,0,0,31844,0,0,0,0,0,0,0,0,0,0,0,0,0,18500,0,
				0,0,0,28202,0,0,0,0,0,0,0,0,26308,0,29541,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				29572,0,0,0,21285,0,0,0,0,0,60839,0,0,0,0,0,30407,15949,2981,0,0,0,46439,0,0,0,0
				,0,23911,26505,25222,12811,5895,0,6343,0,0,0,0,0,0,0,0,0,0,0,31815,0,0,0,0,0,0,0
				,0,19688,10245,0,0,0,31301,26985,28964,0,0,0,0,0,0,0,0,27208,31172,0,0,0,0,216,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16292,0,0,0,0,0,8743,0,0,0,0,0,0,0,0,
				0,0,0,0,0,6438,0,0,0,33319,0,0,0,33286,0,0,0,0,0,0,0,0,0,22181,7499,24774,0,
				10756,0,44775,724,0,25768,25669,24873,5349,25257,0,0,54566,0,0,0,0,0,0,0,0,0,0,0
				,327,439,357,0,0,6536,8452,0,0,1802,0,0,61350,0,15045,0,0,0,0,0,0,0,0,0,0,0,
				38343,0,0,0,0,0,0,0,0,0,0,32491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				22885,0,0,32073,0,0,0,9546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27748,0,0,23176,0,0,0
				,0,0,0,0,0,0,0,0,0,24583,0,0,0,0,0,34118,0,0,0,0,2158,0,5586,30340,0,0,0,0,0,0,0
				,0,0,0,0,0,0,24452,0,0,0,0,2409,4390,0,24196,0,0,0,0,0,0,32264,26948,20587,0,0,0
				,2155,0,0,0,0,0,0,0,0,0,0,0,4328,26276,0,0,0,0,0,0,0,0,23564,0,12458,11367,0,0,
				25162,0,0,0,0,0,0,65414,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32966,0,0,0,
				34662,0,0,0,0,0,39238,0,0,0,0,11400,10214,266,12452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,15173,0,0,0,13668,0,13222,0,23364,0,0,0,0,0,11941,0,0,0,0,0,0,0,0,0,
				25575,0,0,0,57383,0,0,0,10308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,2865,9287,75,0,0,0,0,0,0,0,0,0,0,21508,22380,59526,0,0,0,23589,0,0,0,51590
				,0,0,0,0,0,0,0,0,0,0,0,4645,3980,28295,0,0,0,0,0,12388,0,0,0,0,0,0,0,0,0,0,0,
				21734,0,17607,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41767,0,0,0,0,0,0,0,18436,0,0,0,0,0,
				0,0,21958,0,19430,0,0,1204,0,0,0,0,0,0,0,0,0,3240,55239,0,0,0,0,0,30660,0,0,0,
				28901,0,0,0,0,4716,0,0,0,0,0,0,0,0,0,0,0,11754,0,0,0,0,22086,0,22564,8749,0,0,
				28391,0,0,0,0,0,0,0,0,0,0,0,2886,0,0,0,0,0,0,0,29062,0,0,0,0,0,0,0,40358,0,0,
				15916,39526,0,13735,0,0,0,0,28938,0,407,4006,0,0,0,26916,0,0,0,0,0,27526,30280,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24586,0,24649,5126,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8684,0,0,0,0,0,0,0,23019,0,22377,18599,0
				,0,0,0,0,0,0,0,0,0,27593,9735,0,20196,0,0,0,0,28168,48423,0,0,0,0,0,31399,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,13892,0,0,0,0,0,17606,0,0,15242,29767,26378,17701,0,0,
				14472,0,4840,0,0,0,0,0,0,24708,0,9349,4330,0,0,0,0,0,0,0,16137,0,0,34854,0,0,0,0
				,0,0,0,0,0,0,0,25063,0,0,0,0,0,0,6603,12583,0,0,0,0,0,0,0,0,7433,29188,0,0,0,0,0
				,31270,0,0,22920,3143,0,0,0,0,0,23461,0,0,0,0,0,0,0,0,618,0,0,0,0,21381,0,11524,
				0,0,0,0,0,0,21004,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,23239,0,0,0,0,0,0,0,0,0,0,0,
				0,2313,0,0,40614,0,0,14825,0,0,0,0,0,0,46535,0,41190,7853,0,31656,0,0,0,0,0,0,0,
				0,0,3433,5255,0,0,0,0,0,0,0,33958,0,0,0,0,72,15493,0,0,0,0,0,0,0,36070,0,0,0,0,0
				,0,0,14724,0,0,0,0,0,29828,0,0,0,0,0,0,0,18822,20008,0,0,0,0,2438,2952,0,0,0,0,0
				,0,0,0,0,0,0,0,0,3342,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24420,0,19908,0,0,0,8101,0,
				17479,0,0,3530,0,8202,29319,0,0,1132,6789,0,0,23881,0,0,0,4810,0,0,46918,0,0,0,
				41574,0,0,0,0,0,0,0,0,0,48582,0,0,0,0,0,0,0,0,0,0,0,0,0,39334,0,0,0,26117,0,0,0,
				0,0,0,5100,0,0,0,0,0,23496,27813,4045,54918,0,0,0,0,0,0,6473,7428,0,0,0,0,6792,0
				,0,0,0,0,3560,32103,0,0,0,0,0,0,0,0,0,0,0,54790,0,0,6926,0,0,0,0,16518,0,0,0,0,0
				,20806,0,0,0,0,1841,3174,0,0,0,0,9612,18374,0,0,0,0,32744,0,0,9671,0,59879,0,
				23300,8073,0,0,14758,0,0,0,10342,0,0,0,0,0,0,24808,14759,0,0,0,0,0,0,5515,0,0,
				14852,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2354,23271,0,32740,0,0,0,0,0,0,0,0
				,0,0,18472,0,0,0,0,0,0,0,0,33190,0,0,0,0,0,0,0,0,8972,21669,0,0,0,0,0,0,0,0,0,0,
				0,25574,0,0,0,0,5096,0,14283,55367,0,0,0,0,0,0,0,0,0,12644,0,0,0,0,4651,0,0,0,0,
				0,0,0,661,0,0,13638,19466,0,0,0,0,0,31273,0,8010,0,0,0,0,0,3211,0,0,0,0,63430,0,
				0,0,0,0,15237,0,0,0,0,0,0,19018,2437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14312,0
				,0,0,0,16836,0,0,471,35975,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,6023,0,0,0,0,0,0,0,0,11593,9639,0,0,0,55783,0,5700,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27908,0,26598,0,0,6667,6470,0,0,0,0,0,0,0,
				62534,0,0,0,0,16522,27911,0,0,10025,7172,0,0,779,0,360,17477,0,0,0,61991,7752,
				7717,1494,0,0,0,26569,40742,0,0,0,0,0,0,0,26406,10474,32196,0,0,0,0,0,50567,
				16521,11716,0,0,0,0,0,55558,0,0,0,0,0,0,0,0,0,0,0,61926,0,26436,0,0,0,0,4459,
				10598,0,0,0,0,0,0,0,0,0,0,0,9223,0,29318,0,0,0,0,0,60423,0,0,0,0,0,0,0,47078,0,
				50246,0,12612,0,0,0,0,0,0,0,61799,0,55015,0,21060,7309,0,0,0,0,0,11976,0,0,0,0,
				23527,0,0,0,0,0,0,10347,15942,0,34023,0,0,0,0,4969,0,0,0,0,0,0,0,0,28997,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				3466,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19716,
				28872,0,0,0,0,0,22152,0,0,0,0,0,0,26342,0,0,0,9764,0,0,0,0,0,0,0,21798,0,0,0,0,
				13,6853,32136,0,0,0,0,0,0,0,750,0,0,54502,0,0,0,0,0,0,0,0,0,46183,0,0,625,22854,
				0,0,0,0,2061,23588,0,0,11049,56262,0,0,18538,1509,0,0,17258,4453,0,0,0,0,12429,0
				,0,0,0,8102,0,0,0,0,0,0,8074,0,23852,0,0,0,0,0,0,0,0,0,0,0,16136,3428,0,27876,0,
				0,0,7332,0,0,0,0,0,28900,0,0,2284,0,0,17573,201,1508,0,0,0,0,0,0,0,0,0,31365,
				27688,22565,0,0,0,5159,0,0,0,0,4584,42599,0,0,0,44422,1068,23173,0,0,0,613,0,0,0
				,12645,0,0,0,0,0,27076,6732,0,0,0,3913,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,22244,29992,15911,0,0,0,0,0,22982,0,0,0,0,0,0,0,50598,0,0
				,0,0,0,0,5161,1574,0,0,0,0,0,0,0,0,0,19108,0,0,0,35014,0,0,0,25956,29067,0,0,0,0
				,0,0,0,0,0,0,47079,0,0,0,0,0,0,0,0,0,0,1356,61927,0,0,0,64455,2122,64231,0,0,
				18763,0,0,0,0,0,0,0,0,0,907,34471,0,0,0,39078,0,0,1995,0,0,0,0,0,0,0,0,0,0,56518
				,0,0,0,0,0,0,0,0,0,0,0,0,822,0,15978,44423,0,0,3112,325,0,0,0,0,0,15397,0,0,0,0,
				0,0,0,0,0,0,1193,4294,4968,15559,0,46150,0,0,0,0,0,18917,0,0,0,0,0,0,9928,37543,
				0,0,0,0,13097,36999,0,0,0,15430,0,0,8424,29639,0,0,0,0,0,0,0,0,0,0,0,0,0,25734,0
				,0,0,0,0,0,0,0,0,0,0,0,0,40487,0,13284,0,11141,0,0,0,32388,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5298,57702,0,0,0,0,0,0,0,13060,0,0,0,0,0,0,
				8233,42278,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36422,0,0,0,7972,0,0,0,
				18437,0,0,0,0,7406,0,0,0,9225,0,0,0,0,0,0,0,0,0,13865,47591,18220,53703,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2796,0,0,0,0,0,24940,17223,0,0,0
				,13221,0,0,0,0,0,0,0,0,0,0,15848,0,0,0,0,0,6122,1735,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,16968,18151,0,0,0,0,0,47494,0,0,0,0,0,0,26089,19494,0,0,0,0,0,15494,0,0
				,0,0,0,0,0,0,0,0,28809,0,0,0,0,42727,0,55174,0,0,0,0,0,0,0,0,0,0,0,20485,0,0,0,0
				,0,0,0,0,0,0,0,58598,0,0,0,0,0,0,0,0,0,0,0,0,0,15172,0,0,0,0,0,0,0,0,0,35302,0,
				48135,20972,33094,0,0,0,0,0,9765,0,0,0,0,0,0,0,0,0,39559,0,0,13736,6950,0,0,0,0,
				23658,8903,0,0,0,0,0,0,0,22662,0,0,0,0,0,58886,7468,0,0,0,0,0,0,0,0,64550,0,0,0,
				0,0,47622,0,0,0,50886,0,0,0,0,0,57606,912,0,0,0,0,0,0,0,0,0,1449,0,1169,0,718,
				46151,12104,0,0,0,0,0,0,48230,0,0,0,0,0,0,0,0,0,0,1259,0,0,33734,23208,62567,0,
				65158,0,0,0,0,0,0,0,0,0,0,28684,59878,0,0,0,0,0,0,0,0,0,0,25769,0,0,0,0,65479,0,
				0,0,0,555,22789,0,19748,1769,10246,8680,0,0,0,0,0,0,0,0,0,14250,0,5899,3303,0,0,
				0,0,0,0,0,0,21097,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21638,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,10795,0,0,0,16204,0,0,0,0,0,26986,2469,0,14660,0,0,0,0,0,45447,
				12234,3494,4555,10566,0,0,0,0,0,0,0,0,0,0,0,0,2801,0,0,0,15755,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,39654,0,0,0,0,0,0,6763,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				33574,0,10279,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63527,0,0,3912,0,0,7492,0,0,0,35142,
				0,0,0,0,0,0,17576,8103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16713,4198,0,0,4782,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,16228,0,0,0,0,25961,20166,0,0,0,10980,0,0,0,0,0,14340,
				18922,14567,0,44199,0,0,0,0,0,0,0,18406,0,0,0,0,0,37606,0,0,0,0,0,0,0,0,0,20902,
				0,0,0,56358,0,38342,0,0,0,0,9514,36071,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21700,0,0,
				5266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1134,0,1453,0,0,0,0,0,3882,0,0,0,
				0,0,0,0,0,4004,0,0,0,51910,0,0,0,0,0,23076,4648,0,0,0,31051,25351,0,0,0,22884,0,
				0,0,0,0,63975,0,0,2376,16997,0,0,2096,0,0,0,3373,7046,0,0,0,0,0,0,0,30726,0,0,0,
				0,20,0,13707,614,0,0,12840,3079,0,0,0,0,0,51046,3729,0,32680,0,0,0,0,0,24008,
				62759,0,0,4745,0,0,0,0,0,0,0,0,0,0,0,0,0,2414,0,0,44262,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,24937,0,0,0,0,0,0,0,0,19140,0,13575,0,0,0,0,0,0,0,39110,0,0,0,28036,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,4261,0,0,0,0,5992,0,264,0,0,0,0,0,0,0,13739,0,21928,0,
				0,0,0,0,0,0,0,0,0,0,4232,15110,0,0,0,0,0,0,0,0,0,30022,0,0,27977,0,0,0,0,0,24776
				,0,0,0,0,0,2962,0,0,0,0,0,0,26564,22441,0,0,0,0,0,13640,11205,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,19305,1894,0,0,0,0,0,0,0,0,0,0,9389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14119,
				5224,135,0,0,0,0,0,0,0,0,0,25796,0,0,0,0,0,0,7470,0,0,0,0,63815,0,55654,0,0,
				12584,0,1524,33223,0,0,0,9895,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11624,
				0,0,0,5614,0,0,0,0,0,0,0,21320,0,0,53607,0,51206,0,0,0,25863,0,0,0,0,0,0,0,0,0,0
				,0,8964,1740,0,0,0,0,0,0,0,0,13476,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7975,0,
				0,3306,8134,0,8389,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25766,0,0,0,0,0,0,0,0,0,
				52166,0,0,0,0,0,0,0,0,0,0,0,0,0,21477,31112,31652,0,0,0,0,0,0,0,28452,0,0,0,
				44231,0,0,0,0,0,0,0,24805,0,0,0,0,0,0,0,0,0,0,12428,6471,0,0,0,0,525,17926,0,0,0
				,26919,0,0,18120,0,0,0,30024,0,0,0,0,0,0,0,0,0,0,29189,0,0,0,43559,0,0,0,0,0,0,
				19787,7557,0,59334,0,0,10184,6085,0,44039,0,0,0,0,0,0,0,11175,0,0,0,0,30440,
				63110,0,0,0,0,0,0,11017,0,0,0,0,0,0,0,0,27204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,29126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,622,0,5226,2727,0,15588,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4650,0,2675,0,0,32420,0,0,0,61511,0,0,
				5419,17829,2123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38183,2640,0,11274,14533,1842,0,0,
				42663,12681,3430,0,11845,0,0,0,0,0,0,0,0,0,6533,0,0,0,0,0,54598,0,0,0,0,0,0,0,0,
				0,0,0,0,12616,38535,0,0,0,0,0,32229,0,0,0,54279,0,48614,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,31401,0,0,0,0,34310,0,0,0,22788,0,52134,0,0,0,0,0,0,0,23302,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,40678,0,0,0,51463,535,0,0,0,0,15525,0,0,0,0,0,0,4904,869,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63718,0,0,0,0,0,0,0,0,1678,0,692,0,0,0,
				0,0,0,0,0,0,26216,0,0,0,0,0,29355,0,0,0,0,25095,0,0,0,0,4335,0,0,0,0,0,14538,0,0
				,0,0,0,0,0,0,0,27273,55014,0,0,0,0,0,27271,0,0,0,0,0,30468,0,0,0,0,18186,0,0,0,0
				,0,14345,0,0,0,2152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58438,21034,0,23339,21318,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,21412,0,0,0,0,0,0,0,12869,0,0,4875,0,0,0,0,29191,0,0,0,0
				,0,0,1640,10247,0,14244,0,0,0,0,9867,0,0,0,0,0,12363,0,0,7653,0,0,4168,2663,0,
				4580,0,11143,0,0,0,0,0,0,0,30662,0,0,0,0,0,6724,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,13764,0,0,0,0,0,0,0,0,0,0,0,0,234,6821,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,25639,0,0,0,0,0,0,0,0,0,29958,0,3461,0,0,0,0,0,0,0,0,0,28324,
				18795,7013,12746,11655,0,37287,0,0,10953,7718,9705,0,0,0,0,0,0,0,0,0,0,46534,0,0
				,0,0,0,0,0,0,0,0,8137,17988,0,25156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41415,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15784,6918,0,0,0,0,7019,10919,0,0,0,
				0,0,0,0,0,0,0,4171,55495,4940,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22440,19333,0,0,
				28136,0,6249,21317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53414,0,0,0,57318,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39303,0,0,0,0,0,19940,0,0,0,0,0,0,0,25543,0,0,0
				,0,0,0,0,0,0,0,0,0,2698,3911,0,0,0,26790,0,0,0,0,0,0,32424,0,0,18470,0,0,0,14726
				,29834,0,0,0,0,0,0,0,0,0,0,0,1000,4197,0,0,0,19366,0,0,0,39878,0,0,0,0,2185,8901
				,5288,9829,25000,0,0,0,0,0,0,1062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35622,0,
				0,23048,62503,6506,0,0,0,0,0,0,0,13609,10438,0,0,0,0,0,0,0,0,0,0,7723,42119,0,0,
				0,0,0,13317,0,0,0,41606,0,27111,0,0,21194,11461,0,0,0,0,26856,58342,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,20940,48710,0,0,0,0,0,0,5227,0,0,0,0,0,10061,31300,0,0,0,19236,0
				,0,0,0,0,30277,13896,0,0,0,12876,13159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,428,
				46951,13134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,21668,0,0,0,0,0,0,0,0,0,0,0,0,2249,0,0,0,0,44967,0,0,0,0
				,0,0,3465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24868,0,0,0,0,0,23909,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,2190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16164,0,
				10437,0,0,5263,20102,20938,0,0,0,1192,1030,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,21385,4870,0,0,0,0,0,0,0,0,0,0,0,18596,0,0,0,0,1422,4038,2858,0,0,0,0,0,0,0,0
				,48998,0,0,0,0,0,0,0,0,6508,37350,0,0,0,0,0,0,0,0,17001,39431,0,0,0,0,0,30182,0,
				21445,7403,28164,0,51750,0,0,0,62631,0,0,0,0,0,0,0,31206,0,0,0,0,0,0,0,0,0,0,0,
				7751,0,0,0,0,0,0,0,0,0,13477,0,0,456,26693,0,0,0,0,0,0,0,0,0,0,0,0,14890,0,0,0,0
				,0,26697,22022,13225,27364,0,0,0,18884,0,0,0,0,0,0,0,0,3659,0,0,0,0,0,0,0,0,0,0,
				0,1448,5413,0,0,0,0,0,0,0,0,0,0,0,6340,0,0,18091,18725,0,0,0,0,0,0,0,0,0,0,0,0,0
				,22118,0,0,0,18981,0,0,0,0,0,0,0,0,0,29223,3724,0,0,0,0,43526,0,0,0,25668,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21545,9862,0,22692,32201,60646,0,7300,0,0,
				0,58887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19460,0,0,0,0,0,0,0,0,0,50342,0,
				65255,4360,17286,0,0,0,0,0,0,0,28708,0,0,30025,60102,0,0,0,0,0,0,0,0,0,47014,0,
				31973,0,9572,0,0,0,0,0,0,0,18501,0,0,0,0,0,14597,0,0,0,53735,5228,22183,0,0,0,0,
				0,0,1554,24164,0,0,0,0,0,0,0,0,0,0,0,0,10827,0,0,0,0,34918,0,0,0,0,22252,0,0,
				46855,0,0,0,0,0,31207,0,0,10733,0,0,63334,0,0,0,0,8616,50119,20169,12678,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58087,20298,5,0,0,30920,0,0,0,0,0,0,0,296,13190,0
				,30663,0,0,18536,12228,0,6788,0,0,0,0,30890,21796,0,0,526,0,0,0,0,0,0,0,0,0,0,0,
				0,20965,0,0,0,0,2161,0,0,0,0,0,0,24038,0,0,0,0,13544,7398,0,0,32522,9605,0,0,0,0
				,3208,7590,0,0,0,43846,0,0,0,38663,0,0,0,0,0,39014,4142,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,6373,0,0,13676,0,0,0,0,30374,21288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22791,0,0,0,0,0,37958,0,0,0,0,0,0,0,0,0,0,9452,
				9990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4841,0,0,0,0,18820,152,0,0,0,0,0,13260,3334,0,0
				,24234,8422,0,17957,0,0,0,10244,0,0,0,0,0,0,0,0,0,0,0,7204,0,0,0,0,1201,26151,0,
				31173,0,0,0,0,0,0,0,0,0,0,0,0,0,64838,4203,7525,521,0,18888,37031,0,0,0,0,0,0,0,
				0,7082,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4490,12487,0,0,0,0,0,0,0,36615,0,0,
				0,14854,0,0,0,0,0,0,0,0,0,0,0,0,6539,13029,9704,38983,0,0,0,0,168,10405,0,0,0,0,
				394,25607,0,57063,0,0,0,0,0,0,0,0,0,0,16141,19878,0,0,0,0,0,0,0,0,0,29446,0,
				12036,0,0,0,0,0,6982,18572,0,24584,14535,0,0,0,0,0,0,0,0,0,0,16,0,21642,0,0,0,0,
				0,0,5254,0,0,0,0,0,0,0,0,1622,0,0,0,0,0,0,0,0,0,0,0,0,0,3853,9126,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,7241,10982,0,0,0,0,0,0,0,0,0,0,0,0,0,0,950,0,0,57990,0,0,277,0
				,0,0,694,36007,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42470,0,0,0,0,18409,
				51142,0,0,0,0,0,0,0,0,0,28646,0,0,0,30693,0,0,0,0,0,56295,5544,0,0,0,0,8518,8366
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45670,0,0,
				9608,33062,0,0,0,0,0,0,0,0,0,0,0,18694,0,0,0,0,1672,23493,0,0,6955,7655,0,36134,
				0,0,0,0,0,0,0,0,23432,647,0,0,0,0,0,0,0,0,0,0,0,13382,0,0,0,19621,0,0,0,0,0,0,0,
				0,0,20228,0,0,2728,31495,0,0,0,0,29096,22213,235,35495,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,5348,0,0,0,0,8968,1989,0,0,1066,0,0,11492,5965,31367,0,0,0,0,0,0,0,0,0,0,0,
				18727,0,0,0,6757,0,0,10765,4646,0,36166,0,27943,0,0,26888,8420,0,0,0,0,0,0,0,0,0
				,29316,0,0,0,0,0,0,0,0,0,0,4975,0,0,0,14762,3111,0,0,0,0,0,43399,0,0,0,0,0,0,0,
				18980,0,0,0,0,0,44550,0,0,0,0,4051,0,0,0,0,37734,0,0,0,0,0,5188,0,0,0,0,0,24486,
				0,5989,0,41159,0,0,0,0,0,0,0,0,0,20326,0,0,747,6884,0,0,0,41798,0,0,3117,22919,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21032,0,0,0,0,0,0,0,0,9574,0,0,0,0,0,0,
				4302,0,0,0,0,0,0,0,0,0,0,0,21068,34630,0,0,0,0,0,64071,0,0,0,0,0,0,26667,7943,0,
				0,0,0,0,52934,0,0,17002,0,0,0,0,0,0,20294,0,0,0,0,0,0,0,0,0,27301,18347,7974,0,0
				,0,0,0,0,0,0,16874,0,0,0,0,45414,0,0,0,0,0,0,648,1575,0,0,0,31749,0,0,0,23301,0,
				0,0,0,0,0,0,0,0,0,0,0,15912,50535,0,0,0,0,1993,8582,0,0,0,0,0,0,0,38438,0,0,0,0,
				0,0,0,0,0,0,0,0,15850,6183,0,0,0,0,3402,0,0,27494,0,0,749,0,0,0,0,0,0,0,26025,
				29606,0,0,7144,19622,30504,0,0,0,0,0,0,0,0,21316,0,0,0,0,0,0,0,0,0,21444,0,0,
				1289,6919,0,0,0,0,0,0,8299,0,0,0,14090,35655,0,0,0,0,0,0,0,0,2377,15206,0,0,6028
				,4452,0,25508,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50310,0,0,0,0,1269,0,0,0,0,0,0,0,0,0
				,0,0,0,51014,0,0,0,0,0,0,0,9286,0,7429,0,0,28393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,16680,452,0,0,0,0,0,23718,0,0,0,31750,0,0,0,0,0,0,0,0,3568,0,0,13604,0,0,
				0,0,0,25255,0,0,0,50982,0,56582,0,0,7467,0,0,0,0,30181,0,0,0,0,0,0,0,30564,7208,
				7845,0,0,0,0,0,0,7726,0,0,0,0,62182,0,0,0,41094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,22695,0,0,0,0,0,0,17736,0,0,0,0,0,0,0,0,50054,0,0,0,14180,0,0,0,0,
				0,0,8974,0,0,0,0,0,0,0,0,23332,0,0,0,11140,0,0,0,0,0,0,0,24262,27145,9540,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,26537,45510,6062,3879,0,0,20233,25991,0,0,17803,0,0,0,0,0,
				13962,5508,16971,27013,7437,31494,0,0,0,0,0,0,0,0,0,0,4714,0,0,0,0,0,0,0,0,17189
				,0,0,0,0,0,27492,0,0,26953,0,0,0,0,0,0,0,0,0,0,41319,0,0,0,0,0,0,0,0,0,0,0,47430
				,19596,12549,0,0,0,8390,1006,0,0,0,0,0,0,0,0,0,0,24100,17577,4,0,0,0,0,0,22277,0
				,0,0,0,0,0,0,26692,0,0,0,0,0,24676,0,0,0,0,0,0,0,0,0,0,0,0,0,29477,0,0,0,21573,0
				,0,0,0,0,0,0,0,0,0,9864,14214,0,0,0,0,0,0,25771,5766,0,0,8909,8679,0,0,6861,
				16166,0,38887,0,0,0,0,0,0,12392,8678,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				52646,1354,2950,0,14692,0,0,10572,49830,0,0,0,0,0,0,0,0,3626,582,0,0,0,55750,0,0
				,0,30885,0,0,0,0,0,0,0,0,0,0,0,0,0,5830,0,0,2090,0,0,0,0,0,0,0,0,0,0,0,0,31142,0
				,0,0,0,0,10503,0,0,18825,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				57158,0,0,30792,63526,0,0,0,9863,16267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,18824,0,0,0,0,0,0,19653,25388,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9292,0,0,0,0,0,0,0,0,0,0,36358,0,0,0,0,0,0,0,0,
				0,0,25480,23015,0,0,10440,6725,0,0,0,22436,24265,15109,0,0,0,62311,8906,34534,0,
				0,0,0,0,0,15913,1319,0,0,20296,1477,30760,0,25928,16772,0,0,1069,0,0,0,0,0,0,0,0
				,0,0,0,0,17029,0,31909,0,0,0,0,0,0,0,0,0,0,0,41638,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,41542,0,21478,0,0,0,9796,0,0,0,0,0,0,0,0,0,0,22187,58343,0,0,0,24295,0,
				0,0,0,0,61831,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2833,5829,0,0,0,62855,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,16676,0,0,0,0,0,0,13577,27431,0,0,0,0,21480,10501,0,16932,
				0,0,0,0,0,22918,0,48294,2574,2150,0,0,0,0,1897,4518,0,0,0,0,0,0,25064,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47942,0,0,0,0,10990,13767,
				25705,37863,21672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43430,1712,0,0,0,0,
				18886,0,0,0,0,0,0,0,0,0,0,0,0,0,10535,0,0,0,0,0,0,0,15012,0,0,0,0,0,0,0,0,0,0,
				14734,0,0,55782,0,0,30824,10886,0,0,0,0,0,51302,0,0,8012,0,0,0,0,0,20680,6981,0,
				57415,11,0,0,18277,0,14564,0,0,0,32390,0,0,0,0,0,0,0,0,0,0,0,0,19113,5158,0,
				11172,0,16774,0,0,0,0,0,0,0,0,0,0,0,0,10315,13830,0,0,0,0,0,0,10410,7141,0,0,0,0
				,0,18116,0,0,0,44615,15403,13958,0,1540,14632,19525,24201,19781,0,0,0,24165,0,
				38951,0,0,0,0,0,6308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17416,15749,3438,13255,0,0,0,0,
				0,0,0,0,0,0,0,32228,0,0,0,0,176,0,0,50566,0,0,0,0,0,0,0,0,0,0,0,0,0,21540,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,58982,0,0,0,0,0,0,0,0,0,5284,0,0,0,0,0,0,25897,28326,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15945,0,0,0,9804,293,0,0,0,0,0,0,0,13988,23082,4677
				,0,0,0,0,0,0,0,0,0,0,0,5670,0,0,0,0,0,0,0,44070,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,6405,0,30692,0,0,0,61702,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,45926,0,15398,0,0,0,0,0,0,4554,2692,0,0,0,0,0,32485,0,0,0,10084,0,0,0,0,0,0,
				24297,0,0,0,0,0,0,0,0,22790,0,0,0,55110,0,0,0,0,0,0,0,0,0,0,0,0,7112,0,31530,
				45255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40743,17226,22599,0,
				0,0,0,0,0,0,0,3695,0,0,0,0,0,0,0,0,0,0,56999,0,0,0,0,0,13799,3114,21287,1353,
				7591,0,0,0,8455,0,0,6824,0,0,0,0,0,0,0,14569,0,0,0,29000,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,19979,0,18376,0,0,0,0,0,0,0,0,0,0,0,0,11332,0,0,0,49863,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,2191,7527,23148,58022,0,0,0,30631,0,26565,0,0,0,0,0,0,0,0,0,0,0,0,754
				,0,0,15877,0,0,0,0,0,0,0,17510,7657,2821,0,0,0,0,0,0,0,0,0,41927,0,0,0,0,0,0,0,0
				,2569,34439,0,0,3790,0,0,0,15339,8775,0,0,0,0,0,0,0,0,0,0,0,15908,0,0,21419,8359
				,0,0,0,0,424,0,0,0,0,0,0,25318,8008,20551,0,0,0,45735,30058,30372,0,0,0,0,0,0,0,
				0,0,0,0,0,0,26180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31432,10567,0,0,0,0,
				17450,0,0,0,0,0,0,30310,0,38022,0,0,0,0,0,28932,0,0,0,0,0,43910,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,22180,12075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22247,0,0,22826,
				12359,0,0,0,0,4105,50407,0,0,0,0,0,0,13581,28583,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,28936,0,0,0,0,0,17673,10310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,905,57862,
				1580,0,0,0,0,58630,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13479,0,0,
				14153,13286,0,0,9259,0,0,0,0,0,6606,3524,0,0,0,0,0,6567,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,631,49255,0,0,0,0,0,42886,0,38215,0,0,0,0,0,0,0,0,17580,
				0,0,0,0,0,0,0,0,55046,0,0,0,0,0,0,0,0,0,10213,0,0,0,0,3604,37767,0,0,0,0,0,0,0,0
				,0,0,0,30950,0,0,0,0,0,0,0,0,0,62087,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23528,0
				,0,0,0,0,0,0,0,0,28715,4229,0,0,0,0,0,0,0,0,0,0,1226,26820,0,0,0,12133,6984,261,
				21130,32548,0,0,0,0,0,0,3565,12390,20713,28071,0,0,1706,25287,0,0,0,0,0,0,0,0,
				14670,0,0,0,0,0,0,30534,0,0,0,12615,0,43750,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28228,
				0,0,0,0,0,0,0,45095,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1224,3975,10954,6375,0,0,0,0
				,0,0,0,0,0,0,23180,20100,0,0,0,0,25736,8519,0,0,0,0,0,6663,0,2534,0,0,0,0,0,0,0,
				0,23720,0,0,0,0,0,0,0,0,0,0,19398,0,47814,26281,49702,0,0,4332,12965,0,0,5704,
				3206,0,0,0,0,0,0,0,0,0,0,0,0,0,15396,0,0,0,44102,0,0,0,0,0,0,0,0,0,0,0,0,0,25317
				,1064,39271,27433,0,14952,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14308,0,0,0,0,0,0,2763
				,4100,0,0,0,0,0,0,18792,0,0,0,22154,32583,0,6244,0,0,0,0,0,0,0,49478,0,0,0,0,0,0
				,0,0,0,0,0,21894,0,0,11048,0,0,0,0,0,0,11685,0,53862,0,0,15114,0,13870,0,0,0,0,0
				,0,0,919,0,0,0,31916,0,22570,101,0,0,0,0,0,0,0,0,0,7333,0,0,0,0,3272,0,0,0,0,
				27718,32712,0,0,0,0,0,0,0,0,0,1782,0,3688,0,0,0,0,29862,0,0,0,0,0,0,0,22469,0,0,
				0,0,0,0,0,55302,850,15492,0,0,0,5927,19786,13350,0,25702,0,0,0,0,0,0,0,0,0,0,0,
				40390,0,0,0,0,0,0,0,0,0,0,0,0,0,20260,0,0,0,0,0,0,0,0,0,0,0,0,0,15335,8394,0,0,0
				,0,0,0,26566,0,0,0,0,843,2245,0,0,0,0,0,0,0,0,6959,0,20488,1638,0,0,11533,50759,
				0,0,0,0,0,20871,0,0,0,0,0,24519,0,0,0,0,9544,23591,0,0,0,0,0,0,0,0,0,0,20969,
				7109,29001,0,0,32422,31720,64294,0,0,0,0,16106,0,0,0,6930,4933,0,0,0,22917,0,
				27015,0,0,0,0,19880,8070,0,0,0,0,23945,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				3310,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18439,0,0,0,20742,0,0,0,10597,0,0,0,0,0,0,
				0,0,0,0,0,0,20236,0,0,0,16584,3429,0,0,0,0,0,0,0,0,27241,0,0,0,0,16132,0,0,0,0,0
				,0,0,0,0,0,0,0,244,28261,0,0,0,0,0,0,0,29509,0,0,0,0,0,0,0,0,2921,31781,0,0,0,0,
				0,0,6408,4196,344,0,0,0,0,0,0,0,0,0,0,0,0,0,11689,45863,0,0,0,0,906,3301,0,0,
				25544,32421,0,0,0,0,0,0,0,0,1260,61607,0,27302,0,0,8682,16614,0,0,0,0,10830,0,0,
				9604,15049,13413,0,0,0,0,0,0,26761,0,0,0,0,0,0,61990,0,0,0,0,0,12580,0,0,11432,0
				,0,0,0,0,22507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12389,0,0,0,0,0,0,
				2408,22661,14507,43239,0,9700,0,0,24714,0,0,0,0,0,0,0,0,23972,0,0,0,0,0,0,0,0,0,
				0,0,0,0,34086,0,0,22955,7238,0,0,0,0,0,28485,13806,20038,0,0,0,0,22602,0,0,0,
				1645,22340,0,0,0,0,0,0,0,0,0,0,0,26502,0,0,554,0,0,0,0,61735,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,2694,0,0,0,0,0,0,0,0,0,0,0,0,0,0,883,27879,15948,0,3242,57382,0,0
				,0,0,0,0,13930,0,0,0,0,0,30922,0,4137,52615,0,0,0,0,0,0,0,0,0,0,0,0,0,31911,
				16072,0,0,0,0,0,0,0,0,0,0,0,0,26340,0,61671,0,0,0,0,3145,56199,0,0,0,0,0,0,0,0,0
				,0,0,0,280,0,5131,33479,0,15751,0,0,0,0,0,0,4136,1446,0,0,0,0,0,0,11304,17863,0,
				0,0,0,0,25125,0,0,0,36646,6057,0,0,0,855,11301,0,0,0,0,0,64774,0,0,0,19397,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,1040,27367,0,0,0,0,0,0,0,0,0,0,0,0,0,64358,0,0,178,
				132,0,0,14763,24455,0,0,0,46374,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46246,0,0,0,37382,
				0,0,0,7462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8166,0,0,6921,0,0,0,9163,0,0,0,119,
				0,0,0,23146,17156,0,0,0,0,0,9127,0,0,0,17927,0,0,0,0,0,22084,0,0,0,0,0,39879,0,0
				,2035,0,1067,0,0,0,0,0,16652,59591,0,0,0,0,0,0,0,0,0,0,0,0,20171,0,0,0,0,17733,0
				,0,0,0,0,32037,0,0,0,0,0,14277,0,0,0,0,0,0,0,42022,0,0,26793,20358,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,8907,0,0,0,0,0,0,0,0,27780,0,0,0,0,32330,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,39399,0,9732,0,16199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,854,0,2984,45063,25418,26980,22539,0,9133,3653,15528,28743,4649,0,616,
				65127,0,0,0,61863,0,0,0,0,0,0,0,55303,0,0,0,0,0,0,0,0,23880,0,0,0,0,0,0,0,31848,
				62854,0,0,0,0,0,0,0,0,0,0,0,49606,0,27974,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,32580,0,0,0,26052,4043,0,0,40454,0,0,26056,30565,0,0,0,0,0,0,0,31398,0,0,0,0
				,0,0,0,0,29288,1797,0,0,3220,0,0,0,0,0,0,0,0,0,20427,0,0,0,0,23621,0,0,0,0,0,0,0
				,0,0,24261,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35591,0,0,6862,0,0,0,4265,0,6285,
				5383,0,0,0,0,0,36870,0,39847,0,0,17224,5414,27882,58118,0,0,13224,4262,0,0,0,
				31302,0,0,1388,2982,11881,0,0,0,0,0,0,16837,809,0,24140,10724,0,0,0,0,5835,0,0,0
				,0,0,0,0,0,0,0,0,1256,19237,0,0,0,0,0,0,0,5796,11848,0,0,52870,11464,0,0,0,0,0,0
				,0,0,0,5645,9158,0,25223,0,0,0,0,0,39142,24968,8135,32104,28678,0,0,0,46311,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23820,0,0,0,0,0,4050,0,1323,25220,0,0,0,20133,0,
				0,0,0,0,0,0,0,0,0,0,9381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,13444,1198,60806,0,0,0,0,17356,50247,30632,0,0,0,0,0,0,0,11944,
				999,0,0,0,0,4010,10404,0,0,0,0,0,0,10346,0,0,49510,0,0,0,0,0,0,0,0,0,0,0,0,0,
				38919,0,0,0,0,0,0,6351,60966,20137,487,0,0,0,0,0,0,655,2406,17387,43303,0,0,0,
				17063,0,0,213,0,0,0,0,0,0,17221,0,0,0,0,0,0,0,0,0,0,0,10820,0,0,0,0,369,6,0,0,
				9098,21093,0,31653,0,0,0,0,0,0,0,0,0,27143,0,0,16234,0,0,0,0,0,0,0,0,6020,31723,
				28293,0,0,0,0,1936,30695,0,0,0,0,0,52902,0,0,29512,10791,0,20420,0,0,16010,0,0,0
				,0,0,0,0,0,0,0,0,5324,0,0,0,0,0,0,0,0,0,0,0,0,13383,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,24328,0,0,0,0,0,0,40870,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,24648,0,0,0,0,0,0,0,7786,2852,0,0,0,0,0,0,0,0,0,44678,0,17925,0,0,105,53062,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18762,0,0,40679,0,0,0,16165,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,20390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62310,1322,
				14247,0,0,0,0,0,0,0,0,1832,6052,0,0,11882,0,0,0,0,17668,0,28262,0,29542,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28007,0,0,0,57223,
				1585,0,0,0,0,0,0,0,0,0,0,0,21162,0,0,62247,0,0,0,0,0,25414,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,36326,0,0,0,23845,0,0,0,0,0,0,0,2693,0,0,0,0,0,0,0,
				13125,0,31236,0,0,0,0,0,22502,0,0,0,0,0,0,5994,10309,0,0,0,7269,0,0,0,0,17929,0,
				1011,44647,0,0,0,0,0,14919,0,0,0,0,20586,5350,0,0,0,45702,0,13189,0,0,0,0,0,0,0,
				0,0,35782,17992,0,0,0,0,0,8203,0,0,0,0,0,0,56678,0,0,0,0,0,38087,4233,0,2127,0,0
				,0,0,0,0,0,0,0,0,10148,0,0,0,2021,0,0,0,0,0,0,0,47206,0,0,0,0,0,0,0,9220,0,0,0,0
				,19465,0,0,0,0,0,0,0,0,39206,0,38055,0,0,0,0,0,0,0,46982,0,0,0,0,0,22054,3850,0,
				0,0,0,0,0,0,55,0,10542,0,0,0,0,7239,0,0,0,0,0,59367,0,0,14761,0,0,0,0,43079,0,0,
				0,0,0,2726,0,0,9582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37478,0,
				0,0,31364,0,0,0,0,0,0,0,0,20393,8933,0,0,0,0,0,9380,0,0,0,0,16905,549,0,0,0,0,
				182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1558,0,0,0,0,0,0,0,19242,0
				,0,0,0,0,0,24933,0,6276,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42310,23595,
				24068,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13191,6158,2567,0,0,268,47047,0,0,0,0,0,0,0,
				0,0,27940,0,0,0,0,0,26726,0,0,0,0,8200,1222,31562,0,0,0,0,0,0,0,0,0,2922,8231,
				8904,29157,0,0,0,0,0,0,0,0,23976,4836,0,0,0,0,0,0,0,0,0,0,0,0,31658,0,0,31685,0,
				0,2889,6213,0,0,0,0,0,13605,0,0,0,0,0,24772,0,0,0,0,0,0,0,0,0,0,20684,26468,
				24075,0,0,0,21193,0,715,679,0,0,0,0,0,0,3050,7654,0,0,0,13798,0,0,0,0,15,27973,0
				,0,8491,2086,0,0,0,43206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60391,0,0,0,0,0,0
				,0,25892,0,22276,0,34374,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20165,0,0,25672,0
				,0,0,1811,24839,0,31044,0,0,25513,0,0,0,0,0,12810,0,0,62438,0,0,1325,0,364,3782,
				0,0,0,0,0,0,0,0,8042,19687,0,0,0,33415,0,0,0,0,0,0,0,0,0,0,0,7205,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,11844,0,0,0,0,3341,1543,6698,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,29766,0,0,0,0,0,0,0,0,0,0,0,41158,0,24294,0,3844,12329,
				0,0,0,13738,0,0,0,0,0,0,0,0,26245,0,0,0,0,0,0,6378,0,343,4838,0,0,0,24358,11688,
				0,0,0,0,0,0,0,0,0,1489,34759,0,0,0,0,363,51974,1878,11013,0,0,32265,59782,0,0,0,
				28421,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22756,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14089,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,29257,61222,0,30661,0,28327,0,0,0,0,0,0,0,0,0,0,0,0,0,
				27108,8843,0,9673,2084,0,0,0,16327,0,48455,0,0,0,0,0,0,4876,9316,0,0,0,0,0,0,0,0
				,0,0,0,0,9035,18852,0,0,0,0,0,0,0,0,0,0,0,0,0,4164,0,0,14827,1349,0,0,0,0,0,
				11909,0,0,0,0,0,0,0,0,0,21765,0,0,0,0,0,0,0,0,31272,63910,0,0,0,25924,0,0,0,0,0,
				0,0,0,0,44487,0,0,0,20612,0,0,27754,31428,0,0,0,0,0,0,0,17287,0,3943,0,0,0,63302
				,0,0,0,0,25256,19942,0,55142,0,39046,0,0,0,0,0,0,0,15367,0,0,0,0,0,0,0,0,0,0,0,
				28422,0,0,0,0,0,0,0,0,0,0,0,0,9576,63847,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,25226,5734,0,0,0,0,0,0,13801,4997,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,43942,1270,2566,6284,0,0,16230,0,0,0,20678,0,0,0,0,0,38855,0,0,0,0,
				29643,0,0,0,41,3655,0,0,0,0,0,14276,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,15686,0,0,0,15718,0,50694,0,0,16232,8007,0,0,0,5060,
				329,11591,51,0,0,0,0,0,0,0,0,0,13065,7302,27530,15366,0,24934,0,0,0,17828,0,0,
				4552,6311,0,0,0,0,0,0,0,0,0,0,0,47686,368,12103,10122,33830,0,0,599,18534,9579,
				49479,0,5668,0,0,0,0,0,0,0,0,0,13157,0,0,0,0,23274,14055,0,0,0,0,0,48903,0,0,0,0
				,0,0,1871,0,15434,0,0,0,16174,62470,0,0,0,0,0,0,0,0,0,0,0,7749,0,0,0,0,0,0,0,
				30501,0,0,0,0,25675,0,0,0,0,0,0,0,0,0,0,9285,0,0,25323,1669,0,0,0,0,0,0,0,0,0,0,
				0,3588,0,0,0,0,0,32902,0,0,4426,0,0,0,0,57959,0,0,0,0,0,0,29898,58278,0,0,0,0,
				11880,1220,0,0,0,41479,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23141,0,0,0,0,0,0,0,0,0,0,0
				,0,0,42566,0,0,0,0,0,0,0,40167,9484,3493,0,0,0,0,0,21126,0,0,0,0,8649,18918,0,0,
				0,0,0,0,0,34886,2601,0,0,0,0,12518,0,0,0,0,7976,10311,0,0,0,0,0,0,0,45190,0,0,0,
				0,0,0,0,0,0,0,16842,20229,0,0,0,0,0,0,7528,4614,0,0,0,0,0,30086,0,0,0,1671,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,9896,6277,0,0,0,0,0,61191,0,41287,0,21956,0,0,20010,0,0,0
				,0,0,0,0,0,0,0,0,13195,0,0,0,0,1381,0,0,0,0,365,30951,24268,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,7044,0,0,0,0,0,0,0,0,0,0,27944,359,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,28487,0,0,77,0,0,0,0,0,0,0,0,56775,12586,8421,0,0,0,0,0,0,26185,14599,0,0,
				8040,5702,12585,3109,0,0,0,0,0,21574,5388,0,0,0,0,0,0,0,5106,52454,0,0,0,0,0,0,0
				,0,1907,29895,0,6116,0,0,0,0,11081,5285,0,28069,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4104
				,0,0,0,0,0,0,41511,0,0,0,0,0,0,5262,0,0,0,503,4231,7720,34343,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7304,10374,1718,0,0,29127,0,0,0,0,0,0,0,0,23497,
				22567,6952,2340,0,0,0,0,0,0,0,0,20360,12453,0,45094,0,0,0,0,0,28582,0,0,0,0,680,
				0,0,0,0,0,0,0,0,0,0,0,0,0,23084,0,0,0,30696,0,0,0,0,45862,0,0,0,0,0,0,0,0,0,0,0,
				0,5580,6053,0,0,0,0,0,0,0,0,0,0,712,70,0,0,26091,11335,0,0,0,0,13612,0,13160,
				1926,435,51559,0,0,0,0,0,0,0,0,0,0,0,0,0,47302,19083,0,0,12742,0,1607,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,6155,37095,0,0,0,0,0,18948,7146,0,0,0,0,0,0,0,7848,
				2055,0,0,0,0,8910,0,19336,0,0,48070,8490,0,0,0,0,0,0,0,9932,56423,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,4133,0,0,0,0,0,0,0,0,0,43398,0,0,0,0,0,0,0,0,16173,0,0,0,0,0
				,0,0,32011,0,0,30918,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26854,0,0,0,0,0,0,0,0,0,0,0,0
				,0,20389,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18889,0,0,0,0,8965,0,0,0,44358,0,0,0,8997,0
				,34055,0,0,0,0,0,29350,0,0,501,17767,0,0,32457,60262,0,0,0,30886,0,0,3757,1063,0
				,0,0,25637,0,0,0,0,0,28068,0,26374,0,0,0,0,0,0,0,0,0,0,0,11684,0,0,0,0,0,0,24779
				,229,0,13766,0,0,7402,11525,0,0,0,0,0,0,0,0,26313,23686,0,0,29736,47527,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27268,0,0,0,0,553,0,0,0,0,0,0,32038,0,0,0,0,1135,
				26596,0,0,12300,14631,0,0,0,43238,0,871,0,0,31496,0,8457,17669,0,12836,0,0,0,
				22726,0,38758,0,0,375,6564,0,0,0,0,0,0,0,0,0,0,0,0,170,18535,0,22948,0,0,32360,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,25764,0,0,0,0,0,0,0,0,0,0,0,15652,0,0,0,32774,0,0,0,0
				,0,0,0,0,0,28551,0,0,0,0,0,0,0,0,0,0,0,0,15145,0,0,0,21100,27654,0,0,0,0,0,0,
				4874,26215,0,1639,0,0,0,0,0,0,0,0,0,0,4169,0,0,0,0,0,7336,0,0,0,0,21572,0,0,0,0,
				0,0,0,0,0,24644,1675,2533,0,0,0,53318,0,13094,0,0,0,0,0,0,0,6246,0,22020,0,0,0,0
				,0,0,0,0,0,0,0,28453,5576,5124,0,0,0,0,0,0,0,0,0,0,0,0,0,27910,0,29382,18216,
				8583,0,0,0,39174,0,43558,0,0,0,0,0,0,0,0,0,11973,0,0,0,0,0,23397,0,0,0,0,6091,0,
				0,0,0,0,0,0,6474,16197,14217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,26728,0,567,48839,0,0,0,0,0,15271,0,0,31818,43974,2450,0,0,0,0,0,0,0,
				11368,9191,0,44454,0,0,0,0,0,0,14568,12293,0,0,0,8453,0,0,0,0,0,0,0,0,0,0,0,0,
				32040,0,0,0,0,0,0,0,0,0,0,0,0,902,0,0,0,27236,5612,11495,0,0,0,0,0,0,0,0,9194,
				23684,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27430,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				26217,44870,0,0,0,0,0,0,5581,7173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				52775,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20968,18340,0,0,0,0,0,0,0,0,4107,11239
				,0,0,0,0,0,0,0,0,0,0,0,29381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21990,0,0,0,0
				,0,0,0,0,0,48806,0,0,0,32292,0,0,0,0,0,0,0,10884,0,0,0,0,0,0,0,0,0,0,27562,0,
				5643,0,0,0,0,0,0,0,0,0,3089,31525,0,19684,0,0,0,0,0,0,0,61415,0,0,0,0,0,36198,0,
				0,0,0,0,0,0,7908,0,0,0,0,872,743,0,0,0,0,0,0,0,0,1229,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,32484,0,0,0,0,0,34822,0,0,0,0,0,50726,0,0,0,0,7274,0,0,0,15304,
				11526,0,0,0,3047,0,0,0,0,0,0,22376,0,0,0,846,0,0,0,0,35815,0,0,0,23652,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,23721,2148,0,0,0,0,0,0,14856,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,1358,0,3082,0,0,0,848,10949,0,0,0,0,0,0,6504,0,0,14372,0,0,0,0,0,0
				,0,0,0,0,8201,9958,0,0,0,0,0,0,24266,0,0,0,0,0,0,0,0,26469,0,0,0,0,18604,2053,0,
				33511,0,0,0,0,0,9222,0,0,0,0,0,44006,0,0,0,0,0,0,0,0,0,0,0,41895,0,0,0,0,0,0,0,0
				,12044,390,0,0,0,0,0,4935,0,48646,0,56102,3052,16070,0,0,0,0,0,0,0,8612,9320,
				38311,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,0,0,0,0,42918,0,
				32550,0,0,0,0,0,0,0,0,27434,57926,17064,0,0,46502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,26760,6756,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,624,0,5000,0,0,0,0,32293,0,
				0,0,0,0,0,0,0,0,0,0,0,0,26246,0,0,0,0,0,0,0,0,23,7301,0,0,0,36199,0,40838,0,0,0,
				0,0,0,0,0,0,0,0,0,27178,57350,0,0,12457,9317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16810,0,0,0,14510,0,0,0,0,21319,0,0,0,13508,17,
				11365,0,0,0,0,5291,0,8329,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27685,0,0,0,0,0,0,0,
				52006,0,0,0,7493,0,44263,0,0,0,0,0,0,0,0,9800,0,0,0,25676,61478,0,0,0,0,0,0,5773
				,0,0,0,0,41991,26057,0,0,0,0,0,0,0,0,0,0,22629,0,0,0,47783,362,1959,23468,0,0,0,
				10921,0,0,0,3150,0,0,0,0,0,0,0,0,0,0,0,32456,0,0,0,0,0,0,0,4559,3270,0,0,983,0,0
				,26343,0,33446,0,0,0,61767,0,48390,0,0,0,0,0,0,0,2790,0,39782,7849,0,0,0,0,0,0,0
				,1544,2183,0,0,0,0,0,0,0,0,4040,2471,20009,30020,0,0,11242,0,0,0,5578,53382,0,
				22631,0,0,0,0,0,0,0,0,0,0,0,12901,0,0,0,0,0,0,0,0,0,0,0,0,215,0,0,9030,0,0,0,0,0
				,0,265,1412,0,0,11626,3687,0,0,0,0,0,0,0,0,0,0,0,0,17449,24359,0,0,26729,40134,0
				,0,0,0,29768,61958,0,0,0,0,0,0,0,0,20908,0,0,0,0,0,11016,0,0,47462,21547,5926,0,
				0,14728,2983,24104,15301,0,0,0,0,0,32645,0,0,0,0,0,0,0,3300,0,0,0,15972,0,0,0,0,
				0,0,6634,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3076,0,30983,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,106,0,0,0,0,12775,0,0,0,0,7177,18022,0,0,0,0,0,22534,0,0,0,0,0,0,0,0,0,0,0,
				49894,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27560,0,0,0,0,30278,10668,23877,0,
				0,0,0,0,0,0,29124,0,0,0,0,0,0,0,0,0,0,0,0,0,20870,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,44582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48454,0,0,0,0,6442,0,16330,22951,0,0
				,16904,0,0,0,0,644,0,0,0,40038,0,0,0,37222,0,0,0,9830,0,0,0,0,0,34919,0,0,0,0,0,
				0,0,0,0,0,0,13733,0,0,0,28196,0,0,0,0,0,19876,0,0,0,0,0,0,0,23558,0,11142,0,
				27781,0,0,0,0,13864,0,0,0,24682,47847,0,0,0,0,6890,0,0,0,0,0,3981,0,0,0,0,0,0,0,
				0,0,0,0,1772,0,0,0,0,0,0,0,3603,1991,0,27396,8652,0,18312,0,0,0,0,30054,0,0,0,0,
				0,0,0,11270,0,0,0,0,0,0,0,0,0,20708,0,0,0,0,338,0,0,0,0,0,0,0,7050,0,0,0,0,0,0,0
				,0,0,0,0,0,0,14862,0,0,3492,0,0,0,55878,0,0,0,16486,0,0,0,18119,0,0,0,0,0,0,2154
				,1284,0,0,23113,31751,0,0,29547,0,0,0,0,0,0,36647,0,0,0,0,0,0,0,0,0,0,0,18183,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,7913,0,0,0,0,20644,0,0,10508,0,0,0,0,0,0,0,0,0,0,0,0,
				43622,0,0,0,0,0,40966,0,0,0,0,0,0,0,0,0,0,246,901,11529,5191,0,0,0,0,0,0,0,0,0,0
				,0,24454,0,0,26665,27590,0,27397,0,0,0,0,0,0,23562,2949,0,0,30344,62214,0,47334,
				2026,18885,0,0,0,48678,0,0,0,22694,0,0,1972,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,15465,0,0,0,0,38822,0,0,0,0,945,32708,0,54791,0,14918,0,0,0,0,0,0,
				0,0,0,0,0,0,0,23396,0,0,0,0,0,0,5486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7722,0,0,
				0,0,0,0,0,0,0,0,0,30856,64166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35206,0,0,0,30535,0,
				0,0,0,0,0,0,0,0,62663,0,0,1096,17574,31820,0,0,14375,4402,27207,0,0,21448,4676,0
				,0,0,0,16585,5094,0,0,0,0,0,0,0,0,4845,0,0,32870,0,0,0,0,0,0,0,0,0,0,31466,0,0,0
				,0,31783,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4522,16039,0,0,0,0,0,0,0,0,
				0,14469,0,0,0,0,0,0,0,0,0,0,7464,4773,0,0,0,0,0,0,0,0,18636,0,0,0,25640,0,0,0,0,
				0,0,2244,0,0,11818,0,1168,0,0,0,0,0,0,0,6540,23079,13770,7719,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58150,528,
				34502,32682,0,0,12997,0,0,0,0,0,2214,0,0,0,0,0,58567,0,0,0,26375,0,0,0,0,0,0,0,0
				,0,26437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,32005,22952,59047,0,13543,0,0,0,0,0,0,0,0,16328,0,0,33542,0,0,0,19782,0,0,0,
				16644,0,0,0,0,31688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10276,0,0,0,
				0,0,0,0,36327,0,0,29480,0,0,0,777,12709,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27398,0,0,
				0,4455,9037,31397,0,9221,0,0,0,60487,20840,1796,0,0,0,0,0,0,0,0,8364,0,0,0,0,0,0
				,0,0,0,0,0,19752,44902,0,38566,0,0,18027,0,0,0,0,0,0,0,0,10662,0,0,0,0,0,11812,0
				,0,0,0,0,0,0,0,0,19910,0,0,0,45030,0,0,0,0,0,0,0,0,0,0,0,0,19978,5127,0,11620,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,19817,0,5579,9350,0,0,21002,19718,0,0,0,21926,0,0,0,0,0,0,0,0,0,0,0,0,0,20711,
				0,0,0,20197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40550,0,0,0,57510,0,0,0,53895,
				0,0,15017,0,17000,39367,2347,0,0,0,0,0,0,0,0,0,8588,0,0,0,0,0,3273,17862,3498,
				2085,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19048,0,0,0,0,0,11978,58631,0,0,0,0
				,0,0,523,0,12969,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28197,0,47846,0,0,0,0,0,0
				,0,0,0,4549,0,0,0,0,0,0,0,0,0,0,687,14917,748,8229,0,0,0,0,0,0,2476,12935,0,0,0,
				0,0,0,22792,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27528,59142,0,0,20876,20134,0,0,0,
				0,440,12068,0,58951,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48038,0,0,0,60999,0,0,0,0,
				0,0,0,0,0,0,0,0,0,15716,7498,5476,0,0,0,0,20202,37959,0,0,0,0,0,0,0,0,0,0,0,0,
				29801,0,5451,0,0,0,0,0,0,0,0,0,0,50790,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24485,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13573,0,0,22856,0,0,0,0,21927,0,0,0,0,0
				,0,9130,0,0,0,0,0,0,13732,0,0,0,0,0,0,0,0,0,0,2282,583,0,0,0,0,0,0,0,0,0,0,3726,
				26503,0,0,0,0,0,0,9258,0,0,0,0,0,0,0,0,21604,0,0,0,45574,0,0,0,0,0,20710,0,0,0,
				42694,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1163,6694,0,0,0,0,0,0,0,10948,0,0,0,29700,0,0,
				0,0,0,58823,3796,27399,20939,10180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				19,29287,28649,14534,0,0,16428,45607,0,0,0,0,0,0,25322,0,4908,0,0,0,0,0,0,25476,
				29097,14246,11053,0,0,0,0,0,0,0,0,18502,0,0,0,44390,0,0,0,17765,0,0,0,0,0,0,
				24520,0,0,0,0,0,0,0,0,0,0,17319,0,0,0,0,0,0,0,0,0,0,0,0,0,28166,0,0,0,0,0,48198,
				0,0,31467,0,24585,0,0,0,0,18692,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23596,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,7236,968,13637,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				3763,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14791,0,0,0,12324,0,12741,0,0,0
				,0,0,0,0,0,0,11108,0,0,0,0,4009,40295,20616,4357,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				15015,0,0,0,0,0,43751,0,0,0,0,0,0,0,0,0,0,0,23013,0,0,0,0,0,0,0,0,0,0,0,0,0,
				45542,0,0,0,0,0,0,0,0,0,23974,0,0,0,0,17480,20647,0,0,0,0,0,0,8876,0,0,40806,0,0
				,0,0,0,0,0,14502,17160,17764,0,0,31594,35431,0,0,2890,0,0,0,0,0,0,0,0,27524,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8228,0,56583,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,34278,0,0,0,0,0,0,0,0,0,0,0,0,0,2662,0,26724,0,0,0,0,0,0,0,64198,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3049,
				54983,0,0,0,0,0,0,0,837,0,17604,0,0,0,0,0,28838,0,0,0,0,0,0,26312,0,0,3910,0,0,0
				,25830,0,0,0,0,0,8391,0,19845,19240,1092,0,0,5449,0,0,0,0,17188,0,0,0,0,0,0,0,0,
				0,10629,0,0,6671,61094,5832,8358,0,0,0,55078,0,0,0,0,0,29860,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,51494,0,28647,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25989,0,0,30153,61318
				,0,0,0,0,0,0,0,24903,0,0,0,4388,0,42054,0,0,0,0,0,0,0,53158,0,0,0,0,0,0,0,50918,
				0,0,0,0,0,0,26251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5929,2853,0,37126,
				7372,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2027,934,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,55686,0,0,5672,5447,0,62758,0,0,0,0,0,0,0,0,0,0,0,0,2923,0,556,1415,
				0,0,0,0,0,0,0,0,0,8645,0,9477,0,0,0,0,0,0,0,48742,0,0,0,0,0,0,0,0,0,0,24235,228,
				0,0,0,0,0,0,0,0,0,0,16970,18823,0,0,0,0,0,0,0,0,0,25158,0,0,0,0,0,18567,20072,
				2823,14313,1830,0,0,0,0,0,0,0,0,27048,23526,0,0,0,0,0,997,492,0,14730,16677,396,
				13574,0,0,0,41671,0,0,0,0,0,0,0,19045,0,0,0,421,17545,3110,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,47111,14475,56551,0,0,0,0,0,0,0,0,0,0,3697,0,0,0,0,0,0,49382,0,35559,0,
				0,0,0,40,0,11496,15621,0,8550,0,0,0,63462,0,0,0,0,0,0,0,36966,0,50406,0,46022,
				1001,0,0,12069,3249,0,0,0,0,0,0,0,0,0,0,0,0,0,15241,0,0,0,0,0,0,0,0,64743,0,0,0,
				0,0,58759,0,0,0,0,1136,26981,0,0,0,0,0,0,0,17732,0,0,0,17157,20011,6629,0,43879,
				0,0,0,13572,25128,10759,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28676,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,875,24007,0,0,0,0,7628,0,0,0,0,0,12268,0,0,0,0,0,0,0,0,19300
				,23210,356,0,0,0,0,0,0,0,0,0,15236,0,0,0,0,0,49670,0,0,0,0,0,0,0,21764,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,13931,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45799,0,0,436,3589,
				0,0,11402,0,0,0,0,0,0,0,0,0,0,62822,0,0,0,39814,588,0,0,0,0,0,0,27750,0,0,0,0,0,
				0,1609,22660,2346,18951,0,16068,0,0,0,0,0,0,5162,11110,0,0,0,0,15048,1060,0,7879
				,18280,326,0,14886,19656,0,7594,0,0,0,0,0,781,581,0,16198,0,0,0,0,0,0,1078,9892,
				0,0,0,0,0,0,0,0,0,0,4489,0,0,0,0,33798,0,0,0,54534,0,0,0,0,0,0,0,33158,0,0,0,0,0
				,0,0,0,0,42086,13834,2757,8456,16773,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3434,0,0,0,
				0,0,3946,29668,0,0,30634,36775,0,0,0,0,0,24901,0,16069,6280,0,0,0,0,41990,0,0,0,
				0,0,0,0,27365,0,0,0,0,0,0,0,0,0,0,1450,44807,0,0,0,32100,0,0,0,0,0,35110,0,0,0,0
				,0,0,0,0,17448,19591,0,0,0,0,0,0,0,0,0,0,0,0,1739,0,0,0,0,5511,0,0,0,32934,0,0,0
				,0,0,0,0,0,0,18180,0,0,0,23428,19754,0,0,31174,3021,31655,23464,0,0,0,0,0,0,
				57255,0,0,21292,64487,0,0,0,0,0,0,25802,9189,0,0,0,0,0,49254,0,0,0,0,0,0,0,0,0,0
				,5837,50023,0,0,0,0,0,0,0,0,0,15495,0,0,0,0,0,51942,0,0,0,0,0,0,0,0,28104,58662,
				0,50214,0,0,0,0,0,0,0,0,2988,0,22888,31812,0,0,0,0,0,2020,0,18916,0,0,0,0,0,0,0,
				23973,0,0,0,0,17516,11717,0,0,0,55911,0,0,0,0,0,0,0,2855,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,46822,0,24710,28586,0,0,0,1556,0,0,30117,0,0,22090,57127,3403,14087,0
				,0,0,0,0,0,0,0,0,0,1041,0,10633,6916,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27269,0,0,13322,18055,0,29380,0,56454,0,0,120
				,0,0,8773,0,0,0,0,16040,0,0,0,0,0,0,0,27242,23781,0,1572,0,28134,0,0,1512,0,0,0,
				0,0,0,27684,0,38470,0,0,0,0,0,0,1513,8709,0,0,0,0,0,0,0,0,0,0,0,46566,0,0,0,0,
				28521,61159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24356,0,0,0,0,0,0,0,0,0,13028,0,
				5863,0,0,15693,0,0,0,0,0,0,0,1131,23398,0,0,0,0,0,0,0,26212,0,0,0,0,0,0,0,0,0,0,
				0,0,0,18404,0,0,0,0,1457,26183,0,0,2475,7110,0,0,0,0,27180,60166,0,0,0,20262,0,
				41862,0,0,0,0,0,0,0,0,0,0,2762,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26148,0,0,0,0,0,0,0,0
				,0,28229,0,0,0,29254,0,0,0,0,0,0,0,0,0,0,27690,0,0,13636,12776,1862,0,0,0,0,0,0,
				17225,3271,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,4457,18117,0,2023,402,0,0,0,0,0,0,0,0,0,0,0,0,0,104,3654,0,0,
				0,0,0,0,0,0,18440,0,0,0,0,0,0,0,0,29861,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,22150,0,0,0,0,0,0,0,0,0,0,0,0,24074,0,0,0,0,0,0,0,0,12004,0,32358,
				0,0,3081,0,0,0,0,0,0,0,0,0,4749,0,0,0,0,0,0,0,0,0,0,0,10792,1799,21322,0,7880,
				12613,0,0,0,0,0,0,0,0,13993,0,0,0,16202,0,0,0,0,32102,0,37223,0,10500,0,0,0,0,0,
				0,0,0,32008,0,0,0,0,0,23816,3236,0,0,0,0,0,23237,0,0,5642,0,4684,294,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,26852,0,0,0,0,0,0,7148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,7890,61798,939,0,0,56679,0,0,0,0,0,27078,202,5029,0,0,0,0,0,
				0,0,0,0,28005,0,0,15273,24741,5676,20452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55910,0,0
				,0,0,5069,27942,0,21092,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12517,0,0,0,0,0,0,
				0,0,0,0,0,0,21384,28260,0,2502,20108,0,0,0,0,0,0,0,0,0,0,0,0,46726,0,30790,0,0,0
				,0,0,14725,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1099,6372,0,0,0,12422,15182,0,8683,0,
				10665,19462,0,0,0,0,0,0,1590,0,31628,0,22632,19750,0,0,0,0,0,0,0,24198,0,0,0,0,0
				,50662,0,0,0,0,0,0,0,0,0,0,9131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11015,0,0,0,0,0,0,0,
				0,16490,54695,0,0,0,0,0,0,0,0,12937,0,0,0,0,16004,0,0,0,0,0,0,0,0,0,2181,6923,0,
				0,0,0,0,0,0,15624,11302,0,0,5673,7559,0,0,14668,15684,0,0,0,0,0,0,24204,48134,0,
				24230,0,55527,0,0,3464,19141,0,0,0,0
			};

			internal static unsafe BrotliEncoderState BrotliEncoderCreateInstance(brotli_alloc_func alloc_func, brotli_free_func free_func, void* opaque) 
			{
				BrotliEncoderState state = CreateStruct<BrotliEncoderState>();
				BrotliInitMemoryManager(ref state.memory_manager_, alloc_func, free_func, opaque);
				BrotliEncoderInitState(ref state); return state;
			}

			private static void BrotliEncoderInitParams(ref BrotliEncoderParams params_) 
			{
				params_.mode = BROTLI_DEFAULT_MODE; params_.quality = BROTLI_DEFAULT_QUALITY;
				params_.lgwin = BROTLI_DEFAULT_WINDOW; params_.lgblock = 0;
				params_.size_hint = 0; params_.disable_literal_context_modeling = false;
			}

			private static unsafe void BrotliEncoderCleanupState(ref BrotliEncoderState s) 
			{
				BrotliFree(ref s.memory_manager_, s.storage_); BrotliFree(ref s.memory_manager_, s.commands_);
				fixed (RingBuffer* rb = &s.ringbuffer_) { RingBufferFree(ref s.memory_manager_, rb); }
				fixed (HasherHandle* h = &s.hasher_) { DestroyHasher(ref s.memory_manager_, h); }
				BrotliFree(ref s.memory_manager_, s.large_table_);
				BrotliFree(ref s.memory_manager_, s.command_buf_);
				BrotliFree(ref s.memory_manager_, s.literal_buf_);
			}

			/* Deinitializes and frees BrotliEncoderState instance. */
			internal static unsafe void BrotliEncoderDestroyInstance(ref BrotliEncoderState state) { BrotliEncoderCleanupState(ref state); }

			private static unsafe void BrotliEncoderInitState(ref BrotliEncoderState s) 
			{
				BrotliEncoderInitParams(ref s.params_);
				s.input_pos_ = 0;
				s.num_commands_ = 0;
				s.num_literals_ = 0;
				s.last_insert_len_ = 0;
				s.last_flush_pos_ = 0;
				s.last_processed_pos_ = 0;
				s.prev_byte_ = 0;
				s.prev_byte2_ = 0;
				s.storage_size_ = 0;
				s.storage_ = null;
				s.hasher_ = null;
				s.large_table_ = null;
				s.large_table_size_ = 0;
				s.cmd_code_numbits_ = 0;
				s.command_buf_ = null;
				s.literal_buf_ = null;
				s.next_out_ = null;
				s.available_out_ = 0;
				s.total_out_ = 0;
				s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING;
				s.is_last_block_emitted_ = false;
				s.is_initialized_ = false;
				RingBufferInit(ref s.ringbuffer_);
				s.commands_ = null;
				s.cmd_alloc_size_ = 0;

				/* Initialize distance cache. */
				fixed (int* dc = s.dist_cache_)
				fixed (int* sdc = s.saved_dist_cache_) 
				{
					dc[0] = 4; dc[1] = 11; dc[2] = 15; dc[3] = 16;
					/* Save the state of the distance cache in case we need to restore it for
					   emitting an uncompressed block. */
					memcpy(sdc, dc, sizeof(int) * 4);
				}
			}

			internal static bool BrotliEncoderSetParameter(ref BrotliEncoderState state, BrotliEncoderParameter p, uint value) 
			{
				/* Changing parameters on the fly is not implemented yet. */
				if (state.is_initialized_) return false;
				/* TODO: Validate/clamp parameters here. */
				switch (p) 
				{
					case BrotliEncoderParameter.BROTLI_PARAM_MODE:
						state.params_.mode = (BrotliEncoderMode) value;
						return false;

					case BrotliEncoderParameter.BROTLI_PARAM_QUALITY:
						state.params_.quality = (int) value;
						return true;

					case BrotliEncoderParameter.BROTLI_PARAM_LGWIN:
						state.params_.lgwin = (int) value;
						return true;

					case BrotliEncoderParameter.BROTLI_PARAM_LGBLOCK:
						state.params_.lgblock = (int) value;
						return true;

					case BrotliEncoderParameter.BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING:
						if ((value != 0) && (value != 1)) return false;
						state.params_.disable_literal_context_modeling = value != 0;
						return true;

					case BrotliEncoderParameter.BROTLI_PARAM_SIZE_HINT:
						state.params_.size_hint = value;
						return true;

					default: return false;
				}
			}

			private static void EncodeWindowBits(int lgwin, out byte last_byte, out byte last_byte_bits) 
			{
				if (lgwin == 16) { last_byte = 0; last_byte_bits = 1; }
				else if (lgwin == 17) { last_byte = 1; last_byte_bits = 7; }
				else if (lgwin > 17) { last_byte = (byte) (((lgwin - 17) << 1) | 1); last_byte_bits = 4; }
				else { last_byte = (byte) (((lgwin - 8) << 4) | 1); last_byte_bits = 7; }
			}

			/* Initializes the command and distance prefix codes for the first block. */
			private static unsafe void InitCommandPrefixCodes(byte* cmd_depths, ushort* cmd_bits, byte* cmd_code, size_t* cmd_code_numbits)
			{
				fixed (byte* kdcd = kDefaultCommandDepths) { memcpy(cmd_depths, kdcd, kDefaultCommandDepths.Length); }

				fixed (ushort* kdcb = kDefaultCommandBits) { memcpy(cmd_bits, kdcb, kDefaultCommandBits.Length * sizeof(ushort)); }

				/* Initialize the pre-compressed form of the command and distance prefix
				   codes. */
				fixed (byte* kdcc = kDefaultCommandCode) { memcpy(cmd_code, kdcc, kDefaultCommandCode.Length); }
				*cmd_code_numbits = kDefaultCommandCodeNumBits;
			}

			private static unsafe bool EnsureInitialized(ref BrotliEncoderState s) 
			{
				if (s.is_initialized_) return true;

				fixed (BrotliEncoderParams* params_ = &s.params_) 
				{
					SanitizeParams(params_);
					s.params_.lgblock = ComputeLgBlock(params_);
					s.remaining_metadata_bytes_ = uint.MaxValue;
					fixed (RingBuffer* rb = &s.ringbuffer_) { RingBufferSetup(params_, rb); }

					/* Initialize last byte with stream header. */
					{
						int lgwin = s.params_.lgwin;
						if (params_->quality == FAST_ONE_PASS_COMPRESSION_QUALITY || params_->quality == FAST_TWO_PASS_COMPRESSION_QUALITY) 
						{ lgwin = Math.Max(lgwin, 18); } EncodeWindowBits(lgwin, out s.last_byte_, out s.last_byte_bits_);
					}

					if (params_->quality == FAST_ONE_PASS_COMPRESSION_QUALITY) 
					{
						fixed (byte* cmd_depths = s.cmd_depths_)
						fixed (ushort* cmd_bits = s.cmd_bits_)
						fixed (byte* cmd_code = s.cmd_code_)
						fixed (size_t* cmd_code_numbits = &s.cmd_code_numbits_) { InitCommandPrefixCodes(cmd_depths, cmd_bits, cmd_code, cmd_code_numbits); }
					}
				}

				s.is_initialized_ = true;
				return true;
			}

			/*
			   Copies the given input data to the internal ring buffer of the compressor.
			   No processing of the data occurs at this time and this function can be
			   called multiple times before calling WriteBrotliData() to process the
			   accumulated input. At most input_block_size() bytes of input data can be
			   copied to the ring buffer, otherwise the next WriteBrotliData() will fail.
			 */
			private static unsafe void CopyInputToRingBuffer(ref BrotliEncoderState s, size_t input_size, byte* input_buffer) 
			{
				if (!EnsureInitialized(ref s)) return;
				fixed (RingBuffer* ringbuffer_ = &s.ringbuffer_) 
				{
					RingBufferWrite(ref s.memory_manager_, input_buffer, input_size, ringbuffer_);
					s.input_pos_ += input_size;

					/* TL;DR: If needed, initialize 7 more bytes in the ring buffer to make the
					   hashing not depend on uninitialized data. This makes compression
					   deterministic and it prevents uninitialized memory warnings in Valgrind.
					   Even without erasing, the output would be valid (but nondeterministic).
				  
					   Background information: The compressor stores short (at most 8 bytes)
					   substrings of the input already read in a hash table, and detects
					   repetitions by looking up such substrings in the hash table. If it
					   can find a substring, it checks whether the substring is really there
					   in the ring buffer (or it's just a hash collision). Should the hash
					   table become corrupt, this check makes sure that the output is
					   still valid, albeit the compression ratio would be bad.
				  
					   The compressor populates the hash table from the ring buffer as it's
					   reading new bytes from the input. However, at the last few indexes of
					   the ring buffer, there are not enough bytes to build full-length
					   substrings from. Since the hash table always contains full-length
					   substrings, we erase with dummy zeros here to make sure that those
					   substrings will contain zeros at the end instead of uninitialized
					   data.
				  
					   Please note that erasing is not necessary (because the
					   memory region is already initialized since he ring buffer
					   has a `tail' that holds a copy of the beginning,) so we
					   skip erasing if we have already gone around at least once in
					   the ring buffer.
				  
					   Only clear during the first round of ring-buffer writes. On
					   subsequent rounds data in the ring-buffer would be affected. */
					if (ringbuffer_->pos_ <= ringbuffer_->mask_) 
					{
						/* This is the first time when the ring buffer is being written.
						   We clear 7 bytes just after the bytes that have been copied from
						   the input buffer.
					
						   The ring-buffer has a "tail" that holds a copy of the beginning,
						   but only once the ring buffer has been fully written once, i.e.,
						   pos <= mask. For the first time, we need to write values
						   in this tail (where index may be larger than mask), so that
						   we have exactly defined behavior and don't read uninitialized
						   memory. Due to performance reasons, hashing reads data using a
						   LOAD64, which can go 7 bytes beyond the bytes written in the
						   ring-buffer. */
						memset(ringbuffer_->buffer_ + ringbuffer_->pos_, 0, 7);
					}
				}
			}

			private static size_t InputBlockSize(ref BrotliEncoderState s) { if (!EnsureInitialized(ref s)) return 0; return (size_t) 1 << s.params_.lgblock; }

			private static ulong UnprocessedInputSize(ref BrotliEncoderState s) { return s.input_pos_ - s.last_processed_pos_; }

			private static unsafe void UpdateSizeHint(ref BrotliEncoderState s, size_t available_in) 
			{
				if (s.params_.size_hint == 0) 
				{
					ulong delta = UnprocessedInputSize(ref s);
					ulong tail = available_in;
					uint limit = 1u << 30;
					uint total;
					if ((delta >= limit) || (tail >= limit) || ((delta + tail) >= limit)) { total = limit; } else { total = (uint) (delta + tail); }
					s.params_.size_hint = total;
				}
			}

			private static unsafe void InjectBytePaddingBlock(ref BrotliEncoderState s) 
			{
				uint seal = s.last_byte_;
				size_t seal_bits = s.last_byte_bits_;
				byte* destination;
				s.last_byte_ = 0;
				s.last_byte_bits_ = 0;
				/* is_last = 0, data_nibbles = 11, reserved = 0, meta_nibbles = 00 */
				seal |= 0x6u << (int) seal_bits;
				seal_bits += 6;
				/* If we have already created storage, then append to it.
				   Storage is valid until next block is being compressed. */
				if (s.next_out_ != null) { destination = s.next_out_ + s.available_out_; }
				else  { fixed (byte* tbu8 = s.tiny_buf_u8) { destination = tbu8; } s.next_out_ = destination; }
				destination[0] = (byte) seal;
				if (seal_bits > 8) destination[1] = (byte) (seal >> 8);
				s.available_out_ += (seal_bits + 7) >> 3;
			}

			/* Injects padding bits or pushes compressed data to output.
			   Returns false if nothing is done. */
			private static unsafe bool InjectFlushOrPushOutput(ref BrotliEncoderState s, size_t* available_out, byte** next_out, size_t* total_out) 
			{
				if (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_FLUSH_REQUESTED && s.last_byte_bits_ != 0) { InjectBytePaddingBlock(ref s); return true; }

				if (s.available_out_ != 0 && *available_out != 0) 
				{
					size_t copy_output_size = Math.Min(s.available_out_, *available_out);
					memcpy(*next_out, s.next_out_, copy_output_size);
					*next_out += copy_output_size;
					*available_out -= copy_output_size;
					s.next_out_ += copy_output_size;
					s.available_out_ -= copy_output_size;
					s.total_out_ += copy_output_size;
					if (total_out != null) *total_out = s.total_out_;
					return true;
				}

				return false;
			}

			/* Wraps 64-bit input position to 32-bit ring-buffer position preserving
			   "not-a-first-lap" feature. */
			static uint WrapPosition(ulong position) 
			{
				uint result = (uint) position;
				ulong gb = position >> 30;
				if (gb > 2) { /* Wrap every 2GiB; The first 3GB are continuous. */ result = (result & ((1u << 30) - 1)) | ((uint) ((gb - 1) & 1) + 1) << 30; }
				return result;
			}

			private static unsafe byte* GetBrotliStorage(ref BrotliEncoderState s, size_t size) 
			{
				if (s.storage_size_ < size) 
				{ BrotliFree(ref s.memory_manager_, s.storage_);
					s.storage_ = (byte*) BrotliAllocate(ref s.memory_manager_, size);
					s.storage_size_ = size;
				}
				return s.storage_;
			}

			private static size_t HashTableSize(size_t max_table_size, size_t input_size) 
			{
				size_t htsize = 256;
				while (htsize < max_table_size && htsize < input_size) { htsize <<= 1; }
				return htsize;
			}

			private static unsafe int* GetHashTable(ref BrotliEncoderState s, int quality, size_t input_size, size_t* table_size) 
			{
				/* Use smaller hash table when input.size() is smaller, since we
				   fill the table, incurring O(hash table size) overhead for
				   compression, and if the input is short, we won't need that
				   many hash table entries anyway. */
				size_t max_table_size = MaxHashTableSize(quality);
				size_t htsize = HashTableSize(max_table_size, input_size);
				int* table;
				if (quality == FAST_ONE_PASS_COMPRESSION_QUALITY) { /* Only odd shifts are supported by fast-one-pass. */ if ((htsize & 0xAAAAA) == 0) { htsize <<= 1; } }

				if (htsize <= (1 << 10) / sizeof(int)) { fixed (int* st = s.small_table_) { table = st; } }
				else 
				{
					if (htsize > s.large_table_size_) 
					{
						s.large_table_size_ = htsize;
						BrotliFree(ref s.memory_manager_, s.large_table_);
						s.large_table_ = (int*) BrotliAllocate(ref s.memory_manager_, htsize * sizeof(int));
					}
					table = s.large_table_;
				}
				*table_size = htsize;
				memset(table, 0, htsize * sizeof(int));
				return table;
			}

			/* Marks all input as processed.
			   Returns true if position wrapping occurs. */
			private static bool UpdateLastProcessedPos(ref BrotliEncoderState s) 
			{
				uint wrapped_last_processed_pos = WrapPosition(s.last_processed_pos_);
				uint wrapped_input_pos = WrapPosition(s.input_pos_);
				s.last_processed_pos_ = s.input_pos_;
				return (wrapped_input_pos < wrapped_last_processed_pos);
			}

			private static unsafe bool ShouldCompress(byte* data, size_t mask, ulong last_flush_pos, size_t bytes, size_t num_literals, size_t num_commands) 
			{
				if (num_commands < (bytes >> 8) + 2) 
				{
					if (num_literals > 0.99 * (double) bytes) 
					{
						uint* literal_histo = stackalloc uint[256];
						memset(literal_histo, 0, 256 * sizeof(uint));
						const uint kSampleRate = 13;
						const double kMinEntropy = 7.92;
						double bit_cost_threshold = (double) bytes * kMinEntropy / kSampleRate;
						size_t t = (bytes + kSampleRate - 1) / kSampleRate;
						uint pos = (uint) last_flush_pos;
						size_t i;
						for (i = 0; i < t; i++) { ++literal_histo[data[pos & mask]]; pos += kSampleRate; }
						if (BitsEntropy(literal_histo, 256) > bit_cost_threshold) { return false; }
					}
				}
				return true;
			}

			/* Decide if we want to use a more complex private static unsafe context map containing 13
				context values, based on the entropy reduction of histograms over the
				first 5 bits of literals. */
			private static unsafe bool ShouldUseComplexStaticContextMap(byte* input, size_t start_pos, size_t length, size_t mask, int quality,
				size_t size_hint, ContextType* literal_context_mode, size_t* num_literal_contexts, uint** literal_context_map) 
			{
				/* Try the more complex private static unsafe context map only for long data. */
				if (size_hint < (1 << 20)) { return false; }
				else 
				{
					size_t end_pos = start_pos + length;
					/* To make entropy calculations faster and to fit on the stack, we collect
					   histograms over the 5 most significant bits of literals. One histogram
					   without context and 13 additional histograms for each context value. */
					uint* combined_histo = stackalloc uint[32];
					memset(combined_histo, 0, 32 * sizeof(uint));
					uint* context_histo = stackalloc uint[13 * 32];
					memset(context_histo, 0, 13 * 32 * sizeof(uint));
					uint total = 0;
					double* entropy = stackalloc double[3];
					size_t dummy;
					size_t i;
					for (; start_pos + 64 <= end_pos; start_pos += 4096) 
					{
						size_t stride_end_pos = start_pos + 64;
						byte prev2 = input[start_pos & mask];
						byte prev1 = input[(start_pos + 1) & mask];
						size_t pos;
						/* To make the analysis of the data faster we only examine 64 byte long
						   strides at every 4kB intervals. */
						for (pos = start_pos + 2; pos < stride_end_pos; ++pos) 
						{
							byte literal = input[pos & mask];
							byte context = (byte) kStaticContextMapComplexUTF8[Context(prev1, prev2, ContextType.CONTEXT_UTF8)];
							++total;
							++combined_histo[literal >> 3];
							++context_histo[(context * 32) + (literal >> 3)];
							prev2 = prev1;
							prev1 = literal;
						}
					}
					entropy[1] = ShannonEntropy(combined_histo, 32, &dummy);
					entropy[2] = 0;
					for (i = 0; i < 13; ++i) { entropy[2] += ShannonEntropy(&context_histo[i * 32], 32, &dummy); }
					entropy[0] = 1.0 / (double) total;
					entropy[1] *= entropy[0];
					entropy[2] *= entropy[0];
					/* The triggering heuristics below were tuned by compressing the individual
					   files of the silesia corpus. If we skip this kind of context modeling
					   for not very well compressible input (i.e. entropy using context modeling
					   is 60% of maximal entropy) or if expected savings by symbol are less
					   than 0.2 bits, then in every case when it triggers, the final compression
					   ratio is improved. Note however that this heuristics might be too strict
					   for some cases and could be tuned further. */
					if (entropy[2] > 3.0 || entropy[1] - entropy[2] < 0.2) { return false; }
					else 
					{
						*literal_context_mode = ContextType.CONTEXT_UTF8;
						*num_literal_contexts = 13;
						fixed (uint* context_map = kStaticContextMapComplexUTF8)
							*literal_context_map = context_map;
						return true;
					}
				}
			}

			private static unsafe void RecomputeDistancePrefixes(Command* cmds, size_t num_commands, uint num_direct_distance_codes, uint distance_postfix_bits) 
			{
				size_t i;
				if (num_direct_distance_codes == 0 && distance_postfix_bits == 0) { return; }
				for (i = 0; i < num_commands; ++i) 
				{
					Command* cmd = &cmds[i];
					if (CommandCopyLen(cmd) != 0 && cmd->cmd_prefix_ >= 128) 
					{
						PrefixEncodeCopyDistance(CommandRestoreDistanceCode(cmd),
							num_direct_distance_codes, distance_postfix_bits, &cmd->dist_prefix_, &cmd->dist_extra_);
					}
				}
			}

			/* Decide about the context map based on the ability of the prediction
			 ability of the previous byte UTF8-prefix on the next byte. The
			 prediction ability is calculated as Shannon entropy. Here we need
			 Shannon entropy instead of 'BitsEntropy' since the prefix will be
			 encoded with the remaining 6 bits of the following byte, and
			 BitsEntropy will assume that symbol to be stored alone using Huffman
			 coding. */
			private static unsafe void ChooseContextMap(int quality, uint* bigram_histo, size_t* num_literal_contexts, uint** literal_context_map) 
			{
				uint* monogram_histo = stackalloc uint[3];
				memset(monogram_histo, 0, 3 * sizeof(uint));
				uint* two_prefix_histo = stackalloc uint[6];
				memset(two_prefix_histo, 0, 6 * sizeof(uint));
				size_t total;
				size_t i;
				size_t dummy;
				double* entropy = stackalloc double[4];
				for (i = 0; i < 9; ++i) { monogram_histo[i % 3] += bigram_histo[i]; two_prefix_histo[i % 6] += bigram_histo[i]; }
				entropy[1] = ShannonEntropy(monogram_histo, 3, &dummy);
				entropy[2] = (ShannonEntropy(two_prefix_histo, 3, &dummy) + ShannonEntropy(two_prefix_histo + 3, 3, &dummy));
				entropy[3] = 0;
				for (i = 0; i < 3; ++i) { entropy[3] += ShannonEntropy(bigram_histo + 3 * i, 3, &dummy); }
				total = monogram_histo[0] + monogram_histo[1] + monogram_histo[2];
				entropy[0] = 1.0 / (double) total;
				entropy[1] *= entropy[0];
				entropy[2] *= entropy[0];
				entropy[3] *= entropy[0];
				if (quality < MIN_QUALITY_FOR_HQ_CONTEXT_MODELING) { /* 3 context models is a bit slower, don't use it at lower qualities. */ entropy[3] = entropy[1] * 10; }
				/* If expected savings by symbol are less than 0.2 bits, skip the
				   context modeling -- in exchange for faster decoding speed. */
				if (entropy[1] - entropy[2] < 0.2 && entropy[1] - entropy[3] < 0.2) { *num_literal_contexts = 1; }
				else if (entropy[2] - entropy[3] < 0.02) { *num_literal_contexts = 2; fixed (uint* context_map = kStaticContextMapSimpleUTF8) { *literal_context_map = context_map; } }
				else 
				{
					*num_literal_contexts = 3;
					fixed (uint* context_map = kStaticContextMapContinuation) { *literal_context_map = context_map; }
				}
			}

			private static unsafe void DecideOverLiteralContextModeling(byte* input, size_t start_pos, size_t length, size_t mask, int quality,
				size_t size_hint, ContextType* literal_context_mode, size_t* num_literal_contexts, uint** literal_context_map) 
			{
				if (quality < MIN_QUALITY_FOR_CONTEXT_MODELING || length < 64) { return; }
				else if (ShouldUseComplexStaticContextMap(input, start_pos, length, mask, quality, size_hint, literal_context_mode, num_literal_contexts, literal_context_map)) 
				{ /* Context map was already set, nothing else to do. */ } else 
				{
					/* Gather bi-gram data of the UTF8 byte prefixes. To make the analysis of
					   UTF8 data faster we only examine 64 byte long strides at every 4kB
					   intervals. */
					size_t end_pos = start_pos + length;
					uint* bigram_prefix_histo = stackalloc uint[9];
					memset(bigram_prefix_histo, 0, 9 * sizeof(uint));
					for (; start_pos + 64 <= end_pos; start_pos += 4096) 
					{
						int[] lut = {0, 0, 1, 2};
						size_t stride_end_pos = start_pos + 64;
						int prev = lut[input[start_pos & mask] >> 6] * 3;
						size_t pos;
						for (pos = start_pos + 1; pos < stride_end_pos; ++pos) 
						{
							byte literal = input[pos & mask];
							++bigram_prefix_histo[prev + lut[literal >> 6]];
							prev = lut[literal >> 6] * 3;
						}
					}
					*literal_context_mode = ContextType.CONTEXT_UTF8;
					ChooseContextMap(quality, &bigram_prefix_histo[0], num_literal_contexts, literal_context_map);
				}
			}

			private static unsafe void WriteMetaBlockInternal(ref MemoryManager m, byte* data, size_t mask, ulong last_flush_pos,
				size_t bytes, bool is_last, BrotliEncoderParams* params_, byte prev_byte, byte prev_byte2, size_t num_literals,
				size_t num_commands, Command* commands, int* saved_dist_cache, int* dist_cache, size_t* storage_ix, byte* storage) 
			{
				uint wrapped_last_flush_pos = WrapPosition(last_flush_pos);
				byte last_byte;
				byte last_byte_bits;
				uint num_direct_distance_codes = 0;
				uint distance_postfix_bits = 0;

				if (bytes == 0) { /* Write the ISLAST and ISEMPTY bits. */ BrotliWriteBits(2, 3, storage_ix, storage); *storage_ix = (*storage_ix + 7u) & ~7u; return; }

				if (!ShouldCompress(data, mask, last_flush_pos, bytes, num_literals, num_commands)) 
				{
					/* Restore the distance cache, as its last update by
					   CreateBackwardReferences is now unused. */
					memcpy(dist_cache, saved_dist_cache, 4 * sizeof(int));
					BrotliStoreUncompressedMetaBlock(is_last, data, wrapped_last_flush_pos, mask, bytes, storage_ix, storage);
					return;
				}

				last_byte = storage[0];
				last_byte_bits = (byte) (*storage_ix & 0xff);
				if (params_->quality >= MIN_QUALITY_FOR_RECOMPUTE_DISTANCE_PREFIXES && params_->mode == BrotliEncoderMode.BROTLI_MODE_FONT) 
				{
					num_direct_distance_codes = 12;
					distance_postfix_bits = 1;
					RecomputeDistancePrefixes(commands,
						num_commands,
						num_direct_distance_codes,
						distance_postfix_bits);
				}
				if (params_->quality <= MAX_QUALITY_FOR_STATIC_ENTROPY_CODES) 
				{
					BrotliStoreMetaBlockFast(ref m, data, wrapped_last_flush_pos,
						bytes, mask, is_last,
						commands, num_commands,
						storage_ix, storage);
				}
				else if (params_->quality < MIN_QUALITY_FOR_BLOCK_SPLIT) 
				{
					BrotliStoreMetaBlockTrivial(ref m, data, wrapped_last_flush_pos,
						bytes, mask, is_last,
						commands, num_commands,
						storage_ix, storage);
				}
				else 
				{
					ContextType literal_context_mode = ContextType.CONTEXT_UTF8;
					MetaBlockSplit mb;
					InitMetaBlockSplit(&mb);
					if (params_->quality < MIN_QUALITY_FOR_HQ_BLOCK_SPLITTING) 
					{
						size_t num_literal_contexts = 1;
						uint* literal_context_map = null;
						if (!params_->disable_literal_context_modeling) 
						{
							DecideOverLiteralContextModeling(data, wrapped_last_flush_pos, bytes, mask, params_->quality,
								params_->size_hint, &literal_context_mode, &num_literal_contexts, &literal_context_map);
						}
						BrotliBuildMetaBlockGreedy(ref m, data, wrapped_last_flush_pos, mask,
							prev_byte, prev_byte2, literal_context_mode, num_literal_contexts,
							literal_context_map, commands, num_commands, &mb);
					}
					else 
					{
						if (!BrotliIsMostlyUTF8(data, wrapped_last_flush_pos, mask, bytes, kMinUTF8Ratio)) { literal_context_mode = ContextType.CONTEXT_SIGNED; }
						BrotliBuildMetaBlock(ref m, data, wrapped_last_flush_pos, mask, params_, prev_byte, prev_byte2, commands, num_commands, literal_context_mode, &mb);
					}
					if (params_->quality >= MIN_QUALITY_FOR_OPTIMIZE_HISTOGRAMS) { BrotliOptimizeHistograms(num_direct_distance_codes, distance_postfix_bits, &mb); }
					BrotliStoreMetaBlock(ref m, data, wrapped_last_flush_pos, bytes, mask, prev_byte, prev_byte2,
						is_last, num_direct_distance_codes,
						distance_postfix_bits, literal_context_mode,
						commands, num_commands, &mb, storage_ix, storage);
					DestroyMetaBlockSplit(ref m, &mb);
				}
				if (bytes + 4 < (*storage_ix >> 3)) 
				{
					/* Restore the distance cache and last byte. */
					memcpy(dist_cache, saved_dist_cache, 4 * sizeof(int));
					storage[0] = last_byte;
					*storage_ix = last_byte_bits;
					BrotliStoreUncompressedMetaBlock(is_last, data, wrapped_last_flush_pos, mask, bytes, storage_ix, storage);
				}
			}

			/*
			   Processes the accumulated input data and sets |*out_size| to the length of
			   the new output meta-block, or to zero if no new output meta-block has been
			   created (in this case the processed input data is buffered internally).
			   If |*out_size| is positive, |*output| points to the start of the output
			   data. If |is_last| or |force_flush| is true, an output meta-block is
			   always created. However, until |is_last| is true encoder may retain up
			   to 7 bits of the last byte of output. To force encoder to dump the remaining
			   bits use WriteMetadata() to append an empty meta-data block.
			   Returns false if the size of the input data is larger than
			   input_block_size().
			 */
			private static unsafe bool EncodeData( ref BrotliEncoderState s, bool is_last, bool force_flush, size_t* out_size, byte** output) 
			{
				ulong delta = UnprocessedInputSize(ref s);
				uint bytes = (uint) delta;
				uint wrapped_last_processed_pos = WrapPosition(s.last_processed_pos_);
				byte* data;
				uint mask;

				if (!EnsureInitialized(ref s)) return false;
				data = s.ringbuffer_.buffer_;
				mask = s.ringbuffer_.mask_;

				/* Adding more blocks after "last" block is forbidden. */
				if (s.is_last_block_emitted_) return false;
				if (is_last) s.is_last_block_emitted_ = true;

				if (delta > InputBlockSize(ref s)) { return false; }
				if (s.params_.quality == FAST_TWO_PASS_COMPRESSION_QUALITY && s.command_buf_ == null) 
				{
					s.command_buf_ = (uint*) BrotliAllocate(ref s.memory_manager_, kCompressFragmentTwoPassBlockSize * sizeof(uint));
					s.literal_buf_ = (byte*) BrotliAllocate(ref s.memory_manager_, kCompressFragmentTwoPassBlockSize);
				}

				if (s.params_.quality == FAST_ONE_PASS_COMPRESSION_QUALITY || s.params_.quality == FAST_TWO_PASS_COMPRESSION_QUALITY) 
				{
					byte* storage;
					size_t storage_ix = s.last_byte_bits_;
					size_t table_size;
					int* table;

					if (delta == 0 && !is_last)  { /* We have no new input data and we don't have to finish the stream, so nothing to do. */ *out_size = 0; return true; }
					storage = GetBrotliStorage(ref s, 2 * bytes + 502);
					storage[0] = s.last_byte_;
					table = GetHashTable(ref s, s.params_.quality, bytes, &table_size);
					if (s.params_.quality == FAST_ONE_PASS_COMPRESSION_QUALITY) 
					{
						fixed (byte* cd = s.cmd_depths_)
						fixed (ushort* cb = s.cmd_bits_)
						fixed (size_t* ccnb = &s.cmd_code_numbits_)
						fixed (byte* cc = s.cmd_code_)
						{
							BrotliCompressFragmentFast(ref s.memory_manager_, &data[wrapped_last_processed_pos & mask],
								bytes, is_last, table, table_size, cd, cb, ccnb, cc, &storage_ix, storage); }
					}
					else 
					{
						BrotliCompressFragmentTwoPass(ref s.memory_manager_, &data[wrapped_last_processed_pos & mask],
							bytes, is_last, s.command_buf_, s.literal_buf_, table, table_size, &storage_ix, storage);
					}
					s.last_byte_ = storage[storage_ix >> 3];
					s.last_byte_bits_ = (byte) (storage_ix & 7u);
					UpdateLastProcessedPos(ref s);
					*output = &storage[0];
					*out_size = storage_ix >> 3;
					return true;
				}

				{
					/* Theoretical max number of commands is 1 per 2 bytes. */
					size_t newsize = s.num_commands_ + bytes / 2 + 1;
					if (newsize > s.cmd_alloc_size_) 
					{
						Command* new_commands;
						/* Reserve a bit more memory to allow merging with a next block
						   without reallocation: that would impact speed. */
						newsize += (bytes / 4) + 16;
						s.cmd_alloc_size_ = newsize;
						new_commands = (Command*) BrotliAllocate(ref s.memory_manager_, newsize * sizeof(Command));
						if (s.commands_ != null) 
						{
							memcpy(new_commands, s.commands_, sizeof(Command) * s.num_commands_);
							BrotliFree(ref s.memory_manager_, s.commands_);
						}
						s.commands_ = new_commands;
					}
				}

				fixed (BrotliEncoderParams* params_ = &s.params_) 
				{
					fixed (HasherHandle* hasher_ = &s.hasher_) { InitOrStitchToPreviousBlock(ref s.memory_manager_, hasher_, data, mask, params_, wrapped_last_processed_pos, bytes, is_last); }

					fixed (int* dist_cache_ = s.dist_cache_)
					fixed (size_t* last_insert_len_ = &s.last_insert_len_)
					fixed (size_t* num_commands_ = &s.num_commands_)
					fixed (size_t* num_literals_ = &s.num_literals_) 
					{
						if (s.params_.quality == ZOPFLIFICATION_QUALITY) 
						{
							BrotliCreateZopfliBackwardReferences(ref s.memory_manager_, bytes, wrapped_last_processed_pos, data, mask,
								params_, s.hasher_, dist_cache_, last_insert_len_, &s.commands_[s.num_commands_], num_commands_, num_literals_);
						}
						else if (s.params_.quality == HQ_ZOPFLIFICATION_QUALITY) 
						{
							BrotliCreateHqZopfliBackwardReferences(ref s.memory_manager_, bytes, wrapped_last_processed_pos, data, mask,
								params_, s.hasher_, dist_cache_, last_insert_len_, &s.commands_[s.num_commands_], num_commands_, num_literals_);
						}
						else { BrotliCreateBackwardReferences(bytes, wrapped_last_processed_pos, data, mask, params_, s.hasher_, dist_cache_, last_insert_len_, &s.commands_[s.num_commands_], num_commands_, num_literals_); }
					}

					{
						size_t max_length = MaxMetablockSize(params_);
						size_t max_literals = max_length / 8;
						size_t max_commands = max_length / 8;
						size_t processed_bytes = (size_t) (s.input_pos_ - s.last_flush_pos_);
						/* If maximal possible additional block doesn't fit metablock, flush now. */
						/* TODO: Postpone decision until next block arrives? */
						bool next_input_fits_metablock = (
							processed_bytes + InputBlockSize(ref s) <= max_length);
						/* If block splitting is not used, then flush as soon as there is some
						   amount of commands / literals produced. */
						bool should_flush = ( s.params_.quality < MIN_QUALITY_FOR_BLOCK_SPLIT && s.num_literals_ + s.num_commands_ >= MAX_NUM_DELAYED_SYMBOLS);
						if (!is_last && !force_flush && !should_flush && next_input_fits_metablock &&
							s.num_literals_ < max_literals && s.num_commands_ < max_commands) 
						{
							/* Merge with next input block. Everything will happen later. */
							if (UpdateLastProcessedPos(ref s)) { HasherReset(s.hasher_); }
							*out_size = 0;
							return true;
						}
					}

					/* Create the last insert-only command. */
					if (s.last_insert_len_ > 0) 
					{
						InitInsertCommand(&s.commands_[s.num_commands_++], s.last_insert_len_);
						s.num_literals_ += s.last_insert_len_;
						s.last_insert_len_ = 0;
					}

					if (!is_last && s.input_pos_ == s.last_flush_pos_) { /* We have no new input data and we don't have to finish the stream, so nothing to do. */ *out_size = 0; return true; }
					{
						uint metablock_size = (uint) (s.input_pos_ - s.last_flush_pos_);
						byte* storage = GetBrotliStorage(ref s, 2 * metablock_size + 502);
						size_t storage_ix = s.last_byte_bits_;
						storage[0] = s.last_byte_;
						fixed (int* dc = s.dist_cache_)
						fixed (int* sdc = s.saved_dist_cache_) 
						{
							WriteMetaBlockInternal(ref s.memory_manager_, data, mask, s.last_flush_pos_, metablock_size, is_last,
								params_, s.prev_byte_, s.prev_byte2_, s.num_literals_, s.num_commands_, s.commands_, sdc, dc, &storage_ix, storage);
							s.last_byte_ = storage[storage_ix >> 3];
							s.last_byte_bits_ = (byte) (storage_ix & 7u);
							s.last_flush_pos_ = s.input_pos_;
							if (UpdateLastProcessedPos(ref s)) { HasherReset(s.hasher_); }
							if (s.last_flush_pos_ > 0) {s.prev_byte_ = data[((uint) s.last_flush_pos_ - 1) & mask]; }
							if (s.last_flush_pos_ > 1) { s.prev_byte2_ = data[(uint) (s.last_flush_pos_ - 2) & mask]; }
							s.num_commands_ = 0;
							s.num_literals_ = 0;
							/* Save the state of the distance cache in case we need to restore it for
							   emitting an uncompressed block. */
							memcpy(sdc, dc, 4 * sizeof(int));
						}
						*output = &storage[0];
						*out_size = storage_ix >> 3;
						return true;
					}
				}
			}

			/* Dumps remaining output bits and metadata header to |header|.
			   Returns number of produced bytes.
			   REQUIRED: |header| should be 8-byte aligned and at least 16 bytes long.
			   REQUIRED: |block_size| <= (1 << 24). */
			private static unsafe size_t WriteMetadataHeader(ref BrotliEncoderState s, size_t block_size, byte* header) 
			{
				size_t storage_ix;
				storage_ix = s.last_byte_bits_;
				header[0] = s.last_byte_;
				s.last_byte_ = 0;
				s.last_byte_bits_ = 0;

				BrotliWriteBits(1, 0, &storage_ix, header);
				BrotliWriteBits(2, 3, &storage_ix, header);
				BrotliWriteBits(1, 0, &storage_ix, header);
				if (block_size == 0) { BrotliWriteBits(2, 0, &storage_ix, header); }
				else 
				{
					uint nbits = (block_size == 1) ? 0 : (Log2FloorNonZero((uint) block_size - 1) + 1);
					uint nbytes = (nbits + 7) / 8;
					BrotliWriteBits(2, nbytes, &storage_ix, header);
					BrotliWriteBits(8 * nbytes, block_size - 1, &storage_ix, header);
				}
				return (storage_ix + 7u) >> 3;
			}

			private static unsafe bool ProcessMetadata(ref BrotliEncoderState s, size_t* available_in, byte** next_in, size_t* available_out, byte** next_out, size_t* total_out) 
			{
				if (*available_in > (1u << 24)) return false;
				/* Switch to metadata block workflow, if required. */
				if (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING) 
				{
					s.remaining_metadata_bytes_ = (uint) *available_in;
					s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_METADATA_HEAD;
				}
				if (s.stream_state_ != BrotliEncoderStreamState.BROTLI_STREAM_METADATA_HEAD && s.stream_state_ != BrotliEncoderStreamState.BROTLI_STREAM_METADATA_BODY) { return false; }

				while (true) 
				{
					if (InjectFlushOrPushOutput(ref s, available_out, next_out, total_out)) { continue; }
					if (s.available_out_ != 0) break;
					if (s.input_pos_ != s.last_flush_pos_) 
					{
						fixed (size_t* available_out_ = &s.available_out_)
						fixed (byte** next_out_ = &s.next_out_) 
						{
							bool result = EncodeData(ref s, false, true, available_out_, next_out_);
							if (!result) return false;
							continue;
						}
					}

					if (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_METADATA_HEAD) 
					{
						fixed (byte* tbu8 = s.tiny_buf_u8) 
						{
							s.next_out_ = tbu8;
							s.available_out_ = WriteMetadataHeader(ref s, s.remaining_metadata_bytes_, s.next_out_);
						}
						s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_METADATA_BODY;
						continue;
					}
					else 
					{
						/* Exit workflow only when there is no more input and no more output.
						   Otherwise client may continue producing empty metadata blocks. */
						if (s.remaining_metadata_bytes_ == 0) 
						{
							s.remaining_metadata_bytes_ = uint.MaxValue;
							s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING;
							break;
						}
						if (*available_out != 0) 
						{
							/* Directly copy input to output. */
							uint copy = (uint) Math.Min(s.remaining_metadata_bytes_, *available_out);
							memcpy(*next_out, *next_in, copy);
							*next_in += copy;
							*available_in -= copy;
							s.remaining_metadata_bytes_ -= copy;
							*next_out += copy;
							*available_out -= copy;
						}
						else 
						{
							/* This guarantees progress in "TakeOutput" workflow. */
							uint copy = Math.Min(s.remaining_metadata_bytes_, 16);
							fixed (byte* tbu8 = s.tiny_buf_u8) {
								s.next_out_ = tbu8;
								memcpy(s.next_out_, *next_in, copy);
							}
							*next_in += copy;
							*available_in -= copy;
							s.remaining_metadata_bytes_ -= copy;
							s.available_out_ = copy;
						}
						continue;
					}
				}

				return true;
			}

			private static unsafe size_t RemainingInputBlockSize(ref BrotliEncoderState s) 
			{
				ulong delta = UnprocessedInputSize(ref s);
				size_t block_size = InputBlockSize(ref s);
				if (delta >= block_size) return 0;
				return block_size - (size_t) delta;
			}

			private static unsafe void CheckFlushComplete(ref BrotliEncoderState s) 
			{
				if (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_FLUSH_REQUESTED && s.available_out_ == 0) { s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING; s.next_out_ = null; }
			}

			private static unsafe bool BrotliEncoderCompressStreamFast(ref BrotliEncoderState s, BrotliEncoderOperation op, size_t* available_in,
				byte** next_in, size_t* available_out, byte** next_out, size_t* total_out) 
			{
				size_t block_size_limit = (size_t) 1 << s.params_.lgwin;
				size_t buf_size = Math.Min(kCompressFragmentTwoPassBlockSize, Math.Min(*available_in, block_size_limit));
				uint* tmp_command_buf = null;
				uint* command_buf = null;
				byte* tmp_literal_buf = null;
				byte* literal_buf = null;
				if (s.params_.quality != FAST_ONE_PASS_COMPRESSION_QUALITY && s.params_.quality != FAST_TWO_PASS_COMPRESSION_QUALITY)  { return false; }
				if (s.params_.quality == FAST_TWO_PASS_COMPRESSION_QUALITY) 
				{
					if (s.command_buf_ == null && buf_size == kCompressFragmentTwoPassBlockSize) 
					{
						s.command_buf_ = (uint*) BrotliAllocate(ref s.memory_manager_, kCompressFragmentTwoPassBlockSize * sizeof(uint));
						s.literal_buf_ = (byte*) BrotliAllocate(ref s.memory_manager_, kCompressFragmentTwoPassBlockSize * sizeof(byte));
					}
					if (s.command_buf_ != null) { command_buf = s.command_buf_; literal_buf = s.literal_buf_; }
					else 
					{
						tmp_command_buf = (uint*) BrotliAllocate(ref s.memory_manager_, buf_size * sizeof(uint));
						tmp_literal_buf = (byte*) BrotliAllocate(ref s.memory_manager_, buf_size * sizeof(byte));
						command_buf = tmp_command_buf;
						literal_buf = tmp_literal_buf;
					}
				}

				while (true) {
					if (InjectFlushOrPushOutput(ref s, available_out, next_out, total_out)) { continue; }

					/* Compress block only when internal output buffer is empty, stream is not
					   finished, there is no pending flush request, and there is either
					   additional input or pending operation. */
					if (s.available_out_ == 0 && s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING &&
						(*available_in != 0 || op != BrotliEncoderOperation.BROTLI_OPERATION_PROCESS)) 
					{
						size_t block_size = Math.Min(block_size_limit, *available_in);
						bool is_last = (*available_in == block_size) && (op == BrotliEncoderOperation.BROTLI_OPERATION_FINISH);
						bool force_flush = (*available_in == block_size) && (op == BrotliEncoderOperation.BROTLI_OPERATION_FLUSH);
						size_t max_out_size = 2 * block_size + 502;
						bool inplace = true;
						byte* storage = null;
						size_t storage_ix = s.last_byte_bits_;
						size_t table_size;
						int* table;

						if (force_flush && block_size == 0) { s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_FLUSH_REQUESTED; continue; }
						if (max_out_size <= *available_out) { storage = *next_out; }
						else { inplace = false; storage = GetBrotliStorage(ref s, max_out_size); }
						storage[0] = s.last_byte_;
						table = GetHashTable(ref s, s.params_.quality, block_size, &table_size);

						if (s.params_.quality == FAST_ONE_PASS_COMPRESSION_QUALITY) 
						{
							fixed (byte* cmd_depths_ = s.cmd_depths_)
							fixed (ushort* cmd_bits_ = s.cmd_bits_)
							fixed (size_t* cmd_code_numbits_ = &s.cmd_code_numbits_)
							fixed (byte* cmd_code_ = s.cmd_code_)
							{
								BrotliCompressFragmentFast(ref s.memory_manager_, *next_in, block_size, is_last, table,
									table_size, cmd_depths_, cmd_bits_, cmd_code_numbits_, cmd_code_, &storage_ix, storage);
							}
						}
						else 
						{
							BrotliCompressFragmentTwoPass(ref s.memory_manager_, *next_in, block_size, is_last,
								command_buf, literal_buf, table, table_size, &storage_ix, storage);
						}
						*next_in += block_size;
						*available_in -= block_size;
						if (inplace) 
						{
							size_t out_bytes = storage_ix >> 3;
							*next_out += out_bytes;
							*available_out -= out_bytes;
							s.total_out_ += out_bytes;
							if (total_out != null) *total_out = s.total_out_;
						}
						else { size_t out_bytes = storage_ix >> 3; s.next_out_ = storage; s.available_out_ = out_bytes; }
						s.last_byte_ = storage[storage_ix >> 3];
						s.last_byte_bits_ = (byte) (storage_ix & 7u);

						if (force_flush) s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_FLUSH_REQUESTED;
						if (is_last) s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_FINISHED;
						continue;
					}
					break;
				}
				BrotliFree(ref s.memory_manager_, tmp_command_buf);
				BrotliFree(ref s.memory_manager_, tmp_literal_buf);
				CheckFlushComplete(ref s);
				return true;
			}

			internal static unsafe bool BrotliEncoderCompressStream(ref BrotliEncoderState s, BrotliEncoderOperation op, size_t* available_in, byte** next_in, size_t* available_out, byte** next_out, size_t* total_out) 
			{
				if (!EnsureInitialized(ref s)) return false;

				/* Unfinished metadata block; check requirements. */
				if (s.remaining_metadata_bytes_ != uint.MaxValue) 
				{
					if (*available_in != s.remaining_metadata_bytes_) return false;
					if (op != BrotliEncoderOperation.BROTLI_OPERATION_EMIT_METADATA) return false;
				}

				if (op == BrotliEncoderOperation.BROTLI_OPERATION_EMIT_METADATA) 
				{
					UpdateSizeHint(ref s, 0); /* First data metablock might be emitted here. */
					return ProcessMetadata(ref s, available_in, next_in, available_out, next_out, total_out);
				}

				if (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_METADATA_HEAD || s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_METADATA_BODY) { return false; }

				if (s.stream_state_ != BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING && *available_in != 0) { return false; }

				if (s.params_.quality == FAST_ONE_PASS_COMPRESSION_QUALITY || s.params_.quality == FAST_TWO_PASS_COMPRESSION_QUALITY) { return BrotliEncoderCompressStreamFast(ref s, op, available_in, next_in, available_out, next_out, total_out); }
				while (true) 
				{
					size_t remaining_block_size = RemainingInputBlockSize(ref s);

					if (remaining_block_size != 0 && *available_in != 0) 
					{
						size_t copy_input_size = Math.Min(remaining_block_size, *available_in);
						CopyInputToRingBuffer(ref s, copy_input_size, *next_in);
						*next_in += copy_input_size;
						*available_in -= copy_input_size;
						continue;
					}

					if (InjectFlushOrPushOutput(ref s, available_out, next_out, total_out)) { continue; }

					/* Compress data only when internal output buffer is empty, stream is not
					   finished and there is no pending flush request. */
					if (s.available_out_ == 0 && s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_PROCESSING) 
					{
						if (remaining_block_size == 0 || op != BrotliEncoderOperation.BROTLI_OPERATION_PROCESS) 
						{
							bool is_last = ((*available_in == 0) && op == BrotliEncoderOperation.BROTLI_OPERATION_FINISH);
							bool force_flush = ((*available_in == 0) && op == BrotliEncoderOperation.BROTLI_OPERATION_FLUSH);
							bool result;
							UpdateSizeHint(ref s, *available_in);
							fixed (size_t* available_out_ = &s.available_out_)
							fixed (byte** next_out_ = &s.next_out_) result = EncodeData(ref s, is_last, force_flush, available_out_, next_out_);
							if (!result) return false;
							if (force_flush) s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_FLUSH_REQUESTED;
							if (is_last) s.stream_state_ = BrotliEncoderStreamState.BROTLI_STREAM_FINISHED;
							continue;
						}
					}
					break;
				}
				CheckFlushComplete(ref s);
				return true;
			}

			internal static bool BrotliEncoderIsFinished(ref BrotliEncoderState s) {return (s.stream_state_ == BrotliEncoderStreamState.BROTLI_STREAM_FINISHED && !BrotliEncoderHasMoreOutput(ref s)); }

			private static bool BrotliEncoderHasMoreOutput(ref BrotliEncoderState s) { return (s.available_out_ != 0); }

			internal static unsafe void BrotliEncoderSetCustomDictionary(ref BrotliEncoderState s, size_t size, byte* dict) 
			{
				size_t max_dict_size = BROTLI_MAX_BACKWARD_LIMIT(s.params_.lgwin);
				size_t dict_size = size;

				if (!EnsureInitialized(ref s)) return;

				if (dict_size == 0 ||s.params_.quality == FAST_ONE_PASS_COMPRESSION_QUALITY || s.params_.quality == FAST_TWO_PASS_COMPRESSION_QUALITY) { return; }
				if (size > max_dict_size) { dict += size - max_dict_size; dict_size = max_dict_size; }
				CopyInputToRingBuffer(ref s, dict_size, dict);
				s.last_flush_pos_ = dict_size;
				s.last_processed_pos_ = dict_size;
				if (dict_size > 0) { s.prev_byte_ = dict[dict_size - 1]; }
				if (dict_size > 1) { s.prev_byte2_ = dict[dict_size - 2]; }
				fixed (HasherHandle* hasher_ = &s.hasher_)
				fixed (BrotliEncoderParams* params_ = &s.params_) { HasherPrependCustomDictionary(ref s.memory_manager_, hasher_, params_, dict_size, dict); }
			}

			/* A node of a Huffman tree. */
			[StructLayout(LayoutKind.Sequential)]
			private struct HuffmanTree 
			{
				public uint total_count_;
				public short index_left_;
				public short index_right_or_value_;
			}

			private static unsafe void InitHuffmanTree(HuffmanTree* self, uint count, short left, short right) 
			{
				self->total_count_ = count;
				self->index_left_ = left;
				self->index_right_or_value_ = right;
			}

			private static ushort BrotliReverseBits(size_t num_bits, ushort bits) 
			{
				size_t[] kLut = {/* Pre-reversed 4-bit values. */ 0x0, 0x8, 0x4, 0xc, 0x2, 0xa, 0x6, 0xe, 0x1, 0x9, 0x5, 0xd, 0x3, 0xb, 0x7, 0xf };
				size_t retval = kLut[bits & 0xf];
				size_t i;
				for (i = 4; i < num_bits; i += 4) 
				{
					retval <<= 4;
					bits = (ushort) (bits >> 4);
					retval |= kLut[bits & 0xf];
				}
				retval >>= (int) ((0 - num_bits) & 0x3);
				return (ushort) retval;
			}

			private static unsafe void BrotliConvertBitDepthsToSymbols(byte* depth, size_t len, ushort* bits) 
			{
				/* In Brotli, all bit depths are [1..15]
				   0 bit depth means that the symbol does not exist. */
				ushort[] bl_count = new ushort[MAX_HUFFMAN_BITS];
				ushort[] next_code = new ushort[MAX_HUFFMAN_BITS];
				size_t i;
				int code = 0;
				for (i = 0; i < len; ++i) { ++bl_count[depth[i]]; }
				bl_count[0] = 0;
				next_code[0] = 0;
				for (i = 1; i < MAX_HUFFMAN_BITS; ++i) { code = (code + bl_count[i - 1]) << 1; next_code[i] = (ushort) code; }
				for (i = 0; i < len; ++i) { if (depth[i] != 0) { bits[i] = BrotliReverseBits(depth[i], next_code[depth[i]]++); } }
			}

			private static unsafe bool BrotliSetDepth(int p0, HuffmanTree* pool, byte* depth, int max_depth) 
			{
				int[] stack = new int[16];
				int level = 0;
				int p = p0;
				stack[0] = -1;
				while (true) 
				{
					if (pool[p].index_left_ >= 0) 
					{
						level++;
						if (level > max_depth) return false;
						stack[level] = pool[p].index_right_or_value_;
						p = pool[p].index_left_;
						continue;
					}
					else { depth[pool[p].index_right_or_value_] = (byte) level; }
					while (level >= 0 && stack[level] == -1) level--;
					if (level < 0) return true;
					p = stack[level];
					stack[level] = -1;
				}
			}

			private static unsafe void DecideOverRleUse(byte* depth, size_t length, bool* use_rle_for_non_zero, bool* use_rle_for_zero) 
			{
				size_t total_reps_zero = 0;
				size_t total_reps_non_zero = 0;
				size_t count_reps_zero = 1;
				size_t count_reps_non_zero = 1;
				size_t i;
				for (i = 0; i < length;) 
				{
					byte value = depth[i];
					size_t reps = 1;
					size_t k;
					for (k = i + 1; k < length && depth[k] == value; ++k) { ++reps; }
					if (reps >= 3 && value == 0)  { total_reps_zero += reps; ++count_reps_zero; }
					if (reps >= 4 && value != 0) { total_reps_non_zero += reps; ++count_reps_non_zero; }
					i += reps;
				}
				*use_rle_for_non_zero = (total_reps_non_zero > count_reps_non_zero * 2);
				*use_rle_for_zero = (total_reps_zero > count_reps_zero * 2);
			}

			private static unsafe void BrotliWriteHuffmanTreeRepetitionsZeros(size_t repetitions,size_t* tree_size, byte* tree, byte* extra_bits_data) 
			{
				if (repetitions == 11) { tree[*tree_size] = 0; extra_bits_data[*tree_size] = 0; ++(*tree_size); --repetitions; }
				if (repetitions < 3) 
				{
					size_t i;
					for (i = 0; i < repetitions; ++i) { tree[*tree_size] = 0; extra_bits_data[*tree_size] = 0; ++(*tree_size); }
				}
				else 
				{
					size_t start = *tree_size;
					repetitions -= 3;
					while (true) 
					{
						tree[*tree_size] = BROTLI_REPEAT_ZERO_CODE_LENGTH;
						extra_bits_data[*tree_size] = (byte) (repetitions & 0x7);
						++(*tree_size);
						repetitions >>= 3;
						if (repetitions == 0) { break; }
						--repetitions;
					}
					Reverse(tree, start, *tree_size);
					Reverse(extra_bits_data, start, *tree_size);
				}
			}

			private static unsafe void BrotliWriteHuffmanTree(byte* depth, size_t length, size_t* tree_size, byte* tree, byte* extra_bits_data) 
			{
				byte previous_value = BROTLI_INITIAL_REPEATED_CODE_LENGTH;
				size_t i;
				bool use_rle_for_non_zero = false;
				bool use_rle_for_zero = false;

				/* Throw away trailing zeros. */
				size_t new_length = length;
				for (i = 0; i < length; ++i) { if (depth[length - i - 1] == 0) { --new_length; } else { break; } }

				/* First gather statistics on if it is a good idea to do RLE. */
				if (length > 50) {/* Find RLE coding for longer codes. Shorter codes seem not to benefit from RLE. */ DecideOverRleUse(depth, new_length, &use_rle_for_non_zero, &use_rle_for_zero); }

				/* Actual RLE coding. */
				for (i = 0; i < new_length;) 
				{
					byte value = depth[i];
					size_t reps = 1;
					if ((value != 0 && use_rle_for_non_zero) || (value == 0 && use_rle_for_zero)) { size_t k; for (k = i + 1; k < new_length && depth[k] == value; ++k) { ++reps; } }
					if (value == 0) { BrotliWriteHuffmanTreeRepetitionsZeros( reps, tree_size, tree, extra_bits_data); }
					else { BrotliWriteHuffmanTreeRepetitions(previous_value, value, reps, tree_size, tree, extra_bits_data); previous_value = value; }
					i += reps;
				}
			}

			/* This function will create a Huffman tree.

		   The catch here is that the tree cannot be arbitrarily deep.
		   Brotli specifies a maximum depth of 15 bits for "code trees"
		   and 7 bits for "code length code trees."

		   count_limit is the value that is to be faked as the minimum value
		   and this minimum value is raised until the tree matches the
		   maximum length requirement.

		   This algorithm is not of excellent performance for very long data blocks,
		   especially when population counts are longer than 2**tree_limit, but
		   we are not planning to use this with extremely long blocks.

		   See http://en.wikipedia.org/wiki/Huffman_coding */
			private static unsafe void BrotliCreateHuffmanTree(uint* data, size_t length, int tree_limit, HuffmanTree* tree, byte* depth) 
			{
				uint count_limit;
				HuffmanTree sentinel;
				InitHuffmanTree(&sentinel, uint.MaxValue, -1, -1);
				/* For block sizes below 64 kB, we never need to do a second iteration
				   of this loop. Probably all of our block sizes will be smaller than
				   that, so this loop is mostly of academic interest. If we actually
				   would need this, we would be better off with the Katajainen algorithm. */
				for (count_limit = 1;; count_limit *= 2) 
				{
					size_t n = 0;
					size_t i;
					size_t j;
					size_t k;
					for (i = length; i != 0;) { --i; if (data[i] != 0) { uint count = Math.Max(data[i], count_limit); InitHuffmanTree(&tree[n++], count, -1, (short) i); } }

					if (n == 1) { depth[tree[0].index_right_or_value_] = 1; /* Only one element. */ break; }

					SortHuffmanTreeItems(tree, n, SortHuffmanTreeEntropyEncode);

					/* The nodes are:
					   [0, n): the sorted leaf nodes that we start with.
					   [n]: we add a sentinel here.
					   [n + 1, 2n): new parent nodes are added here, starting from
									(n+1). These are naturally in ascending order.
					   [2n]: we add a sentinel at the end as well.
					   There will be (2n+1) elements at the end. */
					tree[n] = sentinel;
					tree[n + 1] = sentinel;

					i = 0; /* Points to the next leaf node. */
					j = n + 1; /* Points to the next non-leaf node. */
					for (k = n - 1; k != 0; --k) 
					{
						size_t left, right;
						if (tree[i].total_count_ <= tree[j].total_count_) { left = i; ++i; } else { left = j; ++j; }
						if (tree[i].total_count_ <= tree[j].total_count_) { right = i; ++i; } else { right = j; ++j; }
						{
							/* The sentinel node becomes the parent node. */
							size_t j_end = 2 * n - k;
							tree[j_end].total_count_ = tree[left].total_count_ + tree[right].total_count_;
							tree[j_end].index_left_ = (short) left;
							tree[j_end].index_right_or_value_ = (short) right;
							/* Add back the last sentinel node. */
							tree[j_end + 1] = sentinel;
						}
					}
					if (BrotliSetDepth((int) (2 * n - 1), &tree[0], depth, tree_limit)) {/* We need to pack the Huffman tree in tree_limit bits. If this was not successful, add fake entities to the lowest values and retry. */ break; }
				}
			}

			private static unsafe void Reverse(byte* v, size_t start, size_t end) { --end; while (start < end)  { byte tmp = v[start]; v[start] = v[end]; v[end] = tmp; ++start; --end; } }

			private static unsafe void BrotliWriteHuffmanTreeRepetitions(byte previous_value, byte value, size_t repetitions, size_t* tree_size, byte* tree, byte* extra_bits_data) 
			{
				if (previous_value != value) { tree[*tree_size] = value; extra_bits_data[*tree_size] = 0; ++(*tree_size); --repetitions; }
				if (repetitions == 7) { tree[*tree_size] = value; extra_bits_data[*tree_size] = 0; ++(*tree_size); --repetitions; }
				if (repetitions < 3) {size_t i; for (i = 0; i < repetitions; ++i) { tree[*tree_size] = value; extra_bits_data[*tree_size] = 0; ++(*tree_size); } }
				else 
				{
					size_t start = *tree_size;
					repetitions -= 3;
					while (true) 
					{
						tree[*tree_size] = BROTLI_REPEAT_PREVIOUS_CODE_LENGTH;
						extra_bits_data[*tree_size] = (byte) (repetitions & 0x3);
						++(*tree_size);
						repetitions >>= 2;
						if (repetitions == 0) { break; }
						--repetitions;
					}
					Reverse(tree, start, *tree_size);
					Reverse(extra_bits_data, start, *tree_size);
				}
			}

			private static unsafe void BrotliOptimizeHuffmanCountsForRle(size_t length, uint* counts, byte* good_for_rle) 
			{
				size_t nonzero_count = 0;
				size_t stride;
				size_t limit;
				size_t sum;
				size_t streak_limit = 1240;
				/* Let's make the Huffman code more compatible with RLE encoding. */
				size_t i;
				for (i = 0; i < length; i++) { if (counts[i] != 0) { ++nonzero_count; } }
				if (nonzero_count < 16) { return; }
				while (length != 0 && counts[length - 1] == 0) { --length; }
				if (length == 0) { return; /* All zeros. */ }
				/* Now counts[0..length - 1] does not have trailing zeros. */
				{
					size_t nonzeros = 0;
					uint smallest_nonzero = 1 << 30;
					for (i = 0; i < length; ++i) { if (counts[i] != 0) { ++nonzeros; if (smallest_nonzero > counts[i]) { smallest_nonzero = counts[i]; } } }
					if (nonzeros < 5) { /* Small histogram will model it well. */ return; }
					if (smallest_nonzero < 4) 
					{
						size_t zeros = length - nonzeros;
						if (zeros < 6) { for (i = 1; i < length - 1; ++i) { if (counts[i - 1] != 0 && counts[i] == 0 && counts[i + 1] != 0) { counts[i] = 1; } } }
					}
					if (nonzeros < 28) { return; }
				}
				/* 2) Let's mark all population counts that already can be encoded
				   with an RLE code. */
				memset(good_for_rle, 0, length);
				{
					/* Let's not spoil any of the existing good RLE codes.
					   Mark any seq of 0's that is longer as 5 as a good_for_rle.
					   Mark any seq of non-0's that is longer as 7 as a good_for_rle. */
					uint symbol = counts[0];
					size_t step = 0;
					for (i = 0; i <= length; ++i) 
					{
						if (i == length || counts[i] != symbol) 
						{
							if ((symbol == 0 && step >= 5) || (symbol != 0 && step >= 7)) { size_t k; for (k = 0; k < step; ++k) { good_for_rle[i - k - 1] = 1; } }
							step = 1;
							if (i != length) { symbol = counts[i]; }
						}
						else { ++step; }
					}
				}
				/* 3) Let's replace those population counts that lead to more RLE codes.
				   Math here is in 24.8 fixed point representation. */
				stride = 0;
				limit = 256 * (counts[0] + counts[1] + counts[2]) / 3 + 420;
				sum = 0;
				for (i = 0; i <= length; ++i) 
				{
					if (i == length || good_for_rle[i] != 0 || (i != 0 && good_for_rle[i - 1] != 0) || (256 * counts[i] - limit + streak_limit) >= 2 * streak_limit) 
					{
						if (stride >= 4 || (stride >= 3 && sum == 0)) 
						{
							size_t k;
							/* The stride must end, collapse what we have, if we have enough (4). */
							size_t count = (sum + stride / 2) / stride;
							if (count == 0) { count = 1; }
							if (sum == 0) { /* Don't make an all zeros stride to be upgraded to ones. */ count = 0; }
							for (k = 0; k < stride; ++k) { /* We don't want to change value at counts[i], that is already belonging to the next stride. Thus - 1. */ counts[i - k - 1] = (uint) count; }
						}
						stride = 0;
						sum = 0;
						if (i < length - 2) { /* All interesting strides have a count of at least 4, at least when non-zeros. */ limit = 256 * (counts[i] + counts[i + 1] + counts[i + 2]) / 3 + 420; }
						else if (i < length) { limit = 256 * counts[i]; } else { limit = 0; }
					}
					++stride;
					if (i != length) { sum += counts[i]; if (stride >= 4) { limit = (256 * sum + stride / 2) / stride; } if (stride == 4) { limit += 120; } }
				}
			}

			/* Sort the root nodes, least popular first. */
			private static unsafe bool SortHuffmanTreeEntropyEncode(HuffmanTree* v0, HuffmanTree* v1) { if (v0->total_count_ != v1->total_count_) {return v0->total_count_ < v1->total_count_; } return v0->index_right_or_value_ > v1->index_right_or_value_; }

			private unsafe delegate bool HuffmanTreeComparator(HuffmanTree* v0, HuffmanTree* v1);

			private static unsafe void SortHuffmanTreeItems(HuffmanTree* items, size_t n, HuffmanTreeComparator comparator) 
			{
				size_t[] gaps = {132, 57, 23, 10, 4, 1};
				if (n < 13) 
				{
					/* Insertion sort. */
					size_t i;
					for (i = 1; i < n; ++i) 
					{
						HuffmanTree tmp = items[i];
						size_t k = i;
						size_t j = i - 1;
						while (comparator(&tmp, &items[j]))  { items[k] = items[j]; k = j; if (j-- == 0) break; }
						items[k] = tmp;
					}
				}
				else 
				{
					/* Shell sort. */
					int g = n < 57 ? 2 : 0;
					for (; g < 6; ++g) 
					{
						size_t gap = gaps[g]; 
						size_t i;
						for (i = gap; i < n; ++i) 
						{
							size_t j = i;
							HuffmanTree tmp = items[i];
							for (; j >= gap && comparator(&tmp, &items[j - gap]); j -= gap) {items[j] = items[j - gap]; }
							items[j] = tmp;
						}
					}
				}
			}

			private static unsafe void StoreStaticCodeLengthCode(size_t* storage_ix, byte* storage) { BrotliWriteBits(40, 0x0000ff55555554U, storage_ix, storage); }

			private static unsafe void StoreStaticCommandHuffmanTree(size_t* storage_ix, byte* storage) {BrotliWriteBits(56, 0x92624416307003U, storage_ix, storage); BrotliWriteBits(3, 0x00000000U, storage_ix, storage); }

			private static unsafe void StoreStaticDistanceHuffmanTree(size_t* storage_ix, byte* storage) {BrotliWriteBits(28, 0x0369dc03U, storage_ix, storage); }

			/* A lookup table for small values of log2(int) to be used in entropy
			   computation.

			   ", ".join(["%.16ff" % x for x in [0.0]+[log2(x) for x in range(1, 256)]]) */
			private static readonly float[] kLog2Table = {
				0.0000000000000000f, 0.0000000000000000f, 1.0000000000000000f,
				1.5849625007211563f, 2.0000000000000000f, 2.3219280948873622f,
				2.5849625007211561f, 2.8073549220576042f, 3.0000000000000000f,
				3.1699250014423126f, 3.3219280948873626f, 3.4594316186372978f,
				3.5849625007211565f, 3.7004397181410922f, 3.8073549220576037f,
				3.9068905956085187f, 4.0000000000000000f, 4.0874628412503400f,
				4.1699250014423122f, 4.2479275134435852f, 4.3219280948873626f,
				4.3923174227787607f, 4.4594316186372973f, 4.5235619560570131f,
				4.5849625007211570f, 4.6438561897747244f, 4.7004397181410926f,
				4.7548875021634691f, 4.8073549220576037f, 4.8579809951275728f,
				4.9068905956085187f, 4.9541963103868758f, 5.0000000000000000f,
				5.0443941193584534f, 5.0874628412503400f, 5.1292830169449664f,
				5.1699250014423122f, 5.2094533656289501f, 5.2479275134435852f,
				5.2854022188622487f, 5.3219280948873626f, 5.3575520046180838f,
				5.3923174227787607f, 5.4262647547020979f, 5.4594316186372973f,
				5.4918530963296748f, 5.5235619560570131f, 5.5545888516776376f,
				5.5849625007211570f, 5.6147098441152083f, 5.6438561897747244f,
				5.6724253419714961f, 5.7004397181410926f, 5.7279204545631996f,
				5.7548875021634691f, 5.7813597135246599f, 5.8073549220576046f,
				5.8328900141647422f, 5.8579809951275719f, 5.8826430493618416f,
				5.9068905956085187f, 5.9307373375628867f, 5.9541963103868758f,
				5.9772799234999168f, 6.0000000000000000f, 6.0223678130284544f,
				6.0443941193584534f, 6.0660891904577721f, 6.0874628412503400f,
				6.1085244567781700f, 6.1292830169449672f, 6.1497471195046822f,
				6.1699250014423122f, 6.1898245588800176f, 6.2094533656289510f,
				6.2288186904958804f, 6.2479275134435861f, 6.2667865406949019f,
				6.2854022188622487f, 6.3037807481771031f, 6.3219280948873617f,
				6.3398500028846252f, 6.3575520046180847f, 6.3750394313469254f,
				6.3923174227787598f, 6.4093909361377026f, 6.4262647547020979f,
				6.4429434958487288f, 6.4594316186372982f, 6.4757334309663976f,
				6.4918530963296748f, 6.5077946401986964f, 6.5235619560570131f,
				6.5391588111080319f, 6.5545888516776376f, 6.5698556083309478f,
				6.5849625007211561f, 6.5999128421871278f, 6.6147098441152092f,
				6.6293566200796095f, 6.6438561897747253f, 6.6582114827517955f,
				6.6724253419714952f, 6.6865005271832185f, 6.7004397181410917f,
				6.7142455176661224f, 6.7279204545631988f, 6.7414669864011465f,
				6.7548875021634691f, 6.7681843247769260f, 6.7813597135246599f,
				6.7944158663501062f, 6.8073549220576037f, 6.8201789624151887f,
				6.8328900141647422f, 6.8454900509443757f, 6.8579809951275719f,
				6.8703647195834048f, 6.8826430493618416f, 6.8948177633079437f,
				6.9068905956085187f, 6.9188632372745955f, 6.9307373375628867f,
				6.9425145053392399f, 6.9541963103868758f, 6.9657842846620879f,
				6.9772799234999168f, 6.9886846867721664f, 7.0000000000000000f,
				7.0112272554232540f, 7.0223678130284544f, 7.0334230015374501f,
				7.0443941193584534f, 7.0552824355011898f, 7.0660891904577721f,
				7.0768155970508317f, 7.0874628412503400f, 7.0980320829605272f,
				7.1085244567781700f, 7.1189410727235076f, 7.1292830169449664f,
				7.1395513523987937f, 7.1497471195046822f, 7.1598713367783891f,
				7.1699250014423130f, 7.1799090900149345f, 7.1898245588800176f,
				7.1996723448363644f, 7.2094533656289492f, 7.2191685204621621f,
				7.2288186904958804f, 7.2384047393250794f, 7.2479275134435861f,
				7.2573878426926521f, 7.2667865406949019f, 7.2761244052742384f,
				7.2854022188622487f, 7.2946207488916270f, 7.3037807481771031f,
				7.3128829552843557f, 7.3219280948873617f, 7.3309168781146177f,
				7.3398500028846243f, 7.3487281542310781f, 7.3575520046180847f,
				7.3663222142458151f, 7.3750394313469254f, 7.3837042924740528f,
				7.3923174227787607f, 7.4008794362821844f, 7.4093909361377026f,
				7.4178525148858991f, 7.4262647547020979f, 7.4346282276367255f,
				7.4429434958487288f, 7.4512111118323299f, 7.4594316186372973f,
				7.4676055500829976f, 7.4757334309663976f, 7.4838157772642564f,
				7.4918530963296748f, 7.4998458870832057f, 7.5077946401986964f,
				7.5156998382840436f, 7.5235619560570131f, 7.5313814605163119f,
				7.5391588111080319f, 7.5468944598876373f, 7.5545888516776376f,
				7.5622424242210728f, 7.5698556083309478f, 7.5774288280357487f,
				7.5849625007211561f, 7.5924570372680806f, 7.5999128421871278f,
				7.6073303137496113f, 7.6147098441152075f, 7.6220518194563764f,
				7.6293566200796095f, 7.6366246205436488f, 7.6438561897747244f,
				7.6510516911789290f, 7.6582114827517955f, 7.6653359171851765f,
				7.6724253419714952f, 7.6794800995054464f, 7.6865005271832185f,
				7.6934869574993252f, 7.7004397181410926f, 7.7073591320808825f,
				7.7142455176661224f, 7.7210991887071856f, 7.7279204545631996f,
				7.7347096202258392f, 7.7414669864011465f, 7.7481928495894596f,
				7.7548875021634691f, 7.7615512324444795f, 7.7681843247769260f,
				7.7747870596011737f, 7.7813597135246608f, 7.7879025593914317f,
				7.7944158663501062f, 7.8008998999203047f, 7.8073549220576037f,
				7.8137811912170374f, 7.8201789624151887f, 7.8265484872909159f,
				7.8328900141647422f, 7.8392037880969445f, 7.8454900509443757f,
				7.8517490414160571f, 7.8579809951275719f, 7.8641861446542798f,
				7.8703647195834048f, 7.8765169465650002f, 7.8826430493618425f,
				7.8887432488982601f, 7.8948177633079446f, 7.9008668079807496f,
				7.9068905956085187f, 7.9128893362299619f, 7.9188632372745955f,
				7.9248125036057813f, 7.9307373375628867f, 7.9366379390025719f,
				7.9425145053392399f, 7.9483672315846778f, 7.9541963103868758f,
				7.9600019320680806f, 7.9657842846620870f, 7.9715435539507720f,
				7.9772799234999168f, 7.9829935746943104f, 7.9886846867721664f,
				7.9943534368588578f
			};

			private const double LOG_2_INV = 1.4426950408889634;

			private static double FastLog2(size_t v) {/* Faster logarithm for small integers, with the property of log2(0) == 0. */ if (v < kLog2Table.Length) {return kLog2Table[v]; } return Math.Log(v) * LOG_2_INV; }

			private static uint Log2FloorNonZero(size_t n) 
			{
	#if NETCOREAPP3_0
				if (System.Runtime.Intrinsics.X86.Lzcnt.IsSupported) {
					return 31u ^ (uint)System.Runtime.Intrinsics.X86.Lzcnt.LeadingZeroCount((uint)n | 1);
				}
				else if (System.Runtime.Intrinsics.Arm.Arm64.Base.IsSupported) {
					return 31u ^ (uint)System.Runtime.Intrinsics.Arm.Arm64.Base.LeadingZeroCount((uint)n | 1);
				}
	#endif
				size_t m = n;
				uint result = 0;
				while ((m >>= 1) != 0) result++;
				return result;
			}
		
			private static unsafe size_t FindMatchLengthWithLimit(byte* s1, byte* s2, size_t limit) 
			{
				size_t matched = 0;
				byte* s2_limit = s2 + limit;
				byte* s2_ptr = s2;
				/* Find out how long the match is. We loop over the data 32 bits at a
				   time until we find a 32-bit block that doesn't match; then we find
				   the first non-matching bit and use that to calculate the total
				   length of the match. */
				while (s2_ptr <= s2_limit - 4 && *(uint*) (s2_ptr) == *(uint*) (s1 + matched)) { s2_ptr += 4; matched += 4; }
				while ((s2_ptr < s2_limit) && (s1[matched] == *s2_ptr)) { ++s2_ptr; ++matched; }
				return matched;
			}

			private static readonly Dictionary<int, Hasher> kHashers = new Dictionary<int, Hasher> 
			{
					{10, new HashToBinaryTreeH10()},
					{2, new HashLongestMatchQuicklyH2()},
					{3, new HashLongestMatchQuicklyH3()},
					{4, new HashLongestMatchQuicklyH4()},
					{5, new HashLongestMatchH5()},
					{6, new HashLongestMatch64H6()},
					{40, new HashForgetfulChainH40()},
					{41, new HashForgetfulChainH41()},
					{42, new HashForgetfulChainH42()},
					{54, new HashLongestMatchQuicklyH54()}
				};

			[StructLayout(LayoutKind.Sequential)]
			private struct HasherCommon 
			{
				public BrotliHasherParams params_;

				/* False if hasher needs to be "prepared" before use. */
				public bool is_prepared_;

				public size_t dict_num_lookups;
				public size_t dict_num_matches;
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct BackwardMatch 
			{
				public uint distance;
				public uint length_and_code;
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct HasherSearchResult 
			{
				public size_t len;
				public size_t len_x_code; /* == len ^ len_code */
				public size_t distance;
				public score_t score;
			}

			private static unsafe void DestroyHasher(ref MemoryManager m, HasherHandle* handle) { if ((void*)(*handle) == null) return; BrotliFree(ref m, *handle); }

			private static unsafe score_t BackwardReferenceScoreUsingLastDistance(size_t copy_length) {return BROTLI_LITERAL_BYTE_SCORE * (score_t)copy_length + BROTLI_SCORE_BASE + 15; }

			private static unsafe void PrepareDistanceCache( int* distance_cache, int num_distances)
			{
				if (num_distances > 4)
				{
					int last_distance = distance_cache[0];
					distance_cache[4] = last_distance - 1;
					distance_cache[5] = last_distance + 1;
					distance_cache[6] = last_distance - 2;
					distance_cache[7] = last_distance + 2;
					distance_cache[8] = last_distance - 3;
					distance_cache[9] = last_distance + 3;
					if (num_distances > 10)
					{
						int next_last_distance = distance_cache[1];
						distance_cache[10] = next_last_distance - 1;
						distance_cache[11] = next_last_distance + 1;
						distance_cache[12] = next_last_distance - 2;
						distance_cache[13] = next_last_distance + 2;
						distance_cache[14] = next_last_distance - 3;
						distance_cache[15] = next_last_distance + 3;
					}
				}
			}

			/* Usually, we always choose the longest backward reference. This function
			   allows for the exception of that rule.

			   If we choose a backward reference that is further away, it will
			   usually be coded with more bits. We approximate this by assuming
			   log2(distance). If the distance can be expressed in terms of the
			   last four distances, we use some heuristic ants to estimate
			   the bits cost. For the first up to four literals we use the bit
			   cost of the literals from the literal cost model, after that we
			   use the average bit cost of the cost model.

			   This function is used to sometimes discard a longer backward reference
			   when it is not much longer and the bit cost for encoding it is more
			   than the saved literals.

			   backward_reference_offset MUST be positive. */
			private static unsafe score_t BackwardReferenceScore(size_t copy_length, size_t backward_reference_offset) { return BROTLI_SCORE_BASE + BROTLI_LITERAL_BYTE_SCORE * (score_t)copy_length - BROTLI_DISTANCE_BIT_PENALTY * Log2FloorNonZero(backward_reference_offset); }

			private static unsafe uint Hash14(byte* data) { uint h = *(uint*)(data) * kHashMul32; /* The higher bits contain more mixture from the multiplication, so we take our results from there. */ return h >> (32 - 14); }

			private static unsafe bool TestStaticDictionaryItem(size_t item, byte* data, size_t max_length, size_t max_backward, HasherSearchResult* out_)
			{
				size_t len;
				size_t dist;
				size_t offset;
				size_t matchlen;
				size_t backward;
				score_t score;
				len = item & 0x1F;
				dist = item >> 5;
				offset = kBrotliDictionaryOffsetsByLength[len] + len * dist;
				if (len > max_length) { return false; }

				fixed (byte* dict = kBrotliDictionary) matchlen = FindMatchLengthWithLimit(data, &dict[offset], len); 
				if (matchlen + kCutoffTransformsCount <= len || matchlen == 0) { return false; }
				{
					size_t cut = len - matchlen;
					size_t transform_id = (cut << 2) + (size_t)((kCutoffTransforms >> (int) (cut * 6)) & 0x3F);
					backward = max_backward + dist + 1 + (transform_id << kBrotliDictionarySizeBitsByLength[len]);
				}
				score = BackwardReferenceScore(matchlen, backward);
				if (score < out_->score) { return false; }
				out_->len = matchlen;
				out_->len_x_code = len ^ matchlen;
				out_->distance = backward;
				out_->score = score;
				return true;
			}

			private static unsafe bool SearchInStaticDictionary(ushort* dictionary_hash, HasherHandle handle, byte* data, size_t max_length, size_t max_backward, HasherSearchResult* out_, bool shallow)
			{
				size_t key;
				size_t i;
				bool is_match_found = false;
				HasherCommon* self = GetHasherCommon(handle);
				if (self->dict_num_matches < (self->dict_num_lookups >> 7)) { return false; }
				key = Hash14(data) << 1;
				for (i = 0; i < (shallow ? 1u : 2u); ++i, ++key)
				{
					size_t item = dictionary_hash[key];
					self->dict_num_lookups++;
					if (item != 0) { bool item_matches = TestStaticDictionaryItem(item, data, max_length, max_backward, out_); if (item_matches) { self->dict_num_matches++; is_match_found = true; } }
				}
				return is_match_found;
			}

			private static score_t BackwardReferencePenaltyUsingLastDistance(size_t distance_short_code) { return (score_t)39 + ((0x1CA10 >> (int) (distance_short_code & 0xE)) & 0xE); }

			private static unsafe size_t BackwardMatchLength(BackwardMatch* self) { return self->length_and_code >> 5; }

			private static unsafe size_t BackwardMatchLengthCode(BackwardMatch* self) { size_t code = self->length_and_code & 31; return code != 0 ? code : BackwardMatchLength(self); }

			private static unsafe void InitBackwardMatch(BackwardMatch* self, size_t dist, size_t len) { self->distance = (uint) dist; self->length_and_code = (uint) (len << 5); }

			private static unsafe void InitDictionaryBackwardMatch(BackwardMatch* self, size_t dist, size_t len, size_t len_code) { self->distance = (uint)dist; self->length_and_code = (uint)((len << 5) | (len == len_code ? 0 : len_code)); }

			private static unsafe HasherCommon* GetHasherCommon(HasherHandle handle) { return (HasherCommon*) handle; }

			private static unsafe void HasherReset(HasherHandle handle) { if ((void*) handle == null) return; GetHasherCommon(handle)->is_prepared_ = false; }

			private static unsafe size_t HasherSize(BrotliEncoderParams* params_, bool one_shot, size_t input_size) 
			{
				size_t result = sizeof(HasherCommon);
				Hasher h;
				if (kHashers.TryGetValue(params_->hasher.type, out h)) { result += h.HashMemAllocInBytes(params_, one_shot, input_size); }
				return result;
			}

			private static unsafe void HasherSetup(ref MemoryManager m, HasherHandle* handle, BrotliEncoderParams* params_, byte* data, size_t position, size_t input_size, bool is_last) 
			{
				HasherHandle self = null;
				HasherCommon* common = null;
				bool one_shot = (position == 0 && is_last);
				if ((byte*) (*handle) == null) 
				{
					size_t alloc_size;
					ChooseHasher(params_, &params_->hasher);
					alloc_size = HasherSize(params_, one_shot, input_size);
					self = BrotliAllocate(ref m, alloc_size);
					*handle = self;
					common = GetHasherCommon(self);
					common->params_ = params_->hasher;
					Hasher h;
					if (kHashers.TryGetValue(params_->hasher.type, out h)) { h.Initialize(*handle, params_); }
					HasherReset(*handle);
				}
				self = *handle;
				common = GetHasherCommon(self);
				if (!common->is_prepared_) 
				{
					Hasher h;
					if (kHashers.TryGetValue(params_->hasher.type, out h)) { h.Prepare(self, one_shot, input_size, data); }
					if (position == 0) { common->dict_num_lookups = 0; common->dict_num_matches = 0; }
					common->is_prepared_ = true;
				}
			}

			/* Custom LZ77 window. */
			private static unsafe void HasherPrependCustomDictionary(ref MemoryManager m, HasherHandle* handle, BrotliEncoderParams* params_, size_t size, byte* dict) 
			{
				size_t overlap;
				size_t i;
				HasherHandle self;
				HasherSetup(ref m, handle, params_, dict, 0, size, false);
				self = *handle;
				Hasher h;
				if (kHashers.TryGetValue(GetHasherCommon(self)->params_.type, out h)) { overlap = h.StoreLookahead() - 1; for (i = 0; i + overlap < size; i++) { h.Store(self, dict, ~(size_t)0, i); } }
			}

			private static unsafe void InitOrStitchToPreviousBlock( ref MemoryManager m, HasherHandle* handle, byte* data, size_t mask, BrotliEncoderParams* params_, size_t position, size_t input_size, bool is_last)
			{
				HasherHandle self;
				HasherSetup(ref m, handle, params_, data, position, input_size, is_last);
				self = *handle;
				Hasher h;
				if (kHashers.TryGetValue(GetHasherCommon(self)->params_.type, out h)) { h.StitchToPreviousBlock(self, input_size, position, data, mask); }
			}
		
			private static unsafe void BrotliEnsureCapacity(ref MemoryManager m, int t, void** a, size_t* c, size_t r) 
			{
				if (*c < r) 
				{
					size_t new_size = *c == 0 ? r : *c;
					void* new_array;
					while (new_size < r) new_size *= 2;
					new_array = BrotliAllocate(ref m, new_size * t);
					if (*c != 0) { memcpy(new_array, *a, *c * t); }
					BrotliFree(ref m, *a);
					*a = new_array;
					*c = new_size;
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct HistogramLiteral 
			{
				private const int DATA_SIZE = BROTLI_NUM_LITERAL_SYMBOLS;

				public fixed uint data_[DATA_SIZE];
				public size_t total_count_;
				public double bit_cost_;

				public static void HistogramClear(HistogramLiteral* self) 
				{
					memset(self->data_, 0, DATA_SIZE * sizeof(uint));
					self->total_count_ = 0;
					self->bit_cost_ = double.MaxValue;
				}

				public static void ClearHistograms(HistogramLiteral* array, size_t length)  { size_t i; for (i = 0; i < length; ++i) HistogramClear(array + i); }

				public static void HistogramAdd(HistogramLiteral* self, size_t val) { ++self->data_[val]; ++self->total_count_; }

				public static void HistogramAddVector(HistogramLiteral* self, byte* p, size_t n) { self->total_count_ += n; n += 1; while (--n != 0) ++self->data_[*p++]; }

				public static void HistogramAddHistogram(HistogramLiteral* self, HistogramLiteral* v) { size_t i; self->total_count_ += v->total_count_; for (i = 0; i < DATA_SIZE; ++i) { self->data_[i] += v->data_[i]; } }

				public static size_t HistogramDataSize() { return DATA_SIZE; }
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct HistogramCommand
			{
				private const int DATA_SIZE = BROTLI_NUM_COMMAND_SYMBOLS;

				public fixed uint data_[DATA_SIZE];
				public size_t total_count_;
				public double bit_cost_;

				public static void HistogramClear(HistogramCommand* self)
				{
					memset(self->data_, 0, DATA_SIZE * sizeof(uint));
					self->total_count_ = 0; self->bit_cost_ = double.MaxValue;
				}

				public static void ClearHistograms(HistogramCommand* array, size_t length) { size_t i; for (i = 0; i < length; ++i) HistogramClear(array + i); }

				public static void HistogramAdd(HistogramCommand* self, size_t val) { ++self->data_[val]; ++self->total_count_; }

				public static void HistogramAddVector(HistogramCommand* self, ushort* p, size_t n) { self->total_count_ += n; n += 1; while (--n != 0) ++self->data_[*p++]; }

				public static void HistogramAddHistogram(HistogramCommand* self, HistogramCommand* v) {size_t i; self->total_count_ += v->total_count_; for (i = 0; i < DATA_SIZE; ++i) { self->data_[i] += v->data_[i]; } }

				public static size_t HistogramDataSize() { return DATA_SIZE; }
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct HistogramDistance
			{
				private const int DATA_SIZE = BROTLI_NUM_DISTANCE_SYMBOLS;

				public fixed uint data_[DATA_SIZE];
				public size_t total_count_;
				public double bit_cost_;

				public static void HistogramClear(HistogramDistance* self)
				{
					memset(self->data_, 0, DATA_SIZE * sizeof(uint));
					self->total_count_ = 0;
					self->bit_cost_ = double.MaxValue;
				}

				public static void ClearHistograms(HistogramDistance* array, size_t length) { size_t i; for (i = 0; i < length; ++i) HistogramClear(array + i); }

				public static void HistogramAdd(HistogramDistance* self, size_t val) { ++self->data_[val]; ++self->total_count_; }

				public static void HistogramAddVector(HistogramDistance* self, ushort* p, size_t n)
				{ self->total_count_ += n; n += 1; while (--n != 0) ++self->data_[*p++]; }

				public static void HistogramAddHistogram(HistogramDistance* self, HistogramDistance* v) { size_t i; self->total_count_ += v->total_count_; for (i = 0; i < DATA_SIZE; ++i) { self->data_[i] += v->data_[i]; } }

				public static size_t HistogramDataSize() { return DATA_SIZE; }
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct BlockSplitIterator
			{
				public BlockSplit* split_;  /* Not owned. */
				public size_t idx_;
				public size_t type_;
				public size_t length_;
			}

			private static unsafe void InitBlockSplitIterator(BlockSplitIterator* self, BlockSplit* split)
			{
				self->split_ = split; self->idx_ = 0; self->type_ = 0;
				self->length_ = split->lengths != null ? split->lengths[0] : 0;
			}

			private static unsafe void BlockSplitIteratorNext(BlockSplitIterator* self)
			{
				if (self->length_ == 0)
				{
					++self->idx_;
					self->type_ = self->split_->types[self->idx_];
					self->length_ = self->split_->lengths[self->idx_];
				}
				--self->length_;
			}

			private static unsafe void BrotliBuildHistogramsWithContext( Command* cmds, size_t num_commands, BlockSplit* literal_split, BlockSplit* insert_and_copy_split,
				BlockSplit* dist_split, byte* ringbuffer, size_t start_pos, size_t mask, byte prev_byte, byte prev_byte2, ContextType* context_modes, 
				HistogramLiteral* literal_histograms, HistogramCommand* insert_and_copy_histograms, HistogramDistance* copy_dist_histograms)
			{
				size_t pos = start_pos;
				BlockSplitIterator literal_it;
				BlockSplitIterator insert_and_copy_it;
				BlockSplitIterator dist_it;
				size_t i;

				InitBlockSplitIterator(&literal_it, literal_split);
				InitBlockSplitIterator(&insert_and_copy_it, insert_and_copy_split);
				InitBlockSplitIterator(&dist_it, dist_split);
				for (i = 0; i < num_commands; ++i)
				{
					Command* cmd = &cmds[i];
					size_t j;
					BlockSplitIteratorNext(&insert_and_copy_it);
					HistogramCommand.HistogramAdd(&insert_and_copy_histograms[insert_and_copy_it.type_],
						cmd->cmd_prefix_);
					for (j = cmd->insert_len_; j != 0; --j)
					{
						size_t context;
						BlockSplitIteratorNext(&literal_it);
						context = context_modes != null ? ((literal_it.type_ << BROTLI_LITERAL_CONTEXT_BITS) + Context(prev_byte, prev_byte2, context_modes[literal_it.type_])) : literal_it.type_;
						HistogramLiteral.HistogramAdd(&literal_histograms[context], ringbuffer[pos & mask]);
						prev_byte2 = prev_byte;
						prev_byte = ringbuffer[pos & mask];
						++pos;
					}
					pos += CommandCopyLen(cmd);
					if (CommandCopyLen(cmd) != 0)
					{
						prev_byte2 = ringbuffer[(pos - 2) & mask];
						prev_byte = ringbuffer[(pos - 1) & mask];
						if (cmd->cmd_prefix_ >= 128)
						{
							size_t context;
							BlockSplitIteratorNext(&dist_it);
							context = (dist_it.type_ << BROTLI_DISTANCE_CONTEXT_BITS) + CommandDistanceContext(cmd);
							HistogramDistance.HistogramAdd(&copy_dist_histograms[context], cmd->dist_prefix_);
						}
					}
				}
			}

			private static unsafe size_t UTF8Position(size_t last, size_t c, size_t clamp)
			{
				if (c < 128) { return 0;  /* Next one is the 'Byte 1' again. */ } else if (c >= 192) {  /* Next one is the 'Byte 2' of utf-8 encoding. */ return Math.Min(1, clamp); }
				else
				{
					/* Let's decide over the last byte if this ends the sequence. */
					if (last < 0xe0)
					{ return 0;  /* Completed two or three byte coding. */ }
					else {  /* Next one is the 'Byte 3' of utf-8 encoding. */ return Math.Min(2, clamp); }
				}
			}

			private static unsafe size_t DecideMultiByteStatsLevel(size_t pos, size_t len, size_t mask, byte* data)
			{
				size_t* counts = stackalloc size_t[3];
				memset(counts, 0, 3 * sizeof(size_t));
				size_t max_utf8 = 1;  /* should be 2, but 1 compresses better. */
				size_t last_c = 0;
				size_t i;
				for (i = 0; i < len; ++i)
				{
					size_t c = data[(pos + i) & mask];
					++counts[UTF8Position(last_c, c, 2)];
					last_c = c;
				}
				if (counts[2] < 500) { max_utf8 = 1; }
				if (counts[1] + counts[2] < 25) { max_utf8 = 0; }
				return max_utf8;
			}

			private static unsafe void EstimateBitCostsForLiteralsUTF8(size_t pos, size_t len, size_t mask, byte* data, float* cost)
			{
				/* max_utf8 is 0 (normal ASCII single byte modeling),
				   1 (for 2-byte UTF-8 modeling), or 2 (for 3-byte UTF-8 modeling). */
				size_t max_utf8 = DecideMultiByteStatsLevel(pos, len, mask, data);
				size_t[,] histogram = new size_t[3, 256];
				//size_t histogram[3][256] = { { 0 } };
				size_t window_half = 495;
				size_t in_window = Math.Min(window_half, len);
				size_t* in_window_utf8 = stackalloc size_t[3];
				memset(in_window_utf8, 0, 3 * sizeof(size_t));

				size_t i;
				{  /* Bootstrap histograms. */
					size_t last_c = 0;
					size_t utf8_pos = 0;
					for (i = 0; i<in_window; ++i) 
					{
						size_t c = data[(pos + i) & mask]; ++histogram[utf8_pos, c];
						++in_window_utf8[utf8_pos]; utf8_pos = UTF8Position(last_c, c, max_utf8); last_c = c;
					}
				}

				/* Compute bit costs with sliding window. */
				for (i = 0; i<len; ++i) 
				{
					if (i >= window_half) 
					{
						/* Remove a byte in the past. */
						size_t c = i < window_half + 1 ? 0 : data[(pos + i - window_half - 1) & mask];
						size_t last_c = i < window_half + 2 ? 0 : data[(pos + i - window_half - 2) & mask];
						size_t utf8_pos2 = UTF8Position(last_c, c, max_utf8);
						--histogram[utf8_pos2, data[(pos + i - window_half) & mask]];
						--in_window_utf8[utf8_pos2];
					}
					if (i + window_half<len) 
					{
						/* Add a byte in the future. */
						size_t c = data[(pos + i + window_half - 1) & mask];
						size_t last_c = data[(pos + i + window_half - 2) & mask];
						size_t utf8_pos2 = UTF8Position(last_c, c, max_utf8);
						++histogram[utf8_pos2, data[(pos + i + window_half) & mask]];
						++in_window_utf8[utf8_pos2];
					}
					{
						size_t c = i < 1 ? 0 : data[(pos + i - 1) & mask];
						size_t last_c = i < 2 ? 0 : data[(pos + i - 2) & mask];
						size_t utf8_pos = UTF8Position(last_c, c, max_utf8);
						size_t masked_pos = (pos + i) & mask;
						size_t histo = histogram[utf8_pos, data[masked_pos]];
						double lit_cost;
						if (histo == 0) { histo = 1; }
						lit_cost = FastLog2(in_window_utf8[utf8_pos]) - FastLog2(histo);
						lit_cost += 0.02905;
						if (lit_cost< 1.0) { lit_cost *= 0.5; lit_cost += 0.5; }
						/* Make the first bytes more expensive -- seems to help, not sure why.
						   Perhaps because the entropy source is changing its properties
						   rapidly in the beginning of the file, perhaps because the beginning
						   of the data is a statistical "anomaly". */
						if (i < 2000) { lit_cost += 0.7 - ((double)(2000 - i) / 2000.0 * 0.35); }
						cost[i] = (float)lit_cost;
					}
				}
			}

			private static unsafe void BrotliEstimateBitCostsForLiterals(size_t pos, size_t len, size_t mask, byte* data, float* cost)
			{
				if (BrotliIsMostlyUTF8(data, pos, mask, len, kMinUTF8Ratio)) { EstimateBitCostsForLiteralsUTF8(pos, len, mask, data, cost); return; }
				else
				{
					size_t* histogram = stackalloc size_t[256];
					memset(histogram, 0, 256 * sizeof(size_t));
					size_t window_half = 2000;
					size_t in_window = Math.Min(window_half, len);

					/* Bootstrap histogram. */
					size_t i;
					for (i = 0; i < in_window; ++i) { ++histogram[data[(pos + i) & mask]]; }

					/* Compute bit costs with sliding window. */
					for (i = 0; i < len; ++i)
					{
						size_t histo;
						if (i >= window_half)
						{
							/* Remove a byte in the past. */
							--histogram[data[(pos + i - window_half) & mask]];
							--in_window;
						}
						if (i + window_half < len)
						{
							/* Add a byte in the future. */
							++histogram[data[(pos + i + window_half) & mask]];
							++in_window;
						}
						histo = histogram[data[(pos + i) & mask]];
						if (histo == 0) { histo = 1; }
						{
							double lit_cost = FastLog2(in_window) - FastLog2(histo);
							lit_cost += 0.029;
							if (lit_cost < 1.0) { lit_cost *= 0.5; lit_cost += 0.5; }
							cost[i] = (float)lit_cost;
						}
					}
				}
			}
		
			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct MemoryManager 
			{
				public brotli_alloc_func alloc_func;
				public brotli_free_func free_func;
				public void* opaque;
			}

			private static unsafe void BrotliInitMemoryManager(
				ref MemoryManager m, brotli_alloc_func alloc_func, brotli_free_func free_func, void* opaque) 
			{
				if (alloc_func == null) { m.alloc_func = DefaultAllocFunc; m.free_func = DefaultFreeFunc; m.opaque = null; }
				else { m.alloc_func = alloc_func; m.free_func = free_func; m.opaque = opaque; }
			}

			private static unsafe void* BrotliAllocate(ref MemoryManager m, size_t n) { return m.alloc_func(m.opaque, n); }

			private static unsafe void BrotliFree(ref MemoryManager m, void* p) { m.free_func(m.opaque, p); }

			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct MetaBlockSplit 
			{
				public BlockSplit literal_split;
				public BlockSplit command_split;
				public BlockSplit distance_split;
				public uint* literal_context_map;
				public size_t literal_context_map_size;
				public uint* distance_context_map;
				public size_t distance_context_map_size;
				public HistogramLiteral* literal_histograms;
				public size_t literal_histograms_size;
				public HistogramCommand* command_histograms;
				public size_t command_histograms_size;
				public HistogramDistance* distance_histograms;
				public size_t distance_histograms_size;
			}

			/* Greedy block splitter for one block category (literal, command or distance).
			   Gathers histograms for all context buckets. */
			[StructLayout(LayoutKind.Sequential)]
			private unsafe struct ContextBlockSplitter 
			{
				/* Alphabet size of particular block category. */
				public size_t alphabet_size_;

				public size_t num_contexts_;

				public size_t max_block_types_;

				/* We collect at least this many symbols for each block. */
				public size_t min_block_size_;

				/* We merge histograms A and B if
					 entropy(A+B) < entropy(A) + entropy(B) + split_threshold_,
				   where A is the current histogram and B is the histogram of the last or the
				   second last block type. */
				public double split_threshold_;

				public size_t num_blocks_;
				public BlockSplit* split_; /* not owned */
				public HistogramLiteral* histograms_; /* not owned */
				public size_t* histograms_size_; /* not owned */

				/* The number of symbols that we want to collect before deciding on whether
				   or not to merge the block with a previous one or emit a new block. */
				public size_t target_block_size_;

				/* The number of symbols in the current histogram. */
				public size_t block_size_;

				/* Offset of the current histogram. */
				public size_t curr_histogram_ix_;

				/* Offset of the histograms of the previous two block types. */
				public size_t last_histogram_ix_0;

				public size_t last_histogram_ix_1;

				/* Entropy of the previous two block types. */
				public fixed double last_entropy_[2 * BROTLI_MAX_STATIC_CONTEXTS];

				/* The number of times we merged the current block with the last one. */
				public size_t merge_last_count_;
			}

			private static unsafe void BrotliBuildMetaBlock(ref MemoryManager m, byte* ringbuffer, size_t pos, size_t mask,
				BrotliEncoderParams* params_, byte prev_byte, byte prev_byte2, Command* cmds, size_t num_commands,
				ContextType literal_context_mode, MetaBlockSplit* mb) 
			{
				/* Histogram ids need to fit in one byte. */
				size_t kMaxNumberOfHistograms = 256;
				HistogramDistance* distance_histograms;
				HistogramLiteral* literal_histograms;
				ContextType* literal_context_modes = null;
				size_t literal_histograms_size;
				size_t distance_histograms_size;
				size_t i;
				size_t literal_context_multiplier = 1;

				BrotliSplitBlock(ref m, cmds, num_commands, ringbuffer, pos, mask, params_, &mb->literal_split, &mb->command_split, &mb->distance_split);

				if (!params_->disable_literal_context_modeling) 
				{
					literal_context_multiplier = 1 << BROTLI_LITERAL_CONTEXT_BITS;
					literal_context_modes = (ContextType*) BrotliAllocate(ref m, mb->literal_split.num_types * sizeof(ContextType));
					for (i = 0; i < mb->literal_split.num_types; ++i) { literal_context_modes[i] = literal_context_mode; }
				}

				literal_histograms_size = mb->literal_split.num_types * literal_context_multiplier;
				literal_histograms = (HistogramLiteral*) BrotliAllocate(ref m, literal_histograms_size * sizeof(HistogramLiteral));
				HistogramLiteral.ClearHistograms(literal_histograms, literal_histograms_size);

				distance_histograms_size = mb->distance_split.num_types << BROTLI_DISTANCE_CONTEXT_BITS;
				distance_histograms = (HistogramDistance*) BrotliAllocate(ref m, distance_histograms_size * sizeof(HistogramDistance));
				HistogramDistance.ClearHistograms(distance_histograms, distance_histograms_size);
				mb->command_histograms_size = mb->command_split.num_types;
				mb->command_histograms = (HistogramCommand*) BrotliAllocate(ref m, mb->command_histograms_size * sizeof(HistogramCommand));
				HistogramCommand.ClearHistograms(mb->command_histograms, mb->command_histograms_size);
				BrotliBuildHistogramsWithContext(cmds, num_commands, &mb->literal_split, &mb->command_split, &mb->distance_split, ringbuffer, pos, mask, prev_byte, prev_byte2, literal_context_modes, literal_histograms, mb->command_histograms, distance_histograms);
				BrotliFree(ref m, literal_context_modes);

				mb->literal_context_map_size = mb->literal_split.num_types << BROTLI_LITERAL_CONTEXT_BITS;
				mb->literal_context_map = (uint*) BrotliAllocate(ref m, mb->literal_context_map_size * sizeof(uint));
				mb->literal_histograms_size = mb->literal_context_map_size;
				mb->literal_histograms = (HistogramLiteral*) BrotliAllocate(ref m, mb->literal_histograms_size * sizeof(HistogramLiteral));

				ClusterLiteral.BrotliClusterHistograms(ref m, literal_histograms, literal_histograms_size, kMaxNumberOfHistograms, mb->literal_histograms, &mb->literal_histograms_size, mb->literal_context_map);
				BrotliFree(ref m, literal_histograms);

				if (params_->disable_literal_context_modeling) 
				{
					/* Distribute assignment to all contexts. */
					for (i = mb->literal_split.num_types; i != 0;) { size_t j = 0; i--; for (; j < (1 << BROTLI_LITERAL_CONTEXT_BITS); j++) { mb->literal_context_map[(i << BROTLI_LITERAL_CONTEXT_BITS) + j] = mb->literal_context_map[i]; } }
				}

				mb->distance_context_map_size = mb->distance_split.num_types << BROTLI_DISTANCE_CONTEXT_BITS;
				mb->distance_context_map = (uint*) BrotliAllocate(ref m, mb->distance_context_map_size * sizeof(uint));

				mb->distance_histograms_size = mb->distance_context_map_size;
				mb->distance_histograms = (HistogramDistance*) BrotliAllocate(ref m, mb->distance_histograms_size * sizeof(HistogramDistance));

				ClusterDistance.BrotliClusterHistograms(ref m, distance_histograms, mb->distance_context_map_size, kMaxNumberOfHistograms, mb->distance_histograms, &mb->distance_histograms_size, mb->distance_context_map);
				BrotliFree(ref m, distance_histograms);
			}

			private static unsafe void InitMetaBlockSplit(MetaBlockSplit* mb) 
			{
				BrotliInitBlockSplit(&mb->literal_split);
				BrotliInitBlockSplit(&mb->command_split);
				BrotliInitBlockSplit(&mb->distance_split);
				mb->literal_context_map = null;
				mb->literal_context_map_size = 0;
				mb->distance_context_map = null;
				mb->distance_context_map_size = 0;
				mb->literal_histograms = null;
				mb->literal_histograms_size = 0;
				mb->command_histograms = null;
				mb->command_histograms_size = 0;
				mb->distance_histograms = null;
				mb->distance_histograms_size = 0;
			}

			private static unsafe void InitContextBlockSplitter( ref MemoryManager m, ContextBlockSplitter* self, size_t alphabet_size, size_t num_contexts,
				size_t min_block_size, double split_threshold, size_t num_symbols, BlockSplit* split, HistogramLiteral** histograms, size_t* histograms_size) 
			{
				size_t max_num_blocks = num_symbols / min_block_size + 1;
				size_t max_num_types;

				self->alphabet_size_ = alphabet_size;
				self->num_contexts_ = num_contexts;
				self->max_block_types_ = BROTLI_MAX_NUMBER_OF_BLOCK_TYPES / num_contexts;
				self->min_block_size_ = min_block_size;
				self->split_threshold_ = split_threshold;
				self->num_blocks_ = 0;
				self->split_ = split;
				self->histograms_size_ = histograms_size;
				self->target_block_size_ = min_block_size;
				self->block_size_ = 0;
				self->curr_histogram_ix_ = 0;
				self->merge_last_count_ = 0;

				/* We have to allocate one more histogram than the maximum number of block
				   types for the current histogram when the meta-block is too big. */
				max_num_types = Math.Min(max_num_blocks, self->max_block_types_ + 1);
				BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, max_num_blocks);
				BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, max_num_blocks);
				split->num_blocks = max_num_blocks;
				*histograms_size = max_num_types * num_contexts;
				*histograms = (HistogramLiteral*) BrotliAllocate(ref m, *histograms_size * sizeof(HistogramLiteral));
				self->histograms_ = *histograms;
				/* Clear only current histogram. */
				HistogramLiteral.ClearHistograms(&self->histograms_[0], num_contexts);
				self->last_histogram_ix_0 = self->last_histogram_ix_1 = 0;
			}

			/* Does either of three things:
				 (1) emits the current block with a new block type;
				 (2) emits the current block with the type of the second last block;
				 (3) merges the current block with the last block. */
			private static unsafe void ContextBlockSplitterFinishBlock(ContextBlockSplitter* self, ref MemoryManager m, bool is_final) 
			{
				BlockSplit* split = self->split_;
				size_t num_contexts = self->num_contexts_;
				double* last_entropy = self->last_entropy_;
				HistogramLiteral* histograms = self->histograms_;

				if (self->block_size_ < self->min_block_size_) { self->block_size_ = self->min_block_size_; }
				if (self->num_blocks_ == 0) 
				{
					size_t i;
					/* Create first block. */
					split->lengths[0] = (uint) self->block_size_;
					split->types[0] = 0;

					for (i = 0; i < num_contexts; ++i)  { last_entropy[i] = BitsEntropy(histograms[i].data_, self->alphabet_size_); last_entropy[num_contexts + i] = last_entropy[i]; }
					++self->num_blocks_;
					++split->num_types;
					self->curr_histogram_ix_ += num_contexts;
					if (self->curr_histogram_ix_ < *self->histograms_size_)  { HistogramLiteral.ClearHistograms( &self->histograms_[self->curr_histogram_ix_], self->num_contexts_); }
					self->block_size_ = 0;
				}
				else if (self->block_size_ > 0) 
				{
					/* Try merging the set of histograms for the current block type with the
					   respective set of histograms for the last and second last block types.
					   Decide over the split based on the total reduction of entropy across
					   all contexts. */
					double* entropy = stackalloc double[BROTLI_MAX_STATIC_CONTEXTS];
					HistogramLiteral* combined_histo =
						(HistogramLiteral*) BrotliAllocate(ref m, 2 * num_contexts * sizeof(HistogramLiteral));
					double[] combined_entropy = new double[2 * BROTLI_MAX_STATIC_CONTEXTS];
					double[] diff = {0.0, 0.0};
					size_t i;
					for (i = 0; i < num_contexts; ++i) 
					{
						size_t curr_histo_ix = self->curr_histogram_ix_ + i;
						size_t j;
						entropy[i] = BitsEntropy(histograms[curr_histo_ix].data_, self->alphabet_size_);
						for (j = 0; j < 2; ++j) 
						{
							size_t jx = j * num_contexts + i;
							size_t last_histogram_ix = (j == 0 ? self->last_histogram_ix_0 : self->last_histogram_ix_1) + i;
							combined_histo[jx] = histograms[curr_histo_ix];
							HistogramLiteral.HistogramAddHistogram(&combined_histo[jx], &histograms[last_histogram_ix]);
							combined_entropy[jx] = BitsEntropy( &combined_histo[jx].data_[0], self->alphabet_size_);
							diff[j] += combined_entropy[jx] - entropy[i] - last_entropy[jx];
						}
					}

					if (split->num_types < self->max_block_types_ && diff[0] > self->split_threshold_ && diff[1] > self->split_threshold_) 
					{
						/* Create new block. */
						split->lengths[self->num_blocks_] = (uint) self->block_size_;
						split->types[self->num_blocks_] = (byte) split->num_types;
						self->last_histogram_ix_1 = self->last_histogram_ix_0;
						self->last_histogram_ix_0 = split->num_types * num_contexts;
						for (i = 0; i < num_contexts; ++i) { last_entropy[num_contexts + i] = last_entropy[i]; last_entropy[i] = entropy[i]; }
						++self->num_blocks_;
						++split->num_types;
						self->curr_histogram_ix_ += num_contexts;
						if (self->curr_histogram_ix_ < *self->histograms_size_) { HistogramLiteral.ClearHistograms( &self->histograms_[self->curr_histogram_ix_], self->num_contexts_); }
						self->block_size_ = 0;
						self->merge_last_count_ = 0;
						self->target_block_size_ = self->min_block_size_;
					}
					else if (diff[1] < diff[0] - 20.0) 
					{
						/* Combine this block with second last block. */
						split->lengths[self->num_blocks_] = (uint) self->block_size_;
						split->types[self->num_blocks_] = split->types[self->num_blocks_ - 2];
						size_t tmp = self->last_histogram_ix_0;
						self->last_histogram_ix_0 = self->last_histogram_ix_1;
						self->last_histogram_ix_1 = tmp;
						for (i = 0; i < num_contexts; ++i) 
						{
							histograms[self->last_histogram_ix_0 + i] = combined_histo[num_contexts + i];
							last_entropy[num_contexts + i] = last_entropy[i];
							last_entropy[i] = combined_entropy[num_contexts + i];
							HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_ + i]);
						}
						++self->num_blocks_;
						self->block_size_ = 0;
						self->merge_last_count_ = 0;
						self->target_block_size_ = self->min_block_size_;
					}
					else 
					{
						/* Combine this block with last block. */
						split->lengths[self->num_blocks_ - 1] += (uint) self->block_size_;
						for (i = 0; i < num_contexts; ++i) 
						{
							histograms[self->last_histogram_ix_0 + i] = combined_histo[i];
							last_entropy[i] = combined_entropy[i];
							if (split->num_types == 1) { last_entropy[num_contexts + i] = last_entropy[i]; }
							HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_ + i]);
						}
						self->block_size_ = 0;
						if (++self->merge_last_count_ > 1) { self->target_block_size_ += self->min_block_size_; }
					}
					BrotliFree(ref m, combined_histo);
				}
				if (is_final) { *self->histograms_size_ = split->num_types * num_contexts; split->num_blocks = self->num_blocks_; }
			}

			/* Adds the next symbol to the current block type and context. When the
			   current block reaches the target size, decides on merging the block. */
			private static unsafe void ContextBlockSplitterAddSymbol( ContextBlockSplitter* self, ref MemoryManager m, size_t symbol, size_t context) 
			{
				HistogramLiteral.HistogramAdd(&self->histograms_[self->curr_histogram_ix_ + context], symbol);
				++self->block_size_;
				if (self->block_size_ == self->target_block_size_) { ContextBlockSplitterFinishBlock(self, ref m, /* is_final = */ false); }
			}

			private static unsafe void MapStaticContexts(ref MemoryManager m, size_t num_contexts, uint* static_context_map, MetaBlockSplit* mb) 
			{
				size_t i;
				mb->literal_context_map_size = mb->literal_split.num_types << BROTLI_LITERAL_CONTEXT_BITS;
				mb->literal_context_map = (uint*) BrotliAllocate(ref m, mb->literal_context_map_size * sizeof(uint)); 
				for (i = 0; i < mb->literal_split.num_types; ++i) 
				{
					uint offset = (uint) (i * num_contexts);
					size_t j;
					for (j = 0; j < (1u << BROTLI_LITERAL_CONTEXT_BITS); ++j)  { mb->literal_context_map[(i << BROTLI_LITERAL_CONTEXT_BITS) + j] = offset + static_context_map[j]; }
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private struct lit_blocks_union {
				public ContextBlockSplitter ctx;
			}

			private static unsafe void BrotliBuildMetaBlockGreedyInternal(ref MemoryManager m, byte* ringbuffer, size_t pos, size_t mask,
				byte prev_byte, byte prev_byte2, ContextType literal_context_mode, size_t num_contexts, uint* static_context_map,
				Command* commands, size_t n_commands, MetaBlockSplit* mb) 
			{
				lit_blocks_union lit_blocks = new lit_blocks_union();
				BlockSplitterCommand cmd_blocks;
				BlockSplitterDistance dist_blocks;
				size_t num_literals = 0;
				size_t i;
				for (i = 0; i < n_commands; ++i) {num_literals += commands[i].insert_len_; }

				if (num_contexts == 1) { BlockSplitterLiteral.InitBlockSplitter(ref m, (BlockSplitterLiteral*) &lit_blocks, 256, 512, 400.0, num_literals, &mb->literal_split, &mb->literal_histograms, &mb->literal_histograms_size); }
				else { InitContextBlockSplitter(ref m, &lit_blocks.ctx, 256, num_contexts, 512, 400.0, num_literals, &mb->literal_split, &mb->literal_histograms, &mb->literal_histograms_size); }
				BlockSplitterCommand.InitBlockSplitter(ref m, &cmd_blocks, BROTLI_NUM_COMMAND_SYMBOLS, 1024, 500.0, n_commands, &mb->command_split, &mb->command_histograms, &mb->command_histograms_size);
				BlockSplitterDistance.InitBlockSplitter(ref m, &dist_blocks, 64, 512, 100.0, n_commands, &mb->distance_split, &mb->distance_histograms, &mb->distance_histograms_size);

				for (i = 0; i < n_commands; ++i) 
				{
					Command cmd = commands[i];
					size_t j;
					BlockSplitterCommand.BlockSplitterAddSymbol(&cmd_blocks, cmd.cmd_prefix_);
					for (j = cmd.insert_len_; j != 0; --j) 
					{
						byte literal = ringbuffer[pos & mask];
						if (num_contexts == 1) { BlockSplitterLiteral.BlockSplitterAddSymbol((BlockSplitterLiteral*) &lit_blocks, literal); }
						else {
							size_t context = Context(prev_byte, prev_byte2, literal_context_mode);
							ContextBlockSplitterAddSymbol(&lit_blocks.ctx, ref m, literal, static_context_map[context]); }
						prev_byte2 = prev_byte;
						prev_byte = literal;
						++pos;
					}
					pos += CommandCopyLen(&cmd);
					if (CommandCopyLen(&cmd) != 0) 
					{
						prev_byte2 = ringbuffer[(pos - 2) & mask];
						prev_byte = ringbuffer[(pos - 1) & mask];
						if (cmd.cmd_prefix_ >= 128) { BlockSplitterDistance.BlockSplitterAddSymbol(&dist_blocks, cmd.dist_prefix_); }
					}
				}

				if (num_contexts == 1) {BlockSplitterLiteral.BlockSplitterFinishBlock((BlockSplitterLiteral*) &lit_blocks, /* is_final = */ true); }
				else { ContextBlockSplitterFinishBlock( &lit_blocks.ctx, ref m, /* is_final = */ true); }
				BlockSplitterCommand.BlockSplitterFinishBlock(&cmd_blocks, /* is_final = */ true);
				BlockSplitterDistance.BlockSplitterFinishBlock(&dist_blocks, /* is_final = */ true);

				if (num_contexts > 1) { MapStaticContexts(ref m, num_contexts, static_context_map, mb); }
			}

			private static unsafe void BrotliBuildMetaBlockGreedy(ref MemoryManager m, byte* ringbuffer, size_t pos, size_t mask, byte prev_byte, byte prev_byte2,
				ContextType literal_context_mode, size_t num_contexts, uint* static_context_map, Command* commands, size_t n_commands, MetaBlockSplit* mb) 
			{
				if (num_contexts == 1) { BrotliBuildMetaBlockGreedyInternal(ref m, ringbuffer, pos, mask, prev_byte, prev_byte2, literal_context_mode, 1, null, commands, n_commands, mb); }
				else { BrotliBuildMetaBlockGreedyInternal(ref m, ringbuffer, pos, mask, prev_byte, prev_byte2, literal_context_mode, num_contexts, static_context_map, commands, n_commands, mb); }
			}

			private static unsafe void DestroyMetaBlockSplit(
				ref MemoryManager m, MetaBlockSplit* mb)
			{
				BrotliDestroyBlockSplit(ref m, &mb->literal_split);
				BrotliDestroyBlockSplit(ref m, &mb->command_split);
				BrotliDestroyBlockSplit(ref m, &mb->distance_split);
				BrotliFree(ref m, mb->literal_context_map);
				BrotliFree(ref m, mb->distance_context_map);
				BrotliFree(ref m, mb->literal_histograms);
				BrotliFree(ref m, mb->command_histograms);
				BrotliFree(ref m, mb->distance_histograms);
			}

			private static unsafe void BrotliOptimizeHistograms(size_t num_direct_distance_codes, size_t distance_postfix_bits, MetaBlockSplit* mb)
			{
				byte* good_for_rle = stackalloc byte[BROTLI_NUM_COMMAND_SYMBOLS];
				size_t num_distance_codes;
				size_t i;
				for (i = 0; i < mb->literal_histograms_size; ++i) { BrotliOptimizeHuffmanCountsForRle(256, mb->literal_histograms[i].data_, good_for_rle); }
				for (i = 0; i < mb->command_histograms_size; ++i) { BrotliOptimizeHuffmanCountsForRle(BROTLI_NUM_COMMAND_SYMBOLS, mb->command_histograms[i].data_, good_for_rle); }
				num_distance_codes = BROTLI_NUM_DISTANCE_SHORT_CODES + num_direct_distance_codes + ((2 * BROTLI_MAX_DISTANCE_BITS) << (int) distance_postfix_bits);
				for (i = 0; i < mb->distance_histograms_size; ++i) { BrotliOptimizeHuffmanCountsForRle(num_distance_codes, mb->distance_histograms[i].data_, good_for_rle); }
			}
		

			[StructLayout(LayoutKind.Sequential)]
			private unsafe partial struct BlockSplitterLiteral
			{
				/* Alphabet size of particular block category. */
				public size_t alphabet_size_;
				/* We collect at least this many symbols for each block. */
				public size_t min_block_size_;
				/* We merge histograms A and B if
					 entropy(A+B) < entropy(A) + entropy(B) + split_threshold_,
				   where A is the current histogram and B is the histogram of the last or the
				   second last block type. */
				public double split_threshold_;

				public size_t num_blocks_;
				public BlockSplit* split_;  /* not owned */
				public HistogramLiteral* histograms_;  /* not owned */
				public size_t* histograms_size_;  /* not owned */

				/* The number of symbols that we want to collect before deciding on whether
				   or not to merge the block with a previous one or emit a new block. */
				public size_t target_block_size_;
				/* The number of symbols in the current histogram. */
				public size_t block_size_;
				/* Offset of the current histogram. */
				public size_t curr_histogram_ix_;
				/* Offset of the histograms of the previous two block types. */
				public size_t last_histogram_ix_0;
				public size_t last_histogram_ix_1;
				/* Entropy of the previous two block types. */
				public fixed double last_entropy_[2];
				/* The number of times we merged the current block with the last one. */
				public size_t merge_last_count_;

				public static unsafe void InitBlockSplitter(
					ref MemoryManager m, BlockSplitterLiteral* self, size_t alphabet_size,
					size_t min_block_size, double split_threshold, size_t num_symbols,
					BlockSplit * split, HistogramLiteral* *histograms, size_t * histograms_size) {
					size_t max_num_blocks = num_symbols / min_block_size + 1;
					/* We have to allocate one more histogram than the maximum number of block
					   types for the current histogram when the meta-block is too big. */
					size_t max_num_types =
						Math.Min(max_num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES + 1);
					self->alphabet_size_ = alphabet_size;
					self->min_block_size_ = min_block_size;
					self->split_threshold_ = split_threshold;
					self->num_blocks_ = 0;
					self->split_ = split;
					self->histograms_size_ = histograms_size;
					self->target_block_size_ = min_block_size;
					self->block_size_ = 0;
					self->curr_histogram_ix_ = 0;
					self->merge_last_count_ = 0;
					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, max_num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, max_num_blocks);
					self->split_->num_blocks = max_num_blocks;
					*histograms_size = max_num_types;
					*histograms = (HistogramLiteral*) BrotliAllocate(ref m, * histograms_size * sizeof(HistogramLiteral));
					self->histograms_ = *histograms;
					/* Clear only current histogram. */
					HistogramLiteral.HistogramClear(&self->histograms_[0]);
					self->last_histogram_ix_0 = self->last_histogram_ix_1 = 0;
				}

				/* Does either of three things:
				 (1) emits the current block with a new block type;
				 (2) emits the current block with the type of the second last block;
				 (3) merges the current block with the last block. */
				public static unsafe void BlockSplitterFinishBlock(
				BlockSplitterLiteral* self, bool is_final) {
					BlockSplit* split = self->split_;
					double* last_entropy = self->last_entropy_;
					HistogramLiteral* histograms = self->histograms_;
					self->block_size_ =
						Math.Max(self->block_size_, self->min_block_size_);
					if (self->num_blocks_ == 0) {
						/* Create first block. */
						split->lengths[0] = (uint)self->block_size_;
						split->types[0] = 0;
						last_entropy[0] =
							BitsEntropy(histograms[0].data_, self->alphabet_size_);
						last_entropy[1] = last_entropy[0];
						++self->num_blocks_;
						++split->num_types;
						++self->curr_histogram_ix_;
						if (self->curr_histogram_ix_< *self->histograms_size_)
							HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_]);
						self->block_size_ = 0;
					} else if (self->block_size_ > 0) {
						double entropy = BitsEntropy(histograms[self->curr_histogram_ix_].data_,
							self->alphabet_size_);
						HistogramLiteral* combined_histo = stackalloc HistogramLiteral[2];
						double* combined_entropy = stackalloc double[2];
						double* diff = stackalloc double[2];
						size_t j;
						for (j = 0; j< 2; ++j) {
							size_t last_histogram_ix = j == 0 ? self->last_histogram_ix_0 : self->last_histogram_ix_1;
							combined_histo[j] = histograms[self->curr_histogram_ix_];
							HistogramLiteral.HistogramAddHistogram(&combined_histo[j],
								&histograms[last_histogram_ix]);
							combined_entropy[j] = BitsEntropy(
								&combined_histo[j].data_[0], self->alphabet_size_);
							diff[j] = combined_entropy[j] - entropy - last_entropy[j];
						}

						if (split->num_types<BROTLI_MAX_NUMBER_OF_BLOCK_TYPES &&
							diff[0]> self->split_threshold_ &&
							diff[1] > self->split_threshold_) {
							/* Create new block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = (byte)split->num_types;
							self->last_histogram_ix_1 = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = (byte)split->num_types;
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = entropy;
							++self->num_blocks_;
							++split->num_types;
							++self->curr_histogram_ix_;
							if (self->curr_histogram_ix_< *self->histograms_size_)
							   HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->block_size_ = 0;
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						} else if (diff[1] < diff[0] - 20.0) {
							/* Combine this block with second last block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = split->types[self->num_blocks_ - 2];
							size_t tmp = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = self->last_histogram_ix_1;
							self->last_histogram_ix_1 = tmp;
							histograms[self->last_histogram_ix_0] = combined_histo[1];
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = combined_entropy[1];
							++self->num_blocks_;
							self->block_size_ = 0;
							HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						} else {
							/* Combine this block with last block. */
							split->lengths[self->num_blocks_ - 1] += (uint)self->block_size_;
							histograms[self->last_histogram_ix_0] = combined_histo[0];
							last_entropy[0] = combined_entropy[0];
							if (split->num_types == 1) {
								last_entropy[1] = last_entropy[0];
							}
							self->block_size_ = 0;
							HistogramLiteral.HistogramClear(&histograms[self->curr_histogram_ix_]);
							if (++self->merge_last_count_ > 1) {
								self->target_block_size_ += self->min_block_size_;
							}
						}
					}
					if (is_final) {
						* self->histograms_size_ = split->num_types;
						split->num_blocks = self->num_blocks_;
					}
				}

				/* Adds the next symbol to the current histogram. When the current histogram
				   reaches the target size, decides on merging the block. */
				public static unsafe void BlockSplitterAddSymbol(BlockSplitterLiteral* self, size_t symbol) {
					HistogramLiteral.HistogramAdd(&self->histograms_[self->curr_histogram_ix_], symbol);
					++self->block_size_;
					if (self->block_size_ == self->target_block_size_) {
						BlockSplitterFinishBlock(self, /* is_final = */ false);
					}
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe partial struct BlockSplitterCommand
			{
				/* Alphabet size of particular block category. */
				public size_t alphabet_size_;
				/* We collect at least this many symbols for each block. */
				public size_t min_block_size_;
				/* We merge histograms A and B if
					 entropy(A+B) < entropy(A) + entropy(B) + split_threshold_,
				   where A is the current histogram and B is the histogram of the last or the
				   second last block type. */
				public double split_threshold_;

				public size_t num_blocks_;
				public BlockSplit* split_;  /* not owned */
				public HistogramCommand* histograms_;  /* not owned */
				public size_t* histograms_size_;  /* not owned */

				/* The number of symbols that we want to collect before deciding on whether
				   or not to merge the block with a previous one or emit a new block. */
				public size_t target_block_size_;
				/* The number of symbols in the current histogram. */
				public size_t block_size_;
				/* Offset of the current histogram. */
				public size_t curr_histogram_ix_;
				/* Offset of the histograms of the previous two block types. */
				public size_t last_histogram_ix_0;
				public size_t last_histogram_ix_1;
				/* Entropy of the previous two block types. */
				public fixed double last_entropy_[2];
				/* The number of times we merged the current block with the last one. */
				public size_t merge_last_count_;

				public static unsafe void InitBlockSplitter(
					ref MemoryManager m, BlockSplitterCommand* self, size_t alphabet_size,
					size_t min_block_size, double split_threshold, size_t num_symbols,
					BlockSplit* split, HistogramCommand** histograms, size_t* histograms_size)
				{
					size_t max_num_blocks = num_symbols / min_block_size + 1;
					/* We have to allocate one more histogram than the maximum number of block
					   types for the current histogram when the meta-block is too big. */
					size_t max_num_types =
						Math.Min(max_num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES + 1);
					self->alphabet_size_ = alphabet_size;
					self->min_block_size_ = min_block_size;
					self->split_threshold_ = split_threshold;
					self->num_blocks_ = 0;
					self->split_ = split;
					self->histograms_size_ = histograms_size;
					self->target_block_size_ = min_block_size;
					self->block_size_ = 0;
					self->curr_histogram_ix_ = 0;
					self->merge_last_count_ = 0;
					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, max_num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, max_num_blocks);
					self->split_->num_blocks = max_num_blocks;
					*histograms_size = max_num_types;
					*histograms = (HistogramCommand*)BrotliAllocate(ref m, *histograms_size * sizeof(HistogramCommand));
					self->histograms_ = *histograms;
					/* Clear only current histogram. */
					HistogramCommand.HistogramClear(&self->histograms_[0]);
					self->last_histogram_ix_0 = self->last_histogram_ix_1 = 0;
				}

				/* Does either of three things:
				 (1) emits the current block with a new block type;
				 (2) emits the current block with the type of the second last block;
				 (3) merges the current block with the last block. */
				public static unsafe void BlockSplitterFinishBlock(
					BlockSplitterCommand* self, bool is_final)
				{
					BlockSplit* split = self->split_;
					double* last_entropy = self->last_entropy_;
					HistogramCommand* histograms = self->histograms_;
					self->block_size_ =
						Math.Max(self->block_size_, self->min_block_size_);
					if (self->num_blocks_ == 0)
					{
						/* Create first block. */
						split->lengths[0] = (uint)self->block_size_;
						split->types[0] = 0;
						last_entropy[0] =
							BitsEntropy(histograms[0].data_, self->alphabet_size_);
						last_entropy[1] = last_entropy[0];
						++self->num_blocks_;
						++split->num_types;
						++self->curr_histogram_ix_;
						if (self->curr_histogram_ix_ < *self->histograms_size_)
							HistogramCommand.HistogramClear(&histograms[self->curr_histogram_ix_]);
						self->block_size_ = 0;
					}
					else if (self->block_size_ > 0)
					{
						double entropy = BitsEntropy(histograms[self->curr_histogram_ix_].data_,
							self->alphabet_size_);
						HistogramCommand* combined_histo = stackalloc HistogramCommand[2];
						double* combined_entropy = stackalloc double[2];
						double* diff = stackalloc double[2];
						size_t j;
						for (j = 0; j < 2; ++j)
						{
							size_t last_histogram_ix = j == 0 ? self->last_histogram_ix_0 : self->last_histogram_ix_1;
							combined_histo[j] = histograms[self->curr_histogram_ix_];
							HistogramCommand.HistogramAddHistogram(&combined_histo[j],
								&histograms[last_histogram_ix]);
							combined_entropy[j] = BitsEntropy(
								&combined_histo[j].data_[0], self->alphabet_size_);
							diff[j] = combined_entropy[j] - entropy - last_entropy[j];
						}

						if (split->num_types < BROTLI_MAX_NUMBER_OF_BLOCK_TYPES &&
							diff[0] > self->split_threshold_ &&
							diff[1] > self->split_threshold_)
						{
							/* Create new block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = (byte)split->num_types;
							self->last_histogram_ix_1 = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = (byte)split->num_types;
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = entropy;
							++self->num_blocks_;
							++split->num_types;
							++self->curr_histogram_ix_;
							if (self->curr_histogram_ix_ < *self->histograms_size_)
								HistogramCommand.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->block_size_ = 0;
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						}
						else if (diff[1] < diff[0] - 20.0)
						{
							/* Combine this block with second last block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = split->types[self->num_blocks_ - 2];
							size_t tmp = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = self->last_histogram_ix_1;
							self->last_histogram_ix_1 = tmp;
							histograms[self->last_histogram_ix_0] = combined_histo[1];
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = combined_entropy[1];
							++self->num_blocks_;
							self->block_size_ = 0;
							HistogramCommand.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						}
						else
						{
							/* Combine this block with last block. */
							split->lengths[self->num_blocks_ - 1] += (uint)self->block_size_;
							histograms[self->last_histogram_ix_0] = combined_histo[0];
							last_entropy[0] = combined_entropy[0];
							if (split->num_types == 1)
							{
								last_entropy[1] = last_entropy[0];
							}
							self->block_size_ = 0;
							HistogramCommand.HistogramClear(&histograms[self->curr_histogram_ix_]);
							if (++self->merge_last_count_ > 1)
							{
								self->target_block_size_ += self->min_block_size_;
							}
						}
					}
					if (is_final)
					{
						*self->histograms_size_ = split->num_types;
						split->num_blocks = self->num_blocks_;
					}
				}

				/* Adds the next symbol to the current histogram. When the current histogram
				   reaches the target size, decides on merging the block. */
				public static unsafe void BlockSplitterAddSymbol(BlockSplitterCommand* self, size_t symbol)
				{
					HistogramCommand.HistogramAdd(&self->histograms_[self->curr_histogram_ix_], symbol);
					++self->block_size_;
					if (self->block_size_ == self->target_block_size_)
					{
						BlockSplitterFinishBlock(self, /* is_final = */ false);
					}
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			private unsafe partial struct BlockSplitterDistance
			{
				/* Alphabet size of particular block category. */
				public size_t alphabet_size_;
				/* We collect at least this many symbols for each block. */
				public size_t min_block_size_;
				/* We merge histograms A and B if
					 entropy(A+B) < entropy(A) + entropy(B) + split_threshold_,
				   where A is the current histogram and B is the histogram of the last or the
				   second last block type. */
				public double split_threshold_;

				public size_t num_blocks_;
				public BlockSplit* split_;  /* not owned */
				public HistogramDistance* histograms_;  /* not owned */
				public size_t* histograms_size_;  /* not owned */

				/* The number of symbols that we want to collect before deciding on whether
				   or not to merge the block with a previous one or emit a new block. */
				public size_t target_block_size_;
				/* The number of symbols in the current histogram. */
				public size_t block_size_;
				/* Offset of the current histogram. */
				public size_t curr_histogram_ix_;
				/* Offset of the histograms of the previous two block types. */
				public size_t last_histogram_ix_0;
				public size_t last_histogram_ix_1;
				/* Entropy of the previous two block types. */
				public fixed double last_entropy_[2];
				/* The number of times we merged the current block with the last one. */
				public size_t merge_last_count_;

				public static unsafe void InitBlockSplitter(
					ref MemoryManager m, BlockSplitterDistance* self, size_t alphabet_size,
					size_t min_block_size, double split_threshold, size_t num_symbols,
					BlockSplit* split, HistogramDistance** histograms, size_t* histograms_size)
				{
					size_t max_num_blocks = num_symbols / min_block_size + 1;
					/* We have to allocate one more histogram than the maximum number of block
					   types for the current histogram when the meta-block is too big. */
					size_t max_num_types =
						Math.Min(max_num_blocks, BROTLI_MAX_NUMBER_OF_BLOCK_TYPES + 1);
					self->alphabet_size_ = alphabet_size;
					self->min_block_size_ = min_block_size;
					self->split_threshold_ = split_threshold;
					self->num_blocks_ = 0;
					self->split_ = split;
					self->histograms_size_ = histograms_size;
					self->target_block_size_ = min_block_size;
					self->block_size_ = 0;
					self->curr_histogram_ix_ = 0;
					self->merge_last_count_ = 0;
					BrotliEnsureCapacity(ref m, sizeof(byte), (void**)&split->types, &split->types_alloc_size, max_num_blocks);
					BrotliEnsureCapacity(ref m, sizeof(uint), (void**)&split->lengths, &split->lengths_alloc_size, max_num_blocks);
					self->split_->num_blocks = max_num_blocks;
					*histograms_size = max_num_types;
					*histograms = (HistogramDistance*)BrotliAllocate(ref m, *histograms_size * sizeof(HistogramDistance));
					self->histograms_ = *histograms;
					/* Clear only current histogram. */
					HistogramDistance.HistogramClear(&self->histograms_[0]);
					self->last_histogram_ix_0 = self->last_histogram_ix_1 = 0;
				}

				/* Does either of three things:
				 (1) emits the current block with a new block type;
				 (2) emits the current block with the type of the second last block;
				 (3) merges the current block with the last block. */
				public static unsafe void BlockSplitterFinishBlock(
					BlockSplitterDistance* self, bool is_final)
				{
					BlockSplit* split = self->split_;
					double* last_entropy = self->last_entropy_;
					HistogramDistance* histograms = self->histograms_;
					self->block_size_ =
						Math.Max(self->block_size_, self->min_block_size_);
					if (self->num_blocks_ == 0)
					{
						/* Create first block. */
						split->lengths[0] = (uint)self->block_size_;
						split->types[0] = 0;
						last_entropy[0] =
							BitsEntropy(histograms[0].data_, self->alphabet_size_);
						last_entropy[1] = last_entropy[0];
						++self->num_blocks_;
						++split->num_types;
						++self->curr_histogram_ix_;
						if (self->curr_histogram_ix_ < *self->histograms_size_)
							HistogramDistance.HistogramClear(&histograms[self->curr_histogram_ix_]);
						self->block_size_ = 0;
					}
					else if (self->block_size_ > 0)
					{
						double entropy = BitsEntropy(histograms[self->curr_histogram_ix_].data_,
							self->alphabet_size_);
						HistogramDistance* combined_histo = stackalloc HistogramDistance[2];
						double* combined_entropy = stackalloc double[2];
						double* diff = stackalloc double[2];
						size_t j;
						for (j = 0; j < 2; ++j)
						{
							size_t last_histogram_ix = j == 0 ? self->last_histogram_ix_0 : self->last_histogram_ix_1;
							combined_histo[j] = histograms[self->curr_histogram_ix_];
							HistogramDistance.HistogramAddHistogram(&combined_histo[j],
								&histograms[last_histogram_ix]);
							combined_entropy[j] = BitsEntropy(
								&combined_histo[j].data_[0], self->alphabet_size_);
							diff[j] = combined_entropy[j] - entropy - last_entropy[j];
						}

						if (split->num_types < BROTLI_MAX_NUMBER_OF_BLOCK_TYPES &&
							diff[0] > self->split_threshold_ &&
							diff[1] > self->split_threshold_)
						{
							/* Create new block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = (byte)split->num_types;
							self->last_histogram_ix_1 = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = (byte)split->num_types;
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = entropy;
							++self->num_blocks_;
							++split->num_types;
							++self->curr_histogram_ix_;
							if (self->curr_histogram_ix_ < *self->histograms_size_)
								HistogramDistance.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->block_size_ = 0;
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						}
						else if (diff[1] < diff[0] - 20.0)
						{
							/* Combine this block with second last block. */
							split->lengths[self->num_blocks_] = (uint)self->block_size_;
							split->types[self->num_blocks_] = split->types[self->num_blocks_ - 2];
							size_t tmp = self->last_histogram_ix_0;
							self->last_histogram_ix_0 = self->last_histogram_ix_1;
							self->last_histogram_ix_1 = tmp;
							histograms[self->last_histogram_ix_0] = combined_histo[1];
							last_entropy[1] = last_entropy[0];
							last_entropy[0] = combined_entropy[1];
							++self->num_blocks_;
							self->block_size_ = 0;
							HistogramDistance.HistogramClear(&histograms[self->curr_histogram_ix_]);
							self->merge_last_count_ = 0;
							self->target_block_size_ = self->min_block_size_;
						}
						else
						{
							/* Combine this block with last block. */
							split->lengths[self->num_blocks_ - 1] += (uint)self->block_size_;
							histograms[self->last_histogram_ix_0] = combined_histo[0];
							last_entropy[0] = combined_entropy[0];
							if (split->num_types == 1)
							{
								last_entropy[1] = last_entropy[0];
							}
							self->block_size_ = 0;
							HistogramDistance.HistogramClear(&histograms[self->curr_histogram_ix_]);
							if (++self->merge_last_count_ > 1)
							{
								self->target_block_size_ += self->min_block_size_;
							}
						}
					}
					if (is_final)
					{
						*self->histograms_size_ = split->num_types;
						split->num_blocks = self->num_blocks_;
					}
				}

				/* Adds the next symbol to the current histogram. When the current histogram
				   reaches the target size, decides on merging the block. */
				public static unsafe void BlockSplitterAddSymbol(BlockSplitterDistance* self, size_t symbol)
				{
					HistogramDistance.HistogramAdd(&self->histograms_[self->curr_histogram_ix_], symbol);
					++self->block_size_;
					if (self->block_size_ == self->target_block_size_)
					{
						BlockSplitterFinishBlock(self, /* is_final = */ false);
					}
				}
			}

			/* Here distance_code is an intermediate code, i.e. one of the special codes or
			   the actual distance increased by BROTLI_NUM_DISTANCE_SHORT_CODES - 1. */
			private static unsafe void PrefixEncodeCopyDistance(size_t distance_code, size_t num_direct_codes, size_t postfix_bits, ushort* code, uint* extra_bits)
			{
				if (distance_code < BROTLI_NUM_DISTANCE_SHORT_CODES + num_direct_codes) { *code = (ushort)distance_code; *extra_bits = 0; return; }
				else
				{
					size_t dist = ((size_t)1 << (int) (postfix_bits + 2u)) +
								  (distance_code - BROTLI_NUM_DISTANCE_SHORT_CODES - num_direct_codes);
					size_t bucket = Log2FloorNonZero(dist) - 1;
					size_t postfix_mask = (1u << (int)postfix_bits) - 1;
					size_t postfix = dist & postfix_mask;
					size_t prefix = (dist >> (int)bucket) & 1;
					size_t offset = (2 + prefix) << (int)bucket;
					size_t nbits = bucket - postfix_bits;
					*code = (ushort)( (BROTLI_NUM_DISTANCE_SHORT_CODES + num_direct_codes + ((2 * (nbits - 1) + prefix) << (int) postfix_bits) + postfix));
					*extra_bits = (uint)((nbits << 24) | ((dist - offset) >> (int) postfix_bits));
				}
			}

			/* Returns hash-table size for quality levels 0 and 1. */
			private static size_t MaxHashTableSize(int quality) { return quality == FAST_ONE_PASS_COMPRESSION_QUALITY ? 1 << 15 : 1 << 17; }

			private static unsafe size_t MaxZopfliLen(BrotliEncoderParams* params_) { return params_->quality <= 10 ? MAX_ZOPFLI_LEN_QUALITY_10 : MAX_ZOPFLI_LEN_QUALITY_11; }

			private static unsafe size_t MaxMetablockSize(BrotliEncoderParams* params_) { int bits = Math.Min(ComputeRbBits(params_), BROTLI_MAX_INPUT_BLOCK_BITS); return (size_t)1 << bits; }

			/* When searching for backward references and have not seen matches for a long
			   time, we can skip some match lookups. Unsuccessful match lookups are very
			   expensive and this kind of a heuristic speeds up compression quite a lot.
			   At first 8 byte strides are taken and every second byte is put to hasher.
			   After 4x more literals stride by 16 bytes, every put 4-th byte to hasher.
			   Applied only to qualities 2 to 9. */
			private static unsafe size_t LiteralSpreeLengthForSparseSearch(BrotliEncoderParams* params_) { return params_->quality < 9 ? 64 : 512; }

			/* Number of best candidates to evaluate to expand Zopfli chain. */
			private static unsafe size_t MaxZopfliCandidates(BrotliEncoderParams* params_) { return params_->quality <= 10 ? 1 : 5; }

			private static unsafe void SanitizeParams(BrotliEncoderParams* params_) 
			{
				params_->quality = Math.Min(BROTLI_MAX_QUALITY, Math.Max(BROTLI_MIN_QUALITY, params_->quality));
				if (params_->lgwin < BROTLI_MIN_WINDOW_BITS) { params_->lgwin = BROTLI_MIN_WINDOW_BITS; }
				else if (params_->lgwin > BROTLI_MAX_WINDOW_BITS) { params_->lgwin = BROTLI_MAX_WINDOW_BITS; }
			}

			/* Returns optimized lg_block value. */
			private static unsafe int ComputeLgBlock(BrotliEncoderParams* params_) 
			{
				int lgblock = params_->lgblock;
				if (params_->quality == FAST_ONE_PASS_COMPRESSION_QUALITY || params_->quality == FAST_TWO_PASS_COMPRESSION_QUALITY)  { lgblock = params_->lgwin; }
				else if (params_->quality < MIN_QUALITY_FOR_BLOCK_SPLIT) { lgblock = 14; }
				else if (lgblock == 0) { lgblock = 16; if (params_->quality >= 9 && params_->lgwin > lgblock) { lgblock = Math.Min(18, params_->lgwin); } }
				else { lgblock = Math.Min(BROTLI_MAX_INPUT_BLOCK_BITS, Math.Max(BROTLI_MIN_INPUT_BLOCK_BITS, lgblock)); }
				return lgblock;
			}

			/* Returns log2 of the size of main ring buffer area.
			   Allocate at least lgwin + 1 bits for the ring buffer so that the newly
			   added block fits there completely and we still get lgwin bits and at least
			   read_block_size_bits + 1 bits because the copy tail length needs to be
			   smaller than ring-buffer size. */
			private static unsafe int ComputeRbBits(BrotliEncoderParams* params_) { return 1 + Math.Max(params_->lgwin, params_->lgblock); }

			static unsafe void ChooseHasher(BrotliEncoderParams* params_, BrotliHasherParams* hparams) 
			{
				if (params_->quality > 9) { hparams->type = 10; }
				else if (params_->quality == 4 && params_->size_hint >= (1 << 20)) { hparams->type = 54; }
				else if (params_->quality < 5) { hparams->type = params_->quality; }
				else if (params_->lgwin <= 16) { hparams->type = params_->quality < 7 ? 40 : params_->quality < 9 ? 41 : 42; }
				else if (params_->size_hint >= (1 << 20) && params_->lgwin >= 19) {
					hparams->type = 6;
					hparams->block_bits = params_->quality - 1;
					hparams->bucket_bits = 15;
					hparams->hash_len = 5;
					hparams->num_last_distances_to_check = params_->quality < 7 ? 4 : params_->quality < 9 ? 10 : 16;
				}
				else 
				{
					hparams->type = 5;
					hparams->block_bits = params_->quality - 1;
					hparams->bucket_bits = params_->quality < 7 ? 14 : 15;
					hparams->num_last_distances_to_check = params_->quality < 7 ? 4 : params_->quality < 9 ? 10 : 16;
				}
			}

			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct RingBuffer {
				/* Size of the ring-buffer is (1 << window_bits) + tail_size_. */
				public uint size_;

				public uint mask_;
				public uint tail_size_;
				public uint total_size_;

				public uint cur_size_;

				/* Position to write in the ring buffer. */
				public uint pos_;

				/* The actual ring buffer containing the copy of the last two bytes, the data,
				   and the copy of the beginning as a tail. */
				public byte* data_;

				/* The start of the ring-buffer. */
				public byte* buffer_;
			}

			private static unsafe void RingBufferInit(ref RingBuffer rb) { rb.cur_size_ = 0; rb.pos_ = 0; rb.data_ = null; rb.buffer_ = null; }

			private static unsafe void RingBufferSetup(BrotliEncoderParams* params_, RingBuffer* rb) 
			{
				int window_bits = ComputeRbBits(params_); int tail_bits = params_->lgblock; *(uint*) &rb->size_ = 1u << window_bits;
				*(uint*) &rb->mask_ = (1u << window_bits) - 1; *(uint*) &rb->tail_size_ = 1u << tail_bits;
				*(uint*) &rb->total_size_ = rb->size_ + rb->tail_size_;
			}

			private static unsafe void RingBufferFree(ref MemoryManager m, RingBuffer* rb) { BrotliFree(ref m, rb->data_); }

			/* Allocates or re-allocates data_ to the given length + plus some slack
			   region before and after. Fills the slack regions with zeros. */
			private static unsafe void RingBufferInitBuffer(ref MemoryManager m, uint buflen, RingBuffer* rb) 
			{
				size_t kSlackForEightByteHashingEverywhere = 7;
				byte* new_data = (byte*) BrotliAllocate(ref m, (2 + buflen + kSlackForEightByteHashingEverywhere) * sizeof(uint));
				size_t i;
				if (rb->data_ != null) { memcpy(new_data, rb->data_, 2 + rb->cur_size_ + kSlackForEightByteHashingEverywhere); BrotliFree(ref m, rb->data_); }
				rb->data_ = new_data;
				rb->cur_size_ = buflen;
				rb->buffer_ = rb->data_ + 2;
				rb->buffer_[-2] = rb->buffer_[-1] = 0;
				for (i = 0; i < kSlackForEightByteHashingEverywhere; ++i) { rb->buffer_[rb->cur_size_ + i] = 0; }
			}

			private static unsafe void RingBufferWriteTail( byte* bytes, size_t n, RingBuffer* rb) {
				size_t masked_pos = rb->pos_ & rb->mask_;
				if (masked_pos < rb->tail_size_) 
				{
					/* Just fill the tail buffer with the beginning data. */
					size_t p = rb->size_ + masked_pos;
					memcpy(&rb->buffer_[p], bytes, Math.Min(n, rb->tail_size_ - masked_pos));
				}
			}

			/* Push bytes into the ring buffer. */
			private static unsafe void RingBufferWrite(ref MemoryManager m, byte* bytes, size_t n, RingBuffer* rb) 
			{
				if (rb->pos_ == 0 && n < rb->tail_size_) 
				{
					/* Special case for the first write: to process the first block, we don't
					   need to allocate the whole ring-buffer and we don't need the tail
					   either. However, we do this memory usage optimization only if the
					   first write is less than the tail size, which is also the input block
					   size, otherwise it is likely that other blocks will follow and we
					   will need to reallocate to the full size anyway. */
					rb->pos_ = (uint) n;
					RingBufferInitBuffer(ref m, rb->pos_, rb);
					memcpy(rb->buffer_, bytes, n);
					return;
				}
				if (rb->cur_size_ < rb->total_size_) 
				{
					/* Lazily allocate the full buffer. */
					RingBufferInitBuffer(ref m, rb->total_size_, rb);
					/* Initialize the last two bytes to zero, so that we don't have to worry
					   later when we copy the last two bytes to the first two positions. */
					rb->buffer_[rb->size_ - 2] = 0; rb->buffer_[rb->size_ - 1] = 0;
				}
				{
					size_t masked_pos = rb->pos_ & rb->mask_;
					/* The length of the writes is limited so that we do not need to worry
					   about a write */
					RingBufferWriteTail(bytes, n, rb);
					if (masked_pos + n <= rb->size_) { /* A single write fits. */ memcpy(&rb->buffer_[masked_pos], bytes, n); }
					else 
					{
						/* Split into two writes.
						   Copy into the end of the buffer, including the tail buffer. */
						memcpy(&rb->buffer_[masked_pos], bytes, Math.Min(n, rb->total_size_ - masked_pos));
						/* Copy into the beginning of the buffer */
						memcpy(&rb->buffer_[0], bytes + (rb->size_ - masked_pos), n - (rb->size_ - masked_pos));
					}
				}
				rb->buffer_[-2] = rb->buffer_[rb->size_ - 2];
				rb->buffer_[-1] = rb->buffer_[rb->size_ - 1];
				rb->pos_ += (uint) n;
				if (rb->pos_ > (1u << 30)) {/* Wrap, but preserve not-a-first-lap feature. */ rb->pos_ = (rb->pos_ & ((1u << 30) - 1)) | (1u << 30); }
			}
		
			private static unsafe uint Hash(byte* data)
			{
				uint h = *(uint*)(data) * kDictHashMul32;
				/* The higher bits contain more mixture from the multiplication, so we take our results from there. */
				return h >> (32 - kDictNumBits);
			}

			private static unsafe void AddMatch(size_t distance, size_t len, size_t len_code,uint* matches) {uint match = (uint)((distance << 5) + len_code); matches[len] = Math.Min(matches[len], match); }

			private static unsafe size_t DictMatchLength( byte* data, size_t id, size_t len, size_t maxlen)
			{
				size_t offset = kBrotliDictionaryOffsetsByLength[len] + len * id;
				fixed (byte* dict = &kBrotliDictionary[offset])
				return FindMatchLengthWithLimit(dict, data, Math.Min(len, maxlen));
			}

			private static unsafe bool IsMatch(DictWord w, byte* data, size_t max_length)
			{
				if (w.len > max_length) { return false; }
				else
				{
					size_t offset = kBrotliDictionaryOffsetsByLength[w.len] + (size_t)w.len * (size_t)w.idx;
					fixed (byte* dict = &kBrotliDictionary[offset]) 
					{
						
						if (w.transform == 0) { /* Match against base dictionary word. */ return (FindMatchLengthWithLimit(dict, data, w.len) == w.len); }
						else if (w.transform == 10)
						{
							/* Match against uppercase first transform. Note that there are only ASCII uppercase words in the lookup table. */
							return (dict[0] >= 'a' && dict[0] <= 'z' && (dict[0] ^ 32) == data[0] && FindMatchLengthWithLimit(&dict[1], &data[1], w.len - 1u) == w.len - 1u); }
						else
						{
							/* Match against uppercase all transform.
							   Note that there are only ASCII uppercase words in the lookup table. */
							size_t i;
							for (i = 0; i < w.len; ++i)
							{
								if (dict[i] >= 'a' && dict[i] <= 'z') { if ((dict[i] ^ 32) != data[i]) return false; }
								else { if (dict[i] != data[i]) return false; }
							}
							return true;
						}
					}
				}
			}

			private static unsafe bool BrotliFindAllStaticDictionaryMatches(byte* data, size_t min_length, size_t max_length, uint* matches)
			{

				bool has_found_match = false;
				{
					size_t offset = kStaticDictionaryBuckets[Hash(data)];
					bool end = offset == 0;
					while (!end)
					{
						DictWord w = kStaticDictionaryWords[offset++];
						size_t l = w.len & 0x1F;
						size_t n = (size_t)1 << kBrotliDictionarySizeBitsByLength[l];
						size_t id = w.idx;
						end = (w.len & 0x80) != 0;
						w.len = (byte)l;
						if (w.transform == 0)
						{
							size_t matchlen = DictMatchLength(data, id, l, max_length);
							byte* s;
							size_t minlen;
							size_t maxlen;
							size_t len;
							/* Transform "" + kIdentity + "" */
							if (matchlen == l) { AddMatch(id, l, l, matches); has_found_match = true; }
							/* Transforms "" + kOmitLast1 + "" and "" + kOmitLast1 + "ing " */
							if (matchlen >= l - 1)
							{
								AddMatch(id + 12 * n, l - 1, l, matches);
								if (l + 2 < max_length && data[l - 1] == 'i' && data[l] == 'n' && data[l + 1] == 'g' && data[l + 2] == ' ') { AddMatch(id + 49 * n, l + 3, l, matches); }
								has_found_match = true;
							}
							/* Transform "" + kOmitLastN + "" (N = 2 .. 9) */
							minlen = min_length;
							if (l > 9) minlen = Math.Max(minlen, l - 9);
							maxlen = Math.Min(matchlen, l - 2);
							for (len = minlen; len <= maxlen; ++len) { AddMatch(id + kOmitLastNTransforms[l - len] * n, len, l, matches); has_found_match = true; }
							if (matchlen < l || l + 6 >= max_length) { continue; }
							s = &data[l];
							/* Transforms "" + kIdentity + <suffix> */
							if (s[0] == ' ')
							{
								AddMatch(id + n, l + 1, l, matches);
								if (s[1] == 'a')
								{
									if (s[2] == ' ') { AddMatch(id + 28 * n, l + 3, l, matches); }
									else if (s[2] == 's')
									{ if (s[3] == ' ') AddMatch(id + 46 * n, l + 4, l, matches); }
									else if (s[2] == 't')
									{if (s[3] == ' ') AddMatch(id + 60 * n, l + 4, l, matches); }
									else if (s[2] == 'n')
									{ if (s[3] == 'd' && s[4] == ' ') { AddMatch(id + 10 * n, l + 5, l, matches); } }
								}
								else if (s[1] == 'b')
								{ if (s[2] == 'y' && s[3] == ' ') { AddMatch(id + 38 * n, l + 4, l, matches); } }
								else if (s[1] == 'i')
								{
									if (s[2] == 'n')
									{ if (s[3] == ' ') AddMatch(id + 16 * n, l + 4, l, matches); }
									else if (s[2] == 's') { if (s[3] == ' ') AddMatch(id + 47 * n, l + 4, l, matches); }
								}
								else if (s[1] == 'f')
								{
									if (s[2] == 'o')
									{
										if (s[3] == 'r' && s[4] == ' ')
										{
											AddMatch(id + 25 * n, l + 5, l, matches);
										}
									}
									else if (s[2] == 'r')
									{
										if (s[3] == 'o' && s[4] == 'm' && s[5] == ' ')
										{
											AddMatch(id + 37 * n, l + 6, l, matches);
										}
									}
								}
								else if (s[1] == 'o')
								{
									if (s[2] == 'f')
									{
										if (s[3] == ' ') AddMatch(id + 8 * n, l + 4, l, matches);
									}
									else if (s[2] == 'n')
									{
										if (s[3] == ' ') AddMatch(id + 45 * n, l + 4, l, matches);
									}
								}
								else if (s[1] == 'n')
								{
									if (s[2] == 'o' && s[3] == 't' && s[4] == ' ')
									{
										AddMatch(id + 80 * n, l + 5, l, matches);
									}
								}
								else if (s[1] == 't')
								{
									if (s[2] == 'h')
									{
										if (s[3] == 'e')
										{
											if (s[4] == ' ') AddMatch(id + 5 * n, l + 5, l, matches);
										}
										else if (s[3] == 'a')
										{
											if (s[4] == 't' && s[5] == ' ')
											{
												AddMatch(id + 29 * n, l + 6, l, matches);
											}
										}
									}
									else if (s[2] == 'o')
									{
										if (s[3] == ' ') AddMatch(id + 17 * n, l + 4, l, matches);
									}
								}
								else if (s[1] == 'w')
								{
									if (s[2] == 'i' && s[3] == 't' && s[4] == 'h' && s[5] == ' ')
									{
										AddMatch(id + 35 * n, l + 6, l, matches);
									}
								}
							}
							else if (s[0] == '"')
							{
								AddMatch(id + 19 * n, l + 1, l, matches);
								if (s[1] == '>')
								{
									AddMatch(id + 21 * n, l + 2, l, matches);
								}
							}
							else if (s[0] == '.')
							{
								AddMatch(id + 20 * n, l + 1, l, matches);
								if (s[1] == ' ')
								{
									AddMatch(id + 31 * n, l + 2, l, matches);
									if (s[2] == 'T' && s[3] == 'h')
									{
										if (s[4] == 'e')
										{
											if (s[5] == ' ') AddMatch(id + 43 * n, l + 6, l, matches);
										}
										else if (s[4] == 'i')
										{
											if (s[5] == 's' && s[6] == ' ')
											{
												AddMatch(id + 75 * n, l + 7, l, matches);
											}
										}
									}
								}
							}
							else if (s[0] == ',')
							{
								AddMatch(id + 76 * n, l + 1, l, matches);
								if (s[1] == ' ')
								{
									AddMatch(id + 14 * n, l + 2, l, matches);
								}
							}
							else if (s[0] == '\n')
							{
								AddMatch(id + 22 * n, l + 1, l, matches);
								if (s[1] == '\t')
								{
									AddMatch(id + 50 * n, l + 2, l, matches);
								}
							}
							else if (s[0] == ']')
							{
								AddMatch(id + 24 * n, l + 1, l, matches);
							}
							else if (s[0] == '\'')
							{
								AddMatch(id + 36 * n, l + 1, l, matches);
							}
							else if (s[0] == ':')
							{
								AddMatch(id + 51 * n, l + 1, l, matches);
							}
							else if (s[0] == '(')
							{
								AddMatch(id + 57 * n, l + 1, l, matches);
							}
							else if (s[0] == '=')
							{
								if (s[1] == '"')
								{
									AddMatch(id + 70 * n, l + 2, l, matches);
								}
								else if (s[1] == '\'')
								{
									AddMatch(id + 86 * n, l + 2, l, matches);
								}
							}
							else if (s[0] == 'a')
							{
								if (s[1] == 'l' && s[2] == ' ')
								{
									AddMatch(id + 84 * n, l + 3, l, matches);
								}
							}
							else if (s[0] == 'e')
							{
								if (s[1] == 'd')
								{
									if (s[2] == ' ') AddMatch(id + 53 * n, l + 3, l, matches);
								}
								else if (s[1] == 'r')
								{
									if (s[2] == ' ') AddMatch(id + 82 * n, l + 3, l, matches);
								}
								else if (s[1] == 's')
								{
									if (s[2] == 't' && s[3] == ' ')
									{
										AddMatch(id + 95 * n, l + 4, l, matches);
									}
								}
							}
							else if (s[0] == 'f')
							{
								if (s[1] == 'u' && s[2] == 'l' && s[3] == ' ')
								{
									AddMatch(id + 90 * n, l + 4, l, matches);
								}
							}
							else if (s[0] == 'i')
							{
								if (s[1] == 'v')
								{
									if (s[2] == 'e' && s[3] == ' ')
									{
										AddMatch(id + 92 * n, l + 4, l, matches);
									}
								}
								else if (s[1] == 'z')
								{
									if (s[2] == 'e' && s[3] == ' ')
									{
										AddMatch(id + 100 * n, l + 4, l, matches);
									}
								}
							}
							else if (s[0] == 'l')
							{
								if (s[1] == 'e')
								{
									if (s[2] == 's' && s[3] == 's' && s[4] == ' ')
									{
										AddMatch(id + 93 * n, l + 5, l, matches);
									}
								}
								else if (s[1] == 'y')
								{
									if (s[2] == ' ') AddMatch(id + 61 * n, l + 3, l, matches);
								}
							}
							else if (s[0] == 'o')
							{
								if (s[1] == 'u' && s[2] == 's' && s[3] == ' ')
								{
									AddMatch(id + 106 * n, l + 4, l, matches);
								}
							}
						}
						else
						{
							/* Set is_all_caps=0 for kUppercaseFirst and
								   is_all_caps=1 otherwise (kUppercaseAll) transform. */
							bool is_all_caps =
								(w.transform != kUppercaseFirst);
							byte* s;
							if (!IsMatch(w, data, max_length))
							{
								continue;
							}
							/* Transform "" + kUppercase{First,All} + "" */
							AddMatch(id + (is_all_caps ? 44 : 9) * n, l, l, matches);
							has_found_match = true;
							if (l + 1 >= max_length)
							{
								continue;
							}
							/* Transforms "" + kUppercase{First,All} + <suffix> */
							s = &data[l];
							if (s[0] == ' ')
							{
								AddMatch(id + (is_all_caps ? 68 : 4) * n, l + 1, l, matches);
							}
							else if (s[0] == '"')
							{
								AddMatch(id + (is_all_caps ? 87 : 66) * n, l + 1, l, matches);
								if (s[1] == '>')
								{
									AddMatch(id + (is_all_caps ? 97 : 69) * n, l + 2, l, matches);
								}
							}
							else if (s[0] == '.')
							{
								AddMatch(id + (is_all_caps ? 101 : 79) * n, l + 1, l, matches);
								if (s[1] == ' ')
								{
									AddMatch(id + (is_all_caps ? 114 : 88) * n, l + 2, l, matches);
								}
							}
							else if (s[0] == ',')
							{
								AddMatch(id + (is_all_caps ? 112 : 99) * n, l + 1, l, matches);
								if (s[1] == ' ')
								{
									AddMatch(id + (is_all_caps ? 107 : 58) * n, l + 2, l, matches);
								}
							}
							else if (s[0] == '\'')
							{
								AddMatch(id + (is_all_caps ? 94 : 74) * n, l + 1, l, matches);
							}
							else if (s[0] == '(')
							{
								AddMatch(id + (is_all_caps ? 113 : 78) * n, l + 1, l, matches);
							}
							else if (s[0] == '=')
							{
								if (s[1] == '"')
								{
									AddMatch(id + (is_all_caps ? 105 : 104) * n, l + 2, l, matches);
								}
								else if (s[1] == '\'')
								{
									AddMatch(id + (is_all_caps ? 116 : 108) * n, l + 2, l, matches);
								}
							}
						}
					}
				}
				/* Transforms with prefixes " " and "." */
				if (max_length >= 5 && (data[0] == ' ' || data[0] == '.'))
				{
					bool is_space = (data[0] == ' ');
					size_t offset = kStaticDictionaryBuckets[Hash(&data[1])];
					bool end = offset == 0;
					while (!end)
					{
						DictWord w = kStaticDictionaryWords[offset++];
						size_t l = w.len & 0x1F;
						size_t n = (size_t)1 << kBrotliDictionarySizeBitsByLength[l];
						size_t id = w.idx;
						end = (w.len & 0x80) != 0;
						w.len = (byte)l;
						if (w.transform == 0)
						{
							byte* s;
							if (!IsMatch(w, &data[1], max_length - 1)) { continue; }
							/* Transforms " " + kIdentity + "" and "." + kIdentity + "" */
							AddMatch(id + (is_space ? 6 : 32) * n, l + 1, l, matches);
							has_found_match = true;
							if (l + 2 >= max_length) { continue; }
							/* Transforms " " + kIdentity + <suffix> and "." + kIdentity + <suffix>
							*/
							s = &data[l + 1];
							if (s[0] == ' ')
							{
								AddMatch(id + (is_space ? 2 : 77) * n, l + 2, l, matches);
							}
							else if (s[0] == '(')
							{
								AddMatch(id + (is_space ? 89 : 67) * n, l + 2, l, matches);
							}
							else if (is_space)
							{
								if (s[0] == ',')
								{
									AddMatch(id + 103 * n, l + 2, l, matches);
									if (s[1] == ' ')
									{
										AddMatch(id + 33 * n, l + 3, l, matches);
									}
								}
								else if (s[0] == '.')
								{
									AddMatch(id + 71 * n, l + 2, l, matches);
									if (s[1] == ' ')
									{
										AddMatch(id + 52 * n, l + 3, l, matches);
									}
								}
								else if (s[0] == '=')
								{
									if (s[1] == '"')
									{
										AddMatch(id + 81 * n, l + 3, l, matches);
									}
									else if (s[1] == '\'')
									{
										AddMatch(id + 98 * n, l + 3, l, matches);
									}
								}
							}
						}
						else if (is_space)
						{
							/* Set is_all_caps=0 for kUppercaseFirst and
								   is_all_caps=1 otherwise (kUppercaseAll) transform. */
							bool is_all_caps =
								(w.transform != kUppercaseFirst);
							byte* s;
							if (!IsMatch(w, &data[1], max_length - 1))
							{
								continue;
							}
							/* Transforms " " + kUppercase{First,All} + "" */
							AddMatch(id + (is_all_caps ? 85 : 30) * n, l + 1, l, matches);
							has_found_match = true;
							if (l + 2 >= max_length)
							{
								continue;
							}
							/* Transforms " " + kUppercase{First,All} + <suffix> */
							s = &data[l + 1];
							if (s[0] == ' ')
							{
								AddMatch(id + (is_all_caps ? 83 : 15) * n, l + 2, l, matches);
							}
							else if (s[0] == ',')
							{
								if (!is_all_caps)
								{
									AddMatch(id + 109 * n, l + 2, l, matches);
								}
								if (s[1] == ' ')
								{
									AddMatch(id + (is_all_caps ? 111 : 65) * n, l + 3, l, matches);
								}
							}
							else if (s[0] == '.')
							{
								AddMatch(id + (is_all_caps ? 115 : 96) * n, l + 2, l, matches);
								if (s[1] == ' ')
								{
									AddMatch(id + (is_all_caps ? 117 : 91) * n, l + 3, l, matches);
								}
							}
							else if (s[0] == '=')
							{
								if (s[1] == '"')
								{
									AddMatch(id + (is_all_caps ? 110 : 118) * n, l + 3, l, matches);
								}
								else if (s[1] == '\'')
								{
									AddMatch(id + (is_all_caps ? 119 : 120) * n, l + 3, l, matches);
								}
							}
						}
					}
				}
				if (max_length >= 6)
				{
					/* Transforms with prefixes "e ", "s ", ", " and "\xc2\xa0" */
					if ((data[1] == ' ' &&
						 (data[0] == 'e' || data[0] == 's' || data[0] == ',')) ||
						(data[0] == 0xc2 && data[1] == 0xa0))
					{
						size_t offset = kStaticDictionaryBuckets[Hash(&data[2])];
						bool end = offset == 0;
						while (!end)
						{
							DictWord w = kStaticDictionaryWords[offset++];
							size_t l = w.len & 0x1F;
							size_t n = (size_t)1 << kBrotliDictionarySizeBitsByLength[l];
							size_t id = w.idx;
							end = (w.len & 0x80) != 0;
							w.len = (byte)l;
							if (w.transform == 0 &&
								IsMatch(w, &data[2], max_length - 2))
							{
								if (data[0] == 0xc2)
								{
									AddMatch(id + 102 * n, l + 2, l, matches);
									has_found_match = true;
								}
								else if (l + 2 < max_length && data[l + 2] == ' ')
								{
									size_t t = data[0] == 'e' ? 18 : (data[0] == 's' ? 7 : 13);
									AddMatch(id + t * n, l + 3, l, matches);
									has_found_match = true;
								}
							}
						}
					}
				}
				if (max_length >= 9)
				{
					/* Transforms with prefixes " the " and ".com/" */
					if ((data[0] == ' ' && data[1] == 't' && data[2] == 'h' &&
						 data[3] == 'e' && data[4] == ' ') ||
						(data[0] == '.' && data[1] == 'c' && data[2] == 'o' &&
						 data[3] == 'm' && data[4] == '/'))
					{
						size_t offset = kStaticDictionaryBuckets[Hash(&data[5])];
						bool end = offset == 0;
						while (!end)
						{
							DictWord w = kStaticDictionaryWords[offset++];
							size_t l = w.len & 0x1F;
							size_t n = (size_t)1 << kBrotliDictionarySizeBitsByLength[l];
							size_t id = w.idx;
							end = (w.len & 0x80) != 0;
							w.len = (byte)l;
							if (w.transform == 0 &&
								IsMatch(w, &data[5], max_length - 5))
							{
								AddMatch(id + (data[0] == ' ' ? 41 : 72) * n, l + 5, l, matches);
								has_found_match = true;
								if (l + 5 < max_length)
								{
									byte* s = &data[l + 5];
									if (data[0] == ' ')
									{
										if (l + 8 < max_length &&
											s[0] == ' ' && s[1] == 'o' && s[2] == 'f' && s[3] == ' ')
										{
											AddMatch(id + 62 * n, l + 9, l, matches);
											if (l + 12 < max_length &&
												s[4] == 't' && s[5] == 'h' && s[6] == 'e' && s[7] == ' ')
											{
												AddMatch(id + 73 * n, l + 13, l, matches);
											}
										}
									}
								}
							}
						}
					}
				}
				return has_found_match;
			}

			private struct DictWord
			{
				/* Highest bit is used to indicate end of bucket. */
				public byte len;
				public byte transform;
				public ushort idx;

				public DictWord(byte len, byte transform, ushort idx) { this.len = len; this.transform = transform; this.idx = idx; }
			}

			private static readonly ushort[] kStaticDictionaryBuckets = {
				1,0,0,0,0,0,0,0,0,3,6,0,0,0,0,0,20,0,0,0,21,0,22,0,0,0,0,0,0,0,0,23,0,0,25,0,29,
				0,53,0,0,0,0,0,0,55,0,0,0,0,0,0,61,76,0,0,0,94,0,0,0,0,0,0,96,0,97,0,98,0,0,0,0,
				0,0,0,99,101,106,108,0,0,0,0,0,110,0,111,112,0,113,118,124,0,0,0,0,0,125,128,0,0
				,0,0,129,0,0,131,0,0,0,0,0,0,132,0,0,135,0,0,0,137,0,0,0,0,0,138,139,0,0,0,0,0,0
				,0,142,143,144,0,0,0,0,0,145,0,0,0,146,149,151,152,0,0,153,0,0,0,0,0,0,0,0,0,0,0
				,0,0,0,0,154,0,0,0,0,0,0,155,0,0,0,0,160,182,0,0,0,0,0,0,183,0,0,0,188,189,0,0,
				192,0,0,0,0,0,0,194,0,0,0,0,0,0,0,0,197,202,209,0,0,210,0,224,0,0,0,225,0,0,0,0,
				0,0,0,0,0,0,231,0,0,0,232,0,240,0,0,242,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,246,0,0,
				249,251,253,0,0,0,0,0,258,0,0,261,263,0,0,0,267,0,0,268,0,269,0,0,0,0,0,0,0,0,0,
				271,0,0,0,0,0,0,272,0,273,0,277,0,278,286,0,0,0,0,287,0,289,290,291,0,0,0,295,0,
				0,296,297,0,0,0,0,0,0,0,0,0,0,298,0,0,0,299,0,0,305,0,324,0,0,0,0,0,327,0,328,
				329,0,0,0,0,336,0,0,340,0,341,342,343,0,0,346,0,348,0,0,0,0,0,0,349,351,0,0,355,
				0,363,0,364,0,368,369,0,370,0,0,0,0,0,0,0,372,0,0,0,0,0,0,0,0,0,0,0,373,0,375,0,
				0,0,0,376,377,0,0,394,395,396,0,0,398,0,0,0,0,400,0,0,408,0,0,0,0,420,0,0,0,0,0,
				0,421,0,0,422,423,0,0,429,435,436,442,0,0,443,0,444,445,453,456,0,457,0,0,0,0,0,
				458,0,0,0,459,0,0,0,460,0,462,463,465,0,0,0,0,0,0,466,469,0,0,0,0,0,0,470,0,0,0,
				474,0,476,0,0,0,0,483,0,485,0,0,0,486,0,0,488,491,492,0,0,497,499,500,0,501,0,0,
				0,505,0,0,506,0,0,0,507,0,0,0,509,0,0,0,0,511,512,519,0,0,0,0,0,0,529,530,0,0,0,
				534,0,0,0,0,543,0,0,0,0,0,0,0,0,0,553,0,0,0,0,557,560,0,0,0,0,0,0,561,0,564,0,0,
				0,0,0,0,565,566,0,575,0,619,0,620,0,0,623,624,0,0,0,625,0,0,626,627,0,0,628,0,0,
				0,0,630,0,631,0,0,0,0,0,0,0,0,0,641,0,0,0,0,643,656,668,0,0,0,673,0,0,0,674,0,0,
				0,0,0,0,0,0,682,0,687,0,690,0,693,699,700,0,0,0,0,0,0,704,705,0,0,0,0,707,710,0,
				711,0,0,0,0,726,0,0,729,0,0,0,730,731,0,0,0,0,0,752,0,0,0,762,0,763,0,0,767,0,0,
				0,770,774,0,0,775,0,0,0,0,0,0,0,0,0,0,776,0,0,0,777,783,0,0,0,785,788,0,0,0,0,
				790,0,0,0,793,0,0,0,0,794,0,0,804,819,821,0,827,0,0,0,834,0,0,835,0,0,0,841,0,
				844,0,850,851,859,0,860,0,0,0,0,0,0,0,874,0,876,0,877,890,0,0,0,0,0,0,0,0,893,
				894,898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,899,0,0,0,900,904,906,0,0,0,907,0,908,909,
				0,910,0,0,0,0,911,0,0,0,0,0,916,0,0,0,922,925,0,930,0,934,0,0,0,0,0,943,0,0,944,
				0,953,954,0,0,0,0,0,0,955,0,962,963,0,0,976,0,0,977,978,979,980,0,981,0,0,0,0,
				984,0,0,985,0,0,987,989,991,0,0,0,0,0,0,0,0,0,992,0,0,0,993,0,0,0,0,0,0,996,0,0,
				0,1000,0,0,0,0,0,1002,0,0,0,0,1005,1007,0,0,0,1009,0,0,0,1010,0,0,0,0,0,0,1011,0
				,1012,0,0,0,0,1014,1016,0,0,0,1020,0,1021,0,0,0,0,1022,0,0,0,1024,0,0,0,0,0,0,
				1025,0,0,1026,1027,0,0,0,0,0,1031,0,1033,0,0,0,0,1034,0,0,0,1037,1040,0,0,0,1042
				,1043,0,0,1053,0,1054,0,0,1057,0,0,0,1058,0,0,1060,0,0,0,0,0,0,0,1061,0,0,1062,0
				,0,0,0,1063,0,0,0,0,1064,0,0,0,0,0,1065,0,0,0,0,1066,1067,0,0,0,1069,1070,1072,0
				,0,0,0,0,0,1073,0,1075,0,0,0,0,0,0,1080,1084,0,0,0,0,1088,0,0,0,0,0,0,1094,0,
				1095,0,1107,0,0,0,1112,1114,0,1119,0,1122,0,0,1126,0,1129,0,1130,0,0,0,0,0,1132,
				0,0,0,0,0,0,1144,0,0,1145,1146,0,1148,1149,0,0,1150,1151,0,0,0,0,1152,0,1153,0,0
				,0,0,0,1154,0,1163,0,0,0,1164,0,0,0,0,0,1165,0,1167,0,1170,0,0,0,0,0,1171,1172,0
				,0,0,0,0,0,0,0,1173,1175,1177,0,1186,0,0,0,0,0,0,0,0,0,0,1195,0,0,1221,0,0,1224,
				0,0,1227,0,0,0,0,0,1228,1229,0,0,1230,0,0,0,0,0,0,0,0,0,1231,0,0,0,1233,0,0,1243
				,1244,1246,1248,0,0,0,0,1254,1255,1258,1259,0,0,0,1260,0,0,1261,0,0,0,1262,1264,
				0,0,1265,0,0,0,0,0,0,0,0,0,0,0,0,1266,0,1267,0,0,0,0,1273,1274,1276,1289,0,0,
				1291,1292,1293,0,0,1294,1295,1296,0,0,0,0,1302,0,1304,0,0,0,0,0,0,0,0,0,1311,
				1312,0,1314,0,1316,1320,1321,0,0,0,0,0,0,0,1322,1323,1324,0,1335,0,1336,0,0,0,0,
				1341,1342,0,1346,0,1357,0,0,0,1358,1360,0,0,0,0,0,0,1361,0,0,0,1362,1365,0,1366,
				0,0,0,0,0,0,0,1379,0,0,0,0,0,0,0,0,0,0,0,0,1386,0,1388,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,1395,0,0,0,0,1403,0,1405,0,0,1407,0,0,0,0,0,1408,1409,0,1410,0,0,0,1412,1413,
				1416,0,0,1429,1451,0,0,1454,0,0,0,0,0,0,0,1455,0,0,0,0,0,0,0,1456,0,0,0,0,1459,
				1460,1461,1475,0,0,0,0,0,0,1477,0,1480,0,1481,0,0,1486,0,0,1495,0,0,0,1496,0,0,
				1498,1499,1501,1520,1521,0,0,0,1526,0,0,0,0,1528,1529,0,1533,1536,0,0,0,1537,
				1538,1549,0,1550,1558,1559,1572,0,1573,0,0,0,0,0,0,0,0,0,1575,0,0,0,0,0,1579,0,
				1599,0,1603,0,1604,0,1605,0,0,0,0,0,1608,1610,0,0,0,0,1611,0,1615,0,1616,1618,0,
				1619,0,0,1622,0,0,0,0,1634,0,0,0,1635,0,0,0,1641,0,0,0,0,0,0,0,0,0,1643,0,0,0,
				1650,0,0,1652,0,0,0,0,0,1653,0,0,0,1654,0,0,0,0,1655,0,1662,0,0,1663,1664,0,0,
				1668,0,0,1669,1670,0,1672,1673,0,0,0,0,0,1674,0,0,0,1675,1676,1680,0,1682,0,0,
				1687,0,0,0,0,0,1704,0,0,1705,0,0,1721,0,0,0,0,1734,1735,0,0,0,0,1737,0,0,0,0,
				1739,0,0,1740,0,0,0,0,0,0,0,0,0,0,1741,1743,0,0,0,0,1745,0,0,0,1749,0,0,0,1751,0
				,0,0,0,0,0,1760,0,0,0,0,1765,0,0,0,0,0,1784,0,1785,1787,0,0,0,0,1788,1789,0,0,0,
				0,1790,1791,1793,0,1798,1799,0,0,0,0,1801,0,1803,1805,0,0,0,1806,1811,0,1812,
				1814,0,1821,0,0,0,0,0,1822,1833,0,0,0,0,0,0,1848,0,0,0,0,0,0,1857,0,0,0,1859,0,0
				,0,0,1861,0,0,0,0,0,0,0,1866,0,1921,1925,0,0,0,1929,1930,0,0,0,0,0,0,0,0,0,1931,
				0,0,0,0,1932,0,0,0,1934,0,0,0,0,0,0,0,0,1946,0,0,1948,0,0,0,0,1950,0,1957,0,1958
				,0,0,0,0,0,1965,1967,0,0,0,0,1968,0,1969,0,1971,1972,0,0,0,0,0,0,0,0,0,0,0,0,0,0
				,0,1973,0,0,0,0,1975,0,0,0,0,1976,1979,0,1982,0,0,0,0,1984,1988,0,0,0,0,1990,
				2004,2008,0,0,0,2012,2013,0,0,0,0,0,0,0,0,0,0,2015,0,2016,2017,0,0,0,0,2021,0,0,
				2025,0,0,0,0,0,2029,2036,2040,0,2042,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2043,0,0,0,0,0,
				2045,0,0,0,0,0,0,0,2046,2047,0,2048,2049,0,2059,0,0,2063,0,2064,2065,0,0,2066,0,
				0,0,0,0,0,2069,0,0,0,0,2070,0,2071,0,2072,0,0,0,0,2080,2082,2083,0,0,0,0,0,2085,
				0,2086,2088,2089,2105,0,0,0,0,2107,0,0,2116,2117,0,2120,0,0,2122,0,0,0,0,0,2123,
				0,0,2125,2127,2128,0,0,0,2130,0,0,0,2137,2139,2140,2141,0,0,0,0,0,0,0,0,0,2144,
				2145,0,0,2146,2149,0,0,0,0,2150,0,0,2151,2158,0,2159,0,2160,0,0,0,0,0,0,2161,
				2162,0,0,2194,2202,0,0,0,0,0,0,2205,2217,0,2220,0,2221,0,2222,2224,0,0,0,0,2237,
				0,0,0,0,0,2238,0,2239,2241,0,0,2242,0,0,0,0,0,2243,0,0,0,0,0,0,2252,0,0,2253,0,0
				,0,2257,2258,0,0,0,2260,0,0,0,0,0,0,0,2262,0,2264,0,0,0,0,0,2269,2270,0,0,0,0,0,
				0,0,0,0,2271,0,2273,0,0,0,0,2277,0,0,0,0,2278,0,0,0,0,2279,0,2280,0,2283,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2287,0,0,0,0,0,0,0,2289,2290,0,0,0,0,2291,0,2292,0,
				0,0,2293,2295,2296,0,0,0,0,0,0,0,2298,0,0,0,0,0,2303,0,2305,0,0,2306,0,2307,0,0,
				0,0,0,0,0,0,0,0,0,0,2313,2314,2315,2316,0,0,2318,0,2319,0,2322,0,0,2323,0,2324,0
				,2326,0,0,0,0,0,0,0,2335,0,2336,2338,2339,0,2340,0,0,0,2355,0,2375,0,2382,2386,0
				,2387,0,0,2394,0,0,0,0,2395,0,2397,0,0,0,0,0,2398,0,0,0,0,0,0,0,2399,2402,2404,
				2408,2411,0,0,0,2413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2415,0,0,2416,2417,2419,0,2420,
				0,0,0,0,0,2425,0,0,0,2426,0,0,0,0,0,0,0,0,0,0,0,0,2427,2428,0,2429,0,0,2430,2434
				,0,2436,0,0,0,0,0,0,2441,2442,0,2445,0,0,2446,2457,0,2459,0,0,2462,0,2464,0,2477
				,0,2478,2486,0,0,0,2491,0,0,2493,0,0,2494,0,2495,0,2513,2523,0,0,0,0,2524,0,0,0,
				0,0,0,2528,2529,2530,0,0,2531,0,2533,0,0,2534,2535,0,2536,2537,0,2538,0,2539,
				2540,0,0,0,2545,2546,0,0,0,0,0,0,0,2548,0,0,2549,0,2550,2555,0,0,0,0,0,2557,0,
				2560,0,0,0,0,0,0,0,0,0,0,0,2561,0,2576,0,0,0,0,0,0,0,0,0,2577,2578,0,0,0,2579,0,
				0,0,0,0,0,0,2580,0,0,0,0,2581,0,0,0,0,2583,0,2584,0,2588,2590,0,0,0,2591,0,0,0,0
				,2593,2594,0,2595,0,2601,2602,0,0,2603,0,2605,0,0,0,2606,2607,2611,0,2615,0,0,0,
				2617,0,0,0,0,0,0,0,0,0,0,0,0,0,2619,0,0,2620,0,0,0,2621,0,2623,0,2625,0,0,2628,
				2629,0,0,2635,2636,2637,0,0,2639,0,0,0,2642,0,0,0,0,2643,0,2644,0,2649,0,0,0,0,0
				,0,2655,2656,0,0,2657,0,0,0,0,0,2658,0,0,0,0,0,2659,0,0,0,0,2664,2685,0,2687,0,
				2688,0,0,2689,0,0,2694,0,2695,0,0,2698,0,2701,2706,0,0,0,2707,0,2709,2710,2711,0
				,0,0,2720,2730,2735,0,0,0,0,2738,2740,0,0,0,0,2747,0,0,0,0,0,0,2748,0,0,2749,0,0
				,0,0,0,2750,0,0,2752,2754,0,0,0,0,0,2758,0,0,0,0,2762,0,0,0,0,2763,0,0,0,0,0,0,0
				,2764,2767,0,0,0,0,2768,0,0,2770,0,0,0,0,0,0,0,2771,0,0,0,0,0,0,0,0,0,2772,0,0,0
				,0,0,2773,2776,0,0,2783,0,0,2784,0,2789,0,2790,0,0,0,2792,0,0,0,0,0,0,0,0,0,0,
				2793,2795,0,0,0,0,0,0,2796,0,0,0,0,0,0,2797,2799,0,0,0,0,2803,0,0,0,0,2806,0,
				2807,2808,2817,2819,0,0,0,0,0,2821,0,0,0,0,2822,2823,0,0,0,0,0,0,0,2824,0,0,2828
				,0,2834,0,0,0,0,0,0,2836,0,2838,0,0,2839,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2841,
				0,0,0,2842,0,0,0,0,0,2843,2844,0,0,0,0,2846,0,0,2847,0,2849,0,2853,0,0,0,0,0,
				2857,0,0,0,0,2858,0,2859,0,0,2860,0,2862,2868,0,0,0,0,2875,0,2876,0,0,2877,2878,
				2884,2889,2890,0,0,2891,0,0,2892,0,0,0,2906,2912,0,2913,0,0,0,0,0,0,0,0,2916,0,
				2934,0,0,0,0,0,2935,0,0,0,0,2939,0,2940,0,0,0,0,0,0,0,2941,0,0,0,2946,0,2949,0,0
				,2950,2954,2955,0,0,0,2959,2961,0,0,2962,0,2963,0,0,0,0,0,0,2964,2965,2966,2967,
				0,0,0,0,0,0,0,2969,0,0,0,0,0,2970,2975,0,2982,2983,2984,0,0,0,0,0,2989,0,0,2990,
				0,0,0,0,0,0,0,2991,0,0,0,0,0,0,0,0,2998,0,3000,3001,0,0,3002,0,0,0,3003,0,0,3012
				,0,0,3022,0,0,3024,0,0,3025,3027,0,0,0,3030,0,0,0,0,3034,3035,0,0,3036,0,3039,0,
				3049,0,0,3050,0,0,0,0,0,0,3051,0,3053,0,0,0,0,3057,0,3058,0,0,0,0,0,0,0,0,3063,0
				,0,3073,3074,3078,3079,0,3080,3086,0,0,0,0,0,0,0,0,3087,0,3092,0,3095,0,3099,0,0
				,0,3100,0,3101,3102,0,3122,0,0,0,3124,0,3125,0,0,0,0,0,0,3132,3134,0,0,3136,0,0,
				0,0,0,0,0,3147,0,0,3149,0,0,0,0,0,3150,3151,3152,0,0,0,0,3158,0,0,3160,0,0,3161,
				0,0,3162,0,3163,3166,3168,0,0,3169,3170,0,0,3171,0,0,0,0,0,0,0,3182,0,3184,0,0,
				3188,0,0,3194,0,0,0,0,0,0,3204,0,0,0,0,3209,0,0,0,0,0,0,0,0,0,0,0,3216,3217,0,0,
				0,0,0,0,0,3219,0,0,3220,3222,0,3223,0,0,0,0,3224,0,3225,3226,0,3228,3233,0,3239,
				3241,3242,0,0,3251,3252,3253,3255,0,0,0,0,0,0,0,0,3260,0,0,3261,0,0,0,3267,0,0,0
				,0,0,0,0,0,3271,0,0,0,3278,0,3282,0,0,0,3284,0,0,0,3285,3286,0,0,0,0,0,0,0,3287,
				3292,0,0,0,0,3294,3296,0,0,3299,3300,3301,0,3302,0,0,0,0,0,3304,3306,0,0,0,0,0,0
				,3308,0,0,0,0,0,0,0,0,0,3311,0,0,0,0,0,0,0,0,3312,3314,3315,0,3318,0,0,0,0,0,0,0
				,0,3319,0,0,0,0,0,3321,0,0,0,0,0,0,0,0,0,3322,0,0,3324,3325,0,0,3326,0,0,3328,
				3329,3331,0,0,3335,0,0,3337,0,3338,0,0,0,0,3343,3347,0,0,0,3348,0,0,3351,0,0,0,0
				,0,0,3354,0,0,0,0,0,0,0,0,0,0,3355,0,0,3365,3366,3367,0,0,0,0,0,0,3368,3369,0,
				3370,0,0,3373,0,0,3376,0,0,3377,0,3379,3387,0,0,0,0,0,3390,0,0,0,0,0,0,0,3402,0,
				3403,3436,3437,3439,0,0,3441,0,0,0,3442,0,0,3449,0,0,0,3450,0,0,0,0,0,0,0,3451,0
				,0,3452,0,3453,3456,0,3457,0,0,3458,0,3459,0,0,0,0,0,0,0,0,0,3460,0,0,3469,3470,
				0,0,3475,0,0,0,3480,3487,3489,0,3490,0,0,3491,3499,0,3500,0,0,3501,0,0,0,3502,0,
				3514,0,0,0,3516,3517,0,0,0,3518,0,0,0,0,3520,3521,3522,0,0,3526,3530,0,0,0,0,
				3531,0,0,0,0,3536,0,0,0,0,0,0,0,3539,3541,0,0,3542,3544,0,3547,3548,0,0,3550,0,
				3553,0,0,0,0,0,0,0,3554,0,3555,0,3558,0,3559,0,0,0,0,0,0,0,0,3563,0,3581,0,0,0,
				3599,0,0,0,3600,0,3601,0,3602,3603,0,0,3606,3608,0,3610,3611,0,0,0,0,0,0,0,0,0,
				3612,3616,3619,0,0,0,0,0,0,0,0,0,0,0,0,0,3624,3628,0,3629,3634,3635,0,0,0,0,0,0,
				3636,0,3637,0,0,3638,3651,0,0,0,0,0,0,3652,3653,0,0,0,0,3656,3657,0,0,0,0,0,3658
				,0,0,0,0,3659,0,3661,3663,3664,0,3665,0,3692,0,0,0,3694,3696,0,0,0,0,0,0,0,0,0,0
				,0,0,3698,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3700,0,0,3701,0,0,0,3708,3709,0,0,0,3711
				,3712,0,0,0,0,0,3723,0,3724,3725,0,0,3726,0,0,0,0,0,0,3728,3729,0,3734,3735,3737
				,0,0,0,3743,0,3745,0,0,3746,0,0,3747,3748,0,3757,0,3759,3766,3767,0,3768,0,0,0,0
				,3769,0,0,3771,0,3774,0,0,0,0,0,0,3775,0,0,0,0,0,0,3776,0,3777,3786,0,3788,3789,
				0,0,0,0,0,0,0,0,0,3791,0,3811,0,0,0,0,0,3814,3815,3816,3820,0,0,0,0,0,0,0,3821,0
				,0,3825,0,0,0,0,3835,0,0,3848,3849,0,0,0,0,3850,3851,3853,0,0,0,0,3859,0,3860,
				3862,0,0,0,0,0,3863,0,0,0,0,0,0,0,0,3873,0,3874,0,3875,3886,0,3887,0,0,0,0,3892,
				3913,0,3914,0,0,0,3925,3931,0,0,0,0,3934,3941,3942,0,0,0,0,3943,0,0,0,3944,0,0,0
				,0,0,3945,0,3947,0,0,0,3956,3957,0,0,0,0,0,0,0,0,0,3958,0,3959,3965,0,0,0,0,3966
				,0,0,0,3967,0,0,0,3968,3974,0,0,0,0,0,3975,3977,3978,0,0,0,0,3980,0,3985,0,0,0,0
				,0,0,0,0,3986,4011,0,0,4017,0,0,0,0,0,0,0,0,0,0,0,4018,0,0,0,0,4019,0,4023,0,0,0
				,4027,4028,0,0,0,0,0,0,0,0,4031,4034,0,0,4035,4037,4039,4040,0,0,0,0,0,4059,0,
				4060,4061,0,4062,4063,4066,0,0,4072,0,0,0,0,0,0,0,0,0,0,0,0,0,4088,0,0,0,0,0,
				4091,0,0,0,0,4094,4095,0,0,4096,0,0,0,0,0,4098,4099,0,0,0,4101,0,4104,0,0,0,4105
				,4108,0,4113,0,0,4115,4116,0,4126,0,0,4127,0,0,0,0,0,0,0,4128,4132,4133,0,4134,0
				,0,0,4137,0,0,4141,0,0,0,0,4144,4146,4147,0,0,0,0,4148,0,0,4311,0,0,0,4314,4329,
				0,4331,4332,0,4333,0,4334,0,0,0,4335,0,4336,0,0,0,4337,0,0,0,4342,4345,4346,4350
				,0,4351,4352,0,4354,4355,0,0,4364,0,0,0,0,4369,0,0,0,4373,0,4374,0,0,0,0,4377,0,
				0,0,0,4378,0,0,0,4380,0,0,0,4381,4382,0,0,0,0,0,0,0,4384,0,0,0,0,4385,0,0,0,4386
				,0,0,0,4391,4398,0,0,0,0,4407,4409,0,0,0,0,4410,0,0,4411,0,4414,4415,4418,0,4427
				,4428,4430,0,4431,0,4448,0,0,0,0,0,4449,0,0,0,4451,4452,0,4453,4454,0,4456,0,0,0
				,0,0,0,0,4459,0,4463,0,0,0,0,0,4466,0,4467,0,4469,0,0,0,0,0,0,0,0,0,0,0,0,0,4470
				,4471,0,4473,0,0,4475,0,0,0,0,4477,4478,0,0,0,4479,4481,0,4482,0,4484,0,0,0,0,0,
				0,0,4486,0,0,4488,0,0,4497,0,4508,0,0,4510,4511,0,4520,4523,0,4524,0,4525,0,4527
				,0,0,4528,0,0,0,0,4530,0,4531,0,0,4532,0,0,0,4533,0,0,0,0,0,4535,0,0,0,4536,0,0,
				0,0,0,4541,4543,4544,4545,4547,0,4548,0,0,0,0,4550,4551,0,4553,0,0,0,0,4562,0,0,
				4571,0,0,0,4574,0,0,0,4575,0,4576,0,4577,0,0,0,4581,0,0,0,0,0,4582,0,0,4586,0,0,
				0,4588,0,0,4597,0,4598,0,0,0,0,4616,4617,0,4618,0,0,0,0,4619,0,4620,0,0,4621,0,
				4624,0,0,0,0,0,4625,0,0,0,0,4657,0,4659,0,4667,0,0,0,4668,4670,0,4672,0,0,0,0,0,
				4673,4676,0,0,0,0,4687,0,0,0,0,4697,0,0,0,0,4699,0,4701,0,0,0,0,4702,0,0,4706,0,
				0,4713,0,0,0,4714,4715,4716,0,0,0,0,0,0,0,0,0,0,0,0,4717,0,0,4720,0,4721,4729,
				4735,0,0,0,4737,0,0,0,4739,0,0,0,4740,0,0,0,4741,0,0,0,0,0,4742,0,4745,4746,4747
				,0,0,0,0,0,0,0,0,4748,0,0,0,4749,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4751,
				4786,0,4787,0,4788,4796,0,0,4797,4798,0,4799,4806,4807,0,0,0,0,4809,4810,0,0,0,0
				,0,0,4811,0,0,0,0,0,4812,0,4813,0,0,4815,0,4821,4822,0,0,0,0,4823,0,0,0,0,0,0,0,
				0,0,0,4824,0,0,0,0,4826,0,0,0,4828,0,4829,0,0,0,4843,0,0,4847,0,4853,4855,4858,0
				,0,0,0,0,4859,0,4864,0,0,4879,0,0,0,0,4880,0,0,0,0,4881,0,4882,0,0,0,0,0,0,0,0,0
				,4883,0,0,0,0,4884,0,0,0,0,0,4886,4887,4888,4894,4896,0,4902,0,0,4905,0,0,4915,0
				,0,0,0,0,0,0,4916,4917,4919,4921,0,0,0,0,0,4926,0,0,0,0,4927,0,0,0,0,0,0,0,0,
				4929,0,4930,4931,0,4938,0,4952,0,4953,4957,4960,4964,0,0,0,0,0,0,0,5019,5020,
				5022,0,0,0,0,0,5023,0,0,0,5024,0,0,0,5025,0,0,0,0,5028,0,0,0,0,5029,5030,5031,0,
				5033,0,0,0,0,0,0,0,0,0,5034,5035,0,5036,0,0,5037,0,0,0,0,5038,0,0,5039,0,0,0,
				5041,5042,0,0,0,0,5044,5049,5054,0,5055,0,5057,0,0,0,5060,0,0,0,0,0,5063,0,5064,
				5065,0,5067,0,0,0,5068,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5076,0,0,0,0,0,0,
				0,5077,0,0,5078,5080,0,0,5083,0,0,0,0,0,0,0,0,5085,0,0,0,0,0,0,5098,5099,5101,
				5105,5107,0,5108,0,5109,0,0,0,0,0,0,0,5110,0,0,0,0,0,5117,5118,0,5121,0,5122,0,0
				,5130,0,0,0,5137,0,0,0,5148,0,0,0,0,0,0,0,5151,5154,0,0,0,5155,0,0,5156,5159,
				5161,0,0,0,0,5162,0,0,0,0,5163,5164,0,5166,0,0,0,0,0,0,0,0,0,0,5167,0,0,0,5172,0
				,0,0,0,0,0,5178,5179,0,0,5190,0,0,5191,5192,5194,0,0,5198,5201,0,0,0,0,0,5203,0,
				5206,5209,0,0,0,0,0,0,5213,0,5214,5216,0,0,0,0,0,5217,0,0,0,0,0,0,0,0,5218,5219,
				0,5231,0,0,5244,5249,0,5254,0,5255,0,0,5257,0,0,0,0,0,5258,0,5260,5270,0,5277,0,
				0,0,0,0,0,5280,5281,5282,5283,0,0,0,0,0,5284,0,5285,0,0,0,0,0,5287,5288,0,0,0,0,
				0,0,0,0,0,0,5289,5291,0,0,5294,0,0,5295,0,0,0,0,0,0,0,5304,0,0,5306,5307,5308,0,
				5309,0,0,5310,0,0,0,0,5311,5312,0,5313,0,0,0,0,0,5316,0,0,0,5317,0,0,0,0,0,0,0,0
				,0,5325,0,0,0,0,0,0,5326,0,5327,5329,0,5332,0,0,0,0,5338,0,0,0,0,0,0,0,0,5340,0,
				0,5341,0,0,0,5342,0,5343,5344,0,0,5345,0,0,0,0,0,0,5347,5348,0,0,0,0,0,0,0,0,0,
				5349,0,5350,0,5354,0,0,0,0,5358,0,0,5359,0,0,5361,0,0,5365,0,5367,0,5373,0,0,0,
				5379,0,0,0,5380,0,0,0,5382,0,5384,0,0,0,0,0,0,5385,0,0,0,0,5387,0,0,0,0,0,0,5388
				,5390,5393,0,0,0,0,0,0,0,0,0,0,0,5396,0,0,0,0,5397,5402,0,0,0,0,0,5403,0,0,0,
				5404,5405,0,0,0,0,0,0,0,0,0,0,0,0,5406,0,0,0,0,5410,0,0,5411,0,5415,0,0,0,0,5416
				,5434,0,0,0,0,0,0,0,0,0,0,0,5438,0,5440,0,0,0,0,0,0,5441,5442,0,0,0,5443,5444,
				5447,0,0,5448,5449,5451,0,0,0,5456,5457,0,0,0,5459,0,0,0,5461,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,5464,0,5466,0,0,5467,0,5470,0,0,5473,0,0,5474,0,0,5476,0,0,0,0,0,0,0,0
				,0,0,0,5477,0,0,0,0,0,0,0,5484,0,0,5485,5486,0,0,0,0,0,5488,0,0,0,0,0,0,0,5489,0
				,0,0,0,0,5507,0,0,0,5510,0,5511,0,0,5512,0,0,0,5513,0,5515,0,0,5516,5517,0,5518,
				0,0,5522,0,0,0,0,0,5534,5535,0,0,5536,0,5538,0,0,5543,0,5544,0,0,5545,0,5547,0,
				5557,0,0,5558,0,5560,5567,0,0,0,0,5568,0,0,0,5571,5573,0,5574,0,5575,0,0,0,0,
				5577,0,0,5598,0,0,0,0,0,0,0,0,0,5600,5609,0,0,0,0,5610,0,0,5612,0,5624,0,5625,0,
				0,0,5629,0,5641,0,5642,5643,0,0,0,0,0,0,5651,0,0,0,5652,5653,0,5661,5662,5678,0,
				5679,0,0,0,0,5685,5686,0,0,0,0,0,5690,5692,0,5703,0,0,0,0,0,5706,0,0,0,0,5707,0,
				0,0,0,0,0,5708,0,0,5709,0,5710,0,0,0,5712,0,5733,0,5734,5735,0,0,5744,5751,0,0,0
				,0,0,0,0,0,0,0,0,0,5752,0,5754,0,0,0,0,0,0,5757,5758,0,5760,5761,0,0,0,0,5763,
				5764,5765,0,5766,0,5767,5768,0,5770,0,0,0,0,5776,5780,0,0,0,0,5782,0,0,0,0,5784,
				0,0,5788,0,0,0,0,0,0,0,0,0,0,0,5797,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5799,0,0,5801,
				0,0,0,5811,0,0,0,0,0,0,5816,0,0,5827,0,0,0,0,0,0,0,0,5830,5831,0,0,5832,0,0,5833
				,0,5835,5844,5845,0,5846,0,0,0,0,0,5850,0,0,0,0,0,5852,0,5855,5857,0,0,5859,0,
				5861,0,0,5863,0,5865,0,0,0,5873,5875,0,0,0,5877,0,5879,0,0,0,5888,0,0,5889,5891,
				0,5894,0,0,0,0,0,0,5895,0,5897,0,0,0,0,0,0,5907,0,5911,0,0,5912,0,5913,5922,5924
				,0,5927,5928,0,0,0,0,5929,5930,0,5933,0,0,0,0,5949,0,0,5951,0,0,0,0,0,0,0,0,5953
				,0,0,5954,0,5959,5960,5961,0,5964,0,0,0,5976,5978,5987,5990,0,0,0,0,0,5991,0,
				5992,0,0,0,5994,5995,0,0,5996,0,0,6001,6003,0,0,0,0,6007,0,0,0,0,0,6008,0,0,6009
				,0,6010,0,0,0,6011,6015,0,6017,0,6019,0,6023,0,0,0,0,0,0,0,6025,0,0,0,0,0,0,0,0,
				0,0,6026,0,6030,0,0,6032,0,0,0,6033,6038,6040,0,0,0,6041,6045,0,0,6046,0,0,6053,
				0,0,6054,0,6055,0,0,0,0,0,0,6057,0,6063,0,0,0,6064,0,6066,6071,6072,0,0,0,0,0,0,
				6075,6076,0,0,6077,0,0,0,0,0,0,0,0,0,6078,6079,0,0,0,0,0,0,0,0,6080,0,6083,0,0,0
				,0,0,6084,0,0,6088,0,6089,0,0,6093,6105,0,0,6107,0,6110,0,0,0,6111,6125,6126,0,0
				,0,6129,0,0,0,0,6130,0,0,0,6131,6134,0,0,0,0,0,0,6142,0,0,0,0,0,6144,0,0,6146,
				6151,6153,0,6156,0,6163,0,6180,6181,0,0,0,0,0,6182,0,0,0,0,6184,6195,0,0,6206,0,
				6208,0,0,6212,6213,6214,0,6215,0,0,0,6228,0,0,0,6234,0,0,0,0,0,0,6235,6240,0,
				6242,6243,6244,0,6250,6255,0,0,0,0,0,6257,0,0,0,6258,6278,0,6284,0,0,0,6285,0,0,
				0,0,0,0,0,0,6286,0,0,0,6320,0,0,6322,6332,0,0,0,0,0,0,0,0,6334,0,0,0,0,0,0,0,
				6335,0,0,6337,0,6338,0,6339,6340,0,0,6356,6357,6369,0,0,0,6370,6371,6372,0,6373,
				0,0,0,0,0,6376,0,0,0,0,0,6382,6383,6384,0,0,0,0,6386,0,6389,6397,6400,6411,0,
				6414,0,0,0,0,0,0,0,6415,6416,0,0,0,0,0,0,6417,0,0,0,0,6418,0,0,0,0,0,0,0,6420,0,
				6421,6423,6425,0,6429,6430,0,6433,6438,0,0,0,0,0,0,0,0,0,0,6439,6440,0,0,6441,0,
				0,6444,0,0,0,0,6446,0,0,0,0,6447,6448,0,0,6450,0,0,0,6454,0,0,6455,0,6461,0,0,0,
				0,0,0,6462,0,0,6463,0,6464,0,6465,6467,0,0,0,6468,0,6479,6480,0,0,0,0,0,0,0,6481
				,0,0,6485,6487,0,0,0,0,0,0,6493,0,0,0,0,0,0,0,0,6494,6495,6496,0,0,0,0,0,6498,0,
				0,0,6507,6508,0,0,0,0,0,0,0,0,0,0,6511,6512,0,0,0,0,6513,0,0,0,6514,0,0,0,0,0,
				6516,0,0,6517,6518,0,0,0,6519,6520,6521,0,6523,0,0,0,0,6524,6528,0,6530,0,0,6532
				,0,6578,0,0,0,6583,0,6584,0,0,0,6587,0,0,0,6590,0,6591,0,0,0,0,0,6592,0,0,0,0,
				6593,6594,0,0,0,0,0,6599,6600,0,0,6601,6602,6604,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				6608,0,0,0,0,0,0,0,0,6610,6611,0,6615,0,6616,6618,6620,0,6637,0,0,0,0,6639,0,0,0
				,0,6641,0,6642,0,0,0,6647,0,6660,6663,0,6664,0,6666,6669,0,6675,6676,6677,0,0,0,
				0,0,0,0,0,0,6678,0,0,0,6679,0,6680,0,0,0,0,0,0,0,6693,0,0,0,0,0,0,0,0,0,6704,
				6705,6706,0,0,6711,6713,0,0,0,0,0,6716,0,0,0,6717,0,6719,6724,0,0,0,0,0,0,0,0,
				6725,6726,0,0,0,0,0,6728,6729,6735,0,6737,6742,0,0,6743,6750,0,6751,0,0,6752,
				6753,0,0,0,0,0,0,6754,0,0,0,0,0,6756,0,0,0,0,0,0,6763,0,0,6764,6765,0,0,0,6770,0
				,0,0,6776,6780,0,6781,0,0,0,6783,0,6784,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				6785,0,0,0,6792,0,0,0,6793,0,0,6802,0,0,0,0,0,6803,0,0,0,6804,0,0,0,6812,0,0,
				6823,0,6824,6839,0,0,0,0,6852,0,0,6854,0,6856,6857,0,0,0,0,0,0,0,0,0,6867,0,6868
				,6870,6872,0,0,0,6873,6874,0,0,0,0,0,6875,0,0,6877,0,0,0,0,0,0,0,6878,0,0,0,6879
				,0,6880,0,0,0,0,0,0,0,0,0,0,6887,0,6888,6891,6893,0,6895,0,0,0,0,0,0,0,0,6899,0,
				0,0,0,6901,0,0,0,0,6910,0,6911,0,0,6912,0,0,6913,6914,0,0,0,6915,0,0,0,6916,6919
				,0,0,0,0,0,0,6924,0,6925,0,0,0,6926,6927,6928,0,6929,0,6930,0,0,6931,6935,0,6936
				,0,0,0,0,6939,6940,6941,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6942,6948,6949,0,0,0,0,0,0
				,0,6952,6954,6963,6965,6966,0,0,6967,6968,0,0,0,0,0,0,0,0,0,6969,0,0,6970,6979,0
				,0,6980,0,0,6983,0,0,0,0,0,6984,0,0,0,0,0,0,0,6988,6990,6992,0,0,0,0,0,0,0,6995,
				0,0,0,7012,0,0,0,0,0,0,0,0,0,7019,0,0,0,0,0,0,0,0,7021,0,0,7022,7023,7028,0,7030
				,7033,0,0,0,0,0,0,7038,0,0,0,0,0,0,0,0,0,0,7039,0,0,0,0,0,7046,0,7047,0,0,0,0,0,
				0,0,0,0,0,0,7048,7052,0,0,0,0,0,7054,0,7060,0,0,0,0,7061,0,7065,0,0,0,0,7067,
				7069,0,7070,7071,7072,0,0,7078,0,7080,7081,0,7083,0,0,0,7084,7087,7088,0,0,7090,
				0,7093,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7107,0,0,7108,0,0,0,0,0,0,0,0,7110,0,7114,0
				,0,0,0,0,0,0,7115,0,7116,0,0,0,0,0,7117,0,0,7118,0,0,7124,0,7125,0,0,7126,0,0,0,
				0,7128,0,0,0,0,0,7129,0,7130,0,7132,7133,0,0,7134,0,0,7139,0,7148,7150,0,0,0,0,
				7152,0,0,0,7153,7156,7157,0,0,0,0,0,7158,0,0,0,0,0,0,0,0,0,0,7163,7165,7169,0,
				7171,0,0,0,0,0,0,0,0,0,7172,0,7173,7181,0,0,0,0,0,7182,7185,0,0,0,0,7187,0,7201,
				7204,0,0,0,0,0,7206,7207,0,0,0,0,7211,7216,0,7218,0,0,0,0,7226,7228,7230,7232,
				7233,7235,7237,0,0,0,0,7238,7241,0,7242,0,0,7247,0,0,0,7266,0,0,0,0,0,0,0,7289,0
				,0,7290,7291,0,0,7292,0,7297,0,0,0,0,0,0,0,0,0,0,7300,0,7301,0,0,0,0,0,0,0,0,0,0
				,0,0,7302,0,0,0,0,7305,0,0,0,0,7307,0,7308,0,7310,0,7335,0,0,0,0,0,0,0,7337,0,
				7343,7347,0,0,0,0,0,7348,0,7349,7350,7352,7354,0,0,0,0,7357,0,7358,7366,0,7367,
				7368,0,0,7373,0,0,0,7374,0,0,0,0,0,0,0,7376,0,0,0,7377,0,0,0,0,0,7378,0,7379,
				7380,0,0,0,0,0,7383,0,0,7386,0,0,0,0,7398,0,0,0,7399,7400,0,7401,0,0,0,0,0,0,0,
				7402,0,0,0,0,0,7405,0,0,0,0,0,7406,0,0,0,0,0,0,0,0,7421,7427,7429,0,0,0,7435,0,0
				,7436,0,0,0,7437,0,0,0,0,0,0,7438,7443,0,7446,0,7448,0,0,0,0,0,0,0,0,0,0,7456,0,
				0,0,0,0,7457,0,0,7461,0,0,0,0,0,7462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7463,7466,7472,
				0,7476,0,0,7490,0,7491,0,0,7493,0,0,0,7498,7499,0,0,7508,0,0,0,0,0,7512,0,0,0,
				7513,7514,7516,0,0,0,0,7518,0,0,7519,7521,7522,0,0,0,7526,0,0,7529,0,0,7531,0,
				7536,0,7538,0,7539,0,0,7541,7542,7546,0,0,0,0,0,7547,0,7548,0,0,0,0,0,7550,0,0,
				7552,7553,0,0,0,0,0,0,0,0,0,0,7554,7563,0,7573,0,0,0,0,0,0,7574,7576,0,7578,7581
				,7583,0,0,0,7584,0,7587,0,0,0,0,0,7589,0,0,0,7594,0,0,7595,0,0,7600,7602,7610,0,
				0,0,0,0,7612,0,7613,7614,0,0,7615,0,0,7616,0,7620,0,7621,7622,0,7623,0,0,0,0,
				7626,0,0,0,0,7627,7629,7631,0,0,7633,0,0,0,0,0,7639,0,7640,7642,0,0,7643,0,0,0,0
				,7644,0,0,0,0,0,0,0,7645,0,0,0,0,0,7661,7662,7663,7665,0,7666,0,7667,0,7684,7688
				,7690,0,7691,0,0,0,0,0,0,7692,0,0,7700,0,7707,0,7708,0,7709,0,7721,0,0,0,7722,0,
				7724,0,0,0,0,0,0,7729,7731,0,7732,0,7733,7735,0,0,0,0,0,0,0,7739,0,0,7741,7745,0
				,7748,0,0,0,7751,0,0,0,7752,0,0,0,0,0,0,0,7753,0,0,7756,0,7757,0,7759,0,7760,0,0
				,0,0,7761,7768,0,0,7769,0,0,7770,0,0,7771,0,0,7772,0,0,7773,0,0,0,0,0,7778,7783,
				0,0,0,0,0,7784,7785,0,7790,0,0,0,0,7792,0,7798,0,0,0,0,0,7799,0,7810,0,0,7813,0,
				7814,0,7816,0,7818,7824,7825,7826,0,7828,7830,0,0,0,7840,0,7842,0,7843,0,0,0,0,
				7844,0,0,0,0,0,0,0,7846,0,0,0,0,0,7856,7857,7858,7862,0,7865,0,0,7866,0,0,7913,0
				,0,0,0,7914,0,0,7915,7917,7918,7919,0,7920,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7921,
				7922,0,7924,0,0,7925,0,0,7927,0,7930,7935,0,0,7937,0,0,0,0,0,0,7939,0,7940,0,0,0
				,0,0,7941,0,0,0,0,7945,0,0,0,0,7949,0,0,0,0,0,0,0,0,7950,0,7953,0,0,0,0,0,0,0,
				7968,0,0,0,0,7969,7972,7992,0,7993,0,0,0,0,0,0,0,0,0,0,0,7994,0,0,0,0,8007,8008,
				0,0,0,0,0,0,0,0,0,0,0,0,8010,0,0,0,8012,0,0,0,0,0,0,0,0,8018,0,8028,8029,0,0,
				8030,0,0,8032,8033,0,0,8034,8036,0,0,0,0,0,0,0,0,0,0,8037,0,0,0,8043,8052,8059,
				8060,0,0,8061,0,0,0,8062,0,8063,0,8064,0,8066,8068,0,0,0,8080,8081,0,8089,0,0,0,
				0,0,8092,0,0,0,0,0,0,8093,8110,0,0,0,0,0,0,0,8111,0,0,0,0,0,8112,8115,0,8117,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8120,8121,8122,8128,8129,8130,8131,0,0,8139,0,0,
				8144,0,0,0,0,8145,8146,8153,0,0,0,0,0,0,0,0,8154,0,8157,8160,8162,0,8164,8165,0,
				0,0,0,8166,8167,0,0,8179,0,0,0,8185,0,0,0,8186,0,0,8187,0,0,0,8188,0,0,0,0,0,
				8204,0,0,0,0,8210,0,0,0,0,0,8213,0,8214,0,0,8215,0,0,0,0,0,0,8218,0,0,0,0,0,0,0,
				0,0,8219,0,8221,0,0,8222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8225,0,0,0,8233,0,0,
				8242,0,0,0,0,0,0,0,0,0,0,0,8247,0,8248,8252,0,8256,8257,0,0,8261,0,8264,8265,0,0
				,0,0,8267,0,0,0,8269,0,0,0,0,0,0,0,0,0,8270,0,0,0,8278,0,8279,8283,0,0,8285,8286
				,8289,8292,0,0,0,0,8293,8295,8299,8300,8301,0,0,0,0,0,0,8304,8307,0,0,0,0,0,0,0,
				8321,0,0,0,8322,8323,8325,8326,8327,0,0,8332,8338,0,0,8340,0,0,0,0,0,8350,0,0,
				8351,0,8354,8355,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8360,8372,0,0,0,0,0,0,0,0,8377,0,0,
				0,0,8380,0,0,0,8383,0,8384,0,0,0,0,8386,8392,0,0,8394,0,0,0,0,0,0,0,8396,8397,0,
				8398,0,8399,0,0,0,0,0,8400,0,8401,8410,8411,0,8412,8413,8422,0,0,0,0,8423,0,0,0,
				0,8424,0,0,8425,0,0,0,0,0,0,0,8441,8442,0,0,0,0,0,0,8443,0,0,8444,0,8447,0,0,0,0
				,8451,0,8458,0,8462,0,0,8468,0,8469,0,0,0,8470,0,8473,8479,8480,0,0,0,0,8481,
				8483,0,0,0,0,0,0,0,0,0,8484,0,0,8490,0,0,0,0,0,0,8491,8493,8494,0,8528,0,0,0,0,0
				,0,0,8530,0,0,0,0,0,0,0,0,8534,8538,8540,0,0,8541,0,0,8545,0,8557,0,0,8569,8570,
				0,0,8571,8574,8575,8579,0,8583,0,0,0,0,8591,0,0,0,0,0,0,0,0,8606,0,8607,0,0,0,0,
				0,0,0,0,0,8608,0,0,8609,0,0,0,8610,0,0,0,8611,0,0,8613,8617,8621,0,0,8622,0,8623
				,0,8624,8625,0,0,0,0,0,0,0,0,0,8637,8638,8639,8650,0,0,0,0,8652,8654,8655,0,0,0,
				0,0,0,0,0,0,0,8656,0,0,0,0,0,8657,0,0,0,0,0,0,0,0,0,8658,0,0,8659,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,8660,0,0,0,0,0,0,8661,8663,8664,0,0,0,0,8665,0,8669,0,
				0,0,0,0,0,0,8671,8674,0,8684,0,8686,0,0,0,8689,0,0,0,8690,0,8706,0,0,0,0,0,0,0,0
				,0,0,0,8710,0,8711,8713,8714,8724,8727,8728,8733,8736,0,8737,8739,0,0,0,0,8742,
				8743,8745,8754,0,0,0,0,8756,0,0,0,0,0,0,8757,8760,0,0,0,0,0,8762,8763,8764,0,
				8766,8769,8770,8773,0,8774,0,8779,0,0,0,0,8780,0,0,8781,0,0,8783,0,0,0,0,0,0,0,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8784,0,0,0,0,0,0,0,0,8785,0,0,0,0,8786,0,0,0,0,8788
				,8790,0,0,0,8803,0,8813,8814,0,0,0,0,0,8815,8816,0,0,0,0,8818,0,0,0,0,8822,8828,
				8829,0,8831,0,0,0,0,8833,0,0,0,8834,0,0,0,8835,0,8836,0,0,0,8837,0,0,0,0,0,0,
				8838,8839,0,0,0,0,0,0,0,0,0,0,0,8840,0,0,0,8841,0,8842,0,0,0,8846,0,0,0,0,0,0,0,
				8847,0,8848,0,0,8864,0,0,8866,0,0,8870,8872,0,0,8873,8874,0,0,0,0,0,0,8875,0,
				8876,0,0,0,0,8896,8900,0,0,0,0,8901,0,0,0,0,0,8904,0,8907,0,0,0,0,8911,8912,8913
				,0,0,0,8914,0,8915,0,0,0,0,0,0,0,0,0,0,0,0,8916,0,0,0,8929,0,0,0,0,0,0,0,0,0,0,
				8930,0,8932,0,8943,0,0,0,8945,8947,0,0,0,0,8949,0,8950,0,8954,8957,0,0,8970,0,0,
				0,0,8971,0,8996,0,0,0,0,8997,9000,0,0,0,0,9001,9002,0,9004,9009,9024,0,0,0,0,0,0
				,0,0,0,0,0,0,9027,9082,0,0,9083,9089,0,0,0,0,0,0,9090,0,0,0,9092,0,0,9093,0,9095
				,0,0,9096,9097,9101,9102,0,0,0,0,0,0,0,0,9112,0,0,0,0,0,0,9114,0,0,9120,0,9121,
				9122,0,0,0,9123,9124,0,0,9125,0,0,9126,0,9127,0,0,9129,9131,0,0,0,9132,0,0,9136,
				0,9144,0,0,9148,0,0,0,0,0,0,9149,0,9152,9163,0,0,9165,0,0,0,0,0,0,0,0,0,0,0,0,0,
				9166,0,9169,0,0,0,0,0,0,0,9170,0,0,0,0,9172,0,9174,9175,9176,0,9177,0,0,0,0,0,0,
				0,0,9186,0,9187,0,0,0,9188,9189,0,0,9190,0,0,0,0,9191,0,0,0,9193,0,0,0,0,9197,
				9198,0,0,0,9208,9211,0,0,0,0,9216,9217,0,9220,0,0,0,0,9221,9222,9223,0,9224,9225
				,0,0,9227,0,9228,9229,0,0,9230,0,9232,0,9233,0,0,0,0,0,9234,9235,0,0,9237,0,0,0,
				0,0,0,0,0,9238,9240,0,0,9241,0,0,0,0,9244,0,0,0,0,9247,0,0,0,0,0,0,0,0,0,0,9248,
				0,0,0,9249,0,0,0,0,0,9250,0,0,0,0,9251,0,0,9252,9255,0,0,0,9256,0,0,0,0,0,0,0,
				9257,0,0,9258,0,0,0,0,0,0,9259,0,0,0,0,0,9262,9263,0,0,9265,9266,0,0,0,0,0,0,0,0
				,9268,9271,0,0,0,0,0,0,0,0,0,9273,0,0,0,9276,9277,9279,0,0,0,0,0,0,0,9280,0,0,
				9293,0,0,0,0,0,9297,9301,0,0,0,0,0,0,0,0,0,0,0,9308,9309,9313,9321,9322,0,9326,
				9327,0,0,9477,0,9479,0,0,0,0,9482,0,0,0,9483,0,9484,0,0,0,0,0,0,0,0,0,9485,0,0,
				9486,0,0,0,9489,0,0,0,0,9490,9491,0,0,0,0,9493,0,9495,9496,0,0,0,0,0,0,0,0,9500,
				0,9502,0,0,0,0,0,9504,9507,0,9509,0,9511,0,0,9513,0,0,0,0,0,0,0,0,9515,0,0,0,0,0
				,0,9516,9517,0,0,0,0,9532,0,0,9533,0,0,9538,0,9539,9540,0,0,0,0,9541,0,0,0,9542,
				0,0,0,0,0,0,0,0,9544,9545,0,9546,0,0,0,0,0,0,9547,9548,0,0,0,9550,0,9557,0,9558,
				0,9561,0,9563,9570,0,9572,9574,9575,0,0,0,9577,9592,0,0,9596,0,0,0,9598,0,9600,0
				,9601,0,0,0,0,0,0,9608,0,9638,9639,0,0,0,0,0,0,0,9641,0,0,9643,9644,9645,9646,0,
				0,0,9648,0,0,0,0,0,0,0,9650,9654,0,0,0,0,0,0,0,0,9655,0,0,0,0,0,9656,0,9657,0,0,
				0,0,9658,0,0,9659,0,0,9664,0,0,9665,0,9667,9669,0,0,0,0,0,0,0,0,0,0,0,0,9671,0,
				9673,9681,0,0,0,0,9682,9683,9684,0,0,0,0,9686,9698,0,0,9700,9701,9702,0,9703,
				9717,0,0,0,0,9718,0,9726,0,0,0,0,9727,0,0,0,9728,0,9742,0,9744,0,0,0,9750,0,9754
				,9755,0,0,0,0,0,9756,0,9757,9768,0,9769,0,0,0,9770,9771,0,9773,0,9774,0,9775,0,0
				,0,9776,9777,9784,0,0,0,9786,0,9789,0,0,0,0,9793,9794,0,0,0,9808,0,0,0,0,0,9811,
				0,0,0,0,0,0,0,0,0,0,0,0,9812,0,9820,0,9823,0,9828,0,0,0,0,9830,0,0,9833,9836,0,0
				,0,9840,0,0,0,9841,0,0,9842,0,9845,0,0,0,9847,9848,0,0,9855,0,0,0,0,0,0,9856,
				9863,9865,0,0,0,0,0,0,0,0,9866,9867,9868,9873,9875,0,0,0,0,0,0,9880,0,9886,0,0,0
				,9887,0,0,9891,0,0,0,0,0,0,0,9906,9907,9908,0,0,0,9909,0,0,0,0,0,0,9910,0,0,0,0,
				9913,0,0,0,0,9914,0,0,0,0,0,9922,0,0,0,0,9923,9925,0,0,0,0,0,0,9930,0,0,0,9931,0
				,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9932,0,9939,0,0,9940,9962,9966,0,9969,9970,0,0,9974
				,0,9979,9981,9982,0,0,0,9985,0,0,0,0,0,0,9987,0,0,0,0,0,0,0,9988,9993,0,0,9994,0
				,0,0,9997,0,10004,0,0,0,0,0,10007,10019,10020,10022,0,0,0,10031,0,0,0,0,0,10032,
				0,0,10034,0,10036,0,0,0,0,10038,0,10039,10040,10041,10042,0,0,0,0,0,10043,0,0,0,
				0,0,10045,10054,0,0,0,0,10055,0,0,10057,10058,0,0,0,0,0,0,10059,0,0,0,0,0,0,0,
				10060,0,0,0,0,0,0,0,10063,0,10066,0,0,0,10070,0,10072,0,0,10076,10077,0,0,10084,
				0,10087,10090,10091,0,0,0,10094,10097,0,0,0,0,0,0,10098,0,0,0,0,0,0,10103,0,
				10104,0,10108,0,0,0,0,0,0,0,0,10120,0,0,0,10122,0,0,10125,0,0,0,0,10127,10128,0,
				0,10134,0,10135,10136,0,10137,0,0,10147,0,10149,10150,0,0,10156,0,10158,10159,
				10160,10168,0,0,10171,0,10173,0,0,0,10176,0,0,0,0,10177,0,0,0,0,10178,0,0,0,0,
				10194,0,10202,0,0,10203,10204,0,10205,10206,0,10207,0,0,0,0,10209,0,0,0,0,0,0,0,
				10213,0,0,0,0,0,0,10217,0,10229,0,10230,10231,0,0,10232,0,0,10237,10238,10244,0,
				0,0,0,0,10250,0,10252,0,0,0,0,0,0,10255,0,0,10257,0,0,0,0,0,0,10258,0,10259,0,0,
				0,0,0,0,0,0,10260,0,0,0,0,0,0,0,10284,10288,10289,0,0,0,10290,0,10296,0,0,0,0,0,
				10297,0,0,0,0,0,0,10298,0,0,0,0,10299,10303,0,0,0,0,0,10306,0,0,0,10307,0,10308,
				0,0,0,0,10311,0,0,0,0,0,0,0,10315,10317,0,0,0,10318,10319,0,10321,0,10326,0,
				10328,0,0,0,0,10329,0,0,10331,0,10332,0,0,0,0,0,0,10334,0,0,10335,10338,0,0,0,0,
				0,10339,10349,0,0,0,0,0,0,10351,0,10353,0,0,0,0,0,0,10362,0,10368,0,10369,0,0,0,
				10372,10373,0,0,0,0,0,10374,0,0,0,10375,0,10376,0,0,10386,10388,10390,0,0,0,0,0,
				0,0,10391,0,0,10392,10394,0,0,10396,0,10397,0,10403,0,0,0,0,0,0,0,0,10404,0,
				10405,10410,0,0,10411,0,10412,0,0,0,0,0,0,0,10421,10422,10423,0,0,0,0,0,0,0,0,0,
				10425,0,0,10427,0,0,10430,0,0,0,0,0,10432,0,10433,10434,0,0,0,0,10436,10437,0,
				10438,0,10439,0,10444,10446,0,0,0,0,0,10448,0,0,0,0,0,10449,0,0,0,0,0,0,0,10451,
				0,10453,0,0,0,10454,10457,0,0,10459,0,10469,0,0,0,0,0,10472,10481,0,0,0,0,0,
				10482,10483,0,10492,0,0,0,0,0,0,0,0,0,0,10499,0,0,0,10502,0,0,10510,0,10521,
				10524,0,0,10525,10526,10528,0,0,0,0,0,0,0,0,10530,0,0,0,0,10533,0,10534,0,0,0,0,
				0,0,0,0,0,0,10535,10536,0,0,10544,0,10553,10556,0,10557,10559,0,0,0,0,0,10562,
				10563,10564,0,10565,0,0,0,10566,0,10567,0,0,0,0,10575,0,0,10576,0,10578,0,0,0,0,
				0,0,0,0,0,0,10585,10586,10587,10589,0,10590,0,0,10594,0,0,0,0,0,10598,0,0,10601,
				0,0,0,10602,0,10603,0,10604,0,10605,0,0,10607,0,10626,0,10627,0,0,0,0,0,10629,
				10630,10631,0,0,0,10646,0,0,0,10647,0,10650,0,10651,0,0,0,10652,10653,10655,0,
				10658,0,0,10659,0,10667,0,0,0,0,10669,0,0,0,0,0,0,0,0,0,10670,0,0,0,10671,0,0,0,
				0,10672,10673,0,10674,0,0,0,10676,0,0,0,0,0,0,10678,0,10682,0,0,10692,0,10697,0,
				0,0,0,10698,0,0,0,10700,0,0,0,0,0,10703,0,10704,0,0,0,0,0,0,0,10705,0,10715,
				10718,10720,0,0,10722,0,0,0,0,0,0,0,0,10723,0,0,0,0,10726,0,0,0,0,0,10727,10730,
				10743,0,0,0,0,0,0,10744,0,0,10745,0,0,0,0,0,0,10748,0,0,0,0,10750,0,0,10752,
				10753,0,0,0,10756,0,0,0,0,0,0,10758,0,0,0,10759,0,10769,0,0,10772,0,0,0,0,0,0,
				10773,0,0,0,10777,0,0,10779,0,0,0,0,0,0,0,0,10780,10784,0,0,0,10789,0,0,0,10791,
				0,0,0,0,0,0,0,0,0,10795,0,0,10796,0,10808,0,10809,0,0,0,10810,0,0,0,10812,0,0,
				10814,0,0,0,0,0,0,0,0,0,10815,0,0,0,0,10816,10817,0,0,0,0,10819,0,10820,0,0,0,0,
				10821,10822,10823,0,10826,10849,0,0,0,0,10850,0,0,10852,0,10853,0,0,10856,0,0,
				10857,10858,10859,10860,0,0,0,0,0,0,10863,0,10866,10867,10872,10890,0,0,10891,
				10892,0,0,0,0,0,10893,0,0,0,10896,10899,0,0,10900,10902,0,0,0,0,0,10903,0,0,0,0,
				0,0,0,0,0,0,0,0,10905,0,10906,0,0,0,0,10908,10911,0,10912,0,0,10916,0,0,0,0,0,
				10917,0,10918,0,0,0,10923,0,0,0,0,0,10924,0,0,10928,10929,0,0,10930,0,0,0,10932,
				0,0,0,0,10939,0,0,10945,0,0,0,10947,0,0,10948,0,0,0,0,0,0,0,0,0,0,0,0,10958,0,
				10960,10962,0,0,10964,0,0,0,10966,0,0,0,0,0,0,0,0,0,0,10967,0,0,0,10968,0,0,0,
				10973,0,0,0,0,0,10975,0,0,0,10976,10978,0,0,10982,10984,10987,0,0,10988,0,10989,
				0,0,10991,0,0,0,0,10992,0,0,0,10993,0,10995,0,0,0,10996,10997,0,0,0,10998,0,
				10999,0,11001,0,0,0,0,0,0,11010,11012,0,11013,11016,11017,0,0,11019,11020,11021,
				0,0,0,0,0,0,0,0,0,0,0,0,11022,0,0,11023,11029,0,0,0,0,11031,0,0,0,11034,0,0,0,0,
				11055,0,0,0,0,0,11056,11060,0,0,0,0,0,0,11061,0,0,11064,11065,0,11066,0,11069,0,
				11085,0,0,0,0,0,11086,0,0,0,11088,0,0,0,11094,0,0,0,11095,11096,0,0,0,0,0,0,
				11097,11098,0,0,0,0,0,0,11099,0,0,11102,11108,0,0,0,11109,0,11114,11119,0,11131,
				0,0,0,11142,0,0,11143,0,11146,0,11147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11148,0,
				11149,11152,11153,11154,0,11156,0,11157,0,0,0,11158,0,0,11159,11160,0,0,0,0,0,0,
				0,0,0,0,0,0,11163,0,0,11164,11166,0,0,0,11172,11174,0,0,0,11176,0,0,0,0,0,11182,
				11183,0,0,0,11184,11187,0,0,11188,11189,0,0,0,0,0,0,11194,0,0,0,0,0,0,0,11200,
				11202,0,0,0,0,0,0,11203,0,11204,0,0,0,0,0,11205,0,0,0,11206,0,11207,0,0,11209,0,
				11211,0,11214,0,0,11231,0,0,0,11293,11295,0,0,11296,11297,11302,0,0,0,11307,0,0,
				0,0,11309,11310,0,11311,0,0,0,11313,0,11314,0,0,0,0,11334,0,11338,0,0,0,11339,0,
				0,0,0,0,11340,0,11341,11342,0,11344,0,11345,0,0,0,11348,11349,0,0,11350,0,0,0,
				11355,0,0,0,0,0,0,11356,0,11357,11370,0,0,11371,0,11374,11376,0,0,0,11377,0,0,
				11378,11383,0,11386,11399,0,11400,11406,0,0,0,11408,0,0,11409,11412,0,0,0,0,
				11417,0,0,0,11418,0,11421,0,11426,11429,0,0,0,0,0,11430,0,11437,0,11438,0,0,0,0,
				0,11440,11453,0,0,0,0,0,0,11454,0,0,0,0,11455,0,0,11456,11460,11461,11463,0,
				11469,0,11473,0,0,0,0,11474,0,0,0,11475,0,11476,11477,11480,0,0,0,0,11481,0,0,
				11484,0,0,11487,0,0,0,0,0,0,0,0,0,0,11497,0,0,11502,0,11509,0,0,11510,11511,
				11513,0,0,0,0,0,0,0,0,0,0,11515,0,0,0,0,11516,0,11520,11521,0,0,0,0,0,0,0,0,0,0,
				0,11529,11530,11531,11534,0,0,11543,0,0,0,0,0,11547,0,11548,0,0,0,0,0,11552,
				11556,0,11557,0,0,11559,0,11560,0,0,0,0,0,0,11561,0,0,11563,11564,0,11565,0,0,0,
				0,11567,0,0,0,11569,0,11574,0,11575,0,0,0,11577,0,11578,0,0,0,11580,11581,0,0,0,
				11582,11584,0,0,0,0,0,0,0,11587,0,11588,11591,0,11595,0,0,0,0,0,0,0,0,11596,0,
				11597,0,0,0,0,11598,11601,0,0,0,11602,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11603,
				11604,0,11606,0,0,11608,0,0,0,0,11610,0,0,11611,0,0,0,0,11613,0,11622,0,0,0,
				11623,0,0,0,0,11625,0,0,11626,11627,11628,11630,0,0,0,0,0,0,11639,0,0,11646,0,
				11648,11649,0,11650,0,0,0,0,0,0,0,0,0,11651,0,0,11652,11653,11656,0,0,11677,
				11679,0,0,0,0,11680,0,0,11681,0,11685,0,0,0,0,0,0,0,0,11688,0,0,0,11716,0,11719,
				0,0,0,0,0,11721,0,0,11724,11743,0,0,0,0,0,0,0,0,11745,11748,11750,0,0,0,0,0,
				11751,0,0,0,11752,11754,0,11755,0,0,0,0,0,0,0,11759,0,0,0,0,0,0,11760,0,0,0,
				11761,0,0,0,0,0,0,11766,11767,0,11772,11773,0,11774,0,0,11775,0,11777,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,11778,11780,0,0,0,0,0,0,0,11783,0,11784,0,0,0,11785,
				0,0,0,11786,0,0,0,0,11788,0,0,11789,11791,11792,0,0,0,0,11795,11834,11835,11836,
				0,0,11837,0,0,0,11838,0,0,11846,11851,0,11852,0,11869,0,0,0,11871,0,0,0,11872,
				11874,0,0,0,0,0,0,11875,0,11876,11877,0,0,0,0,0,0,0,0,0,0,11883,0,0,0,0,0,0,0,
				11884,0,11885,0,11886,0,0,11887,0,11894,11895,11897,11909,11910,0,11912,11918,0,
				0,11920,0,11922,11924,11927,11928,0,0,0,0,11929,0,11934,0,0,0,0,0,11941,11943,
				11944,0,11945,0,0,0,0,11948,11949,0,0,0,0,11953,0,11954,0,11955,0,11956,0,0,0,0,
				0,11957,0,0,11959,0,0,0,0,0,0,0,0,11961,0,0,0,0,0,11978,0,0,0,11979,11980,11986,
				11987,0,11992,0,0,0,0,0,11993,0,0,0,11994,0,11999,12004,12005,12006,0,0,0,0,0,
				12011,0,0,12012,12014,0,0,12015,0,0,12019,12028,0,0,12029,0,0,12032,12033,0,0,0,
				0,12034,0,12041,12043,0,0,12044,0,0,0,0,0,0,0,12046,0,0,0,0,0,0,0,12054,12055,0,
				12056,0,0,0,12060,12064,0,0,0,0,0,12065,12067,12068,0,0,0,0,0,0,0,0,12074,0,0,0,
				12075,12076,0,0,0,12079,0,12081,12086,12087,0,0,12088,0,0,0,0,12089,0,12092,0,0,
				0,0,12097,0,0,0,0,0,0,0,0,12098,0,0,0,0,0,0,0,0,0,0,0,0,0,12102,12103,12104,
				12111,0,0,12114,12116,0,0,0,12118,0,0,0,12119,12120,12128,0,0,0,0,12130,0,0,0,0,
				0,0,12131,0,0,0,12132,12134,0,0,0,0,12137,0,12139,0,12141,0,0,12142,0,0,0,12144,
				0,0,0,0,0,12145,0,12148,0,12153,0,0,0,0,12154,12171,12173,0,0,0,12175,0,0,0,0,
				12178,0,0,0,0,0,0,0,12183,0,0,0,0,0,0,0,0,12184,0,0,0,12186,0,0,0,0,0,12187,
				12188,0,0,12189,0,12196,0,12197,0,0,12198,0,12201,0,0,0,0,12203,0,12209,0,0,0,0,
				12210,12211,12212,12213,0,12217,12218,0,0,0,0,0,0,0,0,0,12222,0,0,0,0,0,0,0,
				12223,0,0,12229,0,0,0,0,12233,0,0,0,0,12234,0,0,12236,12242,0,0,0,12243,0,0,0,
				12244,12253,0,12254,12256,0,12257,0,0,12275,0,0,0,0,0,12277,0,0,0,0,0,12278,0,
				12289,0,0,12290,0,12292,12293,0,0,12294,0,12295,0,0,12296,0,12297,0,12298,0,0,0,
				0,12301,0,0,0,0,0,0,0,0,0,0,0,0,0,12309,0,12338,12340,0,0,0,0,12341,0,0,0,0,0,0,
				0,0,12342,12343,0,12344,0,0,0,0,0,0,0,0,0,12345,0,0,0,0,0,0,0,0,12346,0,0,0,0,
				12348,0,0,0,0,0,0,0,0,0,0,0,0,12350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12351,0,12355,
				12356,12357,0,0,12367,12370,12371,0,0,0,0,0,12372,12376,0,0,0,0,0,0,0,0,12379,0,
				12382,0,12383,0,0,12384,0,0,0,0,12393,0,0,12394,0,0,0,0,12398,12403,0,0,12404,0,
				0,0,0,0,0,0,0,0,0,0,0,0,12410,0,0,0,12411,0,0,0,12412,0,0,0,0,12420,0,12421,0,0,
				0,0,0,12423,0,12425,12429,0,0,0,12431,12432,0,0,0,0,0,0,0,0,0,0,0,0,12434,0,0,0,
				0,0,12435,12436,0,0,0,0,0,0,0,0,12437,0,0,0,0,0,12438,0,0,0,0,0,0,0,0,12445,0,0,
				0,12450,12451,0,0,0,0,0,0,0,0,12452,12475,0,0,12493,12494,0,0,0,12495,0,0,0,0,
				12496,12502,12509,0,0,0,0,12510,0,12512,12513,0,0,0,0,12514,0,0,0,12515,0,12520,
				0,0,0,12524,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12527,0,0,0,12528,0,0,0,12529,0,0,0,
				0,0,12530,0,12535,0,0,12536,0,12538,0,0,0,0,0,0,0,0,0,0,0,0,12540,0,12548,0,0,0,
				0,0,12550,0,0,0,12551,12552,0,0,0,12554,0,0,0,0,0,0,0,0,12555,0,0,12562,0,12565,
				0,12566,0,0,0,0,0,0,0,0,0,0,0,0,12569,0,0,0,12571,12574,0,0,0,0,0,0,0,12577,0,0,
				0,0,0,0,0,12578,12579,12603,0,12608,0,0,12611,0,12612,0,12615,0,12625,0,0,0,0,
				12627,12646,0,12648,0,0,12657,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12670,0,0,12671,0,
				12673,12677,0,0,0,0,0,0,0,0,0,0,0,12679,0,12681,0,12682,12693,0,12694,0,12697,0,
				12701,0,0,0,12703,12704,0,0,0,0,12707,12737,0,0,12739,0,0,12740,0,0,12742,12743,
				0,0,0,0,0,0,0,0,0,12745,0,12746,12747,0,12748,0,0,12759,12767,0,0,0,0,12773,0,
				12774,12778,0,0,0,0,0,0,0,12779,0,0,0,0,0,12780,12793,0,12824,0,12825,0,12836,0,
				0,0,0,12839,0,12842,0,0,0,0,0,0,0,0,0,0,0,0,12843,12845,0,12846,0,0,0,0,12847,0,
				0,12850,12852,12853,0,0,0,12854,0,0,0,12855,0,12856,0,12858,0,0,12859,0,12862,0,
				12863,0,0,12866,0,12869,12872,12873,0,0,0,0,0,0,0,0,0,12875,0,12877,0,0,12878,0,
				0,0,0,0,0,0,0,0,12884,12885,12888,0,12889,0,0,0,0,12893,0,0,0,12895,12896,12898,
				0,0,0,0,0,0,0,12902,0,12909,12910,0,12926,0,12928,0,0,0,12929,0,12930,0,0,0,0,
				12931,0,12932,12933,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12934,0,12942,0,0,0,0,12944,
				0,0,0,0,0,0,0,0,12946,0,0,12948,0,0,12949,0,0,0,0,12950,0,0,0,0,12951,0,12952,0,
				12953,0,0,0,12954,12958,12959,0,0,0,0,0,12960,12964,0,0,0,0,0,12966,0,0,0,0,0,0,
				0,0,12970,0,12971,0,0,0,0,0,0,12972,0,0,12982,0,0,0,12984,12985,0,12986,12996,
				12997,13001,13002,0,0,0,0,13004,0,0,13005,0,0,13007,13009,0,13017,0,0,0,13020,0,
				13021,0,0,0,0,0,0,0,0,0,0,13022,0,0,0,0,0,0,0,0,13024,13027,0,0,0,0,0,13028,0,0,
				13029,0,0,0,0,0,0,0,13032,0,13037,0,0,0,0,0,0,13040,0,0,13041,0,0,0,13043,13044,
				13046,0,0,0,0,13047,0,0,0,0,0,0,0,13049,13054,0,13056,0,0,13060,13061,0,0,0,0,0,
				13067,0,0,13068,0,13071,0,0,0,0,0,13077,13078,0,0,0,0,0,13079,13080,13081,0,
				13082,0,0,0,13085,0,0,0,0,0,0,0,13086,0,13087,13088,0,0,0,0,0,13094,0,13099,0,
				13100,0,0,0,13101,0,13125,13126,13128,13129,0,0,13130,0,13131,0,0,0,0,0,0,13134,
				0,0,0,0,0,0,0,0,0,0,0,13150,0,13168,0,0,0,0,0,0,0,0,0,13169,0,0,13170,0,0,0,0,
				13174,0,0,0,13176,0,0,0,0,0,13177,0,13178,13183,13187,0,0,0,13189,0,0,13190,0,0,
				13191,0,0,13206,0,0,0,13207,0,0,0,0,0,0,0,0,0,0,13212,0,0,13219,13232,0,0,0,
				13241,0,13249,13253,0,0,0,0,0,13255,13259,0,13260,13261,0,13262,0,13272,0,0,0,0,
				13276,0,0,0,0,13277,13299,0,0,13301,13302,0,0,13303,0,0,13305,0,13310,0,0,0,
				13311,0,0,0,0,13325,0,13328,0,0,0,13329,0,0,0,0,0,0,13330,0,0,13331,0,13335,0,0,
				13342,0,0,0,0,0,13343,0,13354,0,13362,0,13366,13367,13369,0,0,13371,13372,0,
				13373,13374,0,13376,0,13380,13381,13386,0,13387,13388,0,13389,13391,13395,0,0,0,
				0,0,13401,13409,0,13410,0,0,0,0,13420,0,0,0,0,0,13422,0,0,0,0,13423,0,0,0,0,
				13425,0,0,0,0,0,13427,0,0,0,13428,0,0,13430,13438,0,13439,0,13445,0,13448,13449,
				0,0,0,0,0,0,13451,0,13457,0,0,0,0,13458,13459,0,13460,0,0,0,0,13464,13465,13466,
				13470,0,13471,13472,13474,13475,0,13476,0,0,13478,13479,0,13481,0,0,0,0,13487,0,
				13490,0,13493,0,0,13494,0,0,13495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13496,13497,0,
				13500,0,0,13516,13522,0,0,13525,13528,0,0,0,13530,13535,0,13537,13539,0,13540,0,
				13543,0,13544,0,0,0,0,0,0,13545,0,0,0,0,0,0,13547,0,0,0,13549,13555,0,0,0,13556,
				13557,0,0,0,0,0,0,0,13558,0,13563,0,0,0,0,13564,0,0,0,0,0,0,0,0,13566,0,0,0,0,0,
				0,13569,0,0,13571,0,0,0,0,13573,0,0,0,0,0,0,13578,0,0,0,0,0,0,0,0,0,0,13581,0,
				13586,0,13595,0,13600,0,0,0,0,0,0,0,0,13601,13603,0,13604,13605,13606,13607,0,0,
				13617,13618,0,0,0,0,0,0,0,13623,0,13625,13627,0,0,0,0,0,0,0,0,13629,0,0,0,13634,
				0,0,0,13638,0,0,0,0,0,0,0,0,13654,0,0,0,0,0,0,0,0,0,0,13656,0,13659,0,0,13660,0,
				0,13662,0,0,0,13663,0,13664,0,0,0,0,0,13668,0,13669,13671,0,0,13672,0,0,0,0,0,0,
				13675,13685,0,13686,0,0,0,13687,0,0,0,13692,13694,13697,0,0,0,13702,0,0,0,0,0,
				13705,0,0,0,0,13707,0,0,0,13714,0,0,0,0,0,0,0,0,0,13715,0,13716,13717,0,0,13719,
				13724,13730,13731,0,0,0,0,0,0,0,0,13732,0,0,0,0,0,0,0,13734,0,13736,0,0,13737,
				13738,13747,0,13751,0,0,13752,0,0,0,13753,0,13757,0,0,13762,13763,0,13764,13765,
				0,13766,0,0,13767,0,0,0,13768,0,0,0,0,0,0,0,13769,0,0,13772,0,13775,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,13776,13778,13787,0,0,0,13797,0,13798,0,13801,0,13804,
				13806,0,0,0,0,13816,13817,0,0,0,0,0,0,0,0,0,0,0,0,0,13834,0,13836,0,0,13838,0,0,
				13839,0,13840,0,0,0,0,13842,0,0,0,0,0,0,13843,0,0,0,0,0,0,0,0,0,13845,0,0,0,0,0,
				13858,0,0,13860,0,0,13861,0,0,13862,13863,0,13868,0,13869,13870,0,0,0,0,0,0,0,0,
				0,0,13872,0,0,0,0,13873,13878,0,0,0,0,0,0,0,0,0,0,13886,0,13888,13889,13890,0,0,
				13891,13894,0,13897,13899,13900,13904,0,0,13906,0,0,0,13909,0,0,0,13910,0,0,0,
				13911,0,0,0,0,0,13912,13917,0,0,0,0,13918,0,13919,0,0,13920,0,0,0,13921,0,0,
				13922,0,0,0,0,0,0,0,13924,0,13927,0,0,0,0,0,13932,0,13933,0,13934,0,0,13935,0,
				13944,0,0,0,13954,0,0,13955,0,0,0,0,13956,0,13957,0,13967,13969,0,0,0,0,0,0,0,0,
				0,0,0,0,13970,13990,0,13991,13994,0,13995,0,0,0,0,13996,0,0,13999,0,0,0,14018,0,
				14019,0,14021,0,0,0,0,0,0,14041,0,0,0,0,0,0,0,0,14043,0,0,0,0,14046,0,0,0,14048,
				14049,0,0,0,0,0,0,0,0,0,0,14051,0,0,14052,14056,0,14063,0,14064,14066,0,0,14067,
				0,0,0,0,0,0,0,0,0,14068,0,0,0,14072,0,14074,14075,0,14076,14079,14085,14086,
				14087,14093,0,0,0,0,14095,0,0,0,0,0,0,14096,14097,0,0,0,0,0,0,0,14098,0,14102,0,
				0,0,0,0,14103,0,0,0,14104,0,0,14105,0,0,0,14107,14108,0,0,14109,0,0,0,0,0,0,0,0,
				14117,0,0,0,0,14118,0,0,0,0,14119,0,0,14120,0,0,14121,0,14122,14127,0,14128,
				14136,0,0,14138,0,14140,0,0,0,14141,14142,0,0,0,0,14146,0,0,14149,0,14151,0,0,0,
				14152,0,0,14153,0,0,0,0,0,0,0,0,0,14154,0,14156,14157,0,0,14159,0,14161,0,0,0,0,
				14162,0,0,0,0,0,0,14163,0,0,14173,0,0,0,0,0,0,14174,0,0,14176,0,0,14178,0,0,
				14179,14181,0,0,14182,14185,14187,0,14190,0,0,14197,0,0,0,0,0,0,0,0,0,0,0,0,
				14198,0,0,0,0,0,0,14199,14200,0,0,0,14204,0,0,14208,0,0,0,0,0,0,0,0,0,0,0,14231,
				0,0,0,0,0,0,0,0,0,14234,0,0,14235,0,0,0,14240,14241,0,0,0,14246,0,0,0,14247,0,
				14250,0,0,14251,0,0,14254,0,0,14256,0,0,0,14260,0,14261,0,0,0,0,14262,14267,
				14269,0,0,14277,0,0,14278,0,14279,14282,0,0,0,14283,0,0,0,14284,14285,0,0,0,0,
				14286,0,0,0,14288,0,0,0,14289,0,14290,0,14293,14301,14302,14304,14305,0,14307,0,
				14308,14309,0,0,0,0,0,0,0,0,0,0,0,14311,14312,0,0,14317,0,0,0,0,0,0,0,14318,0,0,
				0,0,14320,0,0,0,0,14321,14322,0,0,0,0,0,14326,14329,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				14330,14331,0,0,0,0,14332,0,0,0,14333,0,0,14337,14340,0,14341,0,0,14342,0,14345,
				14346,0,0,14347,0,14362,0,0,0,0,0,14364,14365,14371,0,14373,0,0,14374,0,14379,0,
				14400,0,0,0,0,0,14401,0,0,14405,0,14406,0,14408,14409,0,0,0,14417,0,0,14424,0,0,
				0,0,0,0,0,0,0,14430,0,0,0,14431,0,0,14435,0,14440,0,0,0,0,0,0,14442,0,0,14443,0,
				0,0,0,0,14446,0,0,0,0,0,0,0,14454,0,14457,0,14460,0,0,14466,0,0,0,0,0,14467,0,0,
				0,0,0,0,14469,0,14477,0,0,0,0,0,0,14478,14482,0,0,0,14483,0,0,0,14485,14486,0,0,
				0,14487,14488,14489,14492,14493,14494,14495,14496,14497,0,14499,0,14501,0,0,0,0,
				0,0,0,0,0,0,14502,0,14507,14512,14513,14514,0,0,0,0,0,0,0,0,0,0,0,14515,14526,
				14530,0,14537,0,14544,0,14547,0,0,14548,14550,14551,0,0,14552,0,0,0,14553,0,
				14554,0,0,0,0,14556,14564,0,0,14565,14566,0,0,0,0,0,0,14568,0,0,14569,0,0,0,
				14571,14576,0,0,14577,14578,14579,0,0,14580,0,0,0,0,14582,0,0,0,0,0,0,0,0,0,0,0,
				0,14583,0,0,0,0,0,14587,0,14588,0,0,14600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,14601,0,0,14604,14605,14611,0,14613,0,0,0,0,14615,0,0,0,0,0,0,14627,0,14628,0,
				0,0,0,14631,0,14633,14634,0,0,0,0,14635,0,0,0,0,0,0,0,0,14636,0,0,14639,14642,0,
				0,0,0,14644,0,0,0,0,14645,14646,0,14653,0,0,14654,0,14658,0,14661,0,0,0,14665,0,
				0,0,14668,0,0,0,0,0,0,0,0,0,14669,0,0,14670,0,0,0,14680,0,0,14681,0,0,0,0,0,
				14682,14683,0,0,0,0,14686,0,0,0,0,14687,14697,0,0,0,0,14699,14705,14711,0,0,0,0,
				0,0,0,0,0,0,14712,0,0,0,14713,0,0,0,0,14719,0,14720,14721,14726,0,0,0,14728,
				14729,0,0,0,0,14731,0,0,0,0,0,0,0,14733,14736,14737,0,0,14740,14742,0,0,0,14744,
				14753,0,0,0,0,14755,14758,14760,0,0,0,0,0,14761,14762,14765,14771,0,14772,0,
				14773,14774,0,0,14775,0,0,14776,0,0,0,0,14777,0,14779,0,0,14782,0,0,14785,14786,
				14788,0,0,0,0,0,14795,0,0,0,0,0,0,14798,0,14803,14804,14806,0,0,0,14809,0,0,0,0,
				0,0,14810,0,0,0,0,14811,0,14812,0,0,0,0,0,14815,0,0,0,0,0,0,0,0,14816,0,14818,0,
				0,0,0,0,0,14819,0,14820,0,14823,0,0,0,14824,0,0,14826,14827,0,0,0,0,0,0,0,0,0,0,
				0,0,14830,0,0,0,0,0,14833,0,14845,0,0,0,0,0,14846,0,0,14847,14871,0,14873,0,
				14876,0,14877,14878,14880,0,0,0,0,0,14881,0,14882,14894,0,0,0,0,14895,0,14907,0,
				14908,0,0,0,0,0,0,0,14911,0,0,0,0,14920,0,0,14931,0,14932,14934,14935,0,0,14936,
				0,14945,0,0,0,0,0,0,0,14947,0,0,14948,14949,14951,0,0,14952,0,0,0,14964,14973,0,
				0,14990,0,0,0,0,14995,0,0,14998,15001,0,0,15002,15020,0,0,0,0,0,0,15021,0,15022,
				0,0,0,0,15023,0,0,15025,15029,15033,0,0,0,15034,0,0,0,15035,0,0,0,0,0,15043,
				15044,0,0,0,15045,15046,15048,15050,0,15065,0,0,0,0,15066,0,0,15075,15082,15084,
				0,0,15085,15086,0,0,0,0,0,0,0,0,15088,0,0,0,15089,0,0,0,0,15094,0,15096,0,15097,
				0,15100,0,0,15102,0,0,0,0,0,0,0,0,15105,0,0,15106,0,15109,15113,0,0,0,15115,0,
				15118,0,0,0,0,0,0,15119,0,0,15120,0,0,0,0,0,15123,15129,0,0,0,15130,0,15131,0,0,
				15134,0,15135,0,0,0,15137,15138,0,0,0,0,0,0,15139,0,0,0,0,0,15140,0,0,15154,
				15162,0,15169,15170,0,15175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15177,0,15178,15179,0,
				0,0,0,0,15183,0,0,0,0,0,0,0,0,0,0,0,0,15185,15187,0,15194,15195,15196,0,0,0,0,0,
				0,0,15204,0,0,0,0,15206,0,0,0,0,0,15207,0,0,0,0,0,0,0,0,0,15213,0,15214,0,0,0,0,
				0,0,0,15232,0,0,0,0,15234,0,15238,15240,0,15248,0,0,0,0,15250,15251,0,0,0,0,0,0,
				0,15252,0,0,0,15255,15262,15266,0,0,0,15267,0,0,0,15277,15279,0,0,0,15280,15281,
				15282,0,0,0,0,0,15285,0,0,0,0,15289,0,0,15291,0,0,0,0,0,0,0,15296,15297,0,0,
				15304,0,0,0,0,15306,0,0,0,0,0,0,15307,15308,0,15309,0,0,15311,0,0,15312,15313,0,
				0,0,0,0,0,0,0,0,0,0,0,15314,15317,0,0,0,15318,15319,0,0,0,0,15320,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,15321,0,0,0,0,0,15324,0,15325,15326,0,15330,0,0,0,0,15334,0,
				15335,0,15341,0,0,15342,0,0,15343,15344,0,0,0,0,15345,0,0,0,0,15347,0,0,15348,
				15349,15350,0,15356,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15357,0,15358,0,0,0,0,0,0,0,
				15359,15360,15364,0,15380,0,0,0,0,0,15392,0,0,15393,0,15395,0,0,0,0,0,0,0,0,
				15396,0,0,15397,15398,0,0,0,0,0,0,0,0,0,15399,0,15400,0,0,0,15402,0,15405,15410,
				0,0,0,0,15411,0,0,0,15412,0,15416,0,0,0,0,0,0,0,15428,0,15435,0,0,15438,0,0,0,0,
				15439,0,0,0,15440,0,0,0,15441,15449,15451,0,0,0,0,0,0,0,15452,0,0,15455,0,0,0,
				15456,0,0,15458,0,15460,15461,0,0,0,0,0,15462,15464,0,15465,0,0,15466,0,0,15467,
				0,0,0,0,0,15468,0,0,0,0,15481,0,0,15484,0,15485,15486,0,0,0,15487,0,0,0,0,0,
				15488,0,15492,15498,0,0,0,15499,0,0,0,15500,0,15501,0,0,15512,0,15522,0,0,0,
				15524,0,15525,15526,0,0,15527,0,0,15545,15546,0,15548,15552,0,15553,0,0,0,15554,
				0,15555,0,15557,15565,15573,15577,15578,0,15582,0,15583,0,0,0,0,0,0,0,0,0,0,0,0,
				0,15586,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15588,0,0,0,0,0,15589,0,0,0,0,0,0,0,15593,
				15594,0,0,0,0,15595,0,0,0,0,0,0,15596,0,0,0,15597,0,0,0,0,15600,0,0,15601,0,0,0,
				0,15602,15603,0,0,0,0,0,0,15604,0,15609,0,0,15612,0,0,15613,0,0,15615,15617,
				15618,0,0,15620,0,15636,15637,0,0,15649,0,0,0,0,0,0,0,15650,0,0,15651,0,0,0,
				15656,0,15658,0,0,0,15664,0,0,15665,0,0,15668,0,0,0,0,0,15669,0,0,15674,0,0,
				15675,0,0,0,0,15676,0,0,0,0,0,0,0,0,0,0,0,15677,0,0,0,0,15678,0,0,0,0,0,15679,0,
				0,15681,0,15686,0,0,0,0,15687,0,15688,0,0,15690,0,0,0,15697,0,15699,15700,0,0,0,
				0,0,0,0,0,0,15701,0,15702,15703,0,15704,0,15705,0,15707,0,15709,0,15712,15716,0,
				15717,0,15718,15720,0,0,0,0,0,15724,0,0,0,15725,0,15726,0,0,0,15740,0,15745,
				15746,0,0,15747,0,15748,0,0,0,0,0,15749,0,0,0,15752,0,15753,0,0,0,0,0,0,15759,0,
				0,0,15765,0,0,0,0,0,0,0,0,0,15767,0,0,0,15771,0,0,15784,0,0,0,0,15785,15790,
				15791,0,0,15792,0,0,0,15807,0,15811,0,0,0,0,0,0,0,0,0,0,0,0,15818,0,0,0,15819,0,
				0,0,0,15821,0,0,0,0,0,15822,15824,0,0,15827,0,0,15829,15831,0,15832,0,0,15833,0,
				15835,15838,15839,15843,0,0,0,0,0,0,0,0,0,0,0,15844,0,0,0,0,15845,15851,15856,0,
				0,0,0,0,0,0,15858,15860,0,15861,0,0,0,15864,0,0,0,0,15865,0,0,0,0,0,0,15866,0,
				15872,0,0,15876,0,0,0,0,15877,15878,15883,15885,0,0,15888,0,0,0,0,0,15889,15890,
				0,0,0,0,0,0,0,0,15892,0,0,0,0,0,0,0,15893,0,0,15894,0,0,0,15895,0,15896,15897,0,
				15898,15901,15902,0,15911,15915,0,15916,0,15924,15935,0,15937,0,0,0,0,0,15950,0,
				0,0,0,0,0,0,15958,0,0,0,15961,0,0,15966,0,15967,0,0,15977,0,0,15978,0,0,15981,
				15982,15983,0,0,0,0,0,0,0,15986,0,0,0,15990,0,15991,15995,15998,0,15999,0,16000,
				0,0,0,0,16008,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16009,16011,0,16013,0,0,0,0,
				0,0,0,0,16014,0,0,16015,16023,16024,16025,0,0,16026,0,16030,0,16032,0,16033,0,0,
				0,0,0,0,16035,16036,16037,0,0,0,0,0,16039,0,0,0,0,16041,0,0,0,0,0,16043,16044,0,
				0,16047,0,0,0,16048,0,0,16049,16050,16052,0,0,0,0,0,16055,0,0,0,0,0,0,0,0,16056,
				0,0,0,0,0,0,0,16058,16060,16061,0,0,16063,0,0,16064,0,0,0,16067,16068,0,0,16069,
				16078,0,0,0,16079,0,0,0,16080,0,16081,0,0,0,16088,0,0,0,0,0,0,0,0,0,0,0,16089,
				16093,0,16097,0,16103,0,16104,16105,0,0,16256,0,0,16259,0,0,0,0,0,0,0,16260,
				16261,0,0,16262,0,0,16263,0,16268,0,0,0,0,0,0,0,16269,0,0,16270,16273,0,16274,0,
				0,0,0,16275,16276,16277,16280,0,0,0,16281,16284,0,0,0,16286,0,16289,0,0,0,0,0,0,
				0,0,0,16290,0,0,0,0,16291,0,0,0,0,0,0,0,16292,0,0,0,0,0,0,0,0,16293,16295,16297,
				0,16302,0,16304,0,16305,0,16306,0,0,0,0,0,0,0,0,0,0,0,0,16307,16308,16312,0,0,0,
				0,0,0,16313,16315,0,16318,0,0,0,16321,0,0,0,0,0,0,0,16326,16333,16336,0,0,0,0,
				16337,16340,0,0,0,0,0,16345,0,0,16346,0,0,0,0,0,0,0,0,0,16347,0,0,16348,0,0,0,0,
				16349,0,0,0,16350,0,16357,0,0,0,0,16359,16360,0,0,0,0,16362,16363,16364,16365,0,
				0,16366,0,0,0,0,16367,16368,0,16369,16374,0,0,0,0,0,0,0,16376,0,0,0,0,16378,
				16379,0,16380,0,0,0,16381,16383,0,0,0,0,0,16390,0,0,0,16399,0,16402,16404,16406,
				16407,0,0,0,16409,16411,0,0,0,0,16412,0,16413,16415,16423,0,0,0,0,0,16424,0,0,0,
				16428,16434,16435,16449,0,16450,16451,0,0,0,16453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				16454,0,0,16456,16458,0,0,16459,0,0,16460,0,0,0,0,16462,0,16463,0,0,16466,0,0,0,
				0,0,16479,0,0,16480,0,16481,16484,0,0,0,0,0,0,0,0,0,0,16485,0,0,0,0,0,0,16489,0,
				0,0,0,0,16491,0,0,16498,0,0,16503,0,16505,0,0,0,0,0,0,0,0,16506,0,0,0,16508,
				16509,0,0,0,0,0,0,0,0,16511,16513,0,0,0,16516,0,16517,0,16519,0,16529,0,0,16531,
				0,0,0,0,0,0,16534,0,0,16541,16542,0,0,0,0,0,0,0,0,0,16543,16547,16548,0,0,0,
				16551,0,16552,0,0,0,16553,0,0,16558,0,0,16562,16565,0,0,0,16570,0,0,0,16573,
				16585,0,0,0,16586,16587,16595,0,16596,0,16598,0,0,0,16600,0,0,0,0,0,0,0,0,0,0,0,
				0,0,16601,0,0,0,0,16603,0,0,0,0,0,0,0,16604,16612,0,0,0,0,16613,0,16618,0,0,0,
				16640,0,0,16641,0,0,0,0,0,0,16645,0,0,0,0,16646,0,0,0,0,0,0,16651,0,0,0,0,16653,
				16654,0,0,0,16655,0,0,16656,16667,0,0,0,0,16671,0,16672,0,0,0,16673,0,0,0,0,0,
				16676,0,16686,0,0,0,0,16689,0,16690,0,16692,0,16693,0,16694,0,16696,0,0,0,16705,
				0,0,0,0,0,0,16707,0,0,0,16709,0,0,0,0,16711,0,16712,16713,0,0,0,16715,0,0,0,0,
				16716,0,0,0,0,0,0,0,0,0,16718,16724,0,0,16726,16727,0,0,0,0,0,0,0,16728,0,16729,
				0,0,16730,0,0,0,0,0,16731,0,0,0,16732,0,0,0,0,16734,16738,0,0,0,0,0,0,0,0,16743,
				0,0,16745,0,0,0,0,0,16749,0,16752,0,0,0,0,16756,0,0,16758,0,16759,0,0,0,0,0,
				16760,0,0,0,0,0,0,0,16762,0,16769,0,16770,0,16772,0,0,0,16777,16780,0,0,0,0,0,0,
				16781,0,0,16782,0,16784,0,0,16785,16787,16792,0,0,16794,0,0,0,16798,0,0,16809,0,
				0,16814,16816,16817,0,16819,0,0,0,0,0,0,0,0,0,0,16820,0,0,16836,16839,0,0,16841,
				16851,16857,0,0,16858,16859,0,0,16860,0,0,0,0,0,0,0,0,16862,0,16863,0,0,0,0,0,0,
				0,16864,0,0,0,0,0,0,0,16876,0,16881,16882,0,16885,16886,0,16887,0,0,0,16889,
				16891,0,0,0,0,0,16894,16895,0,0,0,0,0,0,0,0,0,0,0,16897,0,16898,0,0,0,0,0,16913,
				0,0,16924,16925,16926,0,0,16927,0,0,0,16937,16938,0,0,0,16940,16941,0,0,0,16942,
				16945,0,16946,16949,16950,0,0,0,16952,16955,0,0,0,16965,0,16969,0,0,16975,0,0,
				16976,0,0,0,0,16978,0,0,16981,0,16983,16989,0,0,0,0,16990,0,0,16991,0,0,0,16993,
				0,16994,16996,17000,0,0,0,0,0,17002,17004,0,17006,0,0,17007,0,0,0,0,17008,17013,
				17014,0,0,0,0,0,0,0,0,0,17021,0,17031,0,0,0,0,0,17033,17036,0,17038,0,0,17039,0,
				17045,0,0,17046,17047,0,0,0,0,17048,0,17049,17050,0,17051,17053,0,17054,0,17055,
				0,0,0,0,0,17063,0,0,17064,0,0,0,0,0,0,0,17065,0,0,17068,0,0,0,0,0,17072,0,0,0,0,
				0,0,17073,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17074,0,17080,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,17081,17083,17084,0,0,0,17085,0,0,0,0,17092,0,0,0,0,0,0,0,
				0,0,17093,0,17095,17102,0,0,0,0,0,0,17103,0,0,17105,0,17107,0,0,0,0,17114,0,0,0,
				0,0,17115,17125,17127,0,0,17128,0,0,0,17129,17130,0,17131,0,0,0,0,0,17132,17135,
				17145,0,0,0,0,0,0,0,0,17146,0,17147,0,17148,0,0,0,0,0,0,17149,17150,0,17151,
				17153,0,17155,0,0,0,0,17163,17171,0,17174,0,0,0,0,17179,0,0,17182,17185,0,0,0,0,
				0,17186,0,0,17188,0,0,0,0,0,0,0,17189,17191,0,17194,0,0,0,0,0,0,0,0,0,17195,
				17196,17203,17204,0,0,17205,17217,0,0,0,0,0,17218,0,0,0,0,17219,0,17220,0,17221,
				0,0,17230,0,0,0,0,0,17236,0,17238,17239,0,0,0,17241,17244,0,0,17245,0,17248,0,0,
				17251,0,17252,0,0,17264,0,17266,0,0,0,17268,0,0,0,0,17271,17272,0,17273,0,17295,
				0,17302,0,17305,0,0,0,17306,0,0,0,0,0,0,0,17308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				17309,0,17310,17313,0,0,0,0,17314,17315,0,17317,0,0,0,0,17318,0,0,0,0,0,0,0,
				17320,0,0,0,0,0,0,17334,0,17344,17348,0,0,0,17350,17351,0,0,17353,0,0,17354,0,0,
				0,0,0,0,0,0,0,17355,0,0,0,0,0,0,17356,17357,0,0,17359,0,0,0,17371,0,17372,0,0,0,
				17393,0,0,0,0,17394,0,0,0,0,0,17395,0,0,17399,0,0,0,17401,17417,0,17418,0,17419,
				0,0,0,0,0,17422,17423,0,0,0,0,0,17424,0,0,0,0,0,17428,17429,17433,0,0,0,17437,0,
				0,17441,0,0,17442,0,0,17453,0,0,0,0,0,0,0,0,17454,17456,17462,0,0,17466,0,0,
				17468,0,0,17469,0,0,0,0,17470,0,17475,0,0,0,0,0,17479,0,0,0,17483,17484,0,17485,
				0,17486,0,17491,17492,0,0,17493,0,17494,17495,0,0,0,17496,0,0,0,17497,0,0,0,
				17502,0,0,0,0,0,17503,0,17505,0,17507,0,0,0,17512,17513,17514,0,0,17515,0,0,0,
				17519,0,0,0,17522,0,0,17523,0,0,0,0,0,0,0,0,0,17527,0,0,0,17528,0,0,0,17534,0,0,
				0,0,17536,0,0,0,17539,0,17540,17543,17549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17556,
				0,0,17558,0,17559,0,0,17560,0,0,0,17563,0,0,0,0,0,0,17564,0,0,17565,17566,0,
				17567,0,0,0,0,0,0,17569,17570,0,17575,0,0,0,0,0,0,0,0,0,0,0,17581,0,0,0,17582,
				17583,0,17586,0,0,17587,0,0,0,0,0,0,0,17588,0,0,0,0,17596,17597,0,0,17598,17600,
				0,0,0,0,0,0,17601,0,0,0,17604,0,0,17605,0,0,17607,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,17612,0,0,17618,0,17621,17622,0,0,0,0,17623,0,0,17624,0,0,17630,0,0,
				17631,17633,17634,0,0,0,0,0,0,0,17635,0,0,17636,0,0,17637,0,17638,0,17640,0,0,0,
				0,0,0,0,0,0,0,17641,0,0,0,0,0,0,0,0,0,0,17643,0,0,0,0,17645,0,0,0,0,0,0,0,0,
				17646,17662,0,0,0,0,0,0,0,0,0,17663,17664,0,17665,17666,0,0,0,17669,17671,17673,
				0,17679,0,0,0,0,0,0,0,17684,0,0,0,17686,0,17714,0,0,17720,17722,17726,0,0,17728,
				0,0,17729,0,0,0,17732,0,17733,0,17734,0,0,0,17735,0,0,0,0,17737,0,0,0,0,17739,0,
				0,0,17741,17742,0,0,0,0,17743,17744,17745,0,0,0,17749,0,17750,17751,17752,17754,
				17761,17762,0,17763,0,17766,0,17772,0,0,0,0,0,17775,0,0,0,0,0,0,0,17776,0,0,
				17777,0,0,17778,17779,0,17782,17783,0,0,0,0,0,0,0,0,0,0,17784,0,0,0,0,0,0,0,
				17821,0,0,0,17822,0,0,0,17823,17825,0,0,0,0,0,17826,17831,17832,17833,0,0,17845,
				0,0,0,17846,0,0,0,17848,17850,17854,0,17855,0,0,17859,0,0,0,0,0,0,17860,17861,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17870,17871,0,0,0,0,0,0,17872,0,0,0,17879,0,
				0,0,17881,17883,0,17884,0,17885,0,0,17886,0,0,17887,17891,17953,0,0,0,0,17954,0,
				0,17955,0,17968,0,0,17972,0,0,0,0,0,17974,0,0,0,0,17976,17978,0,0,17983,0,0,0,0,
				18003,0,0,0,0,0,18007,0,0,0,0,0,18009,0,0,0,0,0,0,0,18010,0,0,0,0,0,0,18012,0,0,
				18014,0,0,0,18015,0,0,0,18016,0,18017,0,0,0,18030,0,0,0,0,0,0,0,18031,0,0,18036,
				18037,18038,0,0,18049,18056,0,18057,18058,0,18059,0,0,0,0,0,0,0,0,18062,0,0,0,0,
				18064,0,0,0,0,0,0,0,0,18067,0,0,0,18068,0,0,18075,0,0,18078,18093,18094,0,0,0,0,
				0,0,0,0,18097,0,0,0,0,0,18098,18100,0,0,0,18108,0,18111,0,0,18112,0,18113,0,0,
				18115,18116,0,18118,0,0,0,0,18121,0,0,0,0,18123,0,0,0,0,0,0,0,0,0,18124,0,0,0,0,
				18125,18126,0,18127,0,0,18128,18135,0,0,0,0,0,0,0,0,0,18150,0,0,0,0,0,18151,
				18152,0,0,18156,18164,0,18166,18171,0,0,0,0,0,0,0,0,0,18172,18183,0,18184,0,0,0,
				0,18185,0,18187,0,0,0,0,0,18188,0,0,0,0,0,0,0,0,18189,0,0,18190,0,0,18191,18192,
				0,0,18194,18195,18196,0,0,0,18197,0,18203,0,18204,0,0,0,0,18205,0,0,0,18207,
				18208,0,0,18214,0,0,0,18215,18216,0,0,0,18220,0,0,18222,0,0,0,0,0,18223,0,18225,
				18231,0,18234,0,18235,0,0,0,0,18240,0,0,18241,18242,0,0,0,0,0,18243,18251,0,
				18253,0,18254,0,0,0,18266,0,0,0,0,0,0,18269,18270,18271,18273,18281,0,0,0,0,0,0,
				0,0,0,0,0,0,18282,0,18283,0,18284,0,0,0,0,0,0,18285,0,18287,18289,0,0,18290,0,0,
				0,0,18308,0,0,0,18310,0,0,0,0,0,0,0,0,0,0,0,0,18311,0,18312,18313,0,18315,0,0,
				18316,18320,0,18331,0,18332,0,18336,0,0,0,0,18337,0,18340,0,0,0,0,0,0,0,0,0,
				18341,0,18344,18345,0,18346,0,0,0,0,0,18348,0,18351,0,0,18356,0,0,0,0,0,0,18357,
				0,0,0,0,0,18367,0,0,0,18368,0,18369,0,18370,18371,0,0,0,18437,18444,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,18445,18450,0,0,0,0,18451,0,18452,0,0,0,18453,0,0,0,0,0,18455,0,
				0,0,18456,0,18457,0,18460,0,0,18461,0,0,0,0,0,0,0,0,18466,0,0,18467,0,0,0,0,
				18473,0,0,0,18476,0,18477,0,0,0,18478,18479,18480,0,0,0,18485,0,0,0,18486,0,0,0,
				0,0,0,18488,18490,0,0,0,0,0,0,18491,0,0,0,0,0,18495,0,0,18496,0,0,0,0,0,0,18505,
				0,18521,0,18522,18523,0,0,0,18525,18526,0,0,0,0,0,18527,0,0,0,0,18532,18533,0,
				18534,0,0,0,0,0,0,18535,18537,0,18538,0,0,0,0,0,0,18540,18541,18542,18543,0,
				18546,0,0,0,0,18553,18556,0,0,18558,0,0,18569,18571,0,0,0,18572,0,18574,0,0,0,0,
				18586,0,0,0,0,0,18588,0,0,18589,0,0,0,0,0,0,18590,0,18592,0,0,0,0,18594,0,0,0,
				18596,0,0,18597,18598,0,0,18601,0,0,0,0,18602,0,0,0,18603,18604,0,18605,0,0,0,0,
				18608,0,0,18611,0,0,0,0,0,0,0,0,0,18612,0,18616,0,0,18617,18619,0,0,0,18628,0,0,
				0,18629,0,0,18630,0,0,0,0,0,0,0,18631,0,18632,0,0,18635,18637,0,0,0,0,0,0,18641,
				18643,18648,0,18652,0,0,18653,0,18655,18656,0,0,0,18657,0,0,18666,18674,0,0,0,0,
				18677,18684,18685,0,0,18686,0,0,18690,0,0,0,0,0,0,0,18695,18696,0,0,0,0,0,0,0,0,
				0,0,18697,0,0,18700,0,0,0,0,0,0,18702,0,18708,0,0,18709,0,18710,0,0,18711,0,
				18714,0,0,18718,0,0,0,0,0,0,18719,0,0,18722,0,18726,0,0,0,0,0,0,0,0,0,0,0,0,0,
				18731,0,0,0,0,0,18739,18741,0,0,18742,0,18743,18744,18746,18748,0,18752,18753,0,
				0,18754,18763,0,18765,0,0,0,18766,0,0,0,18769,0,0,0,0,0,18773,18778,18779,18781,
				0,0,18784,18787,0,18788,0,18793,0,0,0,0,0,0,18795,0,0,18800,0,0,0,0,0,18801,
				18804,0,0,0,0,0,0,0,18806,0,0,0,18811,18815,18816,0,0,0,0,18825,0,0,18827,18829,
				0,0,18830,0,0,0,0,18831,0,0,18832,0,0,0,0,18833,0,18840,0,18841,0,18842,0,0,0,0,
				18843,0,18844,0,0,0,0,0,0,18845,18846,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				18848,0,0,0,18853,18860,0,0,18862,18866,0,0,18867,18869,0,0,18874,18881,18891,0,
				0,0,0,0,0,0,0,0,0,18892,0,0,0,0,0,0,0,0,18895,0,18896,0,0,0,18900,0,0,0,18901,0,
				18902,18915,18916,0,0,0,0,0,0,0,0,18919,0,0,0,0,0,18920,0,0,0,18921,18929,0,0,0,
				0,18930,0,0,0,0,0,0,18932,0,0,0,0,18934,18942,0,0,0,18951,18957,0,0,0,0,18958,0,
				0,0,0,18959,18960,0,0,18961,0,0,18962,0,0,0,0,18963,18964,0,0,0,18965,0,18967,0,
				0,0,0,0,0,0,0,0,18968,0,18969,0,18970,18973,18976,0,0,0,0,0,0,18977,0,0,0,18981,
				0,0,0,18990,0,18998,0,0,0,0,0,18999,19003,0,0,19005,0,0,0,19006,0,0,0,0,0,0,
				19008,19011,0,0,19018,0,0,19019,0,19024,0,19031,19032,0,19039,0,19041,19050,0,0,
				0,19051,19055,19056,0,19059,19063,19064,0,0,19088,0,0,0,19093,19094,0,0,0,0,
				19095,0,19096,0,0,0,19097,0,0,19098,0,19099,19100,0,0,19103,0,0,0,0,0,0,0,19111,
				0,0,0,0,0,0,19112,0,0,0,19116,19117,0,19121,19122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,19123,19124,0,0,0,0,0,0,0,19125,19126,0,19128,0,0,0,0,0,0,0,0,0,0,
				19129,19130,19131,19132,0,0,19146,0,0,19147,19156,19158,0,0,0,0,0,0,0,0,19182,
				19185,0,0,19187,0,0,0,19193,0,0,0,0,0,19194,0,19197,0,0,0,0,19198,0,0,0,0,0,0,0,
				0,0,0,19202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19203,0,19205,19210,
				0,0,0,19213,0,19218,0,0,0,19223,19229,0,0,19230,0,0,19231,19232,19233,19239,0,0,
				0,0,0,19240,0,19248,19249,0,0,0,0,19254,0,19256,19258,19259,0,0,19261,0,19266,0,
				0,0,19272,0,19278,19281,19282,0,0,0,0,0,0,0,0,0,0,0,0,19283,0,0,19284,0,0,19285,
				19287,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19288,19291,0,19292,0,0,0,0,19297,0,19298,0,0,
				0,0,19302,19303,0,0,0,0,19304,19305,0,0,0,0,19314,0,0,19315,0,0,19321,0,0,0,0,0,
				0,0,19322,0,19333,0,19334,19335,0,19336,19337,0,0,0,0,0,0,0,0,0,0,0,19346,0,0,
				19353,0,19354,19362,0,19366,19367,0,0,19369,0,19375,0,19377,19380,19388,0,0,0,0,
				0,19389,19390,0,0,0,0,19392,0,0,0,0,0,19402,0,0,0,0,0,0,0,0,19412,0,0,19413,
				19422,0,19424,0,0,0,19425,0,0,0,19428,0,0,0,0,19431,0,0,0,0,0,19432,0,0,0,0,0,
				19448,19459,0,0,19461,0,19462,19463,0,19467,19474,19482,0,0,0,0,19494,0,0,0,0,
				19501,0,0,0,0,0,0,0,0,0,0,19502,19504,0,0,0,0,0,0,0,19505,0,0,0,0,19506,19507,0,
				0,0,19508,0,0,19511,0,0,19514,0,19515,0,19516,0,19518,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,19530,0,19537,19538,0,19543,19546,0,19547,19551,0,0,0,0,0,0,19552,
				19553,0,0,0,0,0,0,0,0,0,0,0,0,19555,0,0,19556,0,0,0,0,0,0,0,0,0,0,0,0,19560,
				19561,0,0,19562,0,0,0,0,0,0,19565,19567,0,19568,0,0,0,19569,19570,0,19578,0,0,0,
				0,19580,0,0,0,0,19581,19584,0,0,0,0,0,0,0,19585,19586,0,0,0,19587,19588,0,19589,
				0,0,0,0,0,0,19592,19593,19599,0,19600,0,0,19604,0,0,19605,0,19606,19608,19610,0,
				19613,19614,0,0,0,0,0,0,19616,19617,0,0,19618,0,0,19619,0,0,0,19620,19621,19631,
				0,0,19632,19634,19636,0,19643,0,0,19644,19658,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,19659,0,0,0,0,0,0,0,0,0,0,0,19675,19677,0,0,0,0,19679,0,19683,0,19684,0,0,
				0,0,0,0,19687,0,0,0,0,0,0,0,0,19688,19689,19692,0,0,0,0,0,0,0,19695,19697,0,0,0,
				0,0,19698,19699,0,0,19700,0,19702,0,0,19703,0,0,0,0,0,0,19704,19708,0,19710,0,
				19713,0,0,0,19715,0,0,0,0,19718,0,0,0,0,0,0,0,19720,0,19722,0,0,19725,0,0,0,0,0,
				0,0,0,0,0,0,0,0,19730,0,0,0,0,0,19731,0,19734,19735,19739,0,0,19740,0,19741,0,0,
				0,19746,0,0,19747,0,19771,0,0,0,0,0,0,0,0,19772,19775,0,0,0,0,0,0,19778,0,0,0,0,
				0,19779,0,0,19780,19790,0,19791,0,0,19792,0,0,0,19793,0,0,19796,19797,0,0,0,
				19799,0,0,0,19801,0,0,0,0,19803,0,19804,0,19805,0,0,19807,0,0,0,19808,0,0,0,0,0,
				0,19809,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19816,0,19821,0,19822,19830,19831,0,0,
				0,19833,0,0,0,0,0,0,0,0,0,0,19838,0,0,0,0,19839,0,0,19843,0,0,0,0,19845,0,0,0,0,
				19847,0,0,19848,0,19849,0,0,0,0,0,0,0,19851,0,0,0,19854,0,0,0,0,0,0,0,0,0,19864,
				0,19865,0,19866,0,0,0,0,0,0,0,19868,0,0,19870,0,0,19871,0,0,19872,19873,19875,0,
				19880,19882,19884,0,0,19885,19886,19888,0,0,0,0,0,0,0,0,0,0,0,0,19890,19892,
				19893,0,0,19894,0,0,0,19895,0,19896,19902,0,0,19903,0,0,19905,0,0,0,19906,0,
				19908,0,19909,19911,0,0,0,19913,19920,0,19938,19939,19940,0,0,0,0,0,0,0,19942,0,
				19943,0,19945,0,0,0,19951,19952,19954,19960,0,19965,0,19971,0,0,0,0,0,19975,0,
				19976,0,19990,0,0,19991,0,19993,0,19995,0,0,0,19998,19999,20001,0,20003,20005,0,
				20011,20012,0,0,0,0,0,0,20014,0,20020,0,0,0,0,20021,0,0,0,0,0,20023,20024,0,0,0,
				0,0,20025,0,0,20027,0,0,20029,0,0,20032,0,0,0,0,20044,20045,0,20048,20049,0,0,
				20050,0,20052,0,0,20054,20057,0,0,0,0,0,0,0,0,0,20059,0,0,20061,0,20062,0,20064,
				0,0,20066,0,0,20067,0,0,0,0,20069,0,0,0,0,0,0,20070,20071,0,0,0,0,0,0,0,0,0,0,0,
				20072,0,0,20073,20074,0,0,0,0,0,20075,0,20078,0,0,0,0,20080,0,20081,0,0,0,0,0,0,
				20095,0,20098,0,0,0,0,0,0,0,20107,0,0,0,0,0,0,0,0,20112,0,0,0,20113,20114,0,0,0,
				20115,20123,20124,0,0,0,20131,20133,20134,0,0,0,0,20136,0,0,20137,20138,20150,0,
				20152,0,0,0,20153,0,0,20154,0,0,0,20158,0,20163,0,0,20164,0,0,0,0,0,0,0,20166,0,
				20168,0,20170,0,20175,0,0,20178,0,0,0,0,20223,0,0,0,0,20224,0,20226,0,0,20230,0,
				20231,0,0,0,0,20232,0,0,20233,20234,0,20244,0,20247,0,0,0,0,0,0,20249,0,0,0,
				20250,0,0,0,0,20251,0,20253,0,20254,0,0,0,0,20256,0,0,20264,0,0,0,0,20266,0,0,0,
				20278,0,0,20279,20282,0,0,0,0,0,20283,0,20284,0,20285,0,20287,20290,0,0,0,0,
				20292,0,0,0,0,20293,20297,0,0,0,0,0,0,20299,0,20300,20303,0,0,0,0,0,0,20307,0,0,
				20308,0,20309,0,20310,0,0,0,0,0,0,20312,0,0,0,20314,0,0,0,0,20315,20316,0,20322,
				0,0,0,0,0,0,20339,0,0,0,20342,0,0,0,0,20352,0,0,0,0,0,0,0,0,0,0,20362,0,0,20365,
				0,20375,20377,0,0,0,0,0,0,0,0,0,0,0,20378,20379,0,20380,0,0,20381,0,20382,0,
				20383,0,20388,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20390,20392,20393,0,0,20395,0,0,0,0,0,
				20396,0,0,0,0,0,0,0,0,20398,20415,0,0,0,20417,0,0,20420,0,0,20426,20428,0,20431,
				0,0,20432,0,20433,20434,20435,0,0,0,0,20440,0,0,0,0,0,20442,0,20443,0,20446,0,0,
				0,0,20448,0,20451,0,0,0,0,0,0,0,0,0,20452,20453,0,0,20454,0,0,0,0,0,0,20457,0,
				20458,0,0,0,20465,0,0,0,0,0,20469,0,0,0,20473,0,20476,0,0,0,0,0,0,0,0,20477,0,0,
				20485,0,0,20486,0,0,20487,0,20496,0,20497,0,0,20498,0,0,0,0,0,0,0,0,0,0,20499,
				20500,0,20501,0,0,0,0,0,20520,20527,0,20529,0,0,0,0,20539,0,0,20540,0,0,0,20543,
				0,0,0,20546,0,0,0,0,0,20548,0,0,20563,0,0,20564,0,20566,0,0,0,0,0,20589,0,0,0,0,
				20590,0,0,20593,20594,0,0,0,0,20595,0,20597,20598,0,0,0,20618,20620,0,0,0,0,
				20621,0,0,0,0,20627,0,0,0,0,0,20628,0,0,0,20629,0,20630,0,0,20639,0,0,0,0,0,
				20707,0,0,20709,0,0,0,20713,20714,0,0,0,0,0,20724,20725,0,0,0,0,20726,20728,
				20729,0,20733,0,20734,0,20735,20736,0,20737,0,0,20744,0,20745,0,20748,0,0,20749,
				0,0,0,0,0,0,0,0,20750,0,0,0,0,20754,0,0,0,20761,0,0,20763,0,0,0,0,0,0,0,20766,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,20767,0,0,0,0,20768,0,20769,20777,0,0,0,0,0,0,20785,0,
				0,0,20786,20795,20801,0,20802,0,20807,0,0,20808,0,0,20810,0,0,20811,0,20812,0,0,
				0,0,0,20813,0,0,20818,20820,20821,0,0,0,20822,0,20823,0,0,0,20826,0,0,0,0,0,0,0,
				20829,20830,20831,0,20832,20836,0,0,20839,0,0,20840,20842,0,20843,0,20844,0,
				20854,0,0,0,20855,0,0,0,0,20856,0,0,0,20869,0,0,20871,0,0,0,0,0,0,0,20873,0,0,0,
				0,0,20876,0,0,0,0,0,20880,0,0,20882,0,0,0,0,20883,20884,0,0,20890,0,0,0,0,0,0,0,
				0,0,20891,0,0,0,0,0,20905,0,20906,20910,0,0,20912,20915,0,0,0,0,0,20916,0,20917,
				0,20919,20920,20922,0,20927,0,20928,20929,20930,0,0,20935,0,0,20939,0,0,20941,0,
				0,0,20943,0,0,0,20946,20947,0,0,0,0,0,20950,0,20954,0,0,20955,20964,0,0,20967,0,
				0,0,0,0,20973,20975,0,0,0,20984,0,20987,20988,0,0,0,0,0,20989,0,0,0,20995,0,
				20998,0,20999,0,0,0,0,21000,21001,0,0,0,0,21008,0,21010,0,21016,0,0,0,21017,
				21018,0,0,0,0,0,21021,21026,21027,21028,0,0,21029,0,0,0,0,0,21030,0,0,0,0,0,0,0,
				0,0,0,0,0,0,21031,21032,0,0,0,0,0,21037,0,0,21038,0,0,0,0,0,0,0,0,0,21039,0,
				21041,0,21046,21047,0,0,0,21049,21053,0,0,21057,21064,21065,0,0,21066,21067,0,0,
				0,21069,0,0,0,21071,21072,0,0,21073,0,21074,0,0,21078,0,0,0,0,21079,0,0,21080,
				21081,0,0,21086,21087,0,21089,0,0,0,0,0,0,0,21091,0,21093,0,21094,0,0,0,0,0,0,0,
				0,21095,0,0,0,0,0,21096,0,21098,0,0,0,0,0,0,0,21099,0,0,21100,21101,21102,0,0,0,
				0,0,21103,0,21104,0,0,0,0,0,21105,21108,21109,0,0,21112,21113,0,0,0,0,0,0,21115,
				21122,21123,0,0,0,0,0,21125,0,0,0,0,0,0,0,0,21129,21131,0,0,21134,0,0,0,21137,
				21142,0,21143,0,0,21144,0,21145,21146,0,21152,21154,21155,21156,0,0,0,21160,0,0,
				0,0,0,0,21161,0,21164,0,21166,0,0,0,0,21170,0,0,0,0,21171,0,0,21172,0,21174,0,
				21175,0,0,0,0,0,21176,21179,21188,0,0,0,21189,0,0,21190,0,0,0,21192,0,0,21193,0,
				0,0,21198,0,21212,0,0,21213,0,0,0,0,0,0,21215,21216,0,0,21223,21225,0,21226,0,0,
				0,0,21227,21228,0,0,21229,0,0,0,0,21230,21236,0,0,0,0,0,0,0,0,0,0,0,0,0,21237,0,
				0,21238,21239,0,0,0,0,21256,0,0,0,0,0,21257,0,0,0,0,0,0,0,21259,0,0,0,21263,0,
				21272,0,21274,0,21282,0,0,0,0,0,0,0,0,21283,0,0,0,0,0,0,0,0,21294,0,0,21297,0,0,
				0,0,21298,0,0,0,21299,0,21300,21302,0,21316,0,21318,21322,21323,0,21324,0,21326,
				0,0,0,21327,21328,0,0,0,21352,0,0,21354,21361,0,0,0,0,0,0,0,0,0,0,0,0,0,21362,0,
				0,0,21363,0,0,0,0,0,0,0,0,0,21366,0,0,21367,21372,21374,0,0,0,21375,21377,0,
				21378,0,0,0,21380,0,0,0,0,0,0,0,0,0,0,21381,0,0,0,0,0,0,21382,0,21383,0,0,21384,
				0,0,21385,0,0,0,0,21389,21390,0,0,0,0,0,0,0,0,0,0,0,0,0,21397,21398,0,0,0,0,0,0,
				0,0,0,0,21399,0,21400,0,0,0,0,21402,0,0,0,21403,21404,0,21405,21406,0,0,0,21407,
				0,0,0,0,0,0,0,0,0,0,0,0,21408,0,0,0,0,21409,0,21421,0,21422,0,0,0,21425,21428,0,
				0,0,0,21429,0,0,0,0,0,21433,0,0,0,0,0,0,0,0,0,0,21434,0,21443,0,21444,21449,0,
				21452,0,21453,21454,0,0,0,21457,0,0,21458,0,0,0,21460,21461,0,0,21464,0,0,0,
				21473,21478,0,0,21479,0,0,21481,21483,0,0,0,0,0,0,0,0,21484,0,0,21485,21486,0,0,
				21488,0,0,0,0,0,0,21523,0,0,21525,0,0,0,0,0,0,0,21526,0,0,0,0,0,0,21529,21530,0,
				0,21531,0,0,21533,0,0,21539,21564,0,21567,0,0,0,0,0,0,0,0,21575,0,0,0,0,21577,0,
				0,0,0,0,21591,0,0,21604,0,0,0,0,0,0,0,0,0,21605,0,21606,0,0,21617,21618,21619,
				21620,0,0,0,0,0,0,0,0,0,0,0,0,0,21623,0,0,0,0,21631,0,21635,0,0,0,0,21639,21646,
				21653,21662,0,0,21663,21664,0,21666,0,0,21667,0,21670,21672,21673,0,21674,21683,
				0,0,0,0,0,21684,0,21694,0,0,0,0,21695,21700,0,21703,0,21704,0,0,21709,0,0,0,
				21710,0,0,0,0,0,0,0,0,21711,0,0,0,21712,0,21717,0,21730,0,0,0,21731,21733,0,0,0,
				0,21737,21741,21742,0,21747,0,0,0,21749,0,0,0,0,0,0,0,0,0,0,0,0,0,21750,0,0,0,0,
				0,21752,0,0,0,0,21753,0,0,0,0,0,0,21755,21756,0,21757,0,0,0,0,0,0,21760,0,0,
				21763,0,0,0,0,0,0,0,0,0,21764,0,0,21766,0,0,21767,0,0,0,0,0,0,0,0,0,21773,0,
				21774,0,0,21775,0,0,0,0,21776,0,0,21777,0,0,0,0,0,0,0,0,0,21780,21787,21788,
				21791,0,0,0,21797,0,0,0,0,0,21805,0,0,0,0,21806,0,21807,21809,0,21810,21811,0,
				21817,21819,21820,0,21823,0,21824,0,0,21825,0,0,21826,21832,0,0,0,0,0,21833,
				21848,21849,0,0,21867,21870,21871,21873,0,0,0,21874,0,0,0,0,0,0,0,0,0,21875,0,
				21878,0,0,0,21879,0,21881,21886,0,0,0,0,21887,0,0,21888,21894,21895,21897,0,
				21901,0,21904,0,0,21906,0,0,0,21909,21910,21911,0,0,21912,0,0,21913,21914,21915,
				0,21919,0,0,0,0,0,0,0,21921,0,0,21922,21933,21939,0,0,0,0,0,0,0,0,0,0,0,21944,0,
				0,0,0,0,21945,0,21947,0,0,0,0,0,0,0,0,0,0,21949,0,0,0,21950,0,0,0,0,0,0,0,0,0,0,
				0,0,0,21951,0,21952,0,0,0,0,0,0,0,0,0,21954,21957,0,0,0,0,21958,0,21959,0,0,0,0,
				0,0,21962,21963,0,0,0,0,0,0,0,0,21964,21965,0,0,21969,21970,0,0,0,21974,0,0,
				21980,21981,0,21982,0,0,0,0,0,21985,0,21988,0,21992,0,21999,0,0,0,0,0,0,22001,0,
				22002,0,0,0,0,0,0,22003,0,0,0,0,0,22004,0,0,0,22008,0,22009,22015,0,0,22016,0,0,
				0,22017,22019,0,0,0,0,0,0,0,0,0,22020,0,0,0,0,0,0,0,0,0,0,22021,22037,0,22039,0,
				0,0,22040,0,0,0,22048,22049,0,0,22053,22055,22056,22059,0,0,22060,22061,0,0,
				22064,0,0,0,0,22066,0,0,0,0,0,0,0,22073,0,0,0,22074,22075,0,0,0,0,0,0,0,22076,0,
				0,0,0,22077,22084,22099,0,0,0,0,0,0,0,22104,0,0,22107,0,22108,0,22109,0,22110,0,
				0,0,0,0,0,0,22111,22119,0,22120,22122,0,0,0,0,22125,0,0,0,22128,22129,0,0,0,0,0,
				0,22141,0,0,0,22142,0,0,22144,22146,0,22148,22149,22151,22154,0,0,0,22162,0,0,0,
				0,22164,22177,0,0,0,0,22179,0,22182,22183,0,0,22184,22188,0,0,0,0,0,0,0,0,22190,
				0,22194,22201,0,0,22208,0,22209,0,22212,0,0,22215,0,22223,22231,0,0,22232,0,
				22234,0,0,22235,22236,0,22237,0,22240,0,0,0,0,0,22241,0,0,0,22242,22246,22247,0,
				0,0,22259,22268,0,22269,0,0,0,0,0,0,0,22270,0,0,0,0,22271,0,22272,0,22277,0,0,0,
				0,0,22278,22280,22283,22286,0,0,22287,22289,0,0,22290,0,22293,0,0,0,0,0,0,0,0,0,
				0,22295,0,22301,22302,0,0,0,22305,0,22308,0,0,0,0,0,0,0,0,0,0,22315,0,0,0,22317,
				0,22334,0,0,0,22335,0,0,0,0,0,22336,0,22338,22344,0,22347,22349,0,22350,0,0,0,0,
				0,0,0,22357,0,0,0,0,0,22358,0,0,0,0,0,0,0,0,0,0,22359,22360,0,0,0,0,0,0,0,0,
				22361,22366,0,0,22369,0,22370,22373,0,0,0,0,0,22375,0,22377,0,0,0,0,0,22378,0,0,
				0,0,22381,0,0,0,0,22382,0,22383,0,0,0,0,0,0,0,0,0,22391,0,0,22392,22395,22396,
				22402,0,0,0,0,0,0,0,0,0,0,0,0,0,22405,0,0,22406,0,0,22408,0,0,22409,22410,0,0,0,
				0,0,0,22424,0,0,0,0,22426,0,0,0,22427,0,22428,0,22432,0,22435,22442,22443,0,0,0,
				0,22444,0,0,0,0,0,22446,0,22454,0,22455,0,0,0,22465,0,22470,0,22471,0,0,0,0,
				22472,22473,0,22487,0,0,0,22488,0,0,0,0,22489,0,0,22499,0,0,0,0,0,0,22514,0,0,
				22515,0,0,0,0,0,0,0,22516,0,0,0,22517,22520,0,0,0,22534,0,0,22535,0,0,22536,0,
				22540,22553,0,22555,0,0,0,0,22561,0,0,22562,0,0,0,0,0,0,0,0,0,0,0,22566,0,0,0,0,
				22567,22568,0,0,22575,0,22579,0,22582,22583,22585,0,0,0,0,0,22586,0,0,22587,0,0,
				22590,0,0,0,0,0,22591,0,22592,0,0,0,0,0,22593,0,22602,0,0,22604,0,0,22609,0,0,
				22618,0,0,0,0,0,0,22619,0,22624,22625,0,0,22638,0,0,0,0,0,22639,0,0,22640,0,0,0,
				0,0,0,0,22644,0,22645,22647,0,0,0,0,22652,22653,0,0,0,22654,0,22655,0,0,0,22656,
				0,0,0,0,0,0,0,0,0,0,22673,22675,22676,0,0,22678,22679,0,22691,0,0,0,0,0,0,0,
				22693,0,0,22696,0,22699,22707,22708,0,0,0,0,0,0,0,0,22718,0,22719,0,0,0,0,22723,
				0,0,0,22724,22725,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22726,22728,0,0,0,0,0,0,0,0,22729,
				0,0,22731,0,0,0,0,22732,22735,22736,0,0,0,0,22739,0,22749,0,0,22751,0,0,0,0,0,0,
				0,0,0,0,0,22758,0,0,0,0,0,22760,0,0,0,0,0,22764,22765,22766,0,22768,0,0,0,0,0,
				22769,22770,0,0,0,0,0,0,22771,0,0,22772,22775,0,22776,22777,22780,0,0,22782,
				22784,0,22787,0,22789,22796,0,0,0,0,0,22798,0,0,0,0,0,0,22802,0,22803,22804,0,0,
				0,0,0,0,0,0,0,0,22805,0,0,22810,22811,22814,22816,0,22825,22826,0,22831,22833,0,
				0,0,0,0,0,0,0,0,22834,0,22836,22838,0,22839,0,0,0,0,0,22840,0,22847,0,0,0,0,0,
				22856,22857,0,22858,22859,0,0,22862,0,0,22864,0,0,0,0,22865,0,0,0,0,0,0,0,0,0,0,
				0,22866,0,22867,22868,0,0,0,0,22869,0,22871,0,22872,0,22873,22881,22882,22884,
				22885,0,0,0,0,0,0,0,22886,22887,0,22894,0,22895,0,0,0,22900,0,22901,0,0,0,0,
				22904,0,0,0,0,22905,22907,0,0,0,22915,22917,0,0,22918,0,0,0,22920,0,0,0,22929,
				22930,0,0,0,22941,22942,0,0,0,22943,0,0,0,22944,0,0,0,0,0,0,0,22946,0,22947,0,0,
				22954,0,22956,0,0,22962,0,0,0,0,0,0,0,22963,0,0,22964,0,0,0,0,0,0,0,22965,0,
				22968,0,0,0,22969,0,0,0,0,0,22970,0,22971,0,0,0,0,0,22978,0,0,22979,0,22987,0,0,
				22989,0,0,0,0,0,0,22990,0,23005,0,0,0,0,0,0,0,23006,23007,23008,0,0,23023,23024,
				23029,0,0,0,0,23030,0,0,0,0,0,23032,0,0,0,0,0,23035,0,0,0,0,23038,0,0,0,23048,0,
				23049,23052,23053,23060,23061,0,23063,0,0,0,0,23067,23068,0,0,0,23069,23073,0,0,
				0,23127,0,23128,0,0,0,0,0,23129,0,23138,23141,0,23149,0,0,23150,0,0,0,23152,0,0,
				0,0,0,0,0,0,23154,0,0,0,0,23157,23159,23160,0,0,0,0,0,0,0,0,0,0,0,0,23180,0,0,0,
				0,23181,0,0,23188,0,23189,0,0,0,0,0,0,0,0,0,0,0,0,23195,0,0,23196,23199,0,0,0,0,
				0,0,0,0,0,23202,0,23204,0,23207,0,23209,23210,0,0,0,0,0,0,23227,23229,0,0,23230,
				23234,23238,0,0,0,23245,23246,23248,0,0,0,0,23249,23254,0,0,0,23265,0,0,0,0,0,0,
				0,23268,0,23276,0,0,0,0,23277,0,23297,0,23298,0,0,0,0,23299,0,23302,0,0,23303,
				23312,0,0,23314,0,23320,0,0,0,0,23324,0,23325,0,23328,0,23334,0,0,0,23337,0,0,0,
				0,23343,23344,23346,0,23348,0,0,0,0,0,0,0,0,23353,0,0,0,0,23355,0,23356,23358,0,
				0,0,23359,23360,0,23361,0,23367,0,23369,0,0,23373,0,23378,23379,0,23382,23383,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,23387,0,0,0,0,0,0,23388,23390,0,0,23393,23398,0,0,0,
				23399,0,0,0,23400,0,0,0,0,23401,0,0,0,23415,0,0,0,0,0,0,0,0,23416,0,23422,0,
				23443,23444,0,0,0,0,23448,0,23454,0,0,0,0,0,0,23456,0,0,23458,23464,0,0,0,0,0,0,
				23465,0,0,0,23470,23471,0,0,23472,0,0,0,23473,23496,0,0,0,0,0,0,0,0,23497,0,
				23499,0,0,23502,0,0,23503,0,0,23513,0,0,23515,0,0,0,23517,0,0,0,0,23518,23519,
				23521,23524,0,23525,23528,23539,0,0,0,0,0,23541,0,0,23544,0,0,23556,0,0,23557,0,
				0,0,0,0,0,0,0,0,0,0,0,0,23559,0,23560,0,0,23561,0,0,23566,0,0,0,0,0,23568,23569,
				23570,0,0,0,0,23571,0,23574,0,0,0,0,0,0,0,0,0,0,0,23575,0,23579,0,0,23581,0,0,0,
				0,0,0,23587,0,0,0,0,0,0,0,23596,23598,0,0,0,0,23602,23606,0,0,23607,0,23608,0,0,
				0,23614,23616,0,0,0,0,0,23618,0,0,23619,0,0,0,0,23621,23626,0,23627,0,0,0,0,0,0,
				0,23629,0,23630,0,0,0,0,23634,0,23636,0,0,0,0,0,0,23638,0,0,0,0,23640,23667,0,
				23669,0,0,0,23681,0,0,0,0,0,0,0,23682,0,23683,0,0,0,0,0,23684,0,0,0,23685,23689,
				0,23693,23694,23700,0,23702,0,23709,0,0,0,0,0,0,0,23712,0,0,0,0,0,23714,0,0,
				23715,0,0,0,0,23718,0,0,23720,0,0,0,0,23722,0,0,0,23726,23729,0,23741,23746,0,
				23748,0,0,0,0,23749,0,0,0,0,0,23750,0,0,0,0,23751,0,23753,0,0,0,0,23757,23765,0,
				0,0,23770,0,0,0,0,0,0,0,23771,0,23772,23781,0,0,23796,0,0,0,0,23798,0,23799,0,0,
				0,23802,0,0,23806,0,23807,0,0,23808,0,23809,0,23819,0,0,0,23821,0,23827,0,0,0,
				23829,0,0,0,0,0,0,0,23830,0,0,0,0,0,0,23832,23833,23834,23835,0,0,0,0,23837,
				23838,0,0,0,0,0,23846,0,0,0,0,0,0,23847,0,0,0,0,0,23879,23881,0,0,23882,23883,
				23895,0,23899,0,0,0,0,23901,0,0,0,0,0,0,23902,0,0,0,0,0,23903,23905,0,23906,0,
				23907,23918,23919,23920,0,23922,0,23924,0,23927,0,23934,0,23937,23941,0,23942,
				23946,0,0,0,0,0,23955,23956,23958,0,0,0,0,0,0,23959,0,23962,23965,0,23966,0,0,0,
				0,23967,23968,0,0,23973,0,0,23974,0,0,0,0,23975,0,23976,0,0,0,0,0,0,0,0,0,0,0,0,
				0,23977,0,0,0,0,0,0,0,0,23980,0,0,23984,0,23985,0,0,23987,0,0,23988,23990,23991,
				0,0,0,0,0,0,23992,0,0,0,0,0,0,0,0,23994,0,0,0,23998,0,0,0,0,0,0,0,0,0,23999,0,0,
				24003,0,24004,0,24006,0,0,0,24007,0,0,24008,0,0,0,0,0,0,0,24009,0,0,24010,0,0,
				24011,0,0,24013,24014,0,0,24015,24016,24027,0,24028,24029,0,24030,0,0,0,0,0,
				24033,24034,0,24035,0,0,24036,0,0,24044,0,24048,24049,24063,24067,0,24068,24070,
				0,0,24071,24078,24087,0,24090,0,0,0,24095,0,24098,24101,24104,24106,0,24107,0,0,
				0,24108,0,0,0,0,24110,24111,0,24113,0,0,24115,24120,0,0,0,0,0,0,24124,0,24125,0,
				24126,0,24127,0,0,0,0,0,24135,0,0,24136,0,24137,24142,0,0,0,24146,0,0,24147,
				24149,24154,0,24163,0,0,0,24165,24166,24167,0,0,0,0,0,0,0,0,0,0,24169,24170,
				24175,0,0,0,24178,0,0,24179,0,0,24181,0,24184,24197,0,24201,24204,0,0,0,0,0,0,
				24206,24212,24220,0,0,0,24224,0,0,0,0,0,0,0,0,24226,0,24234,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,24235,0,24236,0,0,0,0,0,24239,24240,24241,0,0,24248,0,0,24249,0,
				24251,0,0,0,0,0,0,24253,0,24268,0,0,0,24269,0,24271,24272,0,0,0,0,24273,0,0,
				24274,0,0,24279,0,0,0,0,0,0,0,24280,0,24293,24294,0,0,0,0,0,0,24296,0,0,24323,0,
				0,0,24329,24330,24331,24339,0,24351,0,0,24369,24370,0,0,0,24371,0,0,0,0,24372,
				24373,24374,0,0,0,0,0,24378,0,0,0,0,24379,0,24381,0,24383,24389,0,24390,0,0,
				24394,24395,24400,0,0,0,24401,24402,0,24406,0,0,0,24411,0,0,0,24415,0,24416,0,0,
				0,0,0,24417,0,24419,0,24422,0,24423,24428,0,24435,0,0,0,24439,0,0,0,24440,24442,
				24446,0,0,0,24447,24448,24449,24452,0,0,0,0,24453,24457,0,0,24458,24459,24460,0,
				24465,0,0,0,0,0,0,0,24470,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24471,0,24473,
				24474,24475,24476,0,24478,0,0,0,0,24480,0,0,0,0,0,0,0,0,0,0,24481,0,0,0,0,0,0,0,
				0,0,0,24482,24485,0,0,0,0,24486,0,0,0,24488,0,0,0,24494,0,0,0,0,24497,0,0,24498,
				0,0,0,24499,24506,0,0,0,24507,0,0,24511,0,0,24513,24514,0,0,0,0,0,24517,0,24518,
				0,24520,0,24521,24524,24525,0,0,0,0,0,24527,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24528,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24537,24539,0,24540,0,0,0,24548,0,0,0,0,0,24549,
				24550,0,0,0,24553,24554,0,24555,0,24556,0,24558,0,0,0,0,0,24560,0,0,0,24561,0,0,
				0,0,0,24562,0,0,0,0,0,0,0,0,0,0,0,0,0,24567,0,0,0,0,0,24569,0,0,0,24574,0,24575,
				0,0,0,0,0,0,0,0,0,0,0,24577,24581,0,24584,0,0,0,0,0,24585,0,0,0,0,0,24586,0,0,
				24587,0,24588,0,0,0,0,0,0,0,0,0,0,24590,24591,0,0,0,0,24592,0,0,0,0,0,0,0,24594,
				0,0,0,0,0,0,0,24596,24597,0,0,0,0,24602,24603,0,0,0,0,24604,0,0,24605,0,24610,0,
				0,24611,0,0,0,0,24612,24615,24616,24624,0,0,0,24627,0,24638,24639,0,0,0,0,24640,
				0,0,0,24655,24656,24657,0,0,0,0,0,0,0,0,24662,0,24663,24664,0,0,0,0,0,24665,0,0,
				0,0,24667,0,0,0,0,0,0,24668,24669,0,24670,24674,0,0,0,24675,0,24678,0,0,24679,0,
				0,0,24681,0,24683,0,0,0,0,24684,0,24685,0,0,24686,0,0,24688,24689,0,0,0,0,24690,
				24691,0,0,0,0,0,0,0,24697,0,24698,0,0,0,0,0,0,0,0,24709,0,0,0,0,0,24710,0,24712,
				0,0,0,0,0,0,24713,24714,0,24715,0,24716,24718,0,24719,0,0,0,0,24720,0,0,24725,0,
				0,24738,0,24749,24750,0,0,0,24752,0,0,0,24753,0,0,0,24758,0,0,0,0,0,24762,0,
				24763,0,0,0,0,0,0,0,24764,0,0,0,0,0,24765,24767,24768,0,24772,0,0,0,0,24773,0,0,
				0,0,24777,0,0,0,0,0,24785,0,24786,24788,0,0,0,24789,0,0,0,0,24794,24798,0,24799,
				24800,0,0,0,24803,0,24804,24806,0,24807,0,0,0,24810,0,0,0,0,0,0,24827,24828,0,
				24835,0,0,0,0,0,0,24836,0,0,0,0,0,24839,0,24843,24844,0,0,0,0,0,0,0,0,0,0,24847,
				0,0,24848,0,0,0,0,0,0,24849,0,24850,24851,0,0,0,24852,0,24853,0,0,0,0,0,0,0,0,0,
				24854,0,24855,0,0,24868,0,0,0,24883,0,0,0,24884,0,24895,24897,0,0,0,0,0,24899,0,
				0,0,0,0,24900,0,24913,0,0,0,0,0,0,24914,0,0,24917,24930,24931,0,0,0,24932,0,0,
				24939,0,0,24942,0,0,0,0,0,0,0,0,0,24945,24950,0,24951,0,0,24953,0,0,0,24954,0,
				24959,0,0,0,24961,0,0,24962,0,24964,24968,24970,24972,0,0,0,0,0,24976,0,0,0,
				24977,0,24982,0,0,24983,0,0,24984,0,0,0,24993,0,0,0,24994,0,0,25001,0,0,0,25003,
				0,0,25018,0,0,25023,0,0,0,25034,0,0,25035,25036,0,25037,0,0,0,0,0,0,0,25039,0,0,
				0,0,0,25040,0,0,0,0,0,0,0,25042,0,0,25043,25045,0,0,0,0,0,0,25049,0,0,25051,0,
				25052,25053,0,0,25054,0,0,0,25055,0,0,0,0,25057,25059,0,0,25060,25064,0,25065,
				25069,25070,0,0,0,0,25072,0,25073,0,25090,0,0,25092,25093,25101,0,0,0,0,0,0,
				25105,25108,0,0,25113,0,0,25115,25116,0,0,0,0,0,0,25117,0,0,0,25120,25121,0,0,0,
				0,0,0,0,25125,0,0,0,25126,0,25130,25134,0,25139,0,25143,0,0,0,25151,0,25161,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25163,0,0,0,0,0,0,0,25174,0,25175,0,25207,0,0,
				0,25209,0,0,0,0,25213,0,25219,0,25223,0,25225,0,0,0,25227,0,0,0,25228,0,0,0,
				25229,0,0,0,0,0,0,0,25231,25233,0,0,0,0,25237,25239,0,0,0,25243,0,0,0,25252,0,
				25257,25258,0,0,0,0,25260,25265,0,25268,0,0,25273,25324,0,25325,0,25326,0,0,0,0,
				0,0,0,0,25327,0,0,0,0,0,25328,0,0,0,0,0,0,25332,0,0,0,25333,0,0,0,25336,25337,
				25338,0,0,25343,0,25350,0,0,0,0,0,0,0,25352,0,25354,0,25375,0,25379,0,0,0,0,
				25384,0,0,0,0,0,0,0,0,0,25386,0,25388,0,25390,0,0,25399,0,0,25401,0,0,0,25402,0,
				0,0,25407,0,0,0,0,0,0,0,0,0,0,0,25413,25415,0,0,25417,0,0,0,0,0,0,0,25419,0,0,0,
				25421,0,0,0,25424,0,0,0,0,25433,0,0,0,0,0,0,0,0,0,25435,0,0,0,0,0,0,25436,0,0,0,
				25437,0,0,25440,0,0,0,0,0,0,25442,0,0,25443,0,25446,0,0,25449,0,0,0,25450,0,0,0,
				0,25452,0,25453,25454,25455,0,0,0,25456,0,25457,0,0,0,25459,0,25461,0,25468,0,0,
				0,0,0,0,0,0,25469,0,0,0,0,0,25471,0,0,0,0,0,25474,0,0,0,0,0,0,0,0,25475,0,0,0,0,
				25477,0,0,0,0,25483,0,0,0,0,0,25484,0,0,0,0,0,0,0,0,0,0,0,0,25485,0,25497,0,0,
				25498,0,25504,0,25510,0,25512,0,0,25513,25514,0,0,0,0,0,0,25517,25518,25519,0,
				25520,0,0,0,0,0,0,0,25521,0,25522,25527,25534,0,25536,0,25537,0,0,25548,25550,0,
				0,25551,0,25552,0,0,0,0,0,25554,0,25555,0,25556,25557,25568,0,0,0,25570,25571,0,
				0,0,0,0,0,25574,0,0,0,0,25579,0,0,0,25581,0,0,0,25582,0,0,0,0,0,0,0,0,0,25588,0,
				0,0,0,25589,0,0,0,0,25590,0,25591,25592,25593,0,25594,0,0,0,25596,0,25597,25615,
				0,0,0,0,0,25618,0,0,0,0,25619,25623,0,0,25629,0,0,25631,0,0,0,25635,25636,0,0,
				25649,0,0,0,0,25654,0,0,0,25661,25663,0,0,25671,0,0,25678,25698,0,25699,25702,
				25703,0,0,0,0,0,0,0,0,25704,0,0,0,0,0,25706,0,0,25710,0,25711,0,25712,0,25715,
				25716,25717,0,0,25718,25728,25732,0,0,0,25734,0,0,0,0,0,0,0,0,0,25737,0,0,25739,
				0,0,0,25740,0,25741,25745,0,25746,0,25748,25772,25778,0,0,0,0,0,25780,0,0,0,0,
				25781,0,25782,25784,25785,0,0,0,25789,0,0,0,0,0,0,25797,25801,0,0,0,25808,25809,
				0,0,25811,25814,25815,0,0,25817,0,0,0,0,0,0,0,0,25820,0,0,0,0,25832,25833,0,0,0,
				25846,0,0,0,25847,25848,0,0,0,0,0,0,0,0,0,25849,25850,0,0,25851,0,0,25852,0,
				25862,0,0,0,25863,25865,0,0,0,0,0,0,0,25867,25868,0,25869,25874,0,25875,0,25876,
				25877,0,0,0,0,25878,25902,0,0,0,0,0,0,0,25903,25904,25905,0,0,0,25908,25909,0,0,
				0,0,25910,0,0,0,0,0,0,0,25912,0,25913,0,0,0,0,0,0,0,0,25914,0,0,25916,0,0,0,0,0,
				25917,25927,0,0,0,0,25928,0,0,25930,0,0,0,25933,0,0,25938,25942,0,0,0,0,0,0,0,
				25945,0,25950,0,25956,0,0,25961,25962,0,0,25963,0,25964,25965,25966,0,0,0,0,0,
				25967,0,0,0,0,25968,0,0,0,25969,25971,0,0,0,0,0,25973,25975,0,0,0,0,0,0,0,25978,
				0,25981,0,0,0,25982,0,0,0,25984,0,0,0,0,0,0,0,25993,0,0,0,0,0,0,0,0,0,0,0,0,0,
				26002,0,0,0,26005,0,0,0,26006,26007,0,0,26014,26015,26016,0,0,0,0,0,0,26017,
				26018,26020,0,26022,26023,0,0,0,26024,26028,0,26029,26033,26034,26044,0,0,0,0,0,
				26046,0,0,26047,0,0,26049,0,26050,0,26051,0,0,0,0,0,26053,0,0,0,0,26054,26059,0,
				0,0,0,0,0,26060,0,26066,0,0,0,0,0,0,0,0,0,0,0,0,26067,0,26069,0,0,26071,0,0,0,
				26073,0,26074,26077,0,0,0,0,26078,0,0,0,26079,0,26090,0,0,26094,0,0,0,0,0,0,0,0,
				26095,0,0,0,0,0,0,0,0,0,0,0,26096,26101,0,26107,26122,0,26124,0,0,26125,0,0,0,0,
				0,0,26136,26141,26155,0,0,0,0,0,0,0,0,0,26164,26166,0,0,0,26167,0,26170,26171,0,
				0,26172,0,0,26174,0,0,0,0,0,0,0,0,0,0,0,0,0,26175,0,0,0,26176,26177,0,26321,
				26322,0,26323,0,0,26324,0,0,0,0,0,0,0,26325,0,26331,0,0,0,0,0,0,26335,0,0,0,
				26350,0,0,0,26379,0,0,26382,26383,26385,0,0,26392,26406,0,0,0,0,26411,0,0,0,0,0,
				26412,0,0,26420,0,0,26423,0,26424,26426,26432,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				26435,0,26436,0,0,0,0,0,26441,0,26444,0,0,0,26446,0,0,0,0,26447,0,0,0,0,26449,0,
				26450,26452,0,26453,26454,0,0,0,26455,0,0,0,26456,0,0,26458,0,0,26460,0,26463,0,
				0,0,0,0,0,0,0,26464,26470,0,0,0,0,0,0,0,0,0,26473,0,0,26474,0,0,0,0,0,0,0,26475,
				0,0,0,0,0,0,0,26477,0,26485,0,0,26486,0,26487,0,0,26488,26493,26494,0,0,26495,0,
				26497,26504,26506,0,0,0,0,0,26507,0,0,0,0,0,26509,0,0,26510,0,0,0,0,0,0,0,0,0,0,
				0,0,0,26512,0,26513,26515,0,0,0,26518,0,0,0,26519,0,26524,26526,0,0,0,26527,0,
				26532,0,26533,26537,26558,0,0,0,26559,0,0,0,26571,0,0,26573,0,26588,0,26593,0,0,
				0,0,0,0,26603,0,26604,0,0,0,0,0,0,0,0,0,0,26606,0,0,0,0,0,0,0,26607,26609,26611,
				26614,0,0,0,26616,26620,0,26621,0,0,0,0,0,26627,0,26629,0,0,26630,0,0,26632,
				26643,0,0,0,26644,0,0,0,0,0,0,0,0,0,26646,26647,0,0,0,26650,0,0,26656,0,0,0,0,
				26663,26670,26671,0,0,0,26685,26686,26687,0,26689,0,0,0,0,26744,0,26745,0,26747,
				26748,0,26749,26750,26751,0,0,0,0,26752,26755,0,0,0,26756,26769,0,0,0,26774,0,0,
				0,0,0,26775,0,26777,26778,0,26786,0,0,0,26787,0,0,0,0,0,0,0,0,0,0,0,0,0,26788,0,
				0,26789,0,0,0,0,0,26791,0,26792,26793,0,0,0,26794,0,26797,26798,0,0,0,26800,0,0,
				26803,0,26804,0,0,0,0,0,0,0,0,0,26805,0,0,26808,0,0,26809,0,0,0,0,0,0,0,26812,0,
				26825,0,0,0,0,0,0,0,26826,0,0,26827,26829,26834,0,0,0,0,26835,0,0,26849,0,26851,
				0,0,0,0,0,0,0,0,0,26852,0,26853,26857,0,26858,0,26859,0,0,0,0,0,0,0,26876,0,
				26878,26882,26883,0,0,0,0,26890,26894,0,0,0,0,26895,26896,0,0,0,0,0,26900,0,0,0,
				0,0,0,0,26911,26913,26914,26915,26916,26919,0,0,0,26921,26922,0,0,26925,0,0,0,
				26928,0,0,26929,26930,0,0,0,26931,0,26932,0,0,0,0,0,26933,0,0,0,0,0,0,26937,0,0,
				26943,0,0,26944,0,0,0,26946,0,0,0,0,0,0,0,26956,0,26958,0,0,26963,0,0,0,0,0,0,0,
				26965,0,26969,26970,26972,0,0,0,0,0,26973,0,26974,0,26978,0,26980,0,0,0,0,0,0,
				26982,0,26986,26987,0,26990,0,0,0,0,27003,27006,0,0,27007,27010,27012,27013,0,0,
				0,0,0,0,0,0,27014,27015,27018,0,27019,0,0,0,0,0,27025,0,0,0,27026,0,0,0,0,27029,
				27030,27031,27034,0,0,27036,27037,0,0,0,27038,27042,0,0,0,27044,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,27045,0,0,0,0,0,0,0,27046,0,0,0,0,0,0,0,27047,27049,0,27050,0,0,0,
				27051,27052,0,27055,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27056,27058,27059,0,
				27061,0,27064,0,0,0,0,0,27069,0,0,27070,0,0,0,0,0,0,0,27072,0,0,0,0,0,0,0,0,
				27076,0,0,0,0,0,27078,0,27079,0,0,0,27081,0,0,0,0,0,0,27082,0,27083,27086,0,0,0,
				0,27087,0,0,0,0,0,27088,27090,0,27094,0,0,27095,0,27099,27102,0,0,0,27103,0,0,0,
				0,27105,0,0,0,27106,0,0,0,0,0,0,27107,0,0,0,0,27108,27117,0,0,0,0,27118,0,0,
				27124,0,27126,0,0,27130,27131,0,0,0,0,0,0,27147,0,0,0,0,27148,27149,0,0,0,0,
				27150,27151,0,27152,0,27159,0,0,0,27164,0,0,0,0,0,0,0,27175,0,27189,0,0,27191,0,
				27193,0,27195,0,27198,0,0,0,0,0,27200,0,0,0,0,27202,0,0,0,0,27203,0,0,27204,0,0,
				27206,0,27207,0,0,0,0,27209,0,0,0,27213,0,0,27216,27219,27220,27222,27223,0,
				27224,0,27225,27226,0,0,27233,0,0,0,0,27235,0,27237,0,27238,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,27239,0,27242,27243,0,27250,0,0,0,27251,0,27253,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,27254,27255,27258,0,0,0,27259,0,0,0,0,0,0,27267,0,27276,27278,
				0,0,0,0,0,0,0,0,0,27296,27297,27301,0,0,0,0,0,0,27302,0,0,0,0,0,0,27312,27313,0,
				0,0,0,0,27318,0,27320,0,27329,0,27330,27331,0,27332,0,0,0,0,27340,0,0,0,27348,0,
				0,0,0,0,0,27350,0,27351,0,0,0,0,27355,0,0,27358,27359,27361,0,0,0,27365,0,27367,
				0,27376,27378,0,0,27379,0,0,0,0,0,0,27396,0,27397,27404,0,0,0,0,0,27408,0,0,0,0,
				27453,0,0,0,27456,0,0,0,27458,0,0,0,0,0,0,0,27459,0,0,0,27460,0,0,27461,0,27465,
				27467,0,0,27469,0,27470,0,27471,0,27477,27482,0,0,0,0,0,0,27484,0,0,0,0,0,0,
				27485,0,0,0,0,0,27493,0,27494,27502,0,0,0,0,0,0,0,0,0,0,0,0,27511,27532,0,0,0,
				27533,27545,0,0,0,27546,0,0,0,0,0,0,0,0,0,0,27547,0,0,27549,27550,0,27551,0,0,0,
				0,0,0,0,27555,0,0,27571,0,27573,27574,27575,27577,0,27578,0,0,27579,27585,0,0,0,
				0,0,27586,0,0,27588,27589,0,0,0,0,27596,0,0,27600,0,0,0,0,0,0,0,0,0,0,0,27608,0,
				0,0,0,0,0,0,0,0,0,0,27610,0,0,0,27618,0,0,27620,0,0,0,27631,0,0,27632,27634,0,
				27636,27638,0,0,0,27643,0,27644,27649,0,0,0,0,0,0,0,0,0,0,0,0,0,27651,27660,0,
				27661,0,0,0,0,0,0,0,27662,0,0,27664,0,27665,0,0,0,27669,0,27671,0,0,0,27673,
				27674,0,0,0,27682,0,0,0,27711,0,27712,27713,27719,27720,0,0,27728,0,27729,0,0,0,
				0,0,0,0,0,0,27731,0,0,27732,0,27733,0,27738,0,0,0,27742,0,0,0,27743,27744,0,0,0,
				0,0,0,27745,27746,0,0,0,27747,27748,27751,27752,0,0,0,27768,27770,0,0,0,27774,
				27775,0,27776,27777,0,0,27781,0,27784,0,27786,0,0,27791,0,27792,27793,27804,0,
				27812,27813,0,0,0,0,0,0,0,0,27814,0,27825,0,27827,0,0,0,0,27828,27861,27862,0,0,
				0,27864,0,0,0,27865,27884,0,27889,0,0,0,0,0,27890,0,27891,0,0,0,27892,0,0,0,0,0,
				27897,27898,0,0,27899,0,0,0,27901,27905,0,0,27920,0,0,27921,0,27922,0,0,0,27931,
				27934,0,0,0,0,0,0,0,0,0,0,27941,0,27942,0,27945,0,27947,27954,0,0,0,0,27960,
				27963,0,0,0,0,0,0,0,0,27964,27965,0,0,0,27967,0,27969,27975,0,27976,27977,0,
				27981,0,27983,28051,28052,0,0,0,0,0,28056,0,0,0,0,0,0,28058,28059,0,0,28061,0,0,
				0,0,0,0,0,28063,0,0,0,0,0,0,28066,0,0,0,0,0,0,28069,28070,28072,0,28073,0,0,
				28074,0,0,0,0,28075,0,0,0,0,0,0,0,28078,0,0,0,0,28085,0,0,0,0,28086,0,0,0,0,0,0,
				28088,0,0,0,0,0,0,0,0,28090,0,28097,28114,28115,0,0,0,0,0,0,0,28116,0,0,0,0,0,
				28118,0,28129,0,28131,0,0,28135,0,0,0,28140,28141,0,0,0,28146,0,0,0,0,28152,0,0,
				0,0,28155,28157,28161,0,0,0,0,28166,0,28167,0,0,0,0,0,0,0,0,0,0,0,28172,0,0,0,0,
				0,0,28173,0,0,28175,0,0,0,0,0,0,0,0,0,28178,28188,0,28190,0,0,0,0,0,28191,0,
				28193,28206,0,0,28207,28209,0,28211,0,28213,0,0,0,28215,28216,28217,0,28222,0,
				28223,28225,0,0,0,28226,0,28227,28229,28232,0,0,0,0,0,0,0,0,0,28235,0,28241,0,0,
				28242,0,0,0,0,28243,0,0,0,28245,0,0,0,28248,28250,0,28251,28252,0,0,0,0,0,0,
				28253,0,0,28254,28255,0,0,28256,0,0,28258,0,0,0,0,0,28259,0,0,28260,0,0,28261,0,
				0,0,0,28262,28263,0,0,28264,0,0,0,28266,0,28268,28269,0,28270,28272,28274,0,
				28277,28278,0,0,0,28279,0,28280,28281,28283,0,28292,0,28294,0,28297,0,0,0,0,
				28299,0,0,0,0,0,28300,0,0,0,0,0,0,0,28301,0,0,0,0,0,0,0,0,0,0,0,0,0,28302,28303,
				0,0,0,0,28304,0,0,28305,0,28312,0,28313,28314,0,0,0,0,0,0,28315,0,0,0,28320,
				28321,0,0,28328,0,0,0,28329,28338,0,28339,0,0,28344,0,0,0,0,0,0,0,0,28347,0,0,0,
				0,0,0,0,0,28348,0,0,0,0,0,28411,0,28412,28413,0,28416,0,0,0,28420,0,0,0,0,0,
				28421,0,0,0,0,28423,0,0,0,28424,0,0,28428,0,0,0,0,0,28429,0,0,0,28431,28434,0,
				28458,0,0,0,0,0,0,0,0,0,0,0,28464,0,0,0,0,28465,0,28467,0,0,0,0,0,0,28471,0,0,0,
				0,28474,0,28480,0,28481,0,0,28485,0,0,0,0,28486,28488,0,0,28489,0,0,0,0,28492,0,
				0,0,28495,0,28497,0,28499,0,0,0,0,28500,0,0,28502,28503,0,0,0,28508,0,0,0,28510,
				0,0,28512,28513,28514,28521,0,28526,0,28527,28528,0,0,0,0,28529,0,0,28532,0,0,
				28537,28538,0,0,0,28539,0,28548,0,28553,28554,0,0,0,0,0,0,0,0,0,0,0,0,28560,
				28563,0,0,28564,0,0,0,0,28565,0,0,0,0,0,0,0,28566,28568,0,0,0,0,0,0,28569,0,0,0,
				28570,0,28572,28573,0,0,0,0,28575,0,0,0,0,28576,28581,28588,0,0,28589,0,0,0,
				28590,28595,0,28598,0,0,28601,0,0,28605,0,0,0,0,28614,28615,28619,0,0,0,0,0,0,
				28620,0,28626,0,0,28628,0,28631,0,28632,0,0,0,0,0,0,28635,0,0,0,28637,28638,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28639,0,28643,0,0,28652,0,0,0,28662,0,
				28670,28671,0,0,0,0,0,0,0,0,0,28672,28673,28675,28676,0,0,0,0,0,0,0,28691,0,0,0,
				28695,0,0,0,28696,0,28697,28698,0,28705,0,28707,28708,28710,0,0,0,0,0,0,0,28711,
				28728,0,0,0,28736,0,0,0,28737,0,0,0,0,0,0,0,0,0,28738,0,28739,0,28741,0,0,28742,
				0,0,0,0,0,0,0,0,0,0,0,28745,0,0,0,0,0,0,28749,28750,28752,28754,28756,0,28757,0,
				0,0,0,28759,28760,0,0,0,0,0,0,28762,0,0,0,28764,0,0,0,0,0,0,28766,0,28767,28768,
				0,0,0,0,28769,28770,0,0,0,0,0,0,0,0,0,0,0,0,0,28771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,28772,0,28773,0,28782,0,0,0,0,0,0,28784,0,28785,0,28786,0,0,0,28787,0,0,0,
				28797,0,0,0,0,0,0,28799,0,0,28801,0,0,0,0,28802,0,28805,0,0,28806,0,0,28807,0,0,
				0,0,0,0,0,28808,0,0,0,0,0,28810,28812,0,0,28816,28819,0,0,28821,0,28826,0,0,0,
				28842,28852,0,0,28853,0,28854,28855,0,0,0,28857,0,0,0,28858,0,28867,28868,28869,
				0,0,0,28874,28880,28882,28890,28892,0,0,0,0,0,0,0,28895,0,0,0,28898,28899,0,0,0,
				28900,0,0,28904,0,28906,0,0,0,0,28907,0,0,0,0,0,0,28908,0,0,0,28910,0,28914,0,0,
				0,0,0,0,0,28915,28916,28919,0,0,28920,0,28921,0,0,0,0,0,0,0,0,28924,0,0,0,0,
				28926,28929,0,0,0,28930,0,28936,0,28939,0,0,0,0,28942,0,0,0,0,0,0,28956,0,0,0,
				28966,0,0,0,0,28967,0,0,0,0,0,0,0,0,0,28968,0,28971,0,28975,28976,0,28982,28983,
				0,0,28984,28989,28996,28997,28998,0,0,0,0,0,0,28999,0,0,0,0,0,29000,0,29001,0,0,
				0,29009,0,0,29011,0,0,29021,0,0,0,0,29024,0,29025,0,0,0,0,0,29026,0,0,0,29036,0,
				0,0,29037,0,0,0,0,29038,0,29045,0,29047,0,0,0,0,0,0,0,0,0,29051,0,0,0,29054,
				29056,29062,0,29070,29082,0,0,0,29083,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29084,0,0,
				0,0,29085,29088,0,0,0,0,0,0,0,29090,29097,0,0,0,29103,0,0,0,0,0,0,0,0,29105,0,0,
				0,0,0,29107,0,29109,0,0,0,29115,0,0,29120,0,0,29138,29140,0,0,0,0,0,0,0,0,0,
				29152,0,29160,29174,0,29176,0,0,29180,0,29181,0,0,0,0,0,0,0,0,29228,0,0,29229,0,
				0,29230,0,0,0,0,0,0,0,0,0,0,29234,0,0,0,29241,0,29245,0,29248,0,29250,29256,
				29280,0,29282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29285,0,0,29286,29291,29292,0,0,0,0,
				29294,0,29295,0,0,0,0,0,29296,29297,29298,29300,0,29302,0,0,29304,29307,0,29312,
				0,0,0,29322,0,0,29323,0,0,29324,29326,29328,0,29335,0,0,0,0,0,0,0,29338,29339,0,
				0,0,0,0,29341,29343,0,0,0,0,29344,0,0,0,0,0,29345,0,0,0,0,29346,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,29347,29348,29349,0,0,29354,0,0,29355,0,0,0,0,0,0,0,0,29357,0,0,
				0,0,29364,0,29365,0,0,0,0,0,0,0,29366,0,0,29368,0,0,0,0,0,0,0,0,29378,0,29381,0,
				0,0,0,0,0,0,0,29386,0,0,0,0,0,0,29389,0,0,0,29390,0,0,29391,29397,0,29398,29412,
				29414,29418,29419,0,0,0,0,0,0,0,29420,0,0,0,0,0,0,0,29423,0,0,0,29435,0,0,0,
				29437,0,0,29439,0,29441,0,0,0,0,29443,0,29446,29450,29452,0,0,0,0,0,29456,0,0,0,
				0,0,29461,0,0,0,29464,0,0,0,0,0,0,0,0,29468,0,29473,0,0,0,29486,0,0,0,29490,0,0,
				0,29491,29492,0,0,29497,0,0,0,29498,0,29499,0,29502,29505,0,29509,0,0,0,29510,0,
				0,0,29512,0,0,0,29516,0,0,0,0,0,0,0,0,29518,0,29519,0,0,0,0,0,29520,29521,29529,
				0,0,0,0,0,0,0,0,29530,0,0,29531,29538,0,29540,0,0,0,29542,0,29543,29544,29547,0,
				0,29548,0,0,0,29549,0,0,0,29550,0,0,29552,0,0,0,0,29558,29561,0,29562,29564,0,0,
				29565,0,0,29566,0,0,0,0,0,0,0,0,0,0,29578,29584,29586,29591,0,0,0,0,29593,29594,
				0,0,29597,0,0,29613,0,29614,0,29615,0,0,0,0,29616,29617,0,0,29625,0,0,0,29632,0,
				0,0,0,0,0,0,29633,0,0,0,0,0,29634,29635,29637,0,29638,0,29641,29643,0,0,0,0,0,0,
				29644,0,29645,0,29649,0,0,0,29650,0,29653,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29656,
				29659,0,0,29660,0,0,0,29661,0,0,0,0,0,29664,0,0,0,29671,29673,0,0,0,0,0,0,0,
				29675,0,29677,29679,0,0,29684,0,0,0,0,0,29685,0,0,0,29687,0,0,0,29688,0,29689,
				29690,29700,0,29701,0,0,0,29702,0,29706,0,0,0,0,0,0,0,29720,0,29721,0,29727,0,
				29733,29734,0,29750,29761,0,29763,0,0,0,0,0,29764,0,0,29765,0,0,0,29771,0,0,0,0,
				0,0,0,0,0,0,0,0,29772,0,0,0,29773,29774,29775,0,0,0,0,0,0,0,0,0,0,0,29822,0,0,0,
				29824,0,29825,0,0,0,0,0,29827,0,0,0,0,0,0,0,0,29829,0,29832,29834,0,0,29835,0,0,
				29837,29838,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29843,0,0,0,0,29844,29845,0,0,0,
				0,0,0,0,0,0,29849,0,0,29869,29872,29890,29905,0,0,0,0,0,29907,29921,0,29922,0,0,
				29923,29926,29944,29946,0,0,0,0,0,0,0,29947,29948,0,0,0,29951,0,0,0,0,0,29953,0,
				0,29956,0,29957,0,0,29962,0,0,0,0,29971,0,0,0,29972,0,0,0,0,0,29978,0,29979,
				29992,30007,30008,30010,0,0,0,30013,0,0,0,0,30014,30016,0,0,0,0,0,0,0,0,0,0,0,
				30017,0,0,0,0,0,30023,30031,0,0,30033,0,0,0,0,0,0,0,0,0,0,30034,0,30038,0,30039,
				0,30040,0,0,0,0,0,0,30067,30068,0,0,0,30069,0,30072,0,0,0,30073,0,0,0,0,30075,0,
				0,0,0,0,0,30079,0,0,30080,0,0,0,0,0,30082,0,0,0,0,0,0,0,0,0,0,0,30084,30090,0,0,
				30091,0,0,0,0,30098,30118,0,30119,0,30121,30130,0,0,0,0,0,0,0,0,0,0,0,0,0,30131,
				30132,30133,0,0,0,0,0,0,30135,0,0,0,0,0,0,0,0,0,0,0,30136,0,0,30137,30138,0,0,0,
				30139,30146,0,0,0,0,0,30147,0,0,30148,30151,0,0,0,30168,0,30172,30173,0,0,0,0,0,
				0,0,0,30180,30181,0,30192,0,0,0,0,0,0,0,30194,30196,0,0,30199,0,0,30202,0,0,0,0,
				30203,0,0,0,0,0,0,0,0,0,0,30213,0,0,0,30216,0,0,30217,0,0,0,30218,0,0,0,0,30219,
				0,30220,0,30222,30227,0,0,0,0,0,30231,0,0,30233,30235,0,0,0,0,30238,0,30240,
				30243,30245,0,30250,30252,0,0,0,30269,0,0,30271,30272,0,0,0,30278,30280,0,0,
				30282,0,30284,0,30294,0,0,0,0,30295,30296,0,0,0,0,0,30298,30299,30302,30304,
				30306,0,0,0,0,0,0,30316,30317,0,0,0,30318,0,0,0,30319,0,30320,30322,30326,0,0,0,
				0,0,30327,0,30332,30348,30349,0,0,30356,0,0,0,0,0,0,0,0,30357,0,30358,0,30359,
				30360,0,0,30365,30366,30378,0,0,0,0,30379,0,0,30381,0,30385,0,30388,30397,0,0,0,
				30401,0,0,0,0,30403,0,0,0,0,0,30404,0,0,30405,0,30406,30408,0,30409,0,30410,0,0,
				0,30417,0,0,30418,30419,0,30420,0,30424,0,0,0,30427,30430,30432,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,30433,0,0,0,0,0,0,0,30436,0,30437,30438,0,30441,30442,0,0,
				0,30445,0,0,0,0,30452,30456,30457,0,0,0,30458,0,30464,0,0,0,0,0,0,30467,0,30469,
				0,0,0,0,0,30477,0,0,30484,0,0,0,0,0,30485,0,0,0,0,0,30486,30487,30497,30498,0,0,
				0,0,0,0,0,0,0,0,30505,0,30508,0,0,0,30509,30510,0,30514,30516,0,0,0,0,0,0,0,0,0,
				0,0,30523,0,30524,0,30525,0,0,0,0,30537,0,0,30538,0,0,0,0,0,30553,0,0,30555,
				30556,30558,30559,30560,0,0,30561,0,30562,0,0,0,0,0,0,0,0,30563,30570,30571,0,
				30586,30587,0,0,30590,0,0,30594,0,0,0,0,30611,30612,30623,30634,0,0,30636,30640,
				30655,30656,0,30657,0,0,30658,30669,0,30670,0,30676,30678,0,0,0,0,0,0,0,30679,0,
				0,0,0,0,0,0,0,0,0,0,30695,0,0,30698,0,0,0,0,30700,0,0,0,0,30701,0,30702,30703,0,
				0,0,0,30707,0,0,0,30709,0,0,30710,30719,30729,0,0,0,0,0,0,0,0,0,30731,0,0,30733,
				0,0,0,30734,0,0,0,0,0,30736,30737,0,0,0,30740,0,0,0,30743,0,30746,0,30747,30748,
				0,0,30751,30752,30753,0,0,0,30754,0,0,30760,0,0,0,0,0,0,0,30763,0,30764,0,0,
				30766,0,30769,30770,30771,30774,30777,0,0,30779,30780,30781,0,0,0,0,30790,0,0,0,
				30792,0,0,0,0,30810,0,0,0,0,0,0,0,30812,30819,0,0,30823,30824,0,30825,0,30827,0,
				0,0,0,0,0,30828,0,0,30830,0,0,0,30834,0,30835,0,30837,30838,0,30845,0,0,0,0,0,
				30846,30847,0,0,30849,0,30851,0,0,0,0,0,30852,30858,0,0,30859,0,30865,0,0,30866,
				0,0,30868,0,0,30869,0,0,0,30881,30883,0,0,0,0,0,30889,0,30891,0,0,0,0,30894,0,
				30895,0,30897,0,30898,0,0,0,30904,30906,0,30909,0,0,0,0,0,0,30910,0,0,0,30915,
				30933,30942,0,0,0,0,30943,0,0,30945,0,0,0,0,0,0,30946,0,0,30947,0,0,30955,30956,
				0,0,30960,0,0,30961,30962,30966,0,0,30969,30974,0,0,0,30976,0,0,30977,0,30978,
				30982,0,0,0,0,0,0,0,30994,30995,30998,0,31000,0,0,31001,0,0,31003,31005,0,0,
				31006,31011,0,0,31014,0,31016,0,0,0,0,31018,0,0,31020,31023,31024,31025,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,31027,31028,31029,0,0,0,0,0,0,31032,0,0,0,0,0,0,0,0,0,0,0,
				31036,31037,31038,0,0,0,31041,31043,31045,0,31047,0,0,0,31048,0,31049,0,0,0,
				31053,31054,31055,0,0,31063,0,0,0,0,0,31066,0,31068,31071,0,0,0,31072,31073,0,0,
				0,0,31075,0,0,31076,0,0,0,31077,31079,0,31080,0,0,0,0,0,0,0,0,0,0,31087,0,31142,
				0,31144,0,0,31145,31146,31147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31149,0,31151,31152,0,
				0,0,0,0,0,0,31162,31171,31174,31175,0,0,0,31176,0,0,0,0,0,0,0,31179,0,0,0,31186,
				0,0,0,31192,31195,0,0,31196,0,0,0,0,0,0,0,0,31198,0,0,0,0,0,31199,0,0,0,31205,0,
				0,0,0,31211,31215,0,0,0,0,31231,0,31232,0,0,0,0,0,0,0,0,0,0,31233,31236,31253,0,
				31254,0,0,0,0,0,0,31255,0,0,31257,0,0,0,0,0,0,0,0,0,31258,31259,0,0,31260,0,
				31261,0,0,0,0,0,31262,31263,0,0,31264,0,31266,0,31267,0,0,0,0,0,31281,0,31282,0,
				31284,0,0,31285,31287,31288,0,0,31290,0,0,0,31292,31295,0,31299,0,31300,0,0,0,0,
				0,31302,0,0,0,0,31303,0,0,0,0,0,0,31304,0,0,0,0,0,31305,31308,31309,31315,0,
				31317,0,0,0,0,0,31323,0,31324,0,0,0,0,0,31325,31327,0,0,31331,0,0,0,0,0,31333,0,
				0,0,0,0,31336,0,0,31337,0,0,0,0,0,0,31338,0,0,0,0,0,0,0,0,0,0,0,0,31339,0,0,0,0,
				0,0,0,31342,0,0,0,0,31345,0,0,0,0,0,0,0,0,31347,0,0,0,0,0,0,31348,0,0,31350,
				31351,0,31352,0,0,31354,0,0,0,0,31355,0,0,31356,0,0,0,0,0,0,0,0,0,0,31363,0,
				31372,0,0,31373,0,0,0,0,0,0,0,0,0,31376,0,31388,0,31389,0,31392,0,31401,0,31405,
				31407,31408,0,31409,0,0,0,0,0,0,31413,31415,0,0,0,31416,31418,0,0,0,0,0,0,31422,
				31423,0,0,31424,0,31425,31432,0,0,0,0,0,0,0,0,0,31433,0,0,0,0,0,0,0,0,31434,0,0,
				0,0,0,0,31435,0,0,0,0,31438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31442,0,31444,0,
				31448,0,0,31451,0,0,0,0,31452,0,31461,31465,0,0,31466,0,0,31467,0,0,31468,0,0,0,
				31469,31473,0,31476,0,0,0,0,31489,31490,0,0,0,0,0,0,0,31492,31493,31494,0,0,0,0,
				31501,31504,31505,0,0,0,0,0,0,0,0,0,31509,0,0,0,0,31510,0,0,31511,0,0,31513,0,0,
				0,0,0,0,0,0,0,31514,0,31522,31536,31539,31540,0,31541,0,0,0,0,0,0,31546,31553,
				31559,0,0,0,31560,31561,31562,0,0,31564,31567,0,31569,0,0,0,31570,0,0,0,0,31571,
				0,0,0,0,0,0,31572,31574,31580,31581,0,0,31582,31584,31585,31586,31595,0,31596,0,
				0,0,0,31597,0,31599,0,31600,31601,0,0,31603,31604,0,0,31608,31610,0,0,0,31611,0,
				31615,0,0,0,0,31616,0,0,0,0,0,0,31617,0,0,0,0,0,31618,0,0,0,0,0,0,31621,0,0,0,0,
				0,0,0,0,0,31622,31625,0,0,0,0,31627,0,31641,0,0,31642,0,0,31643,0,0,0,0,0,0,0,0,
				0,31644,0,31646,0,0,0,0,31648,0,0,0,31652,0,0,0,31657,0,0,31676,0,0,0,0,0,0,0,
				31689,31691,31692,0,31694,0,0,0,31696,0,31702,0,31703,0
			};

			private static readonly DictWord[] kStaticDictionaryWords = {
				new DictWord(0,0,0),new DictWord(8,0,1002),new DictWord(136,0,1015),new DictWord(4,0,683),new DictWord(4,10,325),new DictWord(138,10,125),new DictWord(7,11,572),new DictWord(9,
					11,592),new DictWord(11,11,680),new DictWord(11,11,842),new DictWord(11,11,924),new DictWord(12,11,356),new DictWord(12,11,550),new DictWord(13,11,317),
				new DictWord(13,11,370),new DictWord(13,11,469),new DictWord(13,11,471),new DictWord(14,11,397),new DictWord(18,11,69),new DictWord(146,11,145),new DictWord(134,0,
					1265),new DictWord(136,11,534),new DictWord(134,0,1431),new DictWord(11,0,138),new DictWord(140,0,40),new DictWord(4,0,155),new DictWord(7,0,1689),new DictWord(4,10
					,718),new DictWord(135,10,1216),new DictWord(4,0,245),new DictWord(5,0,151),new DictWord(5,0,741),new DictWord(6,0,1147),new DictWord(7,0,498),new DictWord(7,0,870)
				,new DictWord(7,0,1542),new DictWord(12,0,213),new DictWord(14,0,36),new DictWord(14,0,391),new DictWord(17,0,111),new DictWord(18,0,6),new DictWord(18,0,46),new DictWord(18,0,
					151),new DictWord(19,0,36),new DictWord(20,0,32),new DictWord(20,0,56),new DictWord(20,0,69),new DictWord(20,0,102),new DictWord(21,0,4),new DictWord(22,0,8),new DictWord(22,0,
					10),new DictWord(22,0,14),new DictWord(150,0,31),new DictWord(4,0,624),new DictWord(135,0,1752),new DictWord(5,10,124),new DictWord(5,10,144),new DictWord(6,10,548)
				,new DictWord(7,10,15),new DictWord(7,10,153),new DictWord(137,10,629),new DictWord(6,0,503),new DictWord(9,0,586),new DictWord(13,0,468),new DictWord(14,0,66),new DictWord(16,
					0,58),new DictWord(7,10,1531),new DictWord(8,10,416),new DictWord(9,10,275),new DictWord(10,10,100),new DictWord(11,10,658),new DictWord(11,10,979),new DictWord(12,
					10,86),new DictWord(14,10,207),new DictWord(15,10,20),new DictWord(143,10,25),new DictWord(5,0,603),new DictWord(7,0,1212),new DictWord(9,0,565),new DictWord(14,0,
					301),new DictWord(5,10,915),new DictWord(6,10,1783),new DictWord(7,10,211),new DictWord(7,10,1353),new DictWord(9,10,83),new DictWord(10,10,376),new DictWord(10,10,
					431),new DictWord(11,10,543),new DictWord(12,10,664),new DictWord(13,10,280),new DictWord(13,10,428),new DictWord(14,10,128),new DictWord(17,10,52),new DictWord(145
					,10,81),new DictWord(4,0,492),new DictWord(133,0,451),new DictWord(135,0,835),new DictWord(141,0,70),new DictWord(132,0,539),new DictWord(7,11,748),new DictWord(139
					,11,700),new DictWord(7,11,1517),new DictWord(11,11,597),new DictWord(14,11,76),new DictWord(14,11,335),new DictWord(148,11,33),new DictWord(6,0,113),new DictWord(
					135,0,436),new DictWord(4,10,338),new DictWord(133,10,400),new DictWord(136,0,718),new DictWord(133,11,127),new DictWord(133,11,418),new DictWord(6,0,
					1505),new DictWord(7,0,520),new DictWord(6,11,198),new DictWord(11,10,892),new DictWord(140,11,83),new DictWord(4,10,221),new DictWord(5,10,659),new DictWord(5,10,
					989),new DictWord(7,10,697),new DictWord(7,10,1211),new DictWord(138,10,284),new DictWord(135,0,1070),new DictWord(5,11,276),new DictWord(6,11,55),new DictWord(135,
					11,1369),new DictWord(134,0,1515),new DictWord(6,11,1752),new DictWord(136,11,726),new DictWord(138,10,507),new DictWord(15,0,78),new DictWord(4,10,188)
				,new DictWord(135,10,805),new DictWord(5,10,884),new DictWord(139,10,991),new DictWord(133,11,764),new DictWord(134,10,1653),new DictWord(6,11,309),new DictWord(7,
					11,331),new DictWord(138,11,550),new DictWord(135,11,1861),new DictWord(132,11,348),new DictWord(135,11,986),new DictWord(135,11,1573),new DictWord(12,0
					,610),new DictWord(13,0,431),new DictWord(144,0,59),new DictWord(9,11,799),new DictWord(140,10,166),new DictWord(134,0,1530),new DictWord(132,0,750),new DictWord(
					132,0,307),new DictWord(133,0,964),new DictWord(6,11,194),new DictWord(7,11,133),new DictWord(10,11,493),new DictWord(10,11,570),new DictWord(139,11,664
				),new DictWord(5,11,24),new DictWord(5,11,569),new DictWord(6,11,3),new DictWord(6,11,119),new DictWord(6,11,143),new DictWord(6,11,440),new DictWord(7,11,295),new DictWord(7,
					11,599),new DictWord(7,11,1686),new DictWord(7,11,1854),new DictWord(8,11,424),new DictWord(9,11,43),new DictWord(9,11,584),new DictWord(9,11,760),new DictWord(10,
					11,148),new DictWord(10,11,328),new DictWord(11,11,159),new DictWord(11,11,253),new DictWord(11,11,506),new DictWord(12,11,487),new DictWord(12,11,531),
				new DictWord(144,11,33),new DictWord(136,10,760),new DictWord(5,11,14),new DictWord(5,11,892),new DictWord(6,11,283),new DictWord(7,11,234),new DictWord(136,11,537)
				,new DictWord(135,11,1251),new DictWord(4,11,126),new DictWord(8,11,635),new DictWord(147,11,34),new DictWord(4,11,316),new DictWord(135,11,1561),new DictWord(6,0,
					999),new DictWord(6,0,1310),new DictWord(137,11,861),new DictWord(4,11,64),new DictWord(5,11,352),new DictWord(5,11,720),new DictWord(6,11,368),new DictWord(139,11,
					359),new DictWord(4,0,75),new DictWord(5,0,180),new DictWord(6,0,500),new DictWord(7,0,58),new DictWord(7,0,710),new DictWord(10,0,645),new DictWord(136,10,770),new DictWord(
					133,0,649),new DictWord(6,0,276),new DictWord(7,0,282),new DictWord(7,0,879),new DictWord(7,0,924),new DictWord(8,0,459),new DictWord(9,0,599),new DictWord(9,0,754)
				,new DictWord(11,0,574),new DictWord(12,0,128),new DictWord(12,0,494),new DictWord(13,0,52),new DictWord(13,0,301),new DictWord(15,0,30),new DictWord(143,0,132),new DictWord(
					132,0,200),new DictWord(4,10,89),new DictWord(5,10,489),new DictWord(6,10,315),new DictWord(7,10,553),new DictWord(7,10,1745),new DictWord(138,10,243),new DictWord(
					135,11,1050),new DictWord(7,0,1621),new DictWord(6,10,1658),new DictWord(9,10,3),new DictWord(10,10,154),new DictWord(11,10,641),new DictWord(13,10,85),
				new DictWord(13,10,201),new DictWord(141,10,346),new DictWord(6,11,175),new DictWord(137,11,289),new DictWord(5,11,432),new DictWord(133,11,913),new DictWord(6,0,
					225),new DictWord(137,0,211),new DictWord(7,0,718),new DictWord(8,0,687),new DictWord(139,0,374),new DictWord(4,10,166),new DictWord(133,10,505),new DictWord(9,0,
					110),new DictWord(134,10,1670),new DictWord(8,0,58),new DictWord(9,0,724),new DictWord(11,0,809),new DictWord(13,0,113),new DictWord(145,0,72),new DictWord(6,0,345)
				,new DictWord(7,0,1247),new DictWord(144,11,82),new DictWord(5,11,931),new DictWord(134,11,1698),new DictWord(8,0,767),new DictWord(8,0,803),new DictWord(9,0,301),new DictWord(
					137,0,903),new DictWord(139,0,203),new DictWord(134,0,1154),new DictWord(7,0,1949),new DictWord(136,0,674),new DictWord(134,0,259),new DictWord(135,0,
					1275),new DictWord(5,11,774),new DictWord(6,11,1637),new DictWord(6,11,1686),new DictWord(134,11,1751),new DictWord(134,0,1231),new DictWord(7,10,445),new DictWord(
					8,10,307),new DictWord(8,10,704),new DictWord(10,10,41),new DictWord(10,10,439),new DictWord(11,10,237),new DictWord(11,10,622),new DictWord(140,10,201)
				,new DictWord(136,0,254),new DictWord(6,11,260),new DictWord(135,11,1484),new DictWord(139,0,277),new DictWord(135,10,1977),new DictWord(4,10,189),new DictWord(5,10
					,713),new DictWord(6,11,573),new DictWord(136,10,57),new DictWord(138,10,371),new DictWord(132,10,552),new DictWord(134,11,344),new DictWord(133,0,248),
				new DictWord(9,0,800),new DictWord(10,0,693),new DictWord(11,0,482),new DictWord(11,0,734),new DictWord(11,0,789),new DictWord(134,11,240),new DictWord(4,0,116),new DictWord(5,
					0,95),new DictWord(5,0,445),new DictWord(7,0,1688),new DictWord(8,0,29),new DictWord(9,0,272),new DictWord(11,0,509),new DictWord(11,0,915),new DictWord(4,11,292),new DictWord(
					4,11,736),new DictWord(5,11,871),new DictWord(6,11,171),new DictWord(6,11,1689),new DictWord(7,11,1324),new DictWord(7,11,1944),new DictWord(9,11,415),new DictWord(
					9,11,580),new DictWord(14,11,230),new DictWord(146,11,68),new DictWord(7,0,490),new DictWord(13,0,100),new DictWord(143,0,75),new DictWord(135,0,1641),new DictWord(
					133,0,543),new DictWord(7,11,209),new DictWord(8,11,661),new DictWord(10,11,42),new DictWord(11,11,58),new DictWord(12,11,58),new DictWord(12,11,118),new DictWord(
					141,11,32),new DictWord(5,0,181),new DictWord(8,0,41),new DictWord(6,11,63),new DictWord(135,11,920),new DictWord(133,0,657),new DictWord(133,11,793),new DictWord(
					138,0,709),new DictWord(7,0,25),new DictWord(8,0,202),new DictWord(138,0,536),new DictWord(5,11,665),new DictWord(135,10,1788),new DictWord(145,10,49),new DictWord(
					9,0,423),new DictWord(140,0,89),new DictWord(5,11,67),new DictWord(6,11,62),new DictWord(6,11,374),new DictWord(135,11,1391),new DictWord(8,0,113),new DictWord(9,0,
					877),new DictWord(10,0,554),new DictWord(11,0,83),new DictWord(12,0,136),new DictWord(19,0,109),new DictWord(9,11,790),new DictWord(140,11,47),new DictWord(138,10,
					661),new DictWord(4,0,963),new DictWord(10,0,927),new DictWord(14,0,442),new DictWord(135,10,1945),new DictWord(133,0,976),new DictWord(132,0,206),new DictWord(4,11
					,391),new DictWord(135,11,1169),new DictWord(134,0,2002),new DictWord(6,0,696),new DictWord(134,0,1008),new DictWord(134,0,1170),new DictWord(132,11,271
				),new DictWord(7,0,13),new DictWord(8,0,226),new DictWord(10,0,537),new DictWord(11,0,570),new DictWord(11,0,605),new DictWord(11,0,799),new DictWord(11,0,804),new DictWord(12,
					0,85),new DictWord(12,0,516),new DictWord(12,0,623),new DictWord(13,0,112),new DictWord(13,0,361),new DictWord(14,0,77),new DictWord(14,0,78),new DictWord(17,0,28),
				new DictWord(19,0,110),new DictWord(140,11,314),new DictWord(132,0,769),new DictWord(134,0,1544),new DictWord(4,0,551),new DictWord(137,0,678),new DictWord(5,10,84)
				,new DictWord(134,10,163),new DictWord(9,0,57),new DictWord(9,0,459),new DictWord(10,0,425),new DictWord(11,0,119),new DictWord(12,0,184),new DictWord(12,0,371),new DictWord(13
					,0,358),new DictWord(145,0,51),new DictWord(5,0,188),new DictWord(5,0,814),new DictWord(8,0,10),new DictWord(9,0,421),new DictWord(9,0,729),new DictWord(10,0,609),new DictWord(
					11,0,689),new DictWord(4,11,253),new DictWord(5,10,410),new DictWord(5,11,544),new DictWord(7,11,300),new DictWord(137,11,340),new DictWord(134,0,624),new DictWord(
					138,11,321),new DictWord(135,0,1941),new DictWord(18,0,130),new DictWord(5,10,322),new DictWord(8,10,186),new DictWord(9,10,262),new DictWord(10,10,187)
				,new DictWord(142,10,208),new DictWord(5,11,53),new DictWord(5,11,541),new DictWord(6,11,94),new DictWord(6,11,499),new DictWord(7,11,230),new DictWord(139,11,321),
				new DictWord(133,10,227),new DictWord(4,0,378),new DictWord(4,11,920),new DictWord(5,11,25),new DictWord(5,11,790),new DictWord(6,11,457),new DictWord(135,11,853),new DictWord(
					137,0,269),new DictWord(132,0,528),new DictWord(134,0,1146),new DictWord(7,10,1395),new DictWord(8,10,486),new DictWord(9,10,236),new DictWord(9,10,878)
				,new DictWord(10,10,218),new DictWord(11,10,95),new DictWord(19,10,17),new DictWord(147,10,31),new DictWord(7,10,2043),new DictWord(8,10,672),new DictWord(141,10,
					448),new DictWord(134,0,1105),new DictWord(134,0,1616),new DictWord(134,11,1765),new DictWord(140,11,163),new DictWord(5,10,412),new DictWord(133,11,822
				),new DictWord(132,11,634),new DictWord(6,0,656),new DictWord(134,11,1730),new DictWord(134,0,1940),new DictWord(5,0,104),new DictWord(6,0,173),new DictWord(135,0,
					1631),new DictWord(136,10,562),new DictWord(6,11,36),new DictWord(7,11,658),new DictWord(8,11,454),new DictWord(147,11,86),new DictWord(5,0,457),new DictWord(134,10
					,1771),new DictWord(7,0,810),new DictWord(8,0,138),new DictWord(8,0,342),new DictWord(9,0,84),new DictWord(10,0,193),new DictWord(11,0,883),new DictWord(140,0,359),
				new DictWord(9,0,620),new DictWord(135,10,1190),new DictWord(137,10,132),new DictWord(7,11,975),new DictWord(137,11,789),new DictWord(6,0,95),new DictWord(6,0,1934)
				,new DictWord(136,0,967),new DictWord(141,11,335),new DictWord(6,0,406),new DictWord(10,0,409),new DictWord(10,0,447),new DictWord(11,0,44),new DictWord(140,0,100),
				new DictWord(4,10,317),new DictWord(135,10,1279),new DictWord(132,0,477),new DictWord(134,0,1268),new DictWord(6,0,1941),new DictWord(8,0,944),new DictWord(5,10,63)
				,new DictWord(133,10,509),new DictWord(132,0,629),new DictWord(132,11,104),new DictWord(4,0,246),new DictWord(133,0,375),new DictWord(6,0,1636),new DictWord(132,10,
					288),new DictWord(135,11,1614),new DictWord(9,0,49),new DictWord(10,0,774),new DictWord(8,10,89),new DictWord(8,10,620),new DictWord(11,10,628),new DictWord(12,10,
					322),new DictWord(143,10,124),new DictWord(4,0,282),new DictWord(7,0,1034),new DictWord(11,0,398),new DictWord(11,0,634),new DictWord(12,0,1),new DictWord(12,0,79),
				new DictWord(12,0,544),new DictWord(14,0,237),new DictWord(17,0,10),new DictWord(146,0,20),new DictWord(132,0,824),new DictWord(7,11,45),new DictWord(9,11,542),new DictWord(9,
					11,566),new DictWord(138,11,728),new DictWord(5,0,118),new DictWord(5,0,499),new DictWord(6,0,476),new DictWord(6,0,665),new DictWord(6,0,1176),new DictWord(6,0,
					1196),new DictWord(7,0,600),new DictWord(7,0,888),new DictWord(135,0,1096),new DictWord(7,0,296),new DictWord(7,0,596),new DictWord(8,0,560),new DictWord(8,0,586),new DictWord(
					9,0,612),new DictWord(11,0,304),new DictWord(12,0,46),new DictWord(13,0,89),new DictWord(14,0,112),new DictWord(145,0,122),new DictWord(5,0,894),new DictWord(6,0,
					1772),new DictWord(9,0,1009),new DictWord(138,10,120),new DictWord(5,11,533),new DictWord(7,11,755),new DictWord(138,11,780),new DictWord(151,10,1),new DictWord(6,0
					,1474),new DictWord(7,11,87),new DictWord(142,11,288),new DictWord(139,0,366),new DictWord(137,10,461),new DictWord(7,11,988),new DictWord(7,11,1939),new DictWord(9
					,11,64),new DictWord(9,11,502),new DictWord(12,11,7),new DictWord(12,11,34),new DictWord(13,11,12),new DictWord(13,11,234),new DictWord(147,11,77),new DictWord(7,0,
					1599),new DictWord(7,0,1723),new DictWord(8,0,79),new DictWord(8,0,106),new DictWord(8,0,190),new DictWord(8,0,302),new DictWord(8,0,383),new DictWord(8,0,713),new DictWord(9,0
					,119),new DictWord(9,0,233),new DictWord(9,0,419),new DictWord(9,0,471),new DictWord(10,0,181),new DictWord(10,0,406),new DictWord(11,0,57),new DictWord(11,0,85),new DictWord(
					11,0,120),new DictWord(11,0,177),new DictWord(11,0,296),new DictWord(11,0,382),new DictWord(11,0,454),new DictWord(11,0,758),new DictWord(11,0,999),new DictWord(12,
					0,27),new DictWord(12,0,98),new DictWord(12,0,131),new DictWord(12,0,245),new DictWord(12,0,312),new DictWord(12,0,446),new DictWord(12,0,454),new DictWord(13,0,25)
				,new DictWord(13,0,98),new DictWord(13,0,426),new DictWord(13,0,508),new DictWord(14,0,70),new DictWord(14,0,163),new DictWord(14,0,272),new DictWord(14,0,277),new DictWord(14,
					0,370),new DictWord(15,0,95),new DictWord(15,0,138),new DictWord(15,0,167),new DictWord(17,0,38),new DictWord(148,0,96),new DictWord(135,10,1346),new DictWord(10,0,
					200),new DictWord(19,0,2),new DictWord(151,0,22),new DictWord(135,11,141),new DictWord(134,10,85),new DictWord(134,0,1759),new DictWord(138,0,372),new DictWord(145,
					0,16),new DictWord(8,0,943),new DictWord(132,11,619),new DictWord(139,11,88),new DictWord(5,11,246),new DictWord(8,11,189),new DictWord(9,11,355),new DictWord(9,11,
					512),new DictWord(10,11,124),new DictWord(10,11,453),new DictWord(11,11,143),new DictWord(11,11,416),new DictWord(11,11,859),new DictWord(141,11,341),new DictWord(5
					,0,258),new DictWord(134,0,719),new DictWord(6,0,1798),new DictWord(6,0,1839),new DictWord(8,0,900),new DictWord(10,0,874),new DictWord(10,0,886),new DictWord(12,0,
					698),new DictWord(12,0,732),new DictWord(12,0,770),new DictWord(16,0,106),new DictWord(18,0,163),new DictWord(18,0,170),new DictWord(18,0,171),new DictWord(152,0,20
				),new DictWord(9,0,707),new DictWord(11,0,326),new DictWord(11,0,339),new DictWord(12,0,423),new DictWord(12,0,502),new DictWord(20,0,62),new DictWord(9,11,707),new DictWord(11
					,11,326),new DictWord(11,11,339),new DictWord(12,11,423),new DictWord(12,11,502),new DictWord(148,11,62),new DictWord(5,0,30),new DictWord(7,0,495),new DictWord(8,0
					,134),new DictWord(9,0,788),new DictWord(140,0,438),new DictWord(133,11,678),new DictWord(5,10,279),new DictWord(6,10,235),new DictWord(7,10,468),new DictWord(8,10,
					446),new DictWord(9,10,637),new DictWord(10,10,717),new DictWord(11,10,738),new DictWord(140,10,514),new DictWord(5,11,35),new DictWord(6,11,287),new DictWord(7,11,
					862),new DictWord(7,11,1886),new DictWord(138,11,179),new DictWord(7,0,1948),new DictWord(7,0,2004),new DictWord(132,11,517),new DictWord(5,10,17),new DictWord(6,10
					,371),new DictWord(137,10,528),new DictWord(4,0,115),new DictWord(5,0,669),new DictWord(6,0,407),new DictWord(8,0,311),new DictWord(11,0,10),new DictWord(141,0,5),new DictWord(
					137,0,381),new DictWord(5,0,50),new DictWord(6,0,439),new DictWord(7,0,780),new DictWord(135,0,1040),new DictWord(136,11,667),new DictWord(11,11,403),new DictWord(
					146,11,83),new DictWord(5,0,1),new DictWord(6,0,81),new DictWord(138,0,520),new DictWord(134,0,738),new DictWord(5,0,482),new DictWord(8,0,98),new DictWord(9,0,172)
				,new DictWord(10,0,360),new DictWord(10,0,700),new DictWord(10,0,822),new DictWord(11,0,302),new DictWord(11,0,778),new DictWord(12,0,50),new DictWord(12,0,127),new DictWord(12
					,0,396),new DictWord(13,0,62),new DictWord(13,0,328),new DictWord(14,0,122),new DictWord(147,0,72),new DictWord(9,11,157),new DictWord(10,11,131),new DictWord(140,
					11,72),new DictWord(135,11,714),new DictWord(135,11,539),new DictWord(5,0,2),new DictWord(6,0,512),new DictWord(7,0,797),new DictWord(7,0,1494),new DictWord(8,0,253
				),new DictWord(8,0,589),new DictWord(9,0,77),new DictWord(10,0,1),new DictWord(10,0,129),new DictWord(10,0,225),new DictWord(11,0,118),new DictWord(11,0,226),new DictWord(11,0,
					251),new DictWord(11,0,430),new DictWord(11,0,701),new DictWord(11,0,974),new DictWord(11,0,982),new DictWord(12,0,64),new DictWord(12,0,260),new DictWord(12,0,488)
				,new DictWord(140,0,690),new DictWord(5,11,394),new DictWord(7,11,367),new DictWord(7,11,487),new DictWord(7,11,857),new DictWord(7,11,1713),new DictWord(8,11,246),
				new DictWord(9,11,537),new DictWord(10,11,165),new DictWord(12,11,219),new DictWord(140,11,561),new DictWord(136,0,557),new DictWord(5,10,779),new DictWord(5,10,807
				),new DictWord(6,10,1655),new DictWord(134,10,1676),new DictWord(4,10,196),new DictWord(5,10,558),new DictWord(133,10,949),new DictWord(11,11,827),new DictWord(12,
					11,56),new DictWord(14,11,34),new DictWord(143,11,148),new DictWord(137,0,347),new DictWord(133,0,572),new DictWord(134,0,832),new DictWord(4,0,12),new DictWord(7,0
					,504),new DictWord(7,0,522),new DictWord(7,0,809),new DictWord(8,0,797),new DictWord(141,0,88),new DictWord(4,10,752),new DictWord(133,11,449),new DictWord(7,11,86)
				,new DictWord(8,11,103),new DictWord(145,11,69),new DictWord(7,11,2028),new DictWord(138,11,641),new DictWord(5,0,528),new DictWord(6,11,1),new DictWord(142,11,2),new DictWord(
					134,0,861),new DictWord(10,0,294),new DictWord(4,10,227),new DictWord(5,10,159),new DictWord(5,10,409),new DictWord(7,10,80),new DictWord(10,10,479),new DictWord(12
					,10,418),new DictWord(14,10,50),new DictWord(14,10,249),new DictWord(142,10,295),new DictWord(7,10,1470),new DictWord(8,10,66),new DictWord(8,10,137),new DictWord(8
					,10,761),new DictWord(9,10,638),new DictWord(11,10,80),new DictWord(11,10,212),new DictWord(11,10,368),new DictWord(11,10,418),new DictWord(12,10,8),new DictWord(13
					,10,15),new DictWord(16,10,61),new DictWord(17,10,59),new DictWord(19,10,28),new DictWord(148,10,84),new DictWord(20,0,109),new DictWord(135,11,1148),new DictWord(6
					,11,277),new DictWord(7,11,1274),new DictWord(7,11,1386),new DictWord(7,11,1392),new DictWord(12,11,129),new DictWord(146,11,87),new DictWord(6,11,187),
				new DictWord(7,11,39),new DictWord(7,11,1203),new DictWord(8,11,380),new DictWord(8,11,542),new DictWord(14,11,117),new DictWord(149,11,28),new DictWord(134,0,1187)
				,new DictWord(5,0,266),new DictWord(9,0,290),new DictWord(9,0,364),new DictWord(10,0,293),new DictWord(11,0,606),new DictWord(142,0,45),new DictWord(6,11,297),new DictWord(7,11
					,793),new DictWord(139,11,938),new DictWord(4,0,50),new DictWord(6,0,594),new DictWord(9,0,121),new DictWord(10,0,49),new DictWord(10,0,412),new DictWord(139,0,834)
				,new DictWord(136,0,748),new DictWord(7,11,464),new DictWord(8,11,438),new DictWord(11,11,105),new DictWord(11,11,363),new DictWord(12,11,231),new DictWord(14,11,
					386),new DictWord(15,11,102),new DictWord(148,11,75),new DictWord(132,0,466),new DictWord(13,0,399),new DictWord(14,0,337),new DictWord(6,10,38),new DictWord(7,10,
					1220),new DictWord(8,10,185),new DictWord(8,10,256),new DictWord(9,10,22),new DictWord(9,10,331),new DictWord(10,10,738),new DictWord(11,10,205),new DictWord(11,10,
					540),new DictWord(11,10,746),new DictWord(13,10,465),new DictWord(142,10,194),new DictWord(9,0,378),new DictWord(141,0,162),new DictWord(137,0,519),new DictWord(4,
					10,159),new DictWord(6,10,115),new DictWord(7,10,252),new DictWord(7,10,257),new DictWord(7,10,1928),new DictWord(8,10,69),new DictWord(9,10,384),new DictWord(10,10
					,91),new DictWord(10,10,615),new DictWord(12,10,375),new DictWord(14,10,235),new DictWord(18,10,117),new DictWord(147,10,123),new DictWord(5,11,604),new DictWord(5,
					10,911),new DictWord(136,10,278),new DictWord(132,0,667),new DictWord(8,0,351),new DictWord(9,0,322),new DictWord(4,10,151),new DictWord(135,10,1567),new DictWord(
					134,0,902),new DictWord(133,10,990),new DictWord(12,0,180),new DictWord(5,10,194),new DictWord(7,10,1662),new DictWord(137,10,90),new DictWord(4,0,869),
				new DictWord(134,0,1996),new DictWord(134,0,813),new DictWord(133,10,425),new DictWord(137,11,761),new DictWord(132,0,260),new DictWord(133,10,971),new DictWord(5,
					11,20),new DictWord(6,11,298),new DictWord(7,11,659),new DictWord(7,11,1366),new DictWord(137,11,219),new DictWord(4,0,39),new DictWord(5,0,36),new DictWord(7,0,
					1843),new DictWord(8,0,407),new DictWord(11,0,144),new DictWord(140,0,523),new DictWord(4,0,510),new DictWord(10,0,587),new DictWord(139,10,752),new DictWord(7,0,29
				),new DictWord(7,0,66),new DictWord(7,0,1980),new DictWord(10,0,487),new DictWord(138,0,809),new DictWord(13,0,260),new DictWord(14,0,82),new DictWord(18,0,63),new DictWord(137
					,10,662),new DictWord(5,10,72),new DictWord(6,10,264),new DictWord(7,10,21),new DictWord(7,10,46),new DictWord(7,10,2013),new DictWord(8,10,215),new DictWord(8,10,
					513),new DictWord(10,10,266),new DictWord(139,10,22),new DictWord(134,0,570),new DictWord(6,0,565),new DictWord(7,0,1667),new DictWord(4,11,439),new DictWord(10,10,
					95),new DictWord(11,10,603),new DictWord(12,11,242),new DictWord(13,10,443),new DictWord(14,10,160),new DictWord(143,10,4),new DictWord(134,0,1464),new DictWord(134
					,10,431),new DictWord(9,0,372),new DictWord(15,0,2),new DictWord(19,0,10),new DictWord(19,0,18),new DictWord(5,10,874),new DictWord(6,10,1677),new DictWord(143,10,0
				),new DictWord(132,0,787),new DictWord(6,0,380),new DictWord(12,0,399),new DictWord(21,0,19),new DictWord(7,10,939),new DictWord(7,10,1172),new DictWord(7,10,1671),
				new DictWord(9,10,540),new DictWord(10,10,696),new DictWord(11,10,265),new DictWord(11,10,732),new DictWord(11,10,928),new DictWord(11,10,937),new DictWord(141,10,
					438),new DictWord(137,0,200),new DictWord(132,11,233),new DictWord(132,0,516),new DictWord(134,11,577),new DictWord(132,0,844),new DictWord(11,0,887),new DictWord(
					14,0,365),new DictWord(142,0,375),new DictWord(132,11,482),new DictWord(8,0,821),new DictWord(140,0,44),new DictWord(7,0,1655),new DictWord(136,0,305),new DictWord(
					5,10,682),new DictWord(135,10,1887),new DictWord(135,11,346),new DictWord(132,10,696),new DictWord(4,0,10),new DictWord(7,0,917),new DictWord(139,0,786)
				,new DictWord(5,11,795),new DictWord(6,11,1741),new DictWord(8,11,417),new DictWord(137,11,782),new DictWord(4,0,1016),new DictWord(134,0,2031),new DictWord(5,0,684
				),new DictWord(4,10,726),new DictWord(133,10,630),new DictWord(6,0,1021),new DictWord(134,0,1480),new DictWord(8,10,802),new DictWord(136,10,838),new DictWord(134,0
					,27),new DictWord(134,0,395),new DictWord(135,11,622),new DictWord(7,11,625),new DictWord(135,11,1750),new DictWord(4,11,203),new DictWord(135,11,1936),
				new DictWord(6,10,118),new DictWord(7,10,215),new DictWord(7,10,1521),new DictWord(140,10,11),new DictWord(132,0,813),new DictWord(136,0,511),new DictWord(7,10,615)
				,new DictWord(138,10,251),new DictWord(135,10,1044),new DictWord(145,0,56),new DictWord(133,10,225),new DictWord(6,0,342),new DictWord(6,0,496),new DictWord(8,0,275
				),new DictWord(137,0,206),new DictWord(4,0,909),new DictWord(133,0,940),new DictWord(132,0,891),new DictWord(7,11,311),new DictWord(9,11,308),new DictWord(140,11,
					255),new DictWord(4,10,370),new DictWord(5,10,756),new DictWord(135,10,1326),new DictWord(4,0,687),new DictWord(134,0,1596),new DictWord(134,0,1342),new DictWord(6,
					10,1662),new DictWord(7,10,48),new DictWord(8,10,771),new DictWord(10,10,116),new DictWord(13,10,104),new DictWord(14,10,105),new DictWord(14,10,184),new DictWord(
					15,10,168),new DictWord(19,10,92),new DictWord(148,10,68),new DictWord(138,10,209),new DictWord(4,11,400),new DictWord(5,11,267),new DictWord(135,11,232
				),new DictWord(151,11,12),new DictWord(6,0,41),new DictWord(141,0,160),new DictWord(141,11,314),new DictWord(134,0,1718),new DictWord(136,0,778),new DictWord(142,11
					,261),new DictWord(134,0,1610),new DictWord(133,0,115),new DictWord(132,0,294),new DictWord(14,0,314),new DictWord(132,10,120),new DictWord(132,0,983),new DictWord(
					5,0,193),new DictWord(140,0,178),new DictWord(138,10,429),new DictWord(5,10,820),new DictWord(135,10,931),new DictWord(6,0,994),new DictWord(6,0,1051),new DictWord(
					6,0,1439),new DictWord(7,0,174),new DictWord(133,11,732),new DictWord(4,11,100),new DictWord(7,11,679),new DictWord(8,11,313),new DictWord(138,10,199),new DictWord(
					6,10,151),new DictWord(6,10,1675),new DictWord(7,10,383),new DictWord(151,10,10),new DictWord(6,0,1796),new DictWord(8,0,848),new DictWord(8,0,867),new DictWord(8,0
					,907),new DictWord(10,0,855),new DictWord(140,0,703),new DictWord(140,0,221),new DictWord(4,0,122),new DictWord(5,0,796),new DictWord(5,0,952),new DictWord(6,0,1660
				),new DictWord(6,0,1671),new DictWord(8,0,567),new DictWord(9,0,687),new DictWord(9,0,742),new DictWord(10,0,686),new DictWord(11,0,682),new DictWord(11,0,909),new DictWord(140
					,0,281),new DictWord(5,11,362),new DictWord(5,11,443),new DictWord(6,11,318),new DictWord(7,11,1019),new DictWord(139,11,623),new DictWord(5,11,463),new DictWord(
					136,11,296),new DictWord(11,0,583),new DictWord(13,0,262),new DictWord(6,10,1624),new DictWord(12,10,422),new DictWord(142,10,360),new DictWord(5,0,179)
				,new DictWord(7,0,1095),new DictWord(135,0,1213),new DictWord(4,10,43),new DictWord(4,11,454),new DictWord(5,10,344),new DictWord(133,10,357),new DictWord(4,0,66),new DictWord(
					7,0,722),new DictWord(135,0,904),new DictWord(134,0,773),new DictWord(7,0,352),new DictWord(133,10,888),new DictWord(5,11,48),new DictWord(5,11,404),new DictWord(6,
					11,557),new DictWord(7,11,458),new DictWord(8,11,597),new DictWord(10,11,455),new DictWord(10,11,606),new DictWord(11,11,49),new DictWord(11,11,548),new DictWord(12
					,11,476),new DictWord(13,11,18),new DictWord(141,11,450),new DictWord(134,11,418),new DictWord(132,10,711),new DictWord(5,11,442),new DictWord(135,11,
					1984),new DictWord(141,0,35),new DictWord(137,0,152),new DictWord(134,0,1197),new DictWord(135,11,1093),new DictWord(137,11,203),new DictWord(137,10,440
				),new DictWord(10,0,592),new DictWord(10,0,753),new DictWord(12,0,317),new DictWord(12,0,355),new DictWord(12,0,465),new DictWord(12,0,469),new DictWord(12,0,560),new DictWord(
					12,0,578),new DictWord(141,0,243),new DictWord(133,0,564),new DictWord(134,0,797),new DictWord(5,10,958),new DictWord(133,10,987),new DictWord(5,11,55),
				new DictWord(7,11,376),new DictWord(140,11,161),new DictWord(133,11,450),new DictWord(134,0,556),new DictWord(134,0,819),new DictWord(11,10,276),new DictWord(142,10
					,293),new DictWord(7,0,544),new DictWord(138,0,61),new DictWord(8,0,719),new DictWord(4,10,65),new DictWord(5,10,479),new DictWord(5,10,1004),new DictWord(7,10,1913
				),new DictWord(8,10,317),new DictWord(9,10,302),new DictWord(10,10,612),new DictWord(141,10,22),new DictWord(4,0,5),new DictWord(5,0,498),new DictWord(8,0,637),new DictWord(9,0
					,521),new DictWord(4,11,213),new DictWord(4,10,261),new DictWord(7,11,223),new DictWord(7,10,510),new DictWord(136,11,80),new DictWord(5,0,927),new DictWord(7,0,101
				),new DictWord(4,10,291),new DictWord(7,11,381),new DictWord(7,11,806),new DictWord(7,11,820),new DictWord(8,11,354),new DictWord(8,11,437),new DictWord(8,11,787),new DictWord(
					9,10,515),new DictWord(9,11,657),new DictWord(10,11,58),new DictWord(10,11,339),new DictWord(10,11,749),new DictWord(11,11,914),new DictWord(12,10,152),
				new DictWord(12,11,162),new DictWord(12,10,443),new DictWord(13,11,75),new DictWord(13,10,392),new DictWord(14,11,106),new DictWord(14,11,198),new DictWord(14,11,
					320),new DictWord(14,10,357),new DictWord(14,11,413),new DictWord(146,11,43),new DictWord(6,0,1153),new DictWord(7,0,1441),new DictWord(136,11,747),new DictWord(4,0
					,893),new DictWord(5,0,780),new DictWord(133,0,893),new DictWord(138,11,654),new DictWord(133,11,692),new DictWord(133,0,238),new DictWord(134,11,191),new DictWord(
					4,10,130),new DictWord(135,10,843),new DictWord(6,0,1296),new DictWord(5,10,42),new DictWord(5,10,879),new DictWord(7,10,245),new DictWord(7,10,324),new DictWord(7,
					10,1532),new DictWord(11,10,463),new DictWord(11,10,472),new DictWord(13,10,363),new DictWord(144,10,52),new DictWord(134,0,1729),new DictWord(6,0,1999)
				,new DictWord(136,0,969),new DictWord(4,10,134),new DictWord(133,10,372),new DictWord(4,0,60),new DictWord(7,0,941),new DictWord(7,0,1800),new DictWord(8,0,314),new DictWord(9,
					0,700),new DictWord(139,0,487),new DictWord(134,0,1144),new DictWord(6,11,162),new DictWord(7,11,1960),new DictWord(136,11,831),new DictWord(132,11,706)
				,new DictWord(135,0,1147),new DictWord(138,11,426),new DictWord(138,11,89),new DictWord(7,0,1853),new DictWord(138,0,437),new DictWord(136,0,419),new DictWord(135,
					10,1634),new DictWord(133,0,828),new DictWord(5,0,806),new DictWord(7,0,176),new DictWord(7,0,178),new DictWord(7,0,1240),new DictWord(7,0,1976),new DictWord(132,10
					,644),new DictWord(135,11,1877),new DictWord(5,11,420),new DictWord(135,11,1449),new DictWord(4,0,51),new DictWord(5,0,39),new DictWord(6,0,4),new DictWord(7,0,591)
				,new DictWord(7,0,849),new DictWord(7,0,951),new DictWord(7,0,1613),new DictWord(7,0,1760),new DictWord(7,0,1988),new DictWord(9,0,434),new DictWord(10,0,754),new DictWord(11,0
					,25),new DictWord(139,0,37),new DictWord(10,11,57),new DictWord(138,11,277),new DictWord(135,10,540),new DictWord(132,11,204),new DictWord(135,0,159),new DictWord(
					139,11,231),new DictWord(133,0,902),new DictWord(7,0,928),new DictWord(7,11,366),new DictWord(9,11,287),new DictWord(12,11,199),new DictWord(12,11,556),
				new DictWord(140,11,577),new DictWord(6,10,623),new DictWord(136,10,789),new DictWord(4,10,908),new DictWord(5,10,359),new DictWord(5,10,508),new DictWord(6,10,1723
				),new DictWord(7,10,343),new DictWord(7,10,1996),new DictWord(135,10,2026),new DictWord(134,0,270),new DictWord(4,10,341),new DictWord(135,10,480),new DictWord(5,11
					,356),new DictWord(135,11,224),new DictWord(11,11,588),new DictWord(11,11,864),new DictWord(11,11,968),new DictWord(143,11,160),new DictWord(132,0,556),
				new DictWord(137,0,801),new DictWord(132,0,416),new DictWord(142,0,372),new DictWord(5,0,152),new DictWord(5,0,197),new DictWord(7,0,340),new DictWord(7,0,867),new DictWord(10,
					0,548),new DictWord(10,0,581),new DictWord(11,0,6),new DictWord(12,0,3),new DictWord(12,0,19),new DictWord(14,0,110),new DictWord(142,0,289),new DictWord(139,0,369)
				,new DictWord(7,11,630),new DictWord(9,11,567),new DictWord(11,11,150),new DictWord(11,11,444),new DictWord(141,11,119),new DictWord(134,11,539),new DictWord(7,10,
					1995),new DictWord(8,10,299),new DictWord(11,10,890),new DictWord(140,10,674),new DictWord(7,0,34),new DictWord(7,0,190),new DictWord(8,0,28),new DictWord(8,0,141),
				new DictWord(8,0,444),new DictWord(8,0,811),new DictWord(9,0,468),new DictWord(11,0,334),new DictWord(12,0,24),new DictWord(12,0,386),new DictWord(140,0,576),new DictWord(133,0
					,757),new DictWord(7,0,1553),new DictWord(136,0,898),new DictWord(133,0,721),new DictWord(136,0,1012),new DictWord(4,0,789),new DictWord(5,0,647),new DictWord(135,0
					,1102),new DictWord(132,0,898),new DictWord(10,0,183),new DictWord(4,10,238),new DictWord(5,10,503),new DictWord(6,10,179),new DictWord(7,10,2003),new DictWord(8,10
					,381),new DictWord(8,10,473),new DictWord(9,10,149),new DictWord(10,10,788),new DictWord(15,10,45),new DictWord(15,10,86),new DictWord(20,10,110),new DictWord(150,
					10,57),new DictWord(9,0,136),new DictWord(19,0,107),new DictWord(4,10,121),new DictWord(5,10,156),new DictWord(5,10,349),new DictWord(10,10,605),new DictWord(142,10
					,342),new DictWord(4,11,235),new DictWord(135,11,255),new DictWord(4,11,194),new DictWord(5,11,584),new DictWord(6,11,384),new DictWord(7,11,583),new DictWord(10,11
					,761),new DictWord(11,11,760),new DictWord(139,11,851),new DictWord(6,10,80),new DictWord(6,10,1694),new DictWord(7,10,173),new DictWord(7,10,1974),new DictWord(9,
					10,547),new DictWord(10,10,730),new DictWord(14,10,18),new DictWord(150,10,39),new DictWord(4,10,923),new DictWord(134,10,1711),new DictWord(5,0,277),new DictWord(
					141,0,247),new DictWord(132,0,435),new DictWord(133,11,562),new DictWord(134,0,1311),new DictWord(5,11,191),new DictWord(137,11,271),new DictWord(132,10
					,595),new DictWord(7,11,1537),new DictWord(14,11,96),new DictWord(143,11,73),new DictWord(5,0,437),new DictWord(7,0,502),new DictWord(7,0,519),new DictWord(7,0,1122
				),new DictWord(7,0,1751),new DictWord(14,0,211),new DictWord(6,10,459),new DictWord(7,10,1753),new DictWord(7,10,1805),new DictWord(8,10,658),new DictWord(9,10,1),new DictWord(
					11,10,959),new DictWord(141,10,446),new DictWord(6,0,814),new DictWord(4,11,470),new DictWord(5,11,473),new DictWord(6,11,153),new DictWord(7,11,1503),new DictWord(
					7,11,1923),new DictWord(10,11,701),new DictWord(11,11,132),new DictWord(11,11,168),new DictWord(11,11,227),new DictWord(11,11,320),new DictWord(11,11,
					436),new DictWord(11,11,525),new DictWord(11,11,855),new DictWord(12,11,41),new DictWord(12,11,286),new DictWord(13,11,103),new DictWord(13,11,284),new DictWord(14,
					11,255),new DictWord(14,11,262),new DictWord(15,11,117),new DictWord(143,11,127),new DictWord(5,0,265),new DictWord(6,0,212),new DictWord(135,0,28),new DictWord(138
					,0,750),new DictWord(133,11,327),new DictWord(6,11,552),new DictWord(7,11,1754),new DictWord(137,11,604),new DictWord(134,0,2012),new DictWord(132,0,702
				),new DictWord(5,11,80),new DictWord(6,11,405),new DictWord(7,11,403),new DictWord(7,11,1502),new DictWord(7,11,1626),new DictWord(8,11,456),new DictWord(9,11,487),
				new DictWord(9,11,853),new DictWord(9,11,889),new DictWord(10,11,309),new DictWord(11,11,721),new DictWord(11,11,994),new DictWord(12,11,430),new DictWord(141,11,
					165),new DictWord(5,0,808),new DictWord(135,0,2045),new DictWord(5,0,166),new DictWord(8,0,739),new DictWord(140,0,511),new DictWord(134,10,490),new DictWord(4,11,
					453),new DictWord(5,11,887),new DictWord(6,11,535),new DictWord(8,11,6),new DictWord(136,11,543),new DictWord(4,0,119),new DictWord(5,0,170),new DictWord(5,0,447),new DictWord(
					7,0,1708),new DictWord(7,0,1889),new DictWord(9,0,357),new DictWord(9,0,719),new DictWord(12,0,486),new DictWord(140,0,596),new DictWord(137,0,500),new DictWord(7,
					10,250),new DictWord(136,10,507),new DictWord(132,10,158),new DictWord(6,0,809),new DictWord(134,0,1500),new DictWord(9,0,327),new DictWord(11,0,350),new DictWord(
					11,0,831),new DictWord(13,0,352),new DictWord(4,10,140),new DictWord(7,10,362),new DictWord(8,10,209),new DictWord(9,10,10),new DictWord(9,10,503),new DictWord(9,10
					,614),new DictWord(10,10,689),new DictWord(11,10,327),new DictWord(11,10,725),new DictWord(12,10,252),new DictWord(12,10,583),new DictWord(13,10,192),new DictWord(
					14,10,269),new DictWord(14,10,356),new DictWord(148,10,50),new DictWord(135,11,741),new DictWord(4,0,450),new DictWord(7,0,1158),new DictWord(19,10,1),new DictWord(
					19,10,26),new DictWord(150,10,9),new DictWord(6,0,597),new DictWord(135,0,1318),new DictWord(134,0,1602),new DictWord(6,10,228),new DictWord(7,10,1341),
				new DictWord(9,10,408),new DictWord(138,10,343),new DictWord(7,0,1375),new DictWord(7,0,1466),new DictWord(138,0,331),new DictWord(132,0,754),new DictWord(132,10,
					557),new DictWord(5,11,101),new DictWord(6,11,88),new DictWord(6,11,543),new DictWord(7,11,1677),new DictWord(9,11,100),new DictWord(10,11,677),new DictWord(14,11,
					169),new DictWord(14,11,302),new DictWord(14,11,313),new DictWord(15,11,48),new DictWord(143,11,84),new DictWord(134,0,1368),new DictWord(4,11,310),new DictWord(9,
					11,795),new DictWord(10,11,733),new DictWord(11,11,451),new DictWord(12,11,249),new DictWord(14,11,115),new DictWord(14,11,286),new DictWord(143,11,100)
				,new DictWord(132,10,548),new DictWord(10,0,557),new DictWord(7,10,197),new DictWord(8,10,142),new DictWord(8,10,325),new DictWord(9,10,150),new DictWord(9,10,596),
				new DictWord(10,10,353),new DictWord(11,10,74),new DictWord(11,10,315),new DictWord(12,10,662),new DictWord(12,10,681),new DictWord(14,10,423),new DictWord(143,10,
					141),new DictWord(133,11,587),new DictWord(5,0,850),new DictWord(136,0,799),new DictWord(10,0,908),new DictWord(12,0,701),new DictWord(12,0,757),new DictWord(142,0,
					466),new DictWord(4,0,62),new DictWord(5,0,275),new DictWord(18,0,19),new DictWord(6,10,399),new DictWord(6,10,579),new DictWord(7,10,692),new DictWord(7,10,846),new DictWord(7
					,10,1015),new DictWord(7,10,1799),new DictWord(8,10,403),new DictWord(9,10,394),new DictWord(10,10,133),new DictWord(12,10,4),new DictWord(12,10,297),new DictWord(
					12,10,452),new DictWord(16,10,81),new DictWord(18,10,25),new DictWord(21,10,14),new DictWord(22,10,12),new DictWord(151,10,18),new DictWord(12,0,459),new DictWord(7
					,10,1546),new DictWord(11,10,299),new DictWord(142,10,407),new DictWord(132,10,177),new DictWord(132,11,498),new DictWord(7,11,217),new DictWord(8,11,
					140),new DictWord(138,11,610),new DictWord(5,10,411),new DictWord(135,10,653),new DictWord(134,0,1802),new DictWord(7,10,439),new DictWord(10,10,727),new DictWord(
					11,10,260),new DictWord(139,10,684),new DictWord(133,11,905),new DictWord(11,11,580),new DictWord(142,11,201),new DictWord(134,0,1397),new DictWord(5,10
					,208),new DictWord(7,10,753),new DictWord(135,10,1528),new DictWord(7,0,238),new DictWord(7,0,2033),new DictWord(8,0,120),new DictWord(8,0,188),new DictWord(8,0,659
				),new DictWord(9,0,598),new DictWord(10,0,466),new DictWord(12,0,342),new DictWord(12,0,588),new DictWord(13,0,503),new DictWord(14,0,246),new DictWord(143,0,92),new DictWord(
					135,11,1041),new DictWord(4,11,456),new DictWord(7,11,105),new DictWord(7,11,358),new DictWord(7,11,1637),new DictWord(8,11,643),new DictWord(139,11,483
				),new DictWord(6,0,1318),new DictWord(134,0,1324),new DictWord(4,0,201),new DictWord(7,0,1744),new DictWord(8,0,602),new DictWord(11,0,247),new DictWord(11,0,826),new DictWord(
					17,0,65),new DictWord(133,10,242),new DictWord(8,0,164),new DictWord(146,0,62),new DictWord(133,10,953),new DictWord(139,10,802),new DictWord(133,0,615)
				,new DictWord(7,11,1566),new DictWord(8,11,269),new DictWord(9,11,212),new DictWord(9,11,718),new DictWord(14,11,15),new DictWord(14,11,132),new DictWord(142,11,227
				),new DictWord(133,10,290),new DictWord(132,10,380),new DictWord(5,10,52),new DictWord(7,10,277),new DictWord(9,10,368),new DictWord(139,10,791),new DictWord(135,0,
					1243),new DictWord(133,11,539),new DictWord(11,11,919),new DictWord(141,11,409),new DictWord(136,0,968),new DictWord(133,11,470),new DictWord(134,0,882)
				,new DictWord(132,0,907),new DictWord(5,0,100),new DictWord(10,0,329),new DictWord(12,0,416),new DictWord(149,0,29),new DictWord(10,10,138),new DictWord(139,10,476)
				,new DictWord(5,10,725),new DictWord(5,10,727),new DictWord(6,11,91),new DictWord(7,11,435),new DictWord(135,10,1811),new DictWord(4,11,16),new DictWord(5,11,316),new DictWord(
					5,11,842),new DictWord(6,11,370),new DictWord(6,11,1778),new DictWord(8,11,166),new DictWord(11,11,812),new DictWord(12,11,206),new DictWord(12,11,351),
				new DictWord(14,11,418),new DictWord(16,11,15),new DictWord(16,11,34),new DictWord(18,11,3),new DictWord(19,11,3),new DictWord(19,11,7),new DictWord(20,11,4),new DictWord(149,
					11,21),new DictWord(132,0,176),new DictWord(5,0,636),new DictWord(5,0,998),new DictWord(7,0,9),new DictWord(7,0,1508),new DictWord(8,0,26),new DictWord(9,0,317),new DictWord(9,
					0,358),new DictWord(10,0,210),new DictWord(10,0,292),new DictWord(10,0,533),new DictWord(11,0,555),new DictWord(12,0,526),new DictWord(12,0,607),new DictWord(13,0,
					263),new DictWord(13,0,459),new DictWord(142,0,271),new DictWord(6,0,256),new DictWord(8,0,265),new DictWord(4,10,38),new DictWord(7,10,307),new DictWord(7,10,999),
				new DictWord(7,10,1481),new DictWord(7,10,1732),new DictWord(7,10,1738),new DictWord(9,10,414),new DictWord(11,10,316),new DictWord(12,10,52),new DictWord(13,10,420
				),new DictWord(147,10,100),new DictWord(135,10,1296),new DictWord(4,11,611),new DictWord(133,11,606),new DictWord(4,0,643),new DictWord(142,11,21),new DictWord(133,
					11,715),new DictWord(133,10,723),new DictWord(6,0,610),new DictWord(135,11,597),new DictWord(10,0,127),new DictWord(141,0,27),new DictWord(6,0,1995),new DictWord(6,
					0,2001),new DictWord(8,0,119),new DictWord(136,0,973),new DictWord(4,11,149),new DictWord(138,11,368),new DictWord(12,0,522),new DictWord(4,11,154),new DictWord(5,
					10,109),new DictWord(6,10,1784),new DictWord(7,11,1134),new DictWord(7,10,1895),new DictWord(8,11,105),new DictWord(12,10,296),new DictWord(140,10,302),
				new DictWord(4,11,31),new DictWord(6,11,429),new DictWord(7,11,962),new DictWord(9,11,458),new DictWord(139,11,691),new DictWord(10,0,553),new DictWord(11,0,876),new DictWord(
					13,0,193),new DictWord(13,0,423),new DictWord(14,0,166),new DictWord(19,0,84),new DictWord(4,11,312),new DictWord(5,10,216),new DictWord(7,10,1879),new DictWord(9,
					10,141),new DictWord(9,10,270),new DictWord(9,10,679),new DictWord(10,10,159),new DictWord(11,10,197),new DictWord(12,10,538),new DictWord(12,10,559),new DictWord(
					14,10,144),new DictWord(14,10,167),new DictWord(143,10,67),new DictWord(134,0,1582),new DictWord(7,0,1578),new DictWord(135,11,1578),new DictWord(137,10
					,81),new DictWord(132,11,236),new DictWord(134,10,391),new DictWord(134,0,795),new DictWord(7,10,322),new DictWord(136,10,249),new DictWord(5,11,836),new DictWord(5
					,11,857),new DictWord(6,11,1680),new DictWord(7,11,59),new DictWord(147,11,53),new DictWord(135,0,432),new DictWord(10,11,68),new DictWord(139,11,494),new DictWord(
					4,11,81),new DictWord(139,11,867),new DictWord(7,0,126),new DictWord(136,0,84),new DictWord(142,11,280),new DictWord(5,11,282),new DictWord(8,11,650),new DictWord(9
					,11,295),new DictWord(9,11,907),new DictWord(138,11,443),new DictWord(136,0,790),new DictWord(5,10,632),new DictWord(138,10,526),new DictWord(6,0,64),new DictWord(
					12,0,377),new DictWord(13,0,309),new DictWord(14,0,141),new DictWord(14,0,429),new DictWord(14,11,141),new DictWord(142,11,429),new DictWord(134,0,1529)
				,new DictWord(6,0,321),new DictWord(7,0,1857),new DictWord(9,0,530),new DictWord(19,0,99),new DictWord(7,10,948),new DictWord(7,10,1042),new DictWord(8,10,235),new DictWord(8,
					10,461),new DictWord(9,10,453),new DictWord(10,10,354),new DictWord(145,10,77),new DictWord(7,0,1104),new DictWord(11,0,269),new DictWord(11,0,539),new DictWord(11,
					0,627),new DictWord(11,0,706),new DictWord(11,0,975),new DictWord(12,0,248),new DictWord(12,0,434),new DictWord(12,0,600),new DictWord(12,0,622),new DictWord(13,0,
					297),new DictWord(13,0,485),new DictWord(14,0,69),new DictWord(14,0,409),new DictWord(143,0,108),new DictWord(4,10,362),new DictWord(7,10,52),new DictWord(7,10,303)
				,new DictWord(10,11,70),new DictWord(12,11,26),new DictWord(14,11,17),new DictWord(14,11,178),new DictWord(15,11,34),new DictWord(149,11,12),new DictWord(11,0,977),
				new DictWord(141,0,507),new DictWord(9,0,34),new DictWord(139,0,484),new DictWord(5,10,196),new DictWord(6,10,486),new DictWord(7,10,212),new DictWord(8,10,309),new DictWord(
					136,10,346),new DictWord(6,0,1700),new DictWord(7,0,26),new DictWord(7,0,293),new DictWord(7,0,382),new DictWord(7,0,1026),new DictWord(7,0,1087),new DictWord(7,0,
					2027),new DictWord(8,0,24),new DictWord(8,0,114),new DictWord(8,0,252),new DictWord(8,0,727),new DictWord(8,0,729),new DictWord(9,0,30),new DictWord(9,0,199),new DictWord(9,0,
					231),new DictWord(9,0,251),new DictWord(9,0,334),new DictWord(9,0,361),new DictWord(9,0,712),new DictWord(10,0,55),new DictWord(10,0,60),new DictWord(10,0,232),new DictWord(10,
					0,332),new DictWord(10,0,384),new DictWord(10,0,396),new DictWord(10,0,504),new DictWord(10,0,542),new DictWord(10,0,652),new DictWord(11,0,20),new DictWord(11,0,48
				),new DictWord(11,0,207),new DictWord(11,0,291),new DictWord(11,0,298),new DictWord(11,0,342),new DictWord(11,0,365),new DictWord(11,0,394),new DictWord(11,0,620),new DictWord(
					11,0,705),new DictWord(11,0,1017),new DictWord(12,0,123),new DictWord(12,0,340),new DictWord(12,0,406),new DictWord(12,0,643),new DictWord(13,0,61),new DictWord(13,
					0,269),new DictWord(13,0,311),new DictWord(13,0,319),new DictWord(13,0,486),new DictWord(14,0,234),new DictWord(15,0,62),new DictWord(15,0,85),new DictWord(16,0,71)
				,new DictWord(18,0,119),new DictWord(20,0,105),new DictWord(135,10,1912),new DictWord(4,11,71),new DictWord(5,11,376),new DictWord(7,11,119),new DictWord(138,11,665
				),new DictWord(10,0,918),new DictWord(10,0,926),new DictWord(4,10,686),new DictWord(136,11,55),new DictWord(138,10,625),new DictWord(136,10,706),new DictWord(132,11
					,479),new DictWord(4,10,30),new DictWord(133,10,43),new DictWord(6,0,379),new DictWord(7,0,270),new DictWord(8,0,176),new DictWord(8,0,183),new DictWord(9,0,432),new DictWord(9
					,0,661),new DictWord(12,0,247),new DictWord(12,0,617),new DictWord(18,0,125),new DictWord(7,11,607),new DictWord(8,11,99),new DictWord(152,11,4),new DictWord(5,0,
					792),new DictWord(133,0,900),new DictWord(4,11,612),new DictWord(133,11,561),new DictWord(4,11,41),new DictWord(4,10,220),new DictWord(5,11,74),new DictWord(7,10,
					1535),new DictWord(7,11,1627),new DictWord(11,11,871),new DictWord(140,11,619),new DictWord(135,0,1920),new DictWord(7,11,94),new DictWord(11,11,329),new DictWord(
					11,11,965),new DictWord(12,11,241),new DictWord(14,11,354),new DictWord(15,11,22),new DictWord(148,11,63),new DictWord(9,11,209),new DictWord(137,11,300
				),new DictWord(134,0,771),new DictWord(135,0,1979),new DictWord(4,0,901),new DictWord(133,0,776),new DictWord(142,0,254),new DictWord(133,11,98),new DictWord(9,11,
					16),new DictWord(141,11,386),new DictWord(133,11,984),new DictWord(4,11,182),new DictWord(6,11,205),new DictWord(135,11,220),new DictWord(7,10,1725),new DictWord(7,
					10,1774),new DictWord(138,10,393),new DictWord(5,10,263),new DictWord(134,10,414),new DictWord(4,11,42),new DictWord(9,11,205),new DictWord(9,11,786),new DictWord(
					138,11,659),new DictWord(14,0,140),new DictWord(148,0,41),new DictWord(8,0,440),new DictWord(10,0,359),new DictWord(6,10,178),new DictWord(6,11,289),new DictWord(6,
					10,1750),new DictWord(7,11,1670),new DictWord(9,10,690),new DictWord(10,10,155),new DictWord(10,10,373),new DictWord(11,10,698),new DictWord(12,11,57),new DictWord(
					13,10,155),new DictWord(20,10,93),new DictWord(151,11,4),new DictWord(4,0,37),new DictWord(5,0,334),new DictWord(7,0,1253),new DictWord(151,11,25),new DictWord(4,0,
					508),new DictWord(4,11,635),new DictWord(5,10,97),new DictWord(137,10,393),new DictWord(139,11,533),new DictWord(4,0,640),new DictWord(133,0,513),new DictWord(134,
					10,1639),new DictWord(132,11,371),new DictWord(4,11,272),new DictWord(7,11,836),new DictWord(7,11,1651),new DictWord(145,11,89),new DictWord(5,11,825),new DictWord(
					6,11,444),new DictWord(6,11,1640),new DictWord(136,11,308),new DictWord(4,10,191),new DictWord(7,10,934),new DictWord(8,10,647),new DictWord(145,10,97),
				new DictWord(12,0,246),new DictWord(15,0,162),new DictWord(19,0,64),new DictWord(20,0,8),new DictWord(20,0,95),new DictWord(22,0,24),new DictWord(152,0,17),new DictWord(4,0,533
				),new DictWord(5,10,165),new DictWord(9,10,346),new DictWord(138,10,655),new DictWord(5,11,737),new DictWord(139,10,885),new DictWord(133,10,877),new DictWord(8,10,
					128),new DictWord(139,10,179),new DictWord(137,11,307),new DictWord(140,0,752),new DictWord(133,0,920),new DictWord(135,0,1048),new DictWord(5,0,153),new DictWord(6
					,0,580),new DictWord(6,10,1663),new DictWord(7,10,132),new DictWord(7,10,1154),new DictWord(7,10,1415),new DictWord(7,10,1507),new DictWord(12,10,493),new DictWord(
					15,10,105),new DictWord(151,10,15),new DictWord(5,10,459),new DictWord(7,10,1073),new DictWord(8,10,241),new DictWord(136,10,334),new DictWord(138,0,391
				),new DictWord(135,0,1952),new DictWord(133,11,525),new DictWord(8,11,641),new DictWord(11,11,388),new DictWord(140,11,580),new DictWord(142,0,126),new DictWord(134
					,0,640),new DictWord(132,0,483),new DictWord(7,0,1616),new DictWord(9,0,69),new DictWord(6,10,324),new DictWord(6,10,520),new DictWord(7,10,338),new DictWord(7,10,
					1729),new DictWord(8,10,228),new DictWord(139,10,750),new DictWord(5,11,493),new DictWord(134,11,528),new DictWord(135,0,734),new DictWord(4,11,174),new DictWord(
					135,11,911),new DictWord(138,0,480),new DictWord(9,0,495),new DictWord(146,0,104),new DictWord(135,10,705),new DictWord(9,0,472),new DictWord(4,10,73),new DictWord(
					6,10,612),new DictWord(7,10,927),new DictWord(7,10,1330),new DictWord(7,10,1822),new DictWord(8,10,217),new DictWord(9,10,765),new DictWord(9,10,766),new DictWord(
					10,10,408),new DictWord(11,10,51),new DictWord(11,10,793),new DictWord(12,10,266),new DictWord(15,10,158),new DictWord(20,10,89),new DictWord(150,10,32)
				,new DictWord(7,11,548),new DictWord(137,11,58),new DictWord(4,11,32),new DictWord(5,11,215),new DictWord(6,11,269),new DictWord(7,11,1782),new DictWord(7,11,1892),
				new DictWord(10,11,16),new DictWord(11,11,822),new DictWord(11,11,954),new DictWord(141,11,481),new DictWord(132,0,874),new DictWord(9,0,229),new DictWord(5,10,389)
				,new DictWord(136,10,636),new DictWord(7,11,1749),new DictWord(136,11,477),new DictWord(134,0,948),new DictWord(5,11,308),new DictWord(135,11,1088),new DictWord(4,0
					,748),new DictWord(139,0,1009),new DictWord(136,10,21),new DictWord(6,0,555),new DictWord(135,0,485),new DictWord(5,11,126),new DictWord(8,11,297),new DictWord(9,11
					,366),new DictWord(9,11,445),new DictWord(12,11,53),new DictWord(12,11,374),new DictWord(141,11,492),new DictWord(7,11,1551),new DictWord(139,11,361),new DictWord(
					136,0,193),new DictWord(136,0,472),new DictWord(8,0,653),new DictWord(13,0,93),new DictWord(147,0,14),new DictWord(132,0,984),new DictWord(132,11,175),new DictWord(
					5,0,172),new DictWord(6,0,1971),new DictWord(132,11,685),new DictWord(149,11,8),new DictWord(133,11,797),new DictWord(13,0,83),new DictWord(5,10,189),new DictWord(7
					,10,442),new DictWord(7,10,443),new DictWord(8,10,281),new DictWord(12,10,174),new DictWord(141,10,261),new DictWord(134,0,1568),new DictWord(133,11,565
				),new DictWord(139,0,384),new DictWord(133,0,260),new DictWord(7,0,758),new DictWord(7,0,880),new DictWord(7,0,1359),new DictWord(9,0,164),new DictWord(9,0,167),new DictWord(10
					,0,156),new DictWord(10,0,588),new DictWord(12,0,101),new DictWord(14,0,48),new DictWord(15,0,70),new DictWord(6,10,2),new DictWord(7,10,1262),new DictWord(7,10,
					1737),new DictWord(8,10,22),new DictWord(8,10,270),new DictWord(8,10,612),new DictWord(9,10,312),new DictWord(9,10,436),new DictWord(10,10,311),new DictWord(10,10,
					623),new DictWord(11,10,72),new DictWord(11,10,330),new DictWord(11,10,455),new DictWord(12,10,321),new DictWord(12,10,504),new DictWord(12,10,530),new DictWord(12,
					10,543),new DictWord(13,10,17),new DictWord(13,10,156),new DictWord(13,10,334),new DictWord(17,10,60),new DictWord(148,10,64),new DictWord(4,11,252),new DictWord(7,
					11,1068),new DictWord(10,11,434),new DictWord(11,11,228),new DictWord(11,11,426),new DictWord(13,11,231),new DictWord(18,11,106),new DictWord(148,11,87)
				,new DictWord(7,10,354),new DictWord(10,10,410),new DictWord(139,10,815),new DictWord(6,0,367),new DictWord(7,10,670),new DictWord(7,10,1327),new DictWord(8,10,411)
				,new DictWord(8,10,435),new DictWord(9,10,653),new DictWord(9,10,740),new DictWord(10,10,385),new DictWord(11,10,222),new DictWord(11,10,324),new DictWord(11,10,829
				),new DictWord(140,10,611),new DictWord(7,0,1174),new DictWord(6,10,166),new DictWord(135,10,374),new DictWord(146,0,121),new DictWord(132,0,828),new DictWord(5,11,
					231),new DictWord(138,11,509),new DictWord(7,11,601),new DictWord(9,11,277),new DictWord(9,11,674),new DictWord(10,11,178),new DictWord(10,11,257),new DictWord(10,
					11,418),new DictWord(11,11,531),new DictWord(11,11,544),new DictWord(11,11,585),new DictWord(12,11,113),new DictWord(12,11,475),new DictWord(13,11,99),new DictWord(
					142,11,428),new DictWord(134,0,1541),new DictWord(135,11,1779),new DictWord(5,0,343),new DictWord(134,10,398),new DictWord(135,10,50),new DictWord(135,
					11,1683),new DictWord(4,0,440),new DictWord(7,0,57),new DictWord(8,0,167),new DictWord(8,0,375),new DictWord(9,0,82),new DictWord(9,0,561),new DictWord(9,0,744),new DictWord(10
					,0,620),new DictWord(137,11,744),new DictWord(134,0,926),new DictWord(6,10,517),new DictWord(7,10,1159),new DictWord(10,10,621),new DictWord(139,10,192)
				,new DictWord(137,0,827),new DictWord(8,0,194),new DictWord(136,0,756),new DictWord(10,10,223),new DictWord(139,10,645),new DictWord(7,10,64),new DictWord(136,10,
					245),new DictWord(4,11,399),new DictWord(5,11,119),new DictWord(5,11,494),new DictWord(7,11,751),new DictWord(137,11,556),new DictWord(132,0,808),new DictWord(135,0
					,22),new DictWord(7,10,1763),new DictWord(140,10,310),new DictWord(5,0,639),new DictWord(7,0,1249),new DictWord(11,0,896),new DictWord(134,11,584),new DictWord(134,
					0,1614),new DictWord(135,0,860),new DictWord(135,11,1121),new DictWord(5,10,129),new DictWord(6,10,61),new DictWord(135,10,947),new DictWord(4,0,102),new DictWord(7
					,0,815),new DictWord(7,0,1699),new DictWord(139,0,964),new DictWord(13,10,505),new DictWord(141,10,506),new DictWord(139,10,1000),new DictWord(132,11,
					679),new DictWord(132,0,899),new DictWord(132,0,569),new DictWord(5,11,694),new DictWord(137,11,714),new DictWord(136,0,795),new DictWord(6,0,2045),new DictWord(139
					,11,7),new DictWord(6,0,52),new DictWord(9,0,104),new DictWord(9,0,559),new DictWord(12,0,308),new DictWord(147,0,87),new DictWord(4,0,301),new DictWord(132,0,604),
				new DictWord(133,10,637),new DictWord(136,0,779),new DictWord(5,11,143),new DictWord(5,11,769),new DictWord(6,11,1760),new DictWord(7,11,682),new DictWord(7,11,1992
				),new DictWord(136,11,736),new DictWord(137,10,590),new DictWord(147,0,32),new DictWord(137,11,527),new DictWord(5,10,280),new DictWord(135,10,1226),new DictWord(
					134,0,494),new DictWord(6,0,677),new DictWord(6,0,682),new DictWord(134,0,1044),new DictWord(133,10,281),new DictWord(135,10,1064),new DictWord(7,0,508)
				,new DictWord(133,11,860),new DictWord(6,11,422),new DictWord(7,11,0),new DictWord(7,11,1544),new DictWord(9,11,577),new DictWord(11,11,990),new DictWord(12,11,141)
				,new DictWord(12,11,453),new DictWord(13,11,47),new DictWord(141,11,266),new DictWord(134,0,1014),new DictWord(5,11,515),new DictWord(137,11,131),new DictWord(134,0
					,957),new DictWord(132,11,646),new DictWord(6,0,310),new DictWord(7,0,1849),new DictWord(8,0,72),new DictWord(8,0,272),new DictWord(8,0,431),new DictWord(9,0,12),new DictWord(9
					,0,376),new DictWord(10,0,563),new DictWord(10,0,630),new DictWord(10,0,796),new DictWord(10,0,810),new DictWord(11,0,367),new DictWord(11,0,599),new DictWord(11,0,
					686),new DictWord(140,0,672),new DictWord(7,0,570),new DictWord(4,11,396),new DictWord(7,10,120),new DictWord(7,11,728),new DictWord(8,10,489),new DictWord(9,11,117
				),new DictWord(9,10,319),new DictWord(10,10,820),new DictWord(11,10,1004),new DictWord(12,10,379),new DictWord(12,10,679),new DictWord(13,10,117),new DictWord(13,11
					,202),new DictWord(13,10,412),new DictWord(14,10,25),new DictWord(15,10,52),new DictWord(15,10,161),new DictWord(16,10,47),new DictWord(20,11,51),new DictWord(149,
					10,2),new DictWord(6,11,121),new DictWord(6,11,124),new DictWord(6,11,357),new DictWord(7,11,1138),new DictWord(7,11,1295),new DictWord(8,11,162),new DictWord(139,
					11,655),new DictWord(8,0,449),new DictWord(4,10,937),new DictWord(5,10,801),new DictWord(136,11,449),new DictWord(139,11,958),new DictWord(6,0,181),new DictWord(7,0
					,537),new DictWord(8,0,64),new DictWord(9,0,127),new DictWord(10,0,496),new DictWord(12,0,510),new DictWord(141,0,384),new DictWord(138,11,253),new DictWord(4,0,244
				),new DictWord(135,0,233),new DictWord(133,11,237),new DictWord(132,10,365),new DictWord(6,0,1650),new DictWord(10,0,702),new DictWord(139,0,245),new DictWord(5,10,
					7),new DictWord(139,10,774),new DictWord(13,0,463),new DictWord(20,0,49),new DictWord(13,11,463),new DictWord(148,11,49),new DictWord(4,10,734),new DictWord(5,10,
					662),new DictWord(134,10,430),new DictWord(4,10,746),new DictWord(135,10,1090),new DictWord(5,10,360),new DictWord(136,10,237),new DictWord(137,0,338),new DictWord(
					143,11,10),new DictWord(7,11,571),new DictWord(138,11,366),new DictWord(134,0,1279),new DictWord(9,11,513),new DictWord(10,11,22),new DictWord(10,11,39)
				,new DictWord(12,11,122),new DictWord(140,11,187),new DictWord(133,0,896),new DictWord(146,0,178),new DictWord(134,0,695),new DictWord(137,0,808),new DictWord(134,
					11,587),new DictWord(7,11,107),new DictWord(7,11,838),new DictWord(8,11,550),new DictWord(138,11,401),new DictWord(7,0,1117),new DictWord(136,0,539),new DictWord(4,
					10,277),new DictWord(5,10,608),new DictWord(6,10,493),new DictWord(7,10,457),new DictWord(140,10,384),new DictWord(133,11,768),new DictWord(12,0,257),new DictWord(7
					,10,27),new DictWord(135,10,316),new DictWord(140,0,1003),new DictWord(4,0,207),new DictWord(5,0,586),new DictWord(5,0,676),new DictWord(6,0,448),new DictWord(8,0,
					244),new DictWord(11,0,1),new DictWord(13,0,3),new DictWord(16,0,54),new DictWord(17,0,4),new DictWord(18,0,13),new DictWord(133,10,552),new DictWord(4,10,401),new DictWord(137
					,10,264),new DictWord(5,0,516),new DictWord(7,0,1883),new DictWord(135,11,1883),new DictWord(12,0,960),new DictWord(132,11,894),new DictWord(5,0,4),new DictWord(5,0
					,810),new DictWord(6,0,13),new DictWord(6,0,538),new DictWord(6,0,1690),new DictWord(6,0,1726),new DictWord(7,0,499),new DictWord(7,0,1819),new DictWord(8,0,148),new DictWord(8
					,0,696),new DictWord(8,0,791),new DictWord(12,0,125),new DictWord(143,0,9),new DictWord(135,0,1268),new DictWord(11,0,30),new DictWord(14,0,315),new DictWord(9,10,
					543),new DictWord(10,10,524),new DictWord(12,10,524),new DictWord(16,10,18),new DictWord(20,10,26),new DictWord(148,10,65),new DictWord(6,0,748),new DictWord(4,10,
					205),new DictWord(5,10,623),new DictWord(7,10,104),new DictWord(136,10,519),new DictWord(11,0,542),new DictWord(139,0,852),new DictWord(140,0,6),new DictWord(132,0,
					848),new DictWord(7,0,1385),new DictWord(11,0,582),new DictWord(11,0,650),new DictWord(11,0,901),new DictWord(11,0,949),new DictWord(12,0,232),new DictWord(12,0,236
				),new DictWord(13,0,413),new DictWord(13,0,501),new DictWord(18,0,116),new DictWord(7,10,579),new DictWord(9,10,41),new DictWord(9,10,244),new DictWord(9,10,669),new DictWord(
					10,10,5),new DictWord(11,10,861),new DictWord(11,10,951),new DictWord(139,10,980),new DictWord(4,0,945),new DictWord(6,0,1811),new DictWord(6,0,1845),new DictWord(6
					,0,1853),new DictWord(6,0,1858),new DictWord(8,0,862),new DictWord(12,0,782),new DictWord(12,0,788),new DictWord(18,0,160),new DictWord(148,0,117),new DictWord(132,
					10,717),new DictWord(4,0,925),new DictWord(5,0,803),new DictWord(8,0,698),new DictWord(138,0,828),new DictWord(134,0,1416),new DictWord(132,0,610),new DictWord(139,
					0,992),new DictWord(6,0,878),new DictWord(134,0,1477),new DictWord(135,0,1847),new DictWord(138,11,531),new DictWord(137,11,539),new DictWord(134,11,272
				),new DictWord(133,0,383),new DictWord(134,0,1404),new DictWord(132,10,489),new DictWord(4,11,9),new DictWord(5,11,128),new DictWord(7,11,368),new DictWord(11,11,
					480),new DictWord(148,11,3),new DictWord(136,0,986),new DictWord(9,0,660),new DictWord(138,0,347),new DictWord(135,10,892),new DictWord(136,11,682),new DictWord(7,0
					,572),new DictWord(9,0,592),new DictWord(11,0,680),new DictWord(12,0,356),new DictWord(140,0,550),new DictWord(7,0,1411),new DictWord(138,11,527),new DictWord(4,11,
					2),new DictWord(7,11,545),new DictWord(135,11,894),new DictWord(137,10,473),new DictWord(11,0,64),new DictWord(7,11,481),new DictWord(7,10,819),new DictWord(9,10,26
				),new DictWord(9,10,392),new DictWord(9,11,792),new DictWord(10,10,152),new DictWord(10,10,226),new DictWord(12,10,276),new DictWord(12,10,426),new DictWord(12,10,
					589),new DictWord(13,10,460),new DictWord(15,10,97),new DictWord(19,10,48),new DictWord(148,10,104),new DictWord(135,10,51),new DictWord(136,11,445),new DictWord(
					136,11,646),new DictWord(135,0,606),new DictWord(132,10,674),new DictWord(6,0,1829),new DictWord(134,0,1830),new DictWord(132,10,770),new DictWord(5,10,
					79),new DictWord(7,10,1027),new DictWord(7,10,1477),new DictWord(139,10,52),new DictWord(5,11,530),new DictWord(142,11,113),new DictWord(134,10,1666),new DictWord(7
					,0,748),new DictWord(139,0,700),new DictWord(134,10,195),new DictWord(133,10,789),new DictWord(9,0,87),new DictWord(10,0,365),new DictWord(4,10,251),new DictWord(4,
					10,688),new DictWord(7,10,513),new DictWord(135,10,1284),new DictWord(136,11,111),new DictWord(133,0,127),new DictWord(6,0,198),new DictWord(140,0,83),new DictWord(
					133,11,556),new DictWord(133,10,889),new DictWord(4,10,160),new DictWord(5,10,330),new DictWord(7,10,1434),new DictWord(136,10,174),new DictWord(5,0,276
				),new DictWord(6,0,55),new DictWord(7,0,1369),new DictWord(138,0,864),new DictWord(8,11,16),new DictWord(140,11,568),new DictWord(6,0,1752),new DictWord(136,0,726),
				new DictWord(135,0,1066),new DictWord(133,0,764),new DictWord(6,11,186),new DictWord(137,11,426),new DictWord(11,0,683),new DictWord(139,11,683),new DictWord(6,0,
					309),new DictWord(7,0,331),new DictWord(138,0,550),new DictWord(133,10,374),new DictWord(6,0,1212),new DictWord(6,0,1852),new DictWord(7,0,1062),new DictWord(8,0,
					874),new DictWord(8,0,882),new DictWord(138,0,936),new DictWord(132,11,585),new DictWord(134,0,1364),new DictWord(7,0,986),new DictWord(133,10,731),new DictWord(6,0
					,723),new DictWord(6,0,1408),new DictWord(138,0,381),new DictWord(135,0,1573),new DictWord(134,0,1025),new DictWord(4,10,626),new DictWord(5,10,642),new DictWord(6,
					10,425),new DictWord(10,10,202),new DictWord(139,10,141),new DictWord(4,11,93),new DictWord(5,11,252),new DictWord(6,11,229),new DictWord(7,11,291),new DictWord(9,
					11,550),new DictWord(139,11,644),new DictWord(137,11,749),new DictWord(137,11,162),new DictWord(132,11,381),new DictWord(135,0,1559),new DictWord(6,0,
					194),new DictWord(7,0,133),new DictWord(10,0,493),new DictWord(10,0,570),new DictWord(139,0,664),new DictWord(5,0,24),new DictWord(5,0,569),new DictWord(6,0,3),new DictWord(6,0
					,119),new DictWord(6,0,143),new DictWord(6,0,440),new DictWord(7,0,295),new DictWord(7,0,599),new DictWord(7,0,1686),new DictWord(7,0,1854),new DictWord(8,0,424),new DictWord(9
					,0,43),new DictWord(9,0,584),new DictWord(9,0,760),new DictWord(10,0,148),new DictWord(10,0,328),new DictWord(11,0,159),new DictWord(11,0,253),new DictWord(11,0,506
				),new DictWord(12,0,487),new DictWord(140,0,531),new DictWord(6,0,661),new DictWord(134,0,1517),new DictWord(136,10,835),new DictWord(151,10,17),new DictWord(5,0,14
				),new DictWord(5,0,892),new DictWord(6,0,283),new DictWord(7,0,234),new DictWord(136,0,537),new DictWord(139,0,541),new DictWord(4,0,126),new DictWord(8,0,635),new DictWord(147
					,0,34),new DictWord(4,0,316),new DictWord(4,0,495),new DictWord(135,0,1561),new DictWord(4,11,187),new DictWord(5,11,184),new DictWord(5,11,690),new DictWord(7,11,
					1869),new DictWord(138,11,756),new DictWord(139,11,783),new DictWord(4,0,998),new DictWord(137,0,861),new DictWord(136,0,1009),new DictWord(139,11,292),
				new DictWord(5,11,21),new DictWord(6,11,77),new DictWord(6,11,157),new DictWord(7,11,974),new DictWord(7,11,1301),new DictWord(7,11,1339),new DictWord(7,11,1490),new DictWord(7
					,11,1873),new DictWord(137,11,628),new DictWord(7,11,1283),new DictWord(9,11,227),new DictWord(9,11,499),new DictWord(10,11,341),new DictWord(11,11,325)
				,new DictWord(11,11,408),new DictWord(14,11,180),new DictWord(15,11,144),new DictWord(18,11,47),new DictWord(147,11,49),new DictWord(4,0,64),new DictWord(5,0,352),new DictWord(
					5,0,720),new DictWord(6,0,368),new DictWord(139,0,359),new DictWord(5,10,384),new DictWord(8,10,455),new DictWord(140,10,48),new DictWord(5,10,264),new DictWord(134
					,10,184),new DictWord(7,0,1577),new DictWord(10,0,304),new DictWord(10,0,549),new DictWord(12,0,365),new DictWord(13,0,220),new DictWord(13,0,240),new DictWord(142,
					0,33),new DictWord(134,0,1107),new DictWord(134,0,929),new DictWord(135,0,1142),new DictWord(6,0,175),new DictWord(137,0,289),new DictWord(5,0,432),new DictWord(133
					,0,913),new DictWord(6,0,279),new DictWord(7,0,219),new DictWord(5,10,633),new DictWord(135,10,1323),new DictWord(7,0,785),new DictWord(7,10,359),new DictWord(8,10,
					243),new DictWord(140,10,175),new DictWord(139,0,595),new DictWord(132,10,105),new DictWord(8,11,398),new DictWord(9,11,681),new DictWord(139,11,632),new DictWord(
					140,0,80),new DictWord(5,0,931),new DictWord(134,0,1698),new DictWord(142,11,241),new DictWord(134,11,20),new DictWord(134,0,1323),new DictWord(11,0,526
				),new DictWord(11,0,939),new DictWord(141,0,290),new DictWord(5,0,774),new DictWord(6,0,780),new DictWord(6,0,1637),new DictWord(6,0,1686),new DictWord(6,0,1751),new DictWord(8
					,0,559),new DictWord(141,0,109),new DictWord(141,0,127),new DictWord(7,0,1167),new DictWord(11,0,934),new DictWord(13,0,391),new DictWord(17,0,76),new DictWord(135,
					11,709),new DictWord(135,0,963),new DictWord(6,0,260),new DictWord(135,0,1484),new DictWord(134,0,573),new DictWord(4,10,758),new DictWord(139,11,941),new DictWord(
					135,10,1649),new DictWord(145,11,36),new DictWord(4,0,292),new DictWord(137,0,580),new DictWord(4,0,736),new DictWord(5,0,871),new DictWord(6,0,1689),new DictWord(
					135,0,1944),new DictWord(7,11,945),new DictWord(11,11,713),new DictWord(139,11,744),new DictWord(134,0,1164),new DictWord(135,11,937),new DictWord(6,0,
					1922),new DictWord(9,0,982),new DictWord(15,0,173),new DictWord(15,0,178),new DictWord(15,0,200),new DictWord(18,0,189),new DictWord(18,0,207),new DictWord(21,0,47)
				,new DictWord(135,11,1652),new DictWord(7,0,1695),new DictWord(139,10,128),new DictWord(6,0,63),new DictWord(135,0,920),new DictWord(133,0,793),new DictWord(143,11,
					134),new DictWord(133,10,918),new DictWord(5,0,67),new DictWord(6,0,62),new DictWord(6,0,374),new DictWord(135,0,1391),new DictWord(9,0,790),new DictWord(12,0,47),new DictWord(
					4,11,579),new DictWord(5,11,226),new DictWord(5,11,323),new DictWord(135,11,960),new DictWord(10,11,784),new DictWord(141,11,191),new DictWord(4,0,391),
				new DictWord(135,0,1169),new DictWord(137,0,443),new DictWord(13,11,232),new DictWord(146,11,35),new DictWord(132,10,340),new DictWord(132,0,271),new DictWord(137,
					11,313),new DictWord(5,11,973),new DictWord(137,11,659),new DictWord(134,0,1140),new DictWord(6,11,135),new DictWord(135,11,1176),new DictWord(4,0,253),
				new DictWord(5,0,544),new DictWord(7,0,300),new DictWord(137,0,340),new DictWord(7,0,897),new DictWord(5,10,985),new DictWord(7,10,509),new DictWord(145,10,96),new DictWord(138
					,11,735),new DictWord(135,10,1919),new DictWord(138,0,890),new DictWord(5,0,818),new DictWord(134,0,1122),new DictWord(5,0,53),new DictWord(5,0,541),new DictWord(6,
					0,94),new DictWord(6,0,499),new DictWord(7,0,230),new DictWord(139,0,321),new DictWord(4,0,920),new DictWord(5,0,25),new DictWord(5,0,790),new DictWord(6,0,457),new DictWord(7,
					0,853),new DictWord(8,0,788),new DictWord(142,11,31),new DictWord(132,10,247),new DictWord(135,11,314),new DictWord(132,0,468),new DictWord(7,0,243),new DictWord(6,
					10,337),new DictWord(7,10,494),new DictWord(8,10,27),new DictWord(8,10,599),new DictWord(138,10,153),new DictWord(4,10,184),new DictWord(5,10,390),new DictWord(7,10
					,618),new DictWord(7,10,1456),new DictWord(139,10,710),new DictWord(134,0,870),new DictWord(134,0,1238),new DictWord(134,0,1765),new DictWord(10,0,853),
				new DictWord(10,0,943),new DictWord(14,0,437),new DictWord(14,0,439),new DictWord(14,0,443),new DictWord(14,0,446),new DictWord(14,0,452),new DictWord(14,0,469),new DictWord(14
					,0,471),new DictWord(14,0,473),new DictWord(16,0,93),new DictWord(16,0,102),new DictWord(16,0,110),new DictWord(148,0,121),new DictWord(4,0,605),new DictWord(7,0,
					518),new DictWord(7,0,1282),new DictWord(7,0,1918),new DictWord(10,0,180),new DictWord(139,0,218),new DictWord(133,0,822),new DictWord(4,0,634),new DictWord(11,0,
					916),new DictWord(142,0,419),new DictWord(6,11,281),new DictWord(7,11,6),new DictWord(8,11,282),new DictWord(8,11,480),new DictWord(8,11,499),new DictWord(9,11,198)
				,new DictWord(10,11,143),new DictWord(10,11,169),new DictWord(10,11,211),new DictWord(10,11,417),new DictWord(10,11,574),new DictWord(11,11,147),new DictWord(11,11,
					395),new DictWord(12,11,75),new DictWord(12,11,407),new DictWord(12,11,608),new DictWord(13,11,500),new DictWord(142,11,251),new DictWord(134,0,898),new DictWord(6,
					0,36),new DictWord(7,0,658),new DictWord(8,0,454),new DictWord(150,11,48),new DictWord(133,11,674),new DictWord(135,11,1776),new DictWord(4,11,419),new DictWord(10,
					10,227),new DictWord(11,10,497),new DictWord(11,10,709),new DictWord(140,10,415),new DictWord(6,10,360),new DictWord(7,10,1664),new DictWord(136,10,478)
				,new DictWord(137,0,806),new DictWord(12,11,508),new DictWord(14,11,102),new DictWord(14,11,226),new DictWord(144,11,57),new DictWord(135,11,1123),new DictWord(4,11
					,138),new DictWord(7,11,1012),new DictWord(7,11,1280),new DictWord(137,11,76),new DictWord(5,11,29),new DictWord(140,11,638),new DictWord(136,10,699),new DictWord(
					134,0,1326),new DictWord(132,0,104),new DictWord(135,11,735),new DictWord(132,10,739),new DictWord(134,0,1331),new DictWord(7,0,260),new DictWord(135,11
					,260),new DictWord(135,11,1063),new DictWord(7,0,45),new DictWord(9,0,542),new DictWord(9,0,566),new DictWord(10,0,728),new DictWord(137,10,869),new DictWord(4,10,
					67),new DictWord(5,10,422),new DictWord(7,10,1037),new DictWord(7,10,1289),new DictWord(7,10,1555),new DictWord(9,10,741),new DictWord(145,10,108),new DictWord(139,
					0,263),new DictWord(134,0,1516),new DictWord(14,0,146),new DictWord(15,0,42),new DictWord(16,0,23),new DictWord(17,0,86),new DictWord(146,0,17),new DictWord(138,0,
					468),new DictWord(136,0,1005),new DictWord(4,11,17),new DictWord(5,11,23),new DictWord(7,11,995),new DictWord(11,11,383),new DictWord(11,11,437),new DictWord(12,11,
					460),new DictWord(140,11,532),new DictWord(7,0,87),new DictWord(142,0,288),new DictWord(138,10,96),new DictWord(135,11,626),new DictWord(144,10,26),new DictWord(7,0
					,988),new DictWord(7,0,1939),new DictWord(9,0,64),new DictWord(9,0,502),new DictWord(12,0,22),new DictWord(12,0,34),new DictWord(13,0,12),new DictWord(13,0,234),new DictWord(
					147,0,77),new DictWord(13,0,133),new DictWord(8,10,203),new DictWord(11,10,823),new DictWord(11,10,846),new DictWord(12,10,482),new DictWord(13,10,277),
				new DictWord(13,10,302),new DictWord(13,10,464),new DictWord(14,10,205),new DictWord(142,10,221),new DictWord(4,10,449),new DictWord(133,10,718),new DictWord(135,0,
					141),new DictWord(6,0,1842),new DictWord(136,0,872),new DictWord(8,11,70),new DictWord(12,11,171),new DictWord(141,11,272),new DictWord(4,10,355),new DictWord(6,10,
					311),new DictWord(9,10,256),new DictWord(138,10,404),new DictWord(132,0,619),new DictWord(137,0,261),new DictWord(10,11,233),new DictWord(10,10,758),new DictWord(
					139,11,76),new DictWord(5,0,246),new DictWord(8,0,189),new DictWord(9,0,355),new DictWord(9,0,512),new DictWord(10,0,124),new DictWord(10,0,453),new DictWord(11,0,
					143),new DictWord(11,0,416),new DictWord(11,0,859),new DictWord(141,0,341),new DictWord(134,11,442),new DictWord(133,10,827),new DictWord(5,10,64),new DictWord(140,
					10,581),new DictWord(4,10,442),new DictWord(7,10,1047),new DictWord(7,10,1352),new DictWord(135,10,1643),new DictWord(134,11,1709),new DictWord(5,0,678)
				,new DictWord(6,0,305),new DictWord(7,0,775),new DictWord(7,0,1065),new DictWord(133,10,977),new DictWord(11,11,69),new DictWord(12,11,105),new DictWord(12,11,117),
				new DictWord(13,11,213),new DictWord(14,11,13),new DictWord(14,11,62),new DictWord(14,11,177),new DictWord(14,11,421),new DictWord(15,11,19),new DictWord(146,11,141
				),new DictWord(137,11,309),new DictWord(5,0,35),new DictWord(7,0,862),new DictWord(7,0,1886),new DictWord(138,0,179),new DictWord(136,0,285),new DictWord(132,0,517)
				,new DictWord(7,11,976),new DictWord(9,11,146),new DictWord(10,11,206),new DictWord(10,11,596),new DictWord(13,11,218),new DictWord(142,11,153),new DictWord(132,10,
					254),new DictWord(6,0,214),new DictWord(12,0,540),new DictWord(4,10,275),new DictWord(7,10,1219),new DictWord(140,10,376),new DictWord(8,0,667),new DictWord(11,0,
					403),new DictWord(146,0,83),new DictWord(12,0,74),new DictWord(10,11,648),new DictWord(11,11,671),new DictWord(143,11,46),new DictWord(135,0,125),new DictWord(134,
					10,1753),new DictWord(133,0,761),new DictWord(6,0,912),new DictWord(4,11,518),new DictWord(6,10,369),new DictWord(6,10,502),new DictWord(7,10,1036),new DictWord(7,
					11,1136),new DictWord(8,10,348),new DictWord(9,10,452),new DictWord(10,10,26),new DictWord(11,10,224),new DictWord(11,10,387),new DictWord(11,10,772),new DictWord(
					12,10,95),new DictWord(12,10,629),new DictWord(13,10,195),new DictWord(13,10,207),new DictWord(13,10,241),new DictWord(14,10,260),new DictWord(14,10,270
				),new DictWord(143,10,140),new DictWord(10,0,131),new DictWord(140,0,72),new DictWord(132,10,269),new DictWord(5,10,480),new DictWord(7,10,532),new DictWord(7,10,
					1197),new DictWord(7,10,1358),new DictWord(8,10,291),new DictWord(11,10,349),new DictWord(142,10,396),new DictWord(8,11,689),new DictWord(137,11,863),new DictWord(8
					,0,333),new DictWord(138,0,182),new DictWord(4,11,18),new DictWord(7,11,145),new DictWord(7,11,444),new DictWord(7,11,1278),new DictWord(8,11,49),new DictWord(8,11,
					400),new DictWord(9,11,71),new DictWord(9,11,250),new DictWord(10,11,459),new DictWord(12,11,160),new DictWord(144,11,24),new DictWord(14,11,35),new DictWord(142,11
					,191),new DictWord(135,11,1864),new DictWord(135,0,1338),new DictWord(148,10,15),new DictWord(14,0,94),new DictWord(15,0,65),new DictWord(16,0,4),new DictWord(16,0,
					77),new DictWord(16,0,80),new DictWord(145,0,5),new DictWord(12,11,82),new DictWord(143,11,36),new DictWord(133,11,1010),new DictWord(133,0,449),new DictWord(133,0,
					646),new DictWord(7,0,86),new DictWord(8,0,103),new DictWord(135,10,657),new DictWord(7,0,2028),new DictWord(138,0,641),new DictWord(136,10,533),new DictWord(134,0,
					1),new DictWord(139,11,970),new DictWord(5,11,87),new DictWord(7,11,313),new DictWord(7,11,1103),new DictWord(10,11,112),new DictWord(10,11,582),new DictWord(11,11,
					389),new DictWord(11,11,813),new DictWord(12,11,385),new DictWord(13,11,286),new DictWord(14,11,124),new DictWord(146,11,108),new DictWord(6,0,869),new DictWord(132
					,11,267),new DictWord(6,0,277),new DictWord(7,0,1274),new DictWord(7,0,1386),new DictWord(146,0,87),new DictWord(6,0,187),new DictWord(7,0,39),new DictWord(7,0,1203
				),new DictWord(8,0,380),new DictWord(14,0,117),new DictWord(149,0,28),new DictWord(4,10,211),new DictWord(4,10,332),new DictWord(5,10,335),new DictWord(6,10,238),new DictWord(7
					,10,269),new DictWord(7,10,811),new DictWord(7,10,1797),new DictWord(8,10,836),new DictWord(9,10,507),new DictWord(141,10,242),new DictWord(4,0,785),new DictWord(5,
					0,368),new DictWord(6,0,297),new DictWord(7,0,793),new DictWord(139,0,938),new DictWord(7,0,464),new DictWord(8,0,558),new DictWord(11,0,105),new DictWord(12,0,231)
				,new DictWord(14,0,386),new DictWord(15,0,102),new DictWord(148,0,75),new DictWord(133,10,1009),new DictWord(8,0,877),new DictWord(140,0,731),new DictWord(139,11,
					289),new DictWord(10,11,249),new DictWord(139,11,209),new DictWord(132,11,561),new DictWord(134,0,1608),new DictWord(132,11,760),new DictWord(134,0,1429
				),new DictWord(9,11,154),new DictWord(140,11,485),new DictWord(5,10,228),new DictWord(6,10,203),new DictWord(7,10,156),new DictWord(8,10,347),new DictWord(137,10,
					265),new DictWord(7,0,1010),new DictWord(11,0,733),new DictWord(11,0,759),new DictWord(13,0,34),new DictWord(14,0,427),new DictWord(146,0,45),new DictWord(7,10,1131
				),new DictWord(135,10,1468),new DictWord(136,11,255),new DictWord(7,0,1656),new DictWord(9,0,369),new DictWord(10,0,338),new DictWord(10,0,490),new DictWord(11,0,
					154),new DictWord(11,0,545),new DictWord(11,0,775),new DictWord(13,0,77),new DictWord(141,0,274),new DictWord(133,11,621),new DictWord(134,0,1038),new DictWord(4,11
					,368),new DictWord(135,11,641),new DictWord(6,0,2010),new DictWord(8,0,979),new DictWord(8,0,985),new DictWord(10,0,951),new DictWord(138,0,1011),new DictWord(134,0
					,1005),new DictWord(19,0,121),new DictWord(5,10,291),new DictWord(5,10,318),new DictWord(7,10,765),new DictWord(9,10,389),new DictWord(140,10,548),new DictWord(5,0,
					20),new DictWord(6,0,298),new DictWord(7,0,659),new DictWord(137,0,219),new DictWord(7,0,1440),new DictWord(11,0,854),new DictWord(11,0,872),new DictWord(11,0,921),
				new DictWord(12,0,551),new DictWord(13,0,472),new DictWord(142,0,367),new DictWord(5,0,490),new DictWord(6,0,615),new DictWord(6,0,620),new DictWord(135,0,683),new DictWord(6,0
					,1070),new DictWord(134,0,1597),new DictWord(139,0,522),new DictWord(132,0,439),new DictWord(136,0,669),new DictWord(6,0,766),new DictWord(6,0,1143),new DictWord(6,
					0,1245),new DictWord(10,10,525),new DictWord(139,10,82),new DictWord(9,11,92),new DictWord(147,11,91),new DictWord(6,0,668),new DictWord(134,0,1218),new DictWord(6,
					11,525),new DictWord(9,11,876),new DictWord(140,11,284),new DictWord(132,0,233),new DictWord(136,0,547),new DictWord(132,10,422),new DictWord(5,10,355),
				new DictWord(145,10,0),new DictWord(6,11,300),new DictWord(135,11,1515),new DictWord(4,0,482),new DictWord(137,10,905),new DictWord(4,0,886),new DictWord(7,0,346),new DictWord(
					133,11,594),new DictWord(133,10,865),new DictWord(5,10,914),new DictWord(134,10,1625),new DictWord(135,0,334),new DictWord(5,0,795),new DictWord(6,0,
					1741),new DictWord(133,10,234),new DictWord(135,10,1383),new DictWord(6,11,1641),new DictWord(136,11,820),new DictWord(135,0,371),new DictWord(7,11,1313
				),new DictWord(138,11,660),new DictWord(135,10,1312),new DictWord(135,0,622),new DictWord(7,0,625),new DictWord(135,0,1750),new DictWord(135,0,339),new DictWord(4,0
					,203),new DictWord(135,0,1936),new DictWord(15,0,29),new DictWord(16,0,38),new DictWord(15,11,29),new DictWord(144,11,38),new DictWord(5,0,338),new DictWord(135,0,
					1256),new DictWord(135,10,1493),new DictWord(10,0,130),new DictWord(6,10,421),new DictWord(7,10,61),new DictWord(7,10,1540),new DictWord(138,10,501),new DictWord(6,
					11,389),new DictWord(7,11,149),new DictWord(9,11,142),new DictWord(138,11,94),new DictWord(137,10,341),new DictWord(11,0,678),new DictWord(12,0,307),new DictWord(
					142,10,98),new DictWord(6,11,8),new DictWord(7,11,1881),new DictWord(136,11,91),new DictWord(135,0,2044),new DictWord(6,0,770),new DictWord(6,0,802),new DictWord(6,
					0,812),new DictWord(7,0,311),new DictWord(9,0,308),new DictWord(12,0,255),new DictWord(6,10,102),new DictWord(7,10,72),new DictWord(15,10,142),new DictWord(147,10,
					67),new DictWord(151,10,30),new DictWord(135,10,823),new DictWord(135,0,1266),new DictWord(135,11,1746),new DictWord(135,10,1870),new DictWord(4,0,400),
				new DictWord(5,0,267),new DictWord(135,0,232),new DictWord(7,11,24),new DictWord(11,11,542),new DictWord(139,11,852),new DictWord(135,11,1739),new DictWord(4,11,503
				),new DictWord(135,11,1661),new DictWord(5,11,130),new DictWord(7,11,1314),new DictWord(9,11,610),new DictWord(10,11,718),new DictWord(11,11,601),new DictWord(11,11
					,819),new DictWord(11,11,946),new DictWord(140,11,536),new DictWord(10,11,149),new DictWord(11,11,280),new DictWord(142,11,336),new DictWord(7,0,739),new DictWord(
					11,0,690),new DictWord(7,11,1946),new DictWord(8,10,48),new DictWord(8,10,88),new DictWord(8,10,582),new DictWord(8,10,681),new DictWord(9,10,373),new DictWord(9,10
					,864),new DictWord(11,10,157),new DictWord(11,10,843),new DictWord(148,10,27),new DictWord(134,0,990),new DictWord(4,10,88),new DictWord(5,10,137),new DictWord(5,10
					,174),new DictWord(5,10,777),new DictWord(6,10,1664),new DictWord(6,10,1725),new DictWord(7,10,77),new DictWord(7,10,426),new DictWord(7,10,1317),new DictWord(7,10,
					1355),new DictWord(8,10,126),new DictWord(8,10,563),new DictWord(9,10,523),new DictWord(9,10,750),new DictWord(10,10,310),new DictWord(10,10,836),new DictWord(11,10
					,42),new DictWord(11,10,318),new DictWord(11,10,731),new DictWord(12,10,68),new DictWord(12,10,92),new DictWord(12,10,507),new DictWord(12,10,692),new DictWord(13,
					10,81),new DictWord(13,10,238),new DictWord(13,10,374),new DictWord(14,10,436),new DictWord(18,10,138),new DictWord(19,10,78),new DictWord(19,10,111),new DictWord(
					20,10,55),new DictWord(20,10,77),new DictWord(148,10,92),new DictWord(141,10,418),new DictWord(7,0,1831),new DictWord(132,10,938),new DictWord(6,0,776),
				new DictWord(134,0,915),new DictWord(138,10,351),new DictWord(5,11,348),new DictWord(6,11,522),new DictWord(6,10,1668),new DictWord(7,10,1499),new DictWord(8,10,117
				),new DictWord(9,10,314),new DictWord(138,10,174),new DictWord(135,10,707),new DictWord(132,0,613),new DictWord(133,10,403),new DictWord(132,11,392),new DictWord(5,
					11,433),new DictWord(9,11,633),new DictWord(139,11,629),new DictWord(133,0,763),new DictWord(132,0,878),new DictWord(132,0,977),new DictWord(132,0,100),
				new DictWord(6,0,463),new DictWord(4,10,44),new DictWord(5,10,311),new DictWord(7,10,639),new DictWord(7,10,762),new DictWord(7,10,1827),new DictWord(9,10,8),new DictWord(9,10,
					462),new DictWord(148,10,83),new DictWord(134,11,234),new DictWord(4,10,346),new DictWord(7,10,115),new DictWord(9,10,180),new DictWord(9,10,456),new DictWord(138,
					10,363),new DictWord(5,0,362),new DictWord(5,0,443),new DictWord(6,0,318),new DictWord(7,0,1019),new DictWord(139,0,623),new DictWord(5,0,463),new DictWord(8,0,296)
				,new DictWord(7,11,140),new DictWord(7,11,1950),new DictWord(8,11,680),new DictWord(11,11,817),new DictWord(147,11,88),new DictWord(7,11,1222),new DictWord(138,11,
					386),new DictWord(142,0,137),new DictWord(132,0,454),new DictWord(7,0,1914),new DictWord(6,11,5),new DictWord(7,10,1051),new DictWord(9,10,545),new DictWord(11,11,
					249),new DictWord(12,11,313),new DictWord(16,11,66),new DictWord(145,11,26),new DictWord(135,0,1527),new DictWord(145,0,58),new DictWord(148,11,59),new DictWord(5,0
					,48),new DictWord(5,0,404),new DictWord(6,0,557),new DictWord(7,0,458),new DictWord(8,0,597),new DictWord(10,0,455),new DictWord(10,0,606),new DictWord(11,0,49),new DictWord(11
					,0,548),new DictWord(12,0,476),new DictWord(13,0,18),new DictWord(141,0,450),new DictWord(5,11,963),new DictWord(134,11,1773),new DictWord(133,0,729),new DictWord(
					138,11,586),new DictWord(5,0,442),new DictWord(135,0,1984),new DictWord(134,0,449),new DictWord(144,0,40),new DictWord(4,0,853),new DictWord(7,11,180),new DictWord(
					8,11,509),new DictWord(136,11,792),new DictWord(6,10,185),new DictWord(7,10,1899),new DictWord(9,10,875),new DictWord(139,10,673),new DictWord(134,11,
					524),new DictWord(12,0,227),new DictWord(4,10,327),new DictWord(5,10,478),new DictWord(7,10,1332),new DictWord(136,10,753),new DictWord(6,0,1491),new DictWord(5,10,
					1020),new DictWord(133,10,1022),new DictWord(4,10,103),new DictWord(133,10,401),new DictWord(132,11,931),new DictWord(4,10,499),new DictWord(135,10,1421
				),new DictWord(5,0,55),new DictWord(7,0,376),new DictWord(140,0,161),new DictWord(133,0,450),new DictWord(6,0,1174),new DictWord(134,0,1562),new DictWord(10,0,62),new DictWord(
					13,0,400),new DictWord(135,11,1837),new DictWord(140,0,207),new DictWord(135,0,869),new DictWord(4,11,773),new DictWord(5,11,618),new DictWord(137,11,
					756),new DictWord(132,10,96),new DictWord(4,0,213),new DictWord(7,0,223),new DictWord(8,0,80),new DictWord(135,10,968),new DictWord(4,11,90),new DictWord(5,11,337),
				new DictWord(5,11,545),new DictWord(7,11,754),new DictWord(9,11,186),new DictWord(10,11,72),new DictWord(10,11,782),new DictWord(11,11,513),new DictWord(11,11,577),
				new DictWord(11,11,610),new DictWord(11,11,889),new DictWord(11,11,961),new DictWord(12,11,354),new DictWord(12,11,362),new DictWord(12,11,461),new DictWord(12,11,
					595),new DictWord(13,11,79),new DictWord(143,11,121),new DictWord(7,0,381),new DictWord(7,0,806),new DictWord(7,0,820),new DictWord(8,0,354),new DictWord(8,0,437),new DictWord(
					8,0,787),new DictWord(9,0,657),new DictWord(10,0,58),new DictWord(10,0,339),new DictWord(10,0,749),new DictWord(11,0,914),new DictWord(12,0,162),new DictWord(13,0,
					75),new DictWord(14,0,106),new DictWord(14,0,198),new DictWord(14,0,320),new DictWord(14,0,413),new DictWord(146,0,43),new DictWord(136,0,747),new DictWord(136,0,
					954),new DictWord(134,0,1073),new DictWord(135,0,556),new DictWord(7,11,151),new DictWord(9,11,329),new DictWord(139,11,254),new DictWord(5,0,692),new DictWord(134,
					0,1395),new DictWord(6,10,563),new DictWord(137,10,224),new DictWord(134,0,191),new DictWord(132,0,804),new DictWord(9,11,187),new DictWord(10,11,36),new DictWord(
					17,11,44),new DictWord(146,11,64),new DictWord(7,11,165),new DictWord(7,11,919),new DictWord(136,11,517),new DictWord(4,11,506),new DictWord(5,11,295),new DictWord(
					7,11,1680),new DictWord(15,11,14),new DictWord(144,11,5),new DictWord(4,0,706),new DictWord(6,0,162),new DictWord(7,0,1960),new DictWord(136,0,831),new DictWord(135
					,11,1376),new DictWord(7,11,987),new DictWord(9,11,688),new DictWord(10,11,522),new DictWord(11,11,788),new DictWord(140,11,566),new DictWord(150,0,35),
				new DictWord(138,0,426),new DictWord(135,0,1235),new DictWord(135,11,1741),new DictWord(7,11,389),new DictWord(7,11,700),new DictWord(7,11,940),new DictWord(8,11,
					514),new DictWord(9,11,116),new DictWord(9,11,535),new DictWord(10,11,118),new DictWord(11,11,107),new DictWord(11,11,148),new DictWord(11,11,922),new DictWord(12,
					11,254),new DictWord(12,11,421),new DictWord(142,11,238),new DictWord(134,0,1234),new DictWord(132,11,743),new DictWord(4,10,910),new DictWord(5,10,832)
				,new DictWord(135,11,1335),new DictWord(141,0,96),new DictWord(135,11,185),new DictWord(146,0,149),new DictWord(4,0,204),new DictWord(137,0,902),new DictWord(4,11,
					784),new DictWord(133,11,745),new DictWord(136,0,833),new DictWord(136,0,949),new DictWord(7,0,366),new DictWord(9,0,287),new DictWord(12,0,199),new DictWord(12,0,
					556),new DictWord(12,0,577),new DictWord(5,11,81),new DictWord(7,11,146),new DictWord(7,11,1342),new DictWord(7,11,1446),new DictWord(8,11,53),new DictWord(8,11,561
				),new DictWord(8,11,694),new DictWord(8,11,754),new DictWord(9,11,97),new DictWord(9,11,115),new DictWord(9,11,894),new DictWord(10,11,462),new DictWord(10,11,813),
				new DictWord(11,11,230),new DictWord(11,11,657),new DictWord(11,11,699),new DictWord(11,11,748),new DictWord(12,11,119),new DictWord(12,11,200),new DictWord(12,11,
					283),new DictWord(14,11,273),new DictWord(145,11,15),new DictWord(5,11,408),new DictWord(137,11,747),new DictWord(9,11,498),new DictWord(140,11,181),new DictWord(6,
					0,2020),new DictWord(136,0,992),new DictWord(5,0,356),new DictWord(135,0,224),new DictWord(134,0,784),new DictWord(7,0,630),new DictWord(9,0,567),new DictWord(11,0,
					150),new DictWord(11,0,444),new DictWord(13,0,119),new DictWord(8,10,528),new DictWord(137,10,348),new DictWord(134,0,539),new DictWord(4,10,20),new DictWord(133,10
					,616),new DictWord(142,0,27),new DictWord(7,11,30),new DictWord(8,11,86),new DictWord(8,11,315),new DictWord(8,11,700),new DictWord(9,11,576),new DictWord(9,11,858)
				,new DictWord(11,11,310),new DictWord(11,11,888),new DictWord(11,11,904),new DictWord(12,11,361),new DictWord(141,11,248),new DictWord(138,11,839),new DictWord(134,
					0,755),new DictWord(134,0,1063),new DictWord(7,10,1091),new DictWord(135,10,1765),new DictWord(134,11,428),new DictWord(7,11,524),new DictWord(8,11,169)
				,new DictWord(8,11,234),new DictWord(9,11,480),new DictWord(138,11,646),new DictWord(139,0,814),new DictWord(7,11,1462),new DictWord(139,11,659),new DictWord(4,10,
					26),new DictWord(5,10,429),new DictWord(6,10,245),new DictWord(7,10,704),new DictWord(7,10,1379),new DictWord(135,10,1474),new DictWord(7,11,1205),new DictWord(138,
					11,637),new DictWord(139,11,803),new DictWord(132,10,621),new DictWord(136,0,987),new DictWord(4,11,266),new DictWord(8,11,4),new DictWord(9,11,39),new DictWord(10,
					11,166),new DictWord(11,11,918),new DictWord(12,11,635),new DictWord(20,11,10),new DictWord(22,11,27),new DictWord(150,11,43),new DictWord(4,0,235),new DictWord(135
					,0,255),new DictWord(4,0,194),new DictWord(5,0,584),new DictWord(6,0,384),new DictWord(7,0,583),new DictWord(10,0,761),new DictWord(11,0,760),new DictWord(139,0,851
				),new DictWord(133,10,542),new DictWord(134,0,1086),new DictWord(133,10,868),new DictWord(8,0,1016),new DictWord(136,0,1018),new DictWord(7,0,1396),new DictWord(7,
					11,1396),new DictWord(136,10,433),new DictWord(135,10,1495),new DictWord(138,10,215),new DictWord(141,10,124),new DictWord(7,11,157),new DictWord(8,11,
					279),new DictWord(9,11,759),new DictWord(16,11,31),new DictWord(16,11,39),new DictWord(16,11,75),new DictWord(18,11,24),new DictWord(20,11,42),new DictWord(152,11,1
				),new DictWord(5,0,562),new DictWord(134,11,604),new DictWord(134,0,913),new DictWord(5,0,191),new DictWord(137,0,271),new DictWord(4,0,470),new DictWord(6,0,153),new DictWord(
					7,0,1503),new DictWord(7,0,1923),new DictWord(10,0,701),new DictWord(11,0,132),new DictWord(11,0,227),new DictWord(11,0,320),new DictWord(11,0,436),new DictWord(11,
					0,525),new DictWord(11,0,855),new DictWord(11,0,873),new DictWord(12,0,41),new DictWord(12,0,286),new DictWord(13,0,103),new DictWord(13,0,284),new DictWord(14,0,
					255),new DictWord(14,0,262),new DictWord(15,0,117),new DictWord(143,0,127),new DictWord(7,0,475),new DictWord(12,0,45),new DictWord(147,10,112),new DictWord(132,11,
					567),new DictWord(137,11,859),new DictWord(6,0,713),new DictWord(6,0,969),new DictWord(6,0,1290),new DictWord(134,0,1551),new DictWord(133,0,327),new DictWord(6,0,
					552),new DictWord(6,0,1292),new DictWord(7,0,1754),new DictWord(137,0,604),new DictWord(4,0,223),new DictWord(6,0,359),new DictWord(11,0,3),new DictWord(13,0,108),new DictWord(
					14,0,89),new DictWord(16,0,22),new DictWord(5,11,762),new DictWord(7,11,1880),new DictWord(9,11,680),new DictWord(139,11,798),new DictWord(5,0,80),new DictWord(6,0,
					405),new DictWord(7,0,403),new DictWord(7,0,1502),new DictWord(8,0,456),new DictWord(9,0,487),new DictWord(9,0,853),new DictWord(9,0,889),new DictWord(10,0,309),new DictWord(11
					,0,721),new DictWord(11,0,994),new DictWord(12,0,430),new DictWord(141,0,165),new DictWord(133,11,298),new DictWord(132,10,647),new DictWord(134,0,2016)
				,new DictWord(18,10,10),new DictWord(146,11,10),new DictWord(4,0,453),new DictWord(5,0,887),new DictWord(6,0,535),new DictWord(8,0,6),new DictWord(8,0,543),new DictWord(136,0,
					826),new DictWord(136,0,975),new DictWord(10,0,961),new DictWord(138,0,962),new DictWord(138,10,220),new DictWord(6,0,1891),new DictWord(6,0,1893),new DictWord(9,0,
					916),new DictWord(9,0,965),new DictWord(9,0,972),new DictWord(12,0,801),new DictWord(12,0,859),new DictWord(12,0,883),new DictWord(15,0,226),new DictWord(149,0,51),
				new DictWord(132,10,109),new DictWord(135,11,267),new DictWord(7,11,92),new DictWord(7,11,182),new DictWord(8,11,453),new DictWord(9,11,204),new DictWord(11,11,950)
				,new DictWord(12,11,94),new DictWord(12,11,644),new DictWord(16,11,20),new DictWord(16,11,70),new DictWord(16,11,90),new DictWord(147,11,55),new DictWord(134,10,
					1746),new DictWord(6,11,71),new DictWord(7,11,845),new DictWord(7,11,1308),new DictWord(8,11,160),new DictWord(137,11,318),new DictWord(5,0,101),new DictWord(6,0,88
				),new DictWord(7,0,263),new DictWord(7,0,628),new DictWord(7,0,1677),new DictWord(8,0,349),new DictWord(9,0,100),new DictWord(10,0,677),new DictWord(14,0,169),new DictWord(14,0
					,302),new DictWord(14,0,313),new DictWord(15,0,48),new DictWord(15,0,84),new DictWord(7,11,237),new DictWord(8,11,664),new DictWord(9,11,42),new DictWord(9,11,266),
				new DictWord(9,11,380),new DictWord(9,11,645),new DictWord(10,11,177),new DictWord(138,11,276),new DictWord(138,11,69),new DictWord(4,0,310),new DictWord(7,0,708),new DictWord(
					7,0,996),new DictWord(9,0,795),new DictWord(10,0,390),new DictWord(10,0,733),new DictWord(11,0,451),new DictWord(12,0,249),new DictWord(14,0,115),new DictWord(14,0,
					286),new DictWord(143,0,100),new DictWord(5,0,587),new DictWord(4,10,40),new DictWord(10,10,67),new DictWord(11,10,117),new DictWord(11,10,768),new DictWord(139,10,
					935),new DictWord(6,0,1942),new DictWord(7,0,512),new DictWord(136,0,983),new DictWord(7,10,992),new DictWord(8,10,301),new DictWord(9,10,722),new DictWord(12,10,63
				),new DictWord(13,10,29),new DictWord(14,10,161),new DictWord(143,10,18),new DictWord(136,11,76),new DictWord(139,10,923),new DictWord(134,0,645),new DictWord(134,0
					,851),new DictWord(4,0,498),new DictWord(132,11,293),new DictWord(7,0,217),new DictWord(8,0,140),new DictWord(10,0,610),new DictWord(14,11,352),new DictWord(17,11,
					53),new DictWord(18,11,146),new DictWord(18,11,152),new DictWord(19,11,11),new DictWord(150,11,54),new DictWord(134,0,1448),new DictWord(138,11,841),new DictWord(
					133,0,905),new DictWord(4,11,605),new DictWord(7,11,518),new DictWord(7,11,1282),new DictWord(7,11,1918),new DictWord(10,11,180),new DictWord(139,11,218
				),new DictWord(139,11,917),new DictWord(135,10,825),new DictWord(140,10,328),new DictWord(4,0,456),new DictWord(7,0,105),new DictWord(7,0,358),new DictWord(7,0,1637
				),new DictWord(8,0,643),new DictWord(139,0,483),new DictWord(134,0,792),new DictWord(6,11,96),new DictWord(135,11,1426),new DictWord(137,11,691),new DictWord(4,11,
					651),new DictWord(133,11,289),new DictWord(7,11,688),new DictWord(8,11,35),new DictWord(9,11,511),new DictWord(10,11,767),new DictWord(147,11,118),new DictWord(150,
					0,56),new DictWord(5,0,243),new DictWord(5,0,535),new DictWord(6,10,204),new DictWord(10,10,320),new DictWord(10,10,583),new DictWord(13,10,502),new DictWord(14,10,
					72),new DictWord(14,10,274),new DictWord(14,10,312),new DictWord(14,10,344),new DictWord(15,10,159),new DictWord(16,10,62),new DictWord(16,10,69),new DictWord(17,10
					,30),new DictWord(18,10,42),new DictWord(18,10,53),new DictWord(18,10,84),new DictWord(18,10,140),new DictWord(19,10,68),new DictWord(19,10,85),new DictWord(20,10,5
				),new DictWord(20,10,45),new DictWord(20,10,101),new DictWord(22,10,7),new DictWord(150,10,20),new DictWord(4,10,558),new DictWord(6,10,390),new DictWord(7,10,162),
				new DictWord(7,10,689),new DictWord(9,10,360),new DictWord(138,10,653),new DictWord(146,11,23),new DictWord(135,0,1748),new DictWord(5,10,856),new DictWord(6,10,
					1672),new DictWord(6,10,1757),new DictWord(134,10,1781),new DictWord(5,0,539),new DictWord(5,0,754),new DictWord(6,0,876),new DictWord(132,11,704),new DictWord(135,
					11,1078),new DictWord(5,10,92),new DictWord(10,10,736),new DictWord(140,10,102),new DictWord(17,0,91),new DictWord(5,10,590),new DictWord(137,10,213),new DictWord(
					134,0,1565),new DictWord(6,0,91),new DictWord(135,0,435),new DictWord(4,0,939),new DictWord(140,0,792),new DictWord(134,0,1399),new DictWord(4,0,16),new DictWord(5,
					0,316),new DictWord(5,0,842),new DictWord(6,0,370),new DictWord(6,0,1778),new DictWord(8,0,166),new DictWord(11,0,812),new DictWord(12,0,206),new DictWord(12,0,351)
				,new DictWord(14,0,418),new DictWord(16,0,15),new DictWord(16,0,34),new DictWord(18,0,3),new DictWord(19,0,3),new DictWord(19,0,7),new DictWord(20,0,4),new DictWord(21,0,21),new DictWord(4
					,11,720),new DictWord(133,11,306),new DictWord(144,0,95),new DictWord(133,11,431),new DictWord(132,11,234),new DictWord(135,0,551),new DictWord(4,0,999)
				,new DictWord(6,0,1966),new DictWord(134,0,2042),new DictWord(7,0,619),new DictWord(10,0,547),new DictWord(11,0,122),new DictWord(12,0,601),new DictWord(15,0,7),new DictWord(
					148,0,20),new DictWord(5,11,464),new DictWord(6,11,236),new DictWord(7,11,276),new DictWord(7,11,696),new DictWord(7,11,914),new DictWord(7,11,1108),new DictWord(7,
					11,1448),new DictWord(9,11,15),new DictWord(9,11,564),new DictWord(10,11,14),new DictWord(12,11,565),new DictWord(13,11,449),new DictWord(14,11,53),new DictWord(15,
					11,13),new DictWord(16,11,64),new DictWord(145,11,41),new DictWord(6,0,884),new DictWord(6,0,1019),new DictWord(134,0,1150),new DictWord(6,11,1767),new DictWord(12,
					11,194),new DictWord(145,11,107),new DictWord(136,10,503),new DictWord(133,11,840),new DictWord(7,0,671),new DictWord(134,10,466),new DictWord(132,0,888
				),new DictWord(4,0,149),new DictWord(138,0,368),new DictWord(4,0,154),new DictWord(7,0,1134),new DictWord(136,0,105),new DictWord(135,0,983),new DictWord(9,11,642),
				new DictWord(11,11,236),new DictWord(142,11,193),new DictWord(4,0,31),new DictWord(6,0,429),new DictWord(7,0,962),new DictWord(9,0,458),new DictWord(139,0,691),new DictWord(6,0
					,643),new DictWord(134,0,1102),new DictWord(132,0,312),new DictWord(4,11,68),new DictWord(5,11,634),new DictWord(6,11,386),new DictWord(7,11,794),new DictWord(8,11,
					273),new DictWord(9,11,563),new DictWord(10,11,105),new DictWord(10,11,171),new DictWord(11,11,94),new DictWord(139,11,354),new DictWord(133,0,740),new DictWord(135
					,0,1642),new DictWord(4,11,95),new DictWord(7,11,416),new DictWord(8,11,211),new DictWord(139,11,830),new DictWord(132,0,236),new DictWord(138,10,241),new DictWord(
					7,11,731),new DictWord(13,11,20),new DictWord(143,11,11),new DictWord(5,0,836),new DictWord(5,0,857),new DictWord(6,0,1680),new DictWord(135,0,59),new DictWord(10,0
					,68),new DictWord(11,0,494),new DictWord(152,11,6),new DictWord(4,0,81),new DictWord(139,0,867),new DictWord(135,0,795),new DictWord(133,11,689),new DictWord(4,0,
					1001),new DictWord(5,0,282),new DictWord(6,0,1932),new DictWord(6,0,1977),new DictWord(6,0,1987),new DictWord(6,0,1992),new DictWord(8,0,650),new DictWord(8,0,919),
				new DictWord(8,0,920),new DictWord(8,0,923),new DictWord(8,0,926),new DictWord(8,0,927),new DictWord(8,0,931),new DictWord(8,0,939),new DictWord(8,0,947),new DictWord(8,0,956),
				new DictWord(8,0,997),new DictWord(9,0,907),new DictWord(10,0,950),new DictWord(10,0,953),new DictWord(10,0,954),new DictWord(10,0,956),new DictWord(10,0,958),new DictWord(10,0
					,959),new DictWord(10,0,964),new DictWord(10,0,970),new DictWord(10,0,972),new DictWord(10,0,973),new DictWord(10,0,975),new DictWord(10,0,976),new DictWord(10,0,
					980),new DictWord(10,0,981),new DictWord(10,0,984),new DictWord(10,0,988),new DictWord(10,0,990),new DictWord(10,0,995),new DictWord(10,0,999),new DictWord(10,0,
					1002),new DictWord(10,0,1003),new DictWord(10,0,1005),new DictWord(10,0,1006),new DictWord(10,0,1008),new DictWord(10,0,1009),new DictWord(10,0,1012),new DictWord(
					10,0,1014),new DictWord(10,0,1015),new DictWord(10,0,1019),new DictWord(10,0,1020),new DictWord(10,0,1022),new DictWord(12,0,959),new DictWord(12,0,961)
				,new DictWord(12,0,962),new DictWord(12,0,963),new DictWord(12,0,964),new DictWord(12,0,965),new DictWord(12,0,967),new DictWord(12,0,968),new DictWord(12,0,969),new DictWord(
					12,0,970),new DictWord(12,0,971),new DictWord(12,0,972),new DictWord(12,0,973),new DictWord(12,0,974),new DictWord(12,0,975),new DictWord(12,0,976),new DictWord(12,
					0,977),new DictWord(12,0,979),new DictWord(12,0,981),new DictWord(12,0,982),new DictWord(12,0,983),new DictWord(12,0,984),new DictWord(12,0,985),new DictWord(12,0,
					986),new DictWord(12,0,987),new DictWord(12,0,989),new DictWord(12,0,990),new DictWord(12,0,992),new DictWord(12,0,993),new DictWord(12,0,995),new DictWord(12,0,998
				),new DictWord(12,0,999),new DictWord(12,0,1000),new DictWord(12,0,1001),new DictWord(12,0,1002),new DictWord(12,0,1004),new DictWord(12,0,1005),new DictWord(12,0,
					1006),new DictWord(12,0,1007),new DictWord(12,0,1008),new DictWord(12,0,1009),new DictWord(12,0,1010),new DictWord(12,0,1011),new DictWord(12,0,1012),new DictWord(
					12,0,1014),new DictWord(12,0,1015),new DictWord(12,0,1016),new DictWord(12,0,1017),new DictWord(12,0,1018),new DictWord(12,0,1019),new DictWord(12,0,
					1022),new DictWord(12,0,1023),new DictWord(14,0,475),new DictWord(14,0,477),new DictWord(14,0,478),new DictWord(14,0,479),new DictWord(14,0,480),new DictWord(14,0,
					482),new DictWord(14,0,483),new DictWord(14,0,484),new DictWord(14,0,485),new DictWord(14,0,486),new DictWord(14,0,487),new DictWord(14,0,488),new DictWord(14,0,489
				),new DictWord(14,0,490),new DictWord(14,0,491),new DictWord(14,0,492),new DictWord(14,0,493),new DictWord(14,0,494),new DictWord(14,0,495),new DictWord(14,0,496),new DictWord(
					14,0,497),new DictWord(14,0,498),new DictWord(14,0,499),new DictWord(14,0,500),new DictWord(14,0,501),new DictWord(14,0,502),new DictWord(14,0,503),new DictWord(14,
					0,504),new DictWord(14,0,506),new DictWord(14,0,507),new DictWord(14,0,508),new DictWord(14,0,509),new DictWord(14,0,510),new DictWord(14,0,511),new DictWord(16,0,
					113),new DictWord(16,0,114),new DictWord(16,0,115),new DictWord(16,0,117),new DictWord(16,0,118),new DictWord(16,0,119),new DictWord(16,0,121),new DictWord(16,0,122
				),new DictWord(16,0,123),new DictWord(16,0,124),new DictWord(16,0,125),new DictWord(16,0,126),new DictWord(16,0,127),new DictWord(18,0,242),new DictWord(18,0,243),new DictWord(
					18,0,244),new DictWord(18,0,245),new DictWord(18,0,248),new DictWord(18,0,249),new DictWord(18,0,250),new DictWord(18,0,251),new DictWord(18,0,252),new DictWord(18,
					0,253),new DictWord(18,0,254),new DictWord(18,0,255),new DictWord(20,0,125),new DictWord(20,0,126),new DictWord(148,0,127),new DictWord(7,11,1717),new DictWord(7,11
					,1769),new DictWord(138,11,546),new DictWord(7,11,1127),new DictWord(7,11,1572),new DictWord(10,11,297),new DictWord(10,11,422),new DictWord(11,11,764),
				new DictWord(11,11,810),new DictWord(12,11,264),new DictWord(13,11,102),new DictWord(13,11,300),new DictWord(13,11,484),new DictWord(14,11,147),new DictWord(14,11,
					229),new DictWord(17,11,71),new DictWord(18,11,118),new DictWord(147,11,120),new DictWord(6,0,1148),new DictWord(134,0,1586),new DictWord(132,0,775),new DictWord(
					135,10,954),new DictWord(133,11,864),new DictWord(133,11,928),new DictWord(138,11,189),new DictWord(135,10,1958),new DictWord(6,10,549),new DictWord(8,
					10,34),new DictWord(8,10,283),new DictWord(9,10,165),new DictWord(138,10,475),new DictWord(5,10,652),new DictWord(5,10,701),new DictWord(135,10,449),new DictWord(
					135,11,695),new DictWord(4,10,655),new DictWord(7,10,850),new DictWord(17,10,75),new DictWord(146,10,137),new DictWord(140,11,682),new DictWord(133,11,
					523),new DictWord(8,0,970),new DictWord(136,10,670),new DictWord(136,11,555),new DictWord(7,11,76),new DictWord(8,11,44),new DictWord(9,11,884),new DictWord(10,11,
					580),new DictWord(11,11,399),new DictWord(11,11,894),new DictWord(15,11,122),new DictWord(18,11,144),new DictWord(147,11,61),new DictWord(6,10,159),new DictWord(6,
					10,364),new DictWord(7,10,516),new DictWord(7,10,1439),new DictWord(137,10,518),new DictWord(4,0,71),new DictWord(5,0,376),new DictWord(7,0,119),new DictWord(138,0,
					665),new DictWord(141,10,151),new DictWord(11,0,827),new DictWord(14,0,34),new DictWord(143,0,148),new DictWord(133,11,518),new DictWord(4,0,479),new DictWord(135,
					11,1787),new DictWord(135,11,1852),new DictWord(135,10,993),new DictWord(7,0,607),new DictWord(136,0,99),new DictWord(134,0,1960),new DictWord(132,0,793
				),new DictWord(4,0,41),new DictWord(5,0,74),new DictWord(7,0,1627),new DictWord(11,0,871),new DictWord(140,0,619),new DictWord(7,0,94),new DictWord(11,0,329),new DictWord(11,0,
					965),new DictWord(12,0,241),new DictWord(14,0,354),new DictWord(15,0,22),new DictWord(148,0,63),new DictWord(7,10,501),new DictWord(9,10,111),new DictWord(10,10,141
				),new DictWord(11,10,332),new DictWord(13,10,43),new DictWord(13,10,429),new DictWord(14,10,130),new DictWord(14,10,415),new DictWord(145,10,102),new DictWord(9,0,
					209),new DictWord(137,0,300),new DictWord(134,0,1497),new DictWord(138,11,255),new DictWord(4,11,934),new DictWord(5,11,138),new DictWord(136,11,610),new DictWord(
					133,0,98),new DictWord(6,0,1316),new DictWord(10,11,804),new DictWord(138,11,832),new DictWord(8,11,96),new DictWord(9,11,36),new DictWord(10,11,607),new DictWord(
					11,11,423),new DictWord(11,11,442),new DictWord(12,11,309),new DictWord(14,11,199),new DictWord(15,11,90),new DictWord(145,11,110),new DictWord(132,0,
					463),new DictWord(5,10,149),new DictWord(136,10,233),new DictWord(133,10,935),new DictWord(4,11,652),new DictWord(8,11,320),new DictWord(9,11,13),new DictWord(9,11,
					398),new DictWord(9,11,727),new DictWord(10,11,75),new DictWord(10,11,184),new DictWord(10,11,230),new DictWord(10,11,564),new DictWord(10,11,569),new DictWord(11,
					11,973),new DictWord(12,11,70),new DictWord(12,11,189),new DictWord(13,11,57),new DictWord(13,11,257),new DictWord(22,11,6),new DictWord(150,11,16),new DictWord(142
					,0,291),new DictWord(12,10,582),new DictWord(146,10,131),new DictWord(136,10,801),new DictWord(133,0,984),new DictWord(145,11,116),new DictWord(4,11,692
				),new DictWord(133,11,321),new DictWord(4,0,182),new DictWord(6,0,205),new DictWord(135,0,220),new DictWord(4,0,42),new DictWord(9,0,205),new DictWord(9,0,786),new DictWord(138
					,0,659),new DictWord(6,0,801),new DictWord(11,11,130),new DictWord(140,11,609),new DictWord(132,0,635),new DictWord(5,11,345),new DictWord(135,11,1016),
				new DictWord(139,0,533),new DictWord(132,0,371),new DictWord(4,0,272),new DictWord(135,0,836),new DictWord(6,0,1282),new DictWord(135,11,1100),new DictWord(5,0,825)
				,new DictWord(134,0,1640),new DictWord(135,11,1325),new DictWord(133,11,673),new DictWord(4,11,287),new DictWord(133,11,1018),new DictWord(135,0,357),new DictWord(6
					,0,467),new DictWord(137,0,879),new DictWord(7,0,317),new DictWord(135,0,569),new DictWord(6,0,924),new DictWord(134,0,1588),new DictWord(5,11,34),new DictWord(5,10
					,406),new DictWord(10,11,724),new DictWord(12,11,444),new DictWord(13,11,354),new DictWord(18,11,32),new DictWord(23,11,24),new DictWord(23,11,31),new DictWord(152,
					11,5),new DictWord(6,0,1795),new DictWord(6,0,1835),new DictWord(6,0,1836),new DictWord(6,0,1856),new DictWord(8,0,844),new DictWord(8,0,849),new DictWord(8,0,854),
				new DictWord(8,0,870),new DictWord(8,0,887),new DictWord(10,0,852),new DictWord(138,0,942),new DictWord(6,10,69),new DictWord(135,10,117),new DictWord(137,0,307),new DictWord(4
					,0,944),new DictWord(6,0,1799),new DictWord(6,0,1825),new DictWord(10,0,848),new DictWord(10,0,875),new DictWord(10,0,895),new DictWord(10,0,899),new DictWord(10,0,
					902),new DictWord(140,0,773),new DictWord(11,0,43),new DictWord(13,0,72),new DictWord(141,0,142),new DictWord(135,10,1830),new DictWord(134,11,382),new DictWord(4,
					10,432),new DictWord(135,10,824),new DictWord(132,11,329),new DictWord(7,0,1820),new DictWord(139,11,124),new DictWord(133,10,826),new DictWord(133,0,
					525),new DictWord(132,11,906),new DictWord(7,11,1940),new DictWord(136,11,366),new DictWord(138,11,10),new DictWord(4,11,123),new DictWord(4,11,649),new DictWord(5,
					11,605),new DictWord(7,11,1509),new DictWord(136,11,36),new DictWord(6,0,110),new DictWord(135,0,1681),new DictWord(133,0,493),new DictWord(133,11,767),
				new DictWord(4,0,174),new DictWord(135,0,911),new DictWord(138,11,786),new DictWord(8,0,417),new DictWord(137,0,782),new DictWord(133,10,1000),new DictWord(7,0,733)
				,new DictWord(137,0,583),new DictWord(4,10,297),new DictWord(6,10,529),new DictWord(7,10,152),new DictWord(7,10,713),new DictWord(7,10,1845),new DictWord(8,10,710),
				new DictWord(8,10,717),new DictWord(12,10,639),new DictWord(140,10,685),new DictWord(4,0,32),new DictWord(5,0,215),new DictWord(6,0,269),new DictWord(7,0,1782),new DictWord(7,0
					,1892),new DictWord(10,0,16),new DictWord(11,0,822),new DictWord(11,0,954),new DictWord(141,0,481),new DictWord(4,11,273),new DictWord(5,11,658),new DictWord(133,11
					,995),new DictWord(136,0,477),new DictWord(134,11,72),new DictWord(135,11,1345),new DictWord(5,0,308),new DictWord(7,0,1088),new DictWord(4,10,520),new DictWord(135
					,10,575),new DictWord(133,11,589),new DictWord(5,0,126),new DictWord(8,0,297),new DictWord(9,0,366),new DictWord(140,0,374),new DictWord(7,0,1551),new DictWord(139,
					0,361),new DictWord(5,11,117),new DictWord(6,11,514),new DictWord(6,11,541),new DictWord(7,11,1164),new DictWord(7,11,1436),new DictWord(8,11,220),new DictWord(8,11
					,648),new DictWord(10,11,688),new DictWord(139,11,560),new DictWord(133,11,686),new DictWord(4,0,946),new DictWord(6,0,1807),new DictWord(8,0,871),new DictWord(10,0
					,854),new DictWord(10,0,870),new DictWord(10,0,888),new DictWord(10,0,897),new DictWord(10,0,920),new DictWord(12,0,722),new DictWord(12,0,761),new DictWord(12,0,
					763),new DictWord(12,0,764),new DictWord(14,0,454),new DictWord(14,0,465),new DictWord(16,0,107),new DictWord(18,0,167),new DictWord(18,0,168),new DictWord(146,0,
					172),new DictWord(132,0,175),new DictWord(135,0,1307),new DictWord(132,0,685),new DictWord(135,11,1834),new DictWord(133,0,797),new DictWord(6,0,745),new DictWord(6
					,0,858),new DictWord(134,0,963),new DictWord(133,0,565),new DictWord(5,10,397),new DictWord(6,10,154),new DictWord(7,11,196),new DictWord(7,10,676),new DictWord(8,
					10,443),new DictWord(8,10,609),new DictWord(9,10,24),new DictWord(9,10,325),new DictWord(10,10,35),new DictWord(10,11,765),new DictWord(11,11,347),new DictWord(11,
					10,535),new DictWord(11,11,552),new DictWord(11,11,576),new DictWord(11,10,672),new DictWord(11,11,790),new DictWord(11,10,1018),new DictWord(12,11,263)
				,new DictWord(12,10,637),new DictWord(13,11,246),new DictWord(13,11,270),new DictWord(13,11,395),new DictWord(14,11,74),new DictWord(14,11,176),new DictWord(14,11,
					190),new DictWord(14,11,398),new DictWord(14,11,412),new DictWord(15,11,32),new DictWord(15,11,63),new DictWord(16,10,30),new DictWord(16,11,88),new DictWord(147,11
					,105),new DictWord(13,11,84),new DictWord(141,11,122),new DictWord(4,0,252),new DictWord(7,0,1068),new DictWord(10,0,434),new DictWord(11,0,228),new DictWord(11,0,
					426),new DictWord(13,0,231),new DictWord(18,0,106),new DictWord(148,0,87),new DictWord(137,0,826),new DictWord(4,11,589),new DictWord(139,11,282),new DictWord(5,11,
					381),new DictWord(135,11,1792),new DictWord(132,0,791),new DictWord(5,0,231),new DictWord(10,0,509),new DictWord(133,10,981),new DictWord(7,0,601),new DictWord(9,0,
					277),new DictWord(9,0,674),new DictWord(10,0,178),new DictWord(10,0,418),new DictWord(10,0,571),new DictWord(11,0,531),new DictWord(12,0,113),new DictWord(12,0,475)
				,new DictWord(13,0,99),new DictWord(142,0,428),new DictWord(4,10,56),new DictWord(7,11,616),new DictWord(7,10,1791),new DictWord(8,10,607),new DictWord(8,10,651),new DictWord(
					10,11,413),new DictWord(11,10,465),new DictWord(11,10,835),new DictWord(12,10,337),new DictWord(141,10,480),new DictWord(7,0,1591),new DictWord(144,0,43
				),new DictWord(9,10,158),new DictWord(138,10,411),new DictWord(135,0,1683),new DictWord(8,0,289),new DictWord(11,0,45),new DictWord(12,0,278),new DictWord(140,0,537
				),new DictWord(6,11,120),new DictWord(7,11,1188),new DictWord(7,11,1710),new DictWord(8,11,286),new DictWord(9,11,667),new DictWord(11,11,592),new DictWord(139,11,
					730),new DictWord(136,10,617),new DictWord(135,0,1120),new DictWord(135,11,1146),new DictWord(139,10,563),new DictWord(4,11,352),new DictWord(4,10,369),
				new DictWord(135,11,687),new DictWord(143,11,38),new DictWord(4,0,399),new DictWord(5,0,119),new DictWord(5,0,494),new DictWord(7,0,751),new DictWord(9,0,556),new DictWord(14,
					11,179),new DictWord(15,11,151),new DictWord(150,11,11),new DictWord(4,11,192),new DictWord(5,11,49),new DictWord(6,11,200),new DictWord(6,11,293),new DictWord(6,11
					,1696),new DictWord(135,11,488),new DictWord(4,0,398),new DictWord(133,0,660),new DictWord(7,0,1030),new DictWord(134,10,622),new DictWord(135,11,595),new DictWord(
					141,0,168),new DictWord(132,11,147),new DictWord(7,0,973),new DictWord(10,10,624),new DictWord(142,10,279),new DictWord(132,10,363),new DictWord(132,0,
					642),new DictWord(133,11,934),new DictWord(134,0,1615),new DictWord(7,11,505),new DictWord(135,11,523),new DictWord(7,0,594),new DictWord(7,0,851),new DictWord(7,0,
					1858),new DictWord(9,0,411),new DictWord(9,0,574),new DictWord(9,0,666),new DictWord(9,0,737),new DictWord(10,0,346),new DictWord(10,0,712),new DictWord(11,0,246),new DictWord(
					11,0,432),new DictWord(11,0,517),new DictWord(11,0,647),new DictWord(11,0,679),new DictWord(11,0,727),new DictWord(12,0,304),new DictWord(12,0,305),new DictWord(12,
					0,323),new DictWord(12,0,483),new DictWord(12,0,572),new DictWord(12,0,593),new DictWord(12,0,602),new DictWord(13,0,95),new DictWord(13,0,101),new DictWord(13,0,
					171),new DictWord(13,0,315),new DictWord(13,0,378),new DictWord(13,0,425),new DictWord(13,0,475),new DictWord(14,0,63),new DictWord(14,0,380),new DictWord(14,0,384)
				,new DictWord(15,0,133),new DictWord(18,0,112),new DictWord(148,0,72),new DictWord(135,0,1093),new DictWord(132,0,679),new DictWord(8,0,913),new DictWord(10,0,903),
				new DictWord(10,0,915),new DictWord(12,0,648),new DictWord(12,0,649),new DictWord(14,0,455),new DictWord(16,0,112),new DictWord(138,11,438),new DictWord(137,0,203),
				new DictWord(134,10,292),new DictWord(134,0,1492),new DictWord(7,0,1374),new DictWord(8,0,540),new DictWord(5,10,177),new DictWord(6,10,616),new DictWord(7,10,827),
				new DictWord(9,10,525),new DictWord(138,10,656),new DictWord(135,0,1486),new DictWord(9,0,714),new DictWord(138,10,31),new DictWord(136,0,825),new DictWord(134,0,
					1511),new DictWord(132,11,637),new DictWord(134,0,952),new DictWord(4,10,161),new DictWord(133,10,631),new DictWord(5,0,143),new DictWord(5,0,769),new DictWord(6,0,
					1760),new DictWord(7,0,682),new DictWord(7,0,1992),new DictWord(136,0,736),new DictWord(132,0,700),new DictWord(134,0,1540),new DictWord(132,11,777),new DictWord(9,
					11,867),new DictWord(138,11,837),new DictWord(7,0,1557),new DictWord(135,10,1684),new DictWord(133,0,860),new DictWord(6,0,422),new DictWord(7,0,0),new DictWord(7,0
					,1544),new DictWord(9,0,605),new DictWord(11,0,990),new DictWord(12,0,235),new DictWord(12,0,453),new DictWord(13,0,47),new DictWord(13,0,266),new DictWord(9,10,469
				),new DictWord(9,10,709),new DictWord(12,10,512),new DictWord(14,10,65),new DictWord(145,10,12),new DictWord(11,0,807),new DictWord(10,10,229),new DictWord(11,10,73
				),new DictWord(139,10,376),new DictWord(6,11,170),new DictWord(7,11,1080),new DictWord(8,11,395),new DictWord(8,11,487),new DictWord(11,11,125),new DictWord(141,11,
					147),new DictWord(5,0,515),new DictWord(137,0,131),new DictWord(7,0,1605),new DictWord(11,0,962),new DictWord(146,0,139),new DictWord(132,0,646),new DictWord(4,0,
					396),new DictWord(7,0,728),new DictWord(9,0,117),new DictWord(13,0,202),new DictWord(148,0,51),new DictWord(6,0,121),new DictWord(6,0,124),new DictWord(6,0,357),new DictWord(7,
					0,1138),new DictWord(7,0,1295),new DictWord(8,0,162),new DictWord(8,0,508),new DictWord(11,0,655),new DictWord(4,11,535),new DictWord(6,10,558),new DictWord(7,10,
					651),new DictWord(8,11,618),new DictWord(9,10,0),new DictWord(10,10,34),new DictWord(139,10,1008),new DictWord(135,11,1245),new DictWord(138,0,357),new DictWord(150
					,11,23),new DictWord(133,0,237),new DictWord(135,0,1784),new DictWord(7,10,1832),new DictWord(138,10,374),new DictWord(132,0,713),new DictWord(132,11,46
				),new DictWord(6,0,1536),new DictWord(10,0,348),new DictWord(5,11,811),new DictWord(6,11,1679),new DictWord(6,11,1714),new DictWord(135,11,2032),new DictWord(11,11,
					182),new DictWord(142,11,195),new DictWord(6,0,523),new DictWord(7,0,738),new DictWord(7,10,771),new DictWord(7,10,1731),new DictWord(9,10,405),new DictWord(138,10,
					421),new DictWord(7,11,1458),new DictWord(9,11,407),new DictWord(139,11,15),new DictWord(6,11,34),new DictWord(7,11,69),new DictWord(7,11,640),new DictWord(7,11,
					1089),new DictWord(8,11,708),new DictWord(8,11,721),new DictWord(9,11,363),new DictWord(9,11,643),new DictWord(10,11,628),new DictWord(148,11,98),new DictWord(133,0
					,434),new DictWord(135,0,1877),new DictWord(7,0,571),new DictWord(138,0,366),new DictWord(5,10,881),new DictWord(133,10,885),new DictWord(9,0,513),new DictWord(10,0
					,25),new DictWord(10,0,39),new DictWord(12,0,122),new DictWord(140,0,187),new DictWord(132,0,580),new DictWord(5,10,142),new DictWord(134,10,546),new DictWord(132,
					11,462),new DictWord(137,0,873),new DictWord(5,10,466),new DictWord(11,10,571),new DictWord(12,10,198),new DictWord(13,10,283),new DictWord(14,10,186),new DictWord(
					15,10,21),new DictWord(143,10,103),new DictWord(7,0,171),new DictWord(4,10,185),new DictWord(5,10,257),new DictWord(5,10,839),new DictWord(5,10,936),new DictWord(9,
					10,399),new DictWord(10,10,258),new DictWord(10,10,395),new DictWord(10,10,734),new DictWord(11,10,1014),new DictWord(12,10,23),new DictWord(13,10,350),
				new DictWord(14,10,150),new DictWord(147,10,6),new DictWord(134,0,625),new DictWord(7,0,107),new DictWord(7,0,838),new DictWord(8,0,550),new DictWord(138,0,401),new DictWord(5,
					11,73),new DictWord(6,11,23),new DictWord(134,11,338),new DictWord(4,0,943),new DictWord(6,0,1850),new DictWord(12,0,713),new DictWord(142,0,434),new DictWord(11,0,
					588),new DictWord(11,0,864),new DictWord(11,0,936),new DictWord(11,0,968),new DictWord(12,0,73),new DictWord(12,0,343),new DictWord(12,0,394),new DictWord(13,0,275)
				,new DictWord(14,0,257),new DictWord(15,0,160),new DictWord(7,10,404),new DictWord(7,10,1377),new DictWord(7,10,1430),new DictWord(7,10,2017),new DictWord(8,10,149)
				,new DictWord(8,10,239),new DictWord(8,10,512),new DictWord(8,10,793),new DictWord(8,10,818),new DictWord(9,10,474),new DictWord(9,10,595),new DictWord(10,10,122),new DictWord(
					10,10,565),new DictWord(10,10,649),new DictWord(10,10,783),new DictWord(11,10,239),new DictWord(11,10,295),new DictWord(11,10,447),new DictWord(11,10,
					528),new DictWord(11,10,639),new DictWord(11,10,800),new DictWord(12,10,25),new DictWord(12,10,157),new DictWord(12,10,316),new DictWord(12,10,390),new DictWord(12,
					10,391),new DictWord(12,10,395),new DictWord(12,10,478),new DictWord(12,10,503),new DictWord(12,10,592),new DictWord(12,10,680),new DictWord(13,10,50),new DictWord(
					13,10,53),new DictWord(13,10,132),new DictWord(13,10,198),new DictWord(13,10,322),new DictWord(13,10,415),new DictWord(13,10,511),new DictWord(14,10,71)
				,new DictWord(14,10,395),new DictWord(15,10,71),new DictWord(15,10,136),new DictWord(17,10,123),new DictWord(18,10,93),new DictWord(147,10,58),new DictWord(133,0,
					768),new DictWord(11,0,103),new DictWord(142,0,0),new DictWord(136,10,712),new DictWord(132,0,799),new DictWord(132,0,894),new DictWord(7,11,725),new DictWord(8,11,
					498),new DictWord(139,11,268),new DictWord(135,11,1798),new DictWord(135,11,773),new DictWord(141,11,360),new DictWord(4,10,377),new DictWord(152,10,13)
				,new DictWord(135,0,1673),new DictWord(132,11,583),new DictWord(134,0,1052),new DictWord(133,11,220),new DictWord(140,11,69),new DictWord(132,11,544),new DictWord(4
					,10,180),new DictWord(135,10,1906),new DictWord(134,0,272),new DictWord(4,0,441),new DictWord(134,0,1421),new DictWord(4,0,9),new DictWord(5,0,128),new DictWord(7,0
					,368),new DictWord(11,0,480),new DictWord(148,0,3),new DictWord(5,11,176),new DictWord(6,11,437),new DictWord(6,11,564),new DictWord(11,11,181),new DictWord(141,11,
					183),new DictWord(132,10,491),new DictWord(7,0,1182),new DictWord(141,11,67),new DictWord(6,0,1346),new DictWord(4,10,171),new DictWord(138,10,234),new DictWord(4,
					10,586),new DictWord(7,10,1186),new DictWord(138,10,631),new DictWord(136,0,682),new DictWord(134,0,1004),new DictWord(15,0,24),new DictWord(143,11,24),
				new DictWord(134,0,968),new DictWord(4,0,2),new DictWord(6,0,742),new DictWord(6,0,793),new DictWord(7,0,545),new DictWord(7,0,894),new DictWord(9,10,931),new DictWord(10,10,
					334),new DictWord(148,10,71),new DictWord(136,11,600),new DictWord(133,10,765),new DictWord(9,0,769),new DictWord(140,0,185),new DictWord(4,11,790),new DictWord(5,
					11,273),new DictWord(134,11,394),new DictWord(7,0,474),new DictWord(137,0,578),new DictWord(4,11,135),new DictWord(6,11,127),new DictWord(7,11,1185),new DictWord(7,
					11,1511),new DictWord(8,11,613),new DictWord(11,11,5),new DictWord(12,11,133),new DictWord(12,11,495),new DictWord(12,11,586),new DictWord(14,11,385),new DictWord(
					15,11,118),new DictWord(17,11,20),new DictWord(146,11,98),new DictWord(133,10,424),new DictWord(5,0,530),new DictWord(142,0,113),new DictWord(6,11,230),
				new DictWord(7,11,961),new DictWord(7,11,1085),new DictWord(136,11,462),new DictWord(7,11,1954),new DictWord(137,11,636),new DictWord(136,10,714),new DictWord(149,
					11,6),new DictWord(135,10,685),new DictWord(9,10,420),new DictWord(10,10,269),new DictWord(10,10,285),new DictWord(10,10,576),new DictWord(11,10,397),new DictWord(
					13,10,175),new DictWord(145,10,90),new DictWord(132,10,429),new DictWord(5,0,556),new DictWord(5,11,162),new DictWord(136,11,68),new DictWord(132,11,654
				),new DictWord(4,11,156),new DictWord(7,11,998),new DictWord(7,11,1045),new DictWord(7,11,1860),new DictWord(9,11,48),new DictWord(9,11,692),new DictWord(11,11,419)
				,new DictWord(139,11,602),new DictWord(6,0,1317),new DictWord(8,0,16),new DictWord(9,0,825),new DictWord(12,0,568),new DictWord(7,11,1276),new DictWord(8,11,474),new DictWord(
					137,11,652),new DictWord(18,0,97),new DictWord(7,10,18),new DictWord(7,10,699),new DictWord(7,10,1966),new DictWord(8,10,752),new DictWord(9,10,273),new DictWord(9,
					10,412),new DictWord(9,10,703),new DictWord(10,10,71),new DictWord(10,10,427),new DictWord(138,10,508),new DictWord(10,0,703),new DictWord(7,11,1454),new DictWord(
					138,11,703),new DictWord(4,10,53),new DictWord(5,10,186),new DictWord(135,10,752),new DictWord(134,0,892),new DictWord(134,0,1571),new DictWord(8,10,575
				),new DictWord(10,10,289),new DictWord(139,10,319),new DictWord(6,0,186),new DictWord(137,0,426),new DictWord(134,0,1101),new DictWord(132,10,675),new DictWord(132,
					0,585),new DictWord(6,0,1870),new DictWord(137,0,937),new DictWord(152,11,10),new DictWord(9,11,197),new DictWord(10,11,300),new DictWord(12,11,473),new DictWord(13
					,11,90),new DictWord(141,11,405),new DictWord(4,0,93),new DictWord(5,0,252),new DictWord(6,0,229),new DictWord(7,0,291),new DictWord(9,0,550),new DictWord(139,0,644
				),new DictWord(137,0,749),new DictWord(9,0,162),new DictWord(6,10,209),new DictWord(8,10,468),new DictWord(9,10,210),new DictWord(11,10,36),new DictWord(12,10,28),new DictWord(
					12,10,630),new DictWord(13,10,21),new DictWord(13,10,349),new DictWord(14,10,7),new DictWord(145,10,13),new DictWord(132,0,381),new DictWord(132,11,606)
				,new DictWord(4,10,342),new DictWord(135,10,1179),new DictWord(7,11,1587),new DictWord(7,11,1707),new DictWord(10,11,528),new DictWord(139,11,504),new DictWord(12,
					11,39),new DictWord(13,11,265),new DictWord(141,11,439),new DictWord(4,10,928),new DictWord(133,10,910),new DictWord(7,10,1838),new DictWord(7,11,1978),
				new DictWord(136,11,676),new DictWord(6,0,762),new DictWord(6,0,796),new DictWord(134,0,956),new DictWord(4,10,318),new DictWord(4,10,496),new DictWord(7,10,856),new DictWord(
					139,10,654),new DictWord(137,11,242),new DictWord(4,11,361),new DictWord(133,11,315),new DictWord(132,11,461),new DictWord(132,11,472),new DictWord(132,
					0,857),new DictWord(5,0,21),new DictWord(6,0,77),new DictWord(6,0,157),new DictWord(7,0,974),new DictWord(7,0,1301),new DictWord(7,0,1339),new DictWord(7,0,1490),new DictWord(7
					,0,1873),new DictWord(9,0,628),new DictWord(7,10,915),new DictWord(8,10,247),new DictWord(147,10,0),new DictWord(4,10,202),new DictWord(5,10,382),new DictWord(6,10,
					454),new DictWord(7,10,936),new DictWord(7,10,1803),new DictWord(8,10,758),new DictWord(9,10,375),new DictWord(9,10,895),new DictWord(10,10,743),new DictWord(10,10,
					792),new DictWord(11,10,978),new DictWord(11,10,1012),new DictWord(142,10,109),new DictWord(7,11,617),new DictWord(10,11,498),new DictWord(11,11,501),new DictWord(
					12,11,16),new DictWord(140,11,150),new DictWord(7,10,1150),new DictWord(7,10,1425),new DictWord(7,10,1453),new DictWord(10,11,747),new DictWord(140,10,
					513),new DictWord(133,11,155),new DictWord(11,0,919),new DictWord(141,0,409),new DictWord(138,10,791),new DictWord(10,0,633),new DictWord(139,11,729),new DictWord(7
					,11,163),new DictWord(8,11,319),new DictWord(9,11,402),new DictWord(10,11,24),new DictWord(10,11,681),new DictWord(11,11,200),new DictWord(11,11,567),new DictWord(
					12,11,253),new DictWord(12,11,410),new DictWord(142,11,219),new DictWord(5,11,475),new DictWord(7,11,1780),new DictWord(9,11,230),new DictWord(11,11,297
				),new DictWord(11,11,558),new DictWord(14,11,322),new DictWord(147,11,76),new DictWord(7,0,332),new DictWord(6,10,445),new DictWord(137,10,909),new DictWord(135,11,
					1956),new DictWord(136,11,274),new DictWord(134,10,578),new DictWord(135,0,1489),new DictWord(135,11,1848),new DictWord(5,11,944),new DictWord(134,11,
					1769),new DictWord(132,11,144),new DictWord(136,10,766),new DictWord(4,0,832),new DictWord(135,10,541),new DictWord(8,0,398),new DictWord(9,0,681),new DictWord(139,
					0,632),new DictWord(136,0,645),new DictWord(9,0,791),new DictWord(10,0,93),new DictWord(16,0,13),new DictWord(17,0,23),new DictWord(18,0,135),new DictWord(19,0,12),
				new DictWord(20,0,1),new DictWord(20,0,12),new DictWord(148,0,14),new DictWord(6,11,247),new DictWord(137,11,555),new DictWord(134,0,20),new DictWord(132,0,800),new DictWord(
					135,0,1841),new DictWord(139,10,983),new DictWord(137,10,768),new DictWord(132,10,584),new DictWord(141,11,51),new DictWord(6,0,1993),new DictWord(4,11,
					620),new DictWord(138,11,280),new DictWord(136,0,769),new DictWord(11,0,290),new DictWord(11,0,665),new DictWord(7,11,1810),new DictWord(11,11,866),new DictWord(12,
					11,103),new DictWord(13,11,495),new DictWord(17,11,67),new DictWord(147,11,74),new DictWord(134,0,1426),new DictWord(139,0,60),new DictWord(4,10,326),new DictWord(
					135,10,1770),new DictWord(7,0,1874),new DictWord(9,0,641),new DictWord(132,10,226),new DictWord(6,0,644),new DictWord(5,10,426),new DictWord(8,10,30),new DictWord(9
					,10,2),new DictWord(11,10,549),new DictWord(147,10,122),new DictWord(5,11,428),new DictWord(138,11,442),new DictWord(135,11,1871),new DictWord(135,0,
					1757),new DictWord(147,10,117),new DictWord(135,0,937),new DictWord(135,0,1652),new DictWord(6,0,654),new DictWord(134,0,1476),new DictWord(133,11,99),new DictWord(
					135,0,527),new DictWord(132,10,345),new DictWord(4,10,385),new DictWord(4,11,397),new DictWord(7,10,265),new DictWord(135,10,587),new DictWord(4,0,579),
				new DictWord(5,0,226),new DictWord(5,0,323),new DictWord(135,0,960),new DictWord(134,0,1486),new DictWord(8,11,502),new DictWord(144,11,9),new DictWord(4,10,347),new DictWord(5
					,10,423),new DictWord(5,10,996),new DictWord(135,10,1329),new DictWord(7,11,727),new DictWord(146,11,73),new DictWord(4,11,485),new DictWord(7,11,353),new DictWord(
					7,10,1259),new DictWord(7,11,1523),new DictWord(9,10,125),new DictWord(139,10,65),new DictWord(6,0,325),new DictWord(5,10,136),new DictWord(6,11,366),new DictWord(7
					,11,1384),new DictWord(7,11,1601),new DictWord(136,10,644),new DictWord(138,11,160),new DictWord(6,0,1345),new DictWord(137,11,282),new DictWord(18,0,91
				),new DictWord(147,0,70),new DictWord(136,0,404),new DictWord(4,11,157),new DictWord(133,11,471),new DictWord(133,0,973),new DictWord(6,0,135),new DictWord(135,0,
					1176),new DictWord(8,11,116),new DictWord(11,11,551),new DictWord(142,11,159),new DictWord(4,0,549),new DictWord(4,10,433),new DictWord(133,10,719),new DictWord(136
					,0,976),new DictWord(5,11,160),new DictWord(7,11,363),new DictWord(7,11,589),new DictWord(10,11,170),new DictWord(141,11,55),new DictWord(144,0,21),new DictWord(144
					,0,51),new DictWord(135,0,314),new DictWord(135,10,1363),new DictWord(4,11,108),new DictWord(7,11,405),new DictWord(10,11,491),new DictWord(139,11,498),
				new DictWord(146,0,4),new DictWord(4,10,555),new DictWord(8,10,536),new DictWord(10,10,288),new DictWord(139,10,1005),new DictWord(135,11,1005),new DictWord(6,0,281
				),new DictWord(7,0,6),new DictWord(8,0,282),new DictWord(8,0,480),new DictWord(8,0,499),new DictWord(9,0,198),new DictWord(10,0,143),new DictWord(10,0,169),new DictWord(10,0,
					211),new DictWord(10,0,417),new DictWord(10,0,574),new DictWord(11,0,147),new DictWord(11,0,395),new DictWord(12,0,75),new DictWord(12,0,407),new DictWord(12,0,608)
				,new DictWord(13,0,500),new DictWord(142,0,251),new DictWord(6,0,1093),new DictWord(6,0,1405),new DictWord(9,10,370),new DictWord(138,10,90),new DictWord(4,11,926),
				new DictWord(133,11,983),new DictWord(135,0,1776),new DictWord(134,0,1528),new DictWord(132,0,419),new DictWord(132,11,538),new DictWord(6,11,294),new DictWord(7,11
					,1267),new DictWord(136,11,624),new DictWord(135,11,1772),new DictWord(138,11,301),new DictWord(4,10,257),new DictWord(135,10,2031),new DictWord(4,0,138
				),new DictWord(7,0,1012),new DictWord(7,0,1280),new DictWord(9,0,76),new DictWord(135,10,1768),new DictWord(132,11,757),new DictWord(5,0,29),new DictWord(140,0,638)
				,new DictWord(7,11,655),new DictWord(135,11,1844),new DictWord(7,0,1418),new DictWord(6,11,257),new DictWord(135,11,1522),new DictWord(8,11,469),new DictWord(138,11
					,47),new DictWord(142,11,278),new DictWord(6,10,83),new DictWord(6,10,1733),new DictWord(135,10,1389),new DictWord(11,11,204),new DictWord(11,11,243),new DictWord(
					140,11,293),new DictWord(135,11,1875),new DictWord(6,0,1710),new DictWord(135,0,2038),new DictWord(137,11,299),new DictWord(4,0,17),new DictWord(5,0,23)
				,new DictWord(7,0,995),new DictWord(11,0,383),new DictWord(11,0,437),new DictWord(12,0,460),new DictWord(140,0,532),new DictWord(133,0,862),new DictWord(137,10,696)
				,new DictWord(6,0,592),new DictWord(138,0,946),new DictWord(138,11,599),new DictWord(7,10,1718),new DictWord(9,10,95),new DictWord(9,10,274),new DictWord(10,10,279)
				,new DictWord(10,10,317),new DictWord(10,10,420),new DictWord(11,10,303),new DictWord(11,10,808),new DictWord(12,10,134),new DictWord(12,10,367),new DictWord(13,10,
					149),new DictWord(13,10,347),new DictWord(14,10,349),new DictWord(14,10,406),new DictWord(18,10,22),new DictWord(18,10,89),new DictWord(18,10,122),new DictWord(147,
					10,47),new DictWord(8,0,70),new DictWord(12,0,171),new DictWord(141,0,272),new DictWord(133,10,26),new DictWord(132,10,550),new DictWord(137,0,812),new DictWord(10,
					0,233),new DictWord(139,0,76),new DictWord(134,0,988),new DictWord(134,0,442),new DictWord(136,10,822),new DictWord(7,0,896),new DictWord(4,10,902),new DictWord(5,
					10,809),new DictWord(134,10,122),new DictWord(5,11,150),new DictWord(7,11,106),new DictWord(8,11,603),new DictWord(9,11,593),new DictWord(9,11,634),new DictWord(10,
					11,44),new DictWord(10,11,173),new DictWord(11,11,462),new DictWord(11,11,515),new DictWord(13,11,216),new DictWord(13,11,288),new DictWord(142,11,400),
				new DictWord(136,0,483),new DictWord(135,10,262),new DictWord(6,0,1709),new DictWord(133,10,620),new DictWord(4,10,34),new DictWord(5,10,574),new DictWord(7,10,279)
				,new DictWord(7,10,1624),new DictWord(136,10,601),new DictWord(137,10,170),new DictWord(147,0,119),new DictWord(12,11,108),new DictWord(141,11,291),new DictWord(11,
					0,69),new DictWord(12,0,105),new DictWord(12,0,117),new DictWord(13,0,213),new DictWord(14,0,13),new DictWord(14,0,62),new DictWord(14,0,177),new DictWord(14,0,421)
				,new DictWord(15,0,19),new DictWord(146,0,141),new DictWord(137,0,309),new DictWord(11,11,278),new DictWord(142,11,73),new DictWord(7,0,608),new DictWord(7,0,976),new DictWord(
					9,0,146),new DictWord(10,0,206),new DictWord(10,0,596),new DictWord(13,0,218),new DictWord(142,0,153),new DictWord(133,10,332),new DictWord(6,10,261),new DictWord(8
					,10,182),new DictWord(139,10,943),new DictWord(4,11,493),new DictWord(144,11,55),new DictWord(134,10,1721),new DictWord(132,0,768),new DictWord(4,10,933
				),new DictWord(133,10,880),new DictWord(7,11,555),new DictWord(7,11,1316),new DictWord(7,11,1412),new DictWord(7,11,1839),new DictWord(9,11,192),new DictWord(9,11,
					589),new DictWord(11,11,241),new DictWord(11,11,676),new DictWord(11,11,811),new DictWord(11,11,891),new DictWord(12,11,140),new DictWord(12,11,346),new DictWord(12
					,11,479),new DictWord(13,11,30),new DictWord(13,11,49),new DictWord(13,11,381),new DictWord(14,11,188),new DictWord(15,11,150),new DictWord(16,11,76),new DictWord(
					18,11,30),new DictWord(148,11,52),new DictWord(4,0,518),new DictWord(135,0,1136),new DictWord(6,11,568),new DictWord(7,11,112),new DictWord(7,11,1804),new DictWord(
					8,11,362),new DictWord(8,11,410),new DictWord(8,11,830),new DictWord(9,11,514),new DictWord(11,11,649),new DictWord(142,11,157),new DictWord(135,11,673)
				,new DictWord(8,0,689),new DictWord(137,0,863),new DictWord(4,0,18),new DictWord(7,0,145),new DictWord(7,0,444),new DictWord(7,0,1278),new DictWord(8,0,49),new DictWord(8,0,400
				),new DictWord(9,0,71),new DictWord(9,0,250),new DictWord(10,0,459),new DictWord(12,0,160),new DictWord(16,0,24),new DictWord(132,11,625),new DictWord(140,0,1020),new DictWord(
					4,0,997),new DictWord(6,0,1946),new DictWord(6,0,1984),new DictWord(134,0,1998),new DictWord(6,11,16),new DictWord(6,11,158),new DictWord(7,11,43),new DictWord(7,11
					,129),new DictWord(7,11,181),new DictWord(8,11,276),new DictWord(8,11,377),new DictWord(10,11,523),new DictWord(11,11,816),new DictWord(12,11,455),new DictWord(13,
					11,303),new DictWord(142,11,135),new DictWord(133,10,812),new DictWord(134,0,658),new DictWord(4,11,1),new DictWord(7,11,1143),new DictWord(7,11,1463),new DictWord(
					8,11,61),new DictWord(9,11,207),new DictWord(9,11,390),new DictWord(9,11,467),new DictWord(139,11,836),new DictWord(150,11,26),new DictWord(140,0,106),new DictWord(
					6,0,1827),new DictWord(10,0,931),new DictWord(18,0,166),new DictWord(20,0,114),new DictWord(4,10,137),new DictWord(7,10,1178),new DictWord(7,11,1319),new DictWord(
					135,10,1520),new DictWord(133,0,1010),new DictWord(4,11,723),new DictWord(5,11,895),new DictWord(7,11,1031),new DictWord(8,11,199),new DictWord(8,11,340
				),new DictWord(9,11,153),new DictWord(9,11,215),new DictWord(10,11,21),new DictWord(10,11,59),new DictWord(10,11,80),new DictWord(10,11,224),new DictWord(11,11,229)
				,new DictWord(11,11,652),new DictWord(12,11,192),new DictWord(13,11,146),new DictWord(142,11,91),new DictWord(132,11,295),new DictWord(6,11,619),new DictWord(7,11,
					898),new DictWord(7,11,1092),new DictWord(8,11,485),new DictWord(18,11,28),new DictWord(147,11,116),new DictWord(137,11,51),new DictWord(6,10,1661),new DictWord(7,
					10,1975),new DictWord(7,10,2009),new DictWord(135,10,2011),new DictWord(5,11,309),new DictWord(140,11,211),new DictWord(5,0,87),new DictWord(7,0,313),new DictWord(7
					,0,1103),new DictWord(10,0,208),new DictWord(10,0,582),new DictWord(11,0,389),new DictWord(11,0,813),new DictWord(12,0,385),new DictWord(13,0,286),new DictWord(14,0
					,124),new DictWord(146,0,108),new DictWord(5,11,125),new DictWord(8,11,77),new DictWord(138,11,15),new DictWord(132,0,267),new DictWord(133,0,703),new DictWord(137,
					11,155),new DictWord(133,11,439),new DictWord(11,11,164),new DictWord(140,11,76),new DictWord(9,0,496),new DictWord(5,10,89),new DictWord(7,10,1915),new DictWord(9,
					10,185),new DictWord(9,10,235),new DictWord(10,10,64),new DictWord(10,10,270),new DictWord(10,10,403),new DictWord(10,10,469),new DictWord(10,10,529),new DictWord(
					10,10,590),new DictWord(11,10,140),new DictWord(11,10,860),new DictWord(13,10,1),new DictWord(13,10,422),new DictWord(14,10,341),new DictWord(14,10,364)
				,new DictWord(17,10,93),new DictWord(18,10,113),new DictWord(19,10,97),new DictWord(147,10,113),new DictWord(133,10,695),new DictWord(135,0,1121),new DictWord(5,10,
					6),new DictWord(6,10,183),new DictWord(7,10,680),new DictWord(7,10,978),new DictWord(7,10,1013),new DictWord(7,10,1055),new DictWord(12,10,230),new DictWord(13,10,
					172),new DictWord(146,10,29),new DictWord(4,11,8),new DictWord(7,11,1152),new DictWord(7,11,1153),new DictWord(7,11,1715),new DictWord(9,11,374),new DictWord(10,11,
					478),new DictWord(139,11,648),new DictWord(135,11,1099),new DictWord(6,10,29),new DictWord(139,10,63),new DictWord(4,0,561),new DictWord(10,0,249),new DictWord(139,
					0,209),new DictWord(132,0,760),new DictWord(7,11,799),new DictWord(138,11,511),new DictWord(136,11,87),new DictWord(9,0,154),new DictWord(140,0,485),new DictWord(
					136,0,255),new DictWord(132,0,323),new DictWord(140,0,419),new DictWord(132,10,311),new DictWord(134,10,1740),new DictWord(4,0,368),new DictWord(135,0,
					641),new DictWord(7,10,170),new DictWord(8,10,90),new DictWord(8,10,177),new DictWord(8,10,415),new DictWord(11,10,714),new DictWord(142,10,281),new DictWord(4,11,
					69),new DictWord(5,11,122),new DictWord(9,11,656),new DictWord(138,11,464),new DictWord(5,11,849),new DictWord(134,11,1633),new DictWord(8,0,522),new DictWord(142,0
					,328),new DictWord(11,10,91),new DictWord(13,10,129),new DictWord(15,10,101),new DictWord(145,10,125),new DictWord(7,0,562),new DictWord(8,0,551),new DictWord(4,10,
					494),new DictWord(6,10,74),new DictWord(7,10,44),new DictWord(11,11,499),new DictWord(12,10,17),new DictWord(15,10,5),new DictWord(148,10,11),new DictWord(4,10,276)
				,new DictWord(133,10,296),new DictWord(9,0,92),new DictWord(147,0,91),new DictWord(4,10,7),new DictWord(5,10,90),new DictWord(5,10,158),new DictWord(6,10,542),new DictWord(7,10
					,221),new DictWord(7,10,1574),new DictWord(9,10,490),new DictWord(10,10,540),new DictWord(11,10,443),new DictWord(139,10,757),new DictWord(6,0,525),new DictWord(6,0
					,1976),new DictWord(8,0,806),new DictWord(9,0,876),new DictWord(140,0,284),new DictWord(5,11,859),new DictWord(7,10,588),new DictWord(7,11,1160),new DictWord(8,11,
					107),new DictWord(9,10,175),new DictWord(9,11,291),new DictWord(9,11,439),new DictWord(10,10,530),new DictWord(10,11,663),new DictWord(11,11,609),new DictWord(140,
					11,197),new DictWord(7,11,168),new DictWord(13,11,196),new DictWord(141,11,237),new DictWord(139,0,958),new DictWord(133,0,594),new DictWord(135,10,580)
				,new DictWord(7,10,88),new DictWord(136,10,627),new DictWord(6,0,479),new DictWord(6,0,562),new DictWord(7,0,1060),new DictWord(13,0,6),new DictWord(5,10,872),new DictWord(6,10
					,57),new DictWord(7,10,471),new DictWord(9,10,447),new DictWord(137,10,454),new DictWord(136,11,413),new DictWord(145,11,19),new DictWord(4,11,117),new DictWord(6,
					11,372),new DictWord(7,11,1905),new DictWord(142,11,323),new DictWord(4,11,722),new DictWord(139,11,471),new DictWord(17,0,61),new DictWord(5,10,31),new DictWord(
					134,10,614),new DictWord(8,10,330),new DictWord(140,10,477),new DictWord(7,10,1200),new DictWord(138,10,460),new DictWord(6,10,424),new DictWord(135,10,
					1866),new DictWord(6,0,1641),new DictWord(136,0,820),new DictWord(6,0,1556),new DictWord(134,0,1618),new DictWord(9,11,5),new DictWord(12,11,216),new DictWord(12,11
					,294),new DictWord(12,11,298),new DictWord(12,11,400),new DictWord(12,11,518),new DictWord(13,11,229),new DictWord(143,11,139),new DictWord(15,11,155),new DictWord(
					144,11,79),new DictWord(4,0,302),new DictWord(135,0,1766),new DictWord(5,10,13),new DictWord(134,10,142),new DictWord(6,0,148),new DictWord(7,0,1313),new DictWord(7
					,10,116),new DictWord(8,10,322),new DictWord(8,10,755),new DictWord(9,10,548),new DictWord(10,10,714),new DictWord(11,10,884),new DictWord(141,10,324),new DictWord(
					137,0,676),new DictWord(9,11,88),new DictWord(139,11,270),new DictWord(5,11,12),new DictWord(7,11,375),new DictWord(137,11,438),new DictWord(134,0,1674)
				,new DictWord(7,10,1472),new DictWord(135,10,1554),new DictWord(11,0,178),new DictWord(7,10,1071),new DictWord(7,10,1541),new DictWord(7,10,1767),new DictWord(7,10,
					1806),new DictWord(11,10,162),new DictWord(11,10,242),new DictWord(12,10,605),new DictWord(15,10,26),new DictWord(144,10,44),new DictWord(6,0,389),new DictWord(7,0,
					149),new DictWord(9,0,142),new DictWord(138,0,94),new DictWord(140,11,71),new DictWord(145,10,115),new DictWord(6,0,8),new DictWord(7,0,1881),new DictWord(8,0,91),new DictWord(
					11,11,966),new DictWord(12,11,287),new DictWord(13,11,342),new DictWord(13,11,402),new DictWord(15,11,110),new DictWord(143,11,163),new DictWord(4,11,
					258),new DictWord(136,11,639),new DictWord(6,11,22),new DictWord(7,11,903),new DictWord(138,11,577),new DictWord(133,11,681),new DictWord(135,10,1111),new DictWord(
					135,11,1286),new DictWord(9,0,112),new DictWord(8,10,1),new DictWord(138,10,326),new DictWord(5,10,488),new DictWord(6,10,527),new DictWord(7,10,489),new DictWord(7
					,10,1636),new DictWord(8,10,121),new DictWord(8,10,144),new DictWord(8,10,359),new DictWord(9,10,193),new DictWord(9,10,241),new DictWord(9,10,336),new DictWord(9,
					10,882),new DictWord(11,10,266),new DictWord(11,10,372),new DictWord(11,10,944),new DictWord(12,10,401),new DictWord(140,10,641),new DictWord(4,11,664),
				new DictWord(133,11,804),new DictWord(6,0,747),new DictWord(134,0,1015),new DictWord(135,0,1746),new DictWord(9,10,31),new DictWord(10,10,244),new DictWord(10,10,
					699),new DictWord(12,10,149),new DictWord(141,10,497),new DictWord(133,10,377),new DictWord(135,0,24),new DictWord(6,0,1352),new DictWord(5,11,32),new DictWord(145,
					10,101),new DictWord(7,0,1530),new DictWord(10,0,158),new DictWord(13,0,13),new DictWord(13,0,137),new DictWord(13,0,258),new DictWord(14,0,111),new DictWord(14,0,
					225),new DictWord(14,0,253),new DictWord(14,0,304),new DictWord(14,0,339),new DictWord(14,0,417),new DictWord(146,0,33),new DictWord(4,0,503),new DictWord(135,0,
					1661),new DictWord(5,0,130),new DictWord(6,0,845),new DictWord(7,0,1314),new DictWord(9,0,610),new DictWord(10,0,718),new DictWord(11,0,601),new DictWord(11,0,819),
				new DictWord(11,0,946),new DictWord(140,0,536),new DictWord(10,0,149),new DictWord(11,0,280),new DictWord(142,0,336),new DictWord(134,0,1401),new DictWord(135,0,
					1946),new DictWord(8,0,663),new DictWord(144,0,8),new DictWord(134,0,1607),new DictWord(135,10,2023),new DictWord(4,11,289),new DictWord(7,11,629),new DictWord(7,11
					,1698),new DictWord(7,11,1711),new DictWord(140,11,215),new DictWord(6,11,450),new DictWord(136,11,109),new DictWord(10,0,882),new DictWord(10,0,883),new DictWord(
					10,0,914),new DictWord(138,0,928),new DictWord(133,10,843),new DictWord(136,11,705),new DictWord(132,10,554),new DictWord(133,10,536),new DictWord(5,0,
					417),new DictWord(9,10,79),new DictWord(11,10,625),new DictWord(145,10,7),new DictWord(7,11,1238),new DictWord(142,11,37),new DictWord(4,0,392),new DictWord(135,0,
					1597),new DictWord(5,0,433),new DictWord(9,0,633),new DictWord(11,0,629),new DictWord(132,10,424),new DictWord(7,10,336),new DictWord(136,10,785),new DictWord(134,
					11,355),new DictWord(6,0,234),new DictWord(7,0,769),new DictWord(9,0,18),new DictWord(138,0,358),new DictWord(4,10,896),new DictWord(134,10,1777),new DictWord(138,
					11,323),new DictWord(7,0,140),new DictWord(7,0,1950),new DictWord(8,0,680),new DictWord(11,0,817),new DictWord(147,0,88),new DictWord(7,0,1222),new DictWord(138,0,
					386),new DictWord(139,11,908),new DictWord(11,0,249),new DictWord(12,0,313),new DictWord(16,0,66),new DictWord(145,0,26),new DictWord(134,0,5),new DictWord(7,10,750
				),new DictWord(9,10,223),new DictWord(11,10,27),new DictWord(11,10,466),new DictWord(12,10,624),new DictWord(14,10,265),new DictWord(146,10,61),new DictWord(134,11,
					26),new DictWord(134,0,1216),new DictWord(5,0,963),new DictWord(134,0,1773),new DictWord(4,11,414),new DictWord(5,11,467),new DictWord(9,11,654),new DictWord(10,11,
					451),new DictWord(12,11,59),new DictWord(141,11,375),new DictWord(135,11,17),new DictWord(4,10,603),new DictWord(133,10,661),new DictWord(4,10,11),new DictWord(6,10
					,128),new DictWord(7,10,231),new DictWord(7,10,1533),new DictWord(138,10,725),new DictWord(135,11,955),new DictWord(7,0,180),new DictWord(8,0,509),new DictWord(136,
					0,792),new DictWord(132,10,476),new DictWord(132,0,1002),new DictWord(133,11,538),new DictWord(135,10,1807),new DictWord(132,0,931),new DictWord(7,0,943
				),new DictWord(11,0,614),new DictWord(140,0,747),new DictWord(135,0,1837),new DictWord(9,10,20),new DictWord(10,10,324),new DictWord(10,10,807),new DictWord(139,10,
					488),new DictWord(134,0,641),new DictWord(6,11,280),new DictWord(10,11,502),new DictWord(11,11,344),new DictWord(140,11,38),new DictWord(5,11,45),new DictWord(7,11,
					1161),new DictWord(11,11,448),new DictWord(11,11,880),new DictWord(13,11,139),new DictWord(13,11,407),new DictWord(15,11,16),new DictWord(17,11,95),new DictWord(18,
					11,66),new DictWord(18,11,88),new DictWord(18,11,123),new DictWord(149,11,7),new DictWord(9,0,280),new DictWord(138,0,134),new DictWord(22,0,22),new DictWord(23,0,5
				),new DictWord(151,0,29),new DictWord(136,11,777),new DictWord(4,0,90),new DictWord(5,0,545),new DictWord(7,0,754),new DictWord(9,0,186),new DictWord(10,0,72),new DictWord(10,0
					,782),new DictWord(11,0,577),new DictWord(11,0,610),new DictWord(11,0,960),new DictWord(12,0,354),new DictWord(12,0,362),new DictWord(12,0,595),new DictWord(4,11,
					410),new DictWord(135,11,521),new DictWord(135,11,1778),new DictWord(5,10,112),new DictWord(6,10,103),new DictWord(134,10,150),new DictWord(138,10,356),
				new DictWord(132,0,742),new DictWord(7,0,151),new DictWord(9,0,329),new DictWord(139,0,254),new DictWord(8,0,853),new DictWord(8,0,881),new DictWord(8,0,911),new DictWord(8,0,
					912),new DictWord(10,0,872),new DictWord(12,0,741),new DictWord(12,0,742),new DictWord(152,0,18),new DictWord(4,11,573),new DictWord(136,11,655),new DictWord(6,0,
					921),new DictWord(134,0,934),new DictWord(9,0,187),new DictWord(10,0,36),new DictWord(11,0,1016),new DictWord(17,0,44),new DictWord(146,0,64),new DictWord(7,0,833),
				new DictWord(136,0,517),new DictWord(4,0,506),new DictWord(5,0,295),new DictWord(135,0,1680),new DictWord(4,10,708),new DictWord(8,10,15),new DictWord(9,10,50),new DictWord(9,
					10,386),new DictWord(11,10,18),new DictWord(11,10,529),new DictWord(140,10,228),new DictWord(7,0,251),new DictWord(7,0,1701),new DictWord(8,0,436),new DictWord(4,10
					,563),new DictWord(7,10,592),new DictWord(7,10,637),new DictWord(7,10,770),new DictWord(8,10,463),new DictWord(9,10,60),new DictWord(9,10,335),new DictWord(9,10,904
				),new DictWord(10,10,73),new DictWord(11,10,434),new DictWord(12,10,585),new DictWord(13,10,331),new DictWord(18,10,110),new DictWord(148,10,60),new DictWord(132,10
					,502),new DictWord(136,0,584),new DictWord(6,10,347),new DictWord(138,10,161),new DictWord(7,0,987),new DictWord(9,0,688),new DictWord(10,0,522),new DictWord(11,0,
					788),new DictWord(12,0,137),new DictWord(12,0,566),new DictWord(14,0,9),new DictWord(14,0,24),new DictWord(14,0,64),new DictWord(7,11,899),new DictWord(142,11,325),
				new DictWord(4,0,214),new DictWord(5,0,500),new DictWord(5,10,102),new DictWord(6,10,284),new DictWord(7,10,1079),new DictWord(7,10,1423),new DictWord(7,10,1702),new DictWord(8
					,10,470),new DictWord(9,10,554),new DictWord(9,10,723),new DictWord(139,10,333),new DictWord(7,10,246),new DictWord(135,10,840),new DictWord(6,10,10),new DictWord(8
					,10,571),new DictWord(9,10,739),new DictWord(143,10,91),new DictWord(133,10,626),new DictWord(146,0,195),new DictWord(134,0,1775),new DictWord(7,0,389),
				new DictWord(7,0,700),new DictWord(7,0,940),new DictWord(8,0,514),new DictWord(9,0,116),new DictWord(9,0,535),new DictWord(10,0,118),new DictWord(11,0,107),new DictWord(11,0,
					148),new DictWord(11,0,922),new DictWord(12,0,254),new DictWord(12,0,421),new DictWord(142,0,238),new DictWord(5,10,18),new DictWord(6,10,526),new DictWord(13,10,24
				),new DictWord(13,10,110),new DictWord(19,10,5),new DictWord(147,10,44),new DictWord(132,0,743),new DictWord(11,0,292),new DictWord(4,10,309),new DictWord(5,10,462)
				,new DictWord(7,10,970),new DictWord(135,10,1097),new DictWord(22,10,30),new DictWord(150,10,33),new DictWord(139,11,338),new DictWord(135,11,1598),new DictWord(7,0
					,1283),new DictWord(9,0,227),new DictWord(11,0,325),new DictWord(11,0,408),new DictWord(14,0,180),new DictWord(146,0,47),new DictWord(4,0,953),new DictWord(6,0,1805
				),new DictWord(6,0,1814),new DictWord(6,0,1862),new DictWord(140,0,774),new DictWord(6,11,611),new DictWord(135,11,1733),new DictWord(135,11,1464),new DictWord(5,0,
					81),new DictWord(7,0,146),new DictWord(7,0,1342),new DictWord(8,0,53),new DictWord(8,0,561),new DictWord(8,0,694),new DictWord(8,0,754),new DictWord(9,0,115),new DictWord(9,0,
					179),new DictWord(9,0,894),new DictWord(10,0,462),new DictWord(10,0,813),new DictWord(11,0,230),new DictWord(11,0,657),new DictWord(11,0,699),new DictWord(11,0,748)
				,new DictWord(12,0,119),new DictWord(12,0,200),new DictWord(12,0,283),new DictWord(142,0,273),new DictWord(5,0,408),new DictWord(6,0,789),new DictWord(6,0,877),new DictWord(6,0
					,1253),new DictWord(6,0,1413),new DictWord(137,0,747),new DictWord(134,10,1704),new DictWord(135,11,663),new DictWord(6,0,1910),new DictWord(6,0,1915),new DictWord(
					6,0,1923),new DictWord(9,0,913),new DictWord(9,0,928),new DictWord(9,0,950),new DictWord(9,0,954),new DictWord(9,0,978),new DictWord(9,0,993),new DictWord(12,0,812)
				,new DictWord(12,0,819),new DictWord(12,0,831),new DictWord(12,0,833),new DictWord(12,0,838),new DictWord(12,0,909),new DictWord(12,0,928),new DictWord(12,0,931),new DictWord(
					12,0,950),new DictWord(15,0,186),new DictWord(15,0,187),new DictWord(15,0,195),new DictWord(15,0,196),new DictWord(15,0,209),new DictWord(15,0,215),new DictWord(15,
					0,236),new DictWord(15,0,241),new DictWord(15,0,249),new DictWord(15,0,253),new DictWord(18,0,180),new DictWord(18,0,221),new DictWord(18,0,224),new DictWord(18,0,
					227),new DictWord(18,0,229),new DictWord(149,0,60),new DictWord(7,0,1826),new DictWord(135,0,1938),new DictWord(11,0,490),new DictWord(18,0,143),new DictWord(5,10,
					86),new DictWord(7,10,743),new DictWord(9,10,85),new DictWord(10,10,281),new DictWord(10,10,432),new DictWord(12,10,251),new DictWord(13,10,118),new DictWord(142,10
					,378),new DictWord(5,10,524),new DictWord(133,10,744),new DictWord(141,11,442),new DictWord(10,10,107),new DictWord(140,10,436),new DictWord(135,11,503)
				,new DictWord(134,0,1162),new DictWord(132,10,927),new DictWord(7,0,30),new DictWord(8,0,86),new DictWord(8,0,315),new DictWord(8,0,700),new DictWord(9,0,576),new DictWord(9,0,
					858),new DictWord(10,0,414),new DictWord(11,0,310),new DictWord(11,0,888),new DictWord(11,0,904),new DictWord(12,0,361),new DictWord(13,0,248),new DictWord(13,0,371
				),new DictWord(14,0,142),new DictWord(12,10,670),new DictWord(146,10,94),new DictWord(134,0,721),new DictWord(4,11,113),new DictWord(5,11,163),new DictWord(5,11,735
				),new DictWord(7,11,1009),new DictWord(7,10,1149),new DictWord(9,11,9),new DictWord(9,10,156),new DictWord(9,11,771),new DictWord(12,11,90),new DictWord(13,11,138),
				new DictWord(13,11,410),new DictWord(143,11,128),new DictWord(138,0,839),new DictWord(133,10,778),new DictWord(137,0,617),new DictWord(133,10,502),new DictWord(8,10
					,196),new DictWord(10,10,283),new DictWord(139,10,406),new DictWord(6,0,428),new DictWord(7,0,524),new DictWord(8,0,169),new DictWord(8,0,234),new DictWord(9,0,480)
				,new DictWord(138,0,646),new DictWord(133,10,855),new DictWord(134,0,1648),new DictWord(7,0,1205),new DictWord(138,0,637),new DictWord(7,0,1596),new DictWord(4,11,
					935),new DictWord(133,11,823),new DictWord(5,11,269),new DictWord(7,11,434),new DictWord(7,11,891),new DictWord(8,11,339),new DictWord(9,11,702),new DictWord(11,11,
					594),new DictWord(11,11,718),new DictWord(145,11,100),new DictWord(7,11,878),new DictWord(9,11,485),new DictWord(141,11,264),new DictWord(4,0,266),new DictWord(8,0,
					4),new DictWord(9,0,39),new DictWord(10,0,166),new DictWord(11,0,918),new DictWord(12,0,635),new DictWord(20,0,10),new DictWord(22,0,27),new DictWord(22,0,43),new DictWord(22,0
					,52),new DictWord(134,11,1713),new DictWord(7,10,1400),new DictWord(9,10,446),new DictWord(138,10,45),new DictWord(135,11,900),new DictWord(132,0,862),new DictWord(
					134,0,1554),new DictWord(135,11,1033),new DictWord(19,0,16),new DictWord(147,11,16),new DictWord(135,11,1208),new DictWord(7,0,157),new DictWord(136,0,
					279),new DictWord(6,0,604),new DictWord(136,0,391),new DictWord(13,10,455),new DictWord(15,10,99),new DictWord(15,10,129),new DictWord(144,10,68),new DictWord(135,
					10,172),new DictWord(7,0,945),new DictWord(11,0,713),new DictWord(139,0,744),new DictWord(4,0,973),new DictWord(10,0,877),new DictWord(10,0,937),new DictWord(10,0,
					938),new DictWord(140,0,711),new DictWord(139,0,1022),new DictWord(132,10,568),new DictWord(142,11,143),new DictWord(4,0,567),new DictWord(9,0,859),new DictWord(132
					,10,732),new DictWord(7,0,1846),new DictWord(136,0,628),new DictWord(136,10,733),new DictWord(133,0,762),new DictWord(4,10,428),new DictWord(135,10,1789
				),new DictWord(10,0,784),new DictWord(13,0,191),new DictWord(7,10,2015),new DictWord(140,10,665),new DictWord(133,0,298),new DictWord(7,0,633),new DictWord(7,0,905)
				,new DictWord(7,0,909),new DictWord(7,0,1538),new DictWord(9,0,767),new DictWord(140,0,636),new DictWord(138,10,806),new DictWord(132,0,795),new DictWord(139,0,301)
				,new DictWord(135,0,1970),new DictWord(5,11,625),new DictWord(135,11,1617),new DictWord(135,11,275),new DictWord(7,11,37),new DictWord(8,11,425),new DictWord(8,11,
					693),new DictWord(9,11,720),new DictWord(10,11,380),new DictWord(10,11,638),new DictWord(11,11,273),new DictWord(11,11,307),new DictWord(11,11,473),new DictWord(12,
					11,61),new DictWord(143,11,43),new DictWord(135,11,198),new DictWord(134,0,1236),new DictWord(7,0,369),new DictWord(12,0,644),new DictWord(12,0,645),new DictWord(
					144,0,90),new DictWord(19,0,15),new DictWord(149,0,27),new DictWord(6,0,71),new DictWord(7,0,845),new DictWord(8,0,160),new DictWord(9,0,318),new DictWord(6,10,1623
				),new DictWord(134,10,1681),new DictWord(134,0,1447),new DictWord(134,0,1255),new DictWord(138,0,735),new DictWord(8,0,76),new DictWord(132,11,168),new DictWord(6,
					10,1748),new DictWord(8,10,715),new DictWord(9,10,802),new DictWord(10,10,46),new DictWord(10,10,819),new DictWord(13,10,308),new DictWord(14,10,351),new DictWord(
					14,10,363),new DictWord(146,10,67),new DictWord(135,11,91),new DictWord(6,0,474),new DictWord(4,10,63),new DictWord(133,10,347),new DictWord(133,10,749)
				,new DictWord(138,0,841),new DictWord(133,10,366),new DictWord(6,0,836),new DictWord(132,11,225),new DictWord(135,0,1622),new DictWord(135,10,89),new DictWord(140,0
					,735),new DictWord(134,0,1601),new DictWord(138,11,145),new DictWord(6,0,1390),new DictWord(137,0,804),new DictWord(142,0,394),new DictWord(6,11,15),new DictWord(7,
					11,70),new DictWord(10,11,240),new DictWord(147,11,93),new DictWord(6,0,96),new DictWord(135,0,1426),new DictWord(4,0,651),new DictWord(133,0,289),new DictWord(7,11
					,956),new DictWord(7,10,977),new DictWord(7,11,1157),new DictWord(7,11,1506),new DictWord(7,11,1606),new DictWord(7,11,1615),new DictWord(7,11,1619),new DictWord(7,
					11,1736),new DictWord(7,11,1775),new DictWord(8,11,590),new DictWord(9,11,324),new DictWord(9,11,736),new DictWord(9,11,774),new DictWord(9,11,776),new DictWord(9,
					11,784),new DictWord(10,11,567),new DictWord(10,11,708),new DictWord(11,11,518),new DictWord(11,11,613),new DictWord(11,11,695),new DictWord(11,11,716),
				new DictWord(11,11,739),new DictWord(11,11,770),new DictWord(11,11,771),new DictWord(11,11,848),new DictWord(11,11,857),new DictWord(11,11,931),new DictWord(11,11,
					947),new DictWord(12,11,326),new DictWord(12,11,387),new DictWord(12,11,484),new DictWord(12,11,528),new DictWord(12,11,552),new DictWord(12,11,613),new DictWord(13
					,11,189),new DictWord(13,11,256),new DictWord(13,11,340),new DictWord(13,11,432),new DictWord(13,11,436),new DictWord(13,11,440),new DictWord(13,11,454)
				,new DictWord(14,11,174),new DictWord(14,11,220),new DictWord(14,11,284),new DictWord(14,11,390),new DictWord(145,11,121),new DictWord(7,0,688),new DictWord(8,0,35)
				,new DictWord(9,0,511),new DictWord(10,0,767),new DictWord(147,0,118),new DictWord(134,0,667),new DictWord(4,0,513),new DictWord(5,10,824),new DictWord(133,10,941),
				new DictWord(7,10,440),new DictWord(8,10,230),new DictWord(139,10,106),new DictWord(134,0,2034),new DictWord(135,11,1399),new DictWord(143,11,66),new DictWord(135,
					11,1529),new DictWord(4,11,145),new DictWord(6,11,176),new DictWord(7,11,395),new DictWord(9,11,562),new DictWord(144,11,28),new DictWord(132,11,501),new DictWord(
					132,0,704),new DictWord(134,0,1524),new DictWord(7,0,1078),new DictWord(134,11,464),new DictWord(6,11,509),new DictWord(10,11,82),new DictWord(20,11,91)
				,new DictWord(151,11,13),new DictWord(4,0,720),new DictWord(133,0,306),new DictWord(133,0,431),new DictWord(7,0,1196),new DictWord(4,10,914),new DictWord(5,10,800),
				new DictWord(133,10,852),new DictWord(135,11,1189),new DictWord(10,0,54),new DictWord(141,10,115),new DictWord(7,10,564),new DictWord(142,10,168),new DictWord(5,0,
					464),new DictWord(6,0,236),new DictWord(7,0,696),new DictWord(7,0,914),new DictWord(7,0,1108),new DictWord(7,0,1448),new DictWord(9,0,15),new DictWord(9,0,564),new DictWord(10,
					0,14),new DictWord(12,0,565),new DictWord(13,0,449),new DictWord(14,0,53),new DictWord(15,0,13),new DictWord(16,0,64),new DictWord(17,0,41),new DictWord(4,10,918),new DictWord(
					133,10,876),new DictWord(6,0,1418),new DictWord(134,10,1764),new DictWord(4,10,92),new DictWord(133,10,274),new DictWord(134,0,907),new DictWord(4,11,
					114),new DictWord(8,10,501),new DictWord(9,11,492),new DictWord(13,11,462),new DictWord(142,11,215),new DictWord(4,11,77),new DictWord(5,11,361),new DictWord(6,11,
					139),new DictWord(6,11,401),new DictWord(6,11,404),new DictWord(7,11,413),new DictWord(7,11,715),new DictWord(7,11,1716),new DictWord(11,11,279),new DictWord(12,11,
					179),new DictWord(12,11,258),new DictWord(13,11,244),new DictWord(142,11,358),new DictWord(6,0,1767),new DictWord(12,0,194),new DictWord(145,0,107),new DictWord(134
					,11,1717),new DictWord(5,10,743),new DictWord(142,11,329),new DictWord(4,10,49),new DictWord(7,10,280),new DictWord(135,10,1633),new DictWord(5,0,840),new DictWord(
					7,11,1061),new DictWord(8,11,82),new DictWord(11,11,250),new DictWord(12,11,420),new DictWord(141,11,184),new DictWord(135,11,724),new DictWord(134,0,
					900),new DictWord(136,10,47),new DictWord(134,0,1436),new DictWord(144,11,0),new DictWord(6,0,675),new DictWord(7,0,1008),new DictWord(7,0,1560),new DictWord(9,0,
					642),new DictWord(11,0,236),new DictWord(14,0,193),new DictWord(5,10,272),new DictWord(5,10,908),new DictWord(5,10,942),new DictWord(8,10,197),new DictWord(9,10,47)
				,new DictWord(11,10,538),new DictWord(139,10,742),new DictWord(4,0,68),new DictWord(5,0,628),new DictWord(5,0,634),new DictWord(6,0,386),new DictWord(7,0,794),new DictWord(8,0,
					273),new DictWord(9,0,563),new DictWord(10,0,105),new DictWord(10,0,171),new DictWord(11,0,94),new DictWord(139,0,354),new DictWord(135,10,1911),new DictWord(137,10
					,891),new DictWord(4,0,95),new DictWord(6,0,1297),new DictWord(6,0,1604),new DictWord(7,0,416),new DictWord(139,0,830),new DictWord(6,11,513),new DictWord(135,11,
					1052),new DictWord(7,0,731),new DictWord(13,0,20),new DictWord(143,0,11),new DictWord(137,11,899),new DictWord(10,0,850),new DictWord(140,0,697),new DictWord(4,0,
					662),new DictWord(7,11,1417),new DictWord(12,11,382),new DictWord(17,11,48),new DictWord(152,11,12),new DictWord(133,0,736),new DictWord(132,0,861),new DictWord(4,
					10,407),new DictWord(132,10,560),new DictWord(141,10,490),new DictWord(6,11,545),new DictWord(7,11,565),new DictWord(7,11,1669),new DictWord(10,11,114),
				new DictWord(11,11,642),new DictWord(140,11,618),new DictWord(6,0,871),new DictWord(134,0,1000),new DictWord(5,0,864),new DictWord(10,0,648),new DictWord(11,0,671),
				new DictWord(15,0,46),new DictWord(133,11,5),new DictWord(133,0,928),new DictWord(11,0,90),new DictWord(13,0,7),new DictWord(4,10,475),new DictWord(11,10,35),new DictWord(13,10
					,71),new DictWord(13,10,177),new DictWord(142,10,422),new DictWord(136,0,332),new DictWord(135,11,192),new DictWord(134,0,1055),new DictWord(136,11,763)
				,new DictWord(11,0,986),new DictWord(140,0,682),new DictWord(7,0,76),new DictWord(8,0,44),new DictWord(9,0,884),new DictWord(10,0,580),new DictWord(11,0,399),new DictWord(11,0,
					894),new DictWord(143,0,122),new DictWord(135,11,1237),new DictWord(135,10,636),new DictWord(11,0,300),new DictWord(6,10,222),new DictWord(7,10,1620),new DictWord(8
					,10,409),new DictWord(137,10,693),new DictWord(4,11,87),new DictWord(5,11,250),new DictWord(10,11,601),new DictWord(13,11,298),new DictWord(13,11,353),new DictWord(
					141,11,376),new DictWord(5,0,518),new DictWord(10,0,340),new DictWord(11,0,175),new DictWord(149,0,16),new DictWord(140,0,771),new DictWord(6,0,1108),new DictWord(
					137,0,831),new DictWord(132,0,836),new DictWord(135,0,1852),new DictWord(4,0,957),new DictWord(6,0,1804),new DictWord(8,0,842),new DictWord(8,0,843),new DictWord(8,
					0,851),new DictWord(8,0,855),new DictWord(140,0,767),new DictWord(135,11,814),new DictWord(4,11,57),new DictWord(7,11,1195),new DictWord(7,11,1438),new DictWord(7,
					11,1548),new DictWord(7,11,1835),new DictWord(7,11,1904),new DictWord(9,11,757),new DictWord(10,11,604),new DictWord(139,11,519),new DictWord(133,10,882
				),new DictWord(138,0,246),new DictWord(4,0,934),new DictWord(5,0,202),new DictWord(8,0,610),new DictWord(7,11,1897),new DictWord(12,11,290),new DictWord(13,11,80),new DictWord(
					13,11,437),new DictWord(145,11,74),new DictWord(8,0,96),new DictWord(9,0,36),new DictWord(10,0,607),new DictWord(10,0,804),new DictWord(10,0,832),new DictWord(11,0,
					423),new DictWord(11,0,442),new DictWord(12,0,309),new DictWord(14,0,199),new DictWord(15,0,90),new DictWord(145,0,110),new DictWord(132,10,426),new DictWord(7,0,
					654),new DictWord(8,0,240),new DictWord(6,10,58),new DictWord(7,10,745),new DictWord(7,10,1969),new DictWord(8,10,675),new DictWord(9,10,479),new DictWord(9,10,731)
				,new DictWord(10,10,330),new DictWord(10,10,593),new DictWord(10,10,817),new DictWord(11,10,32),new DictWord(11,10,133),new DictWord(11,10,221),new DictWord(145,10,
					68),new DictWord(9,0,13),new DictWord(9,0,398),new DictWord(9,0,727),new DictWord(10,0,75),new DictWord(10,0,184),new DictWord(10,0,230),new DictWord(10,0,564),new DictWord(10,
					0,569),new DictWord(11,0,973),new DictWord(12,0,70),new DictWord(12,0,189),new DictWord(13,0,57),new DictWord(141,0,257),new DictWord(4,11,209),new DictWord(135,11,
					902),new DictWord(7,0,391),new DictWord(137,10,538),new DictWord(134,0,403),new DictWord(6,11,303),new DictWord(7,11,335),new DictWord(7,11,1437),new DictWord(7,11,
					1668),new DictWord(8,11,553),new DictWord(8,11,652),new DictWord(8,11,656),new DictWord(9,11,558),new DictWord(11,11,743),new DictWord(149,11,18),new DictWord(132,
					11,559),new DictWord(11,0,75),new DictWord(142,0,267),new DictWord(6,0,815),new DictWord(141,11,2),new DictWord(141,0,366),new DictWord(137,0,631),new DictWord(133,
					11,1017),new DictWord(5,0,345),new DictWord(135,0,1016),new DictWord(133,11,709),new DictWord(134,11,1745),new DictWord(133,10,566),new DictWord(7,0,952
				),new DictWord(6,10,48),new DictWord(9,10,139),new DictWord(10,10,399),new DictWord(11,10,469),new DictWord(12,10,634),new DictWord(141,10,223),new DictWord(133,0,
					673),new DictWord(9,0,850),new DictWord(7,11,8),new DictWord(136,11,206),new DictWord(6,0,662),new DictWord(149,0,35),new DictWord(4,0,287),new DictWord(133,0,1018)
				,new DictWord(6,10,114),new DictWord(7,10,1224),new DictWord(7,10,1556),new DictWord(136,10,3),new DictWord(8,10,576),new DictWord(137,10,267),new DictWord(4,0,884)
				,new DictWord(5,0,34),new DictWord(10,0,724),new DictWord(12,0,444),new DictWord(13,0,354),new DictWord(18,0,32),new DictWord(23,0,24),new DictWord(23,0,31),new DictWord(152,0,
					5),new DictWord(133,10,933),new DictWord(132,11,776),new DictWord(138,0,151),new DictWord(136,0,427),new DictWord(134,0,382),new DictWord(132,0,329),new DictWord(9,
					0,846),new DictWord(10,0,827),new DictWord(138,11,33),new DictWord(9,0,279),new DictWord(10,0,407),new DictWord(14,0,84),new DictWord(22,0,18),new DictWord(135,11,
					1297),new DictWord(136,11,406),new DictWord(132,0,906),new DictWord(136,0,366),new DictWord(134,0,843),new DictWord(134,0,1443),new DictWord(135,0,1372)
				,new DictWord(138,0,992),new DictWord(4,0,123),new DictWord(5,0,605),new DictWord(7,0,1509),new DictWord(136,0,36),new DictWord(132,0,649),new DictWord(8,11,175),new DictWord(
					10,11,168),new DictWord(138,11,573),new DictWord(133,0,767),new DictWord(134,0,1018),new DictWord(135,11,1305),new DictWord(12,10,30),new DictWord(13,10
					,148),new DictWord(14,10,87),new DictWord(14,10,182),new DictWord(16,10,42),new DictWord(148,10,70),new DictWord(134,11,607),new DictWord(4,0,273),new DictWord(5,0,
					658),new DictWord(133,0,995),new DictWord(6,0,72),new DictWord(139,11,174),new DictWord(10,0,483),new DictWord(12,0,368),new DictWord(7,10,56),new DictWord(7,10,
					1989),new DictWord(8,10,337),new DictWord(8,10,738),new DictWord(9,10,600),new DictWord(13,10,447),new DictWord(142,10,92),new DictWord(5,11,784),new DictWord(138,
					10,666),new DictWord(135,0,1345),new DictWord(139,11,882),new DictWord(134,0,1293),new DictWord(133,0,589),new DictWord(134,0,1988),new DictWord(5,0,117
				),new DictWord(6,0,514),new DictWord(6,0,541),new DictWord(7,0,1164),new DictWord(7,0,1436),new DictWord(8,0,220),new DictWord(8,0,648),new DictWord(10,0,688),new DictWord(139,
					0,560),new DictWord(136,0,379),new DictWord(5,0,686),new DictWord(7,10,866),new DictWord(135,10,1163),new DictWord(132,10,328),new DictWord(9,11,14),new DictWord(9,
					11,441),new DictWord(10,11,306),new DictWord(139,11,9),new DictWord(4,10,101),new DictWord(135,10,1171),new DictWord(5,10,833),new DictWord(136,10,744),
				new DictWord(5,11,161),new DictWord(7,11,839),new DictWord(135,11,887),new DictWord(7,0,196),new DictWord(10,0,765),new DictWord(11,0,347),new DictWord(11,0,552),new DictWord(
					11,0,790),new DictWord(12,0,263),new DictWord(13,0,246),new DictWord(13,0,270),new DictWord(13,0,395),new DictWord(14,0,176),new DictWord(14,0,190),new DictWord(14,
					0,398),new DictWord(14,0,412),new DictWord(15,0,32),new DictWord(15,0,63),new DictWord(16,0,88),new DictWord(147,0,105),new DictWord(6,10,9),new DictWord(6,10,397),
				new DictWord(7,10,53),new DictWord(7,10,1742),new DictWord(10,10,632),new DictWord(11,10,828),new DictWord(140,10,146),new DictWord(5,0,381),new DictWord(135,0,1792
				),new DictWord(134,0,1452),new DictWord(135,11,429),new DictWord(8,0,367),new DictWord(10,0,760),new DictWord(14,0,79),new DictWord(20,0,17),new DictWord(152,0,0),new DictWord(
					7,0,616),new DictWord(138,0,413),new DictWord(11,10,417),new DictWord(12,10,223),new DictWord(140,10,265),new DictWord(7,11,1611),new DictWord(13,11,14)
				,new DictWord(15,11,44),new DictWord(19,11,13),new DictWord(148,11,76),new DictWord(135,0,1229),new DictWord(6,0,120),new DictWord(7,0,1188),new DictWord(7,0,1710),
				new DictWord(8,0,286),new DictWord(9,0,667),new DictWord(11,0,592),new DictWord(139,0,730),new DictWord(135,11,1814),new DictWord(135,0,1146),new DictWord(4,10,186)
				,new DictWord(5,10,157),new DictWord(8,10,168),new DictWord(138,10,6),new DictWord(4,0,352),new DictWord(135,0,687),new DictWord(4,0,192),new DictWord(5,0,49),new DictWord(6,0,
					200),new DictWord(6,0,293),new DictWord(6,0,1696),new DictWord(135,0,1151),new DictWord(133,10,875),new DictWord(5,10,773),new DictWord(5,10,991),new DictWord(6,10,
					1635),new DictWord(134,10,1788),new DictWord(7,10,111),new DictWord(136,10,581),new DictWord(6,0,935),new DictWord(134,0,1151),new DictWord(134,0,1050),
				new DictWord(132,0,650),new DictWord(132,0,147),new DictWord(11,0,194),new DictWord(12,0,62),new DictWord(12,0,88),new DictWord(11,11,194),new DictWord(12,11,62),new DictWord(
					140,11,88),new DictWord(6,0,339),new DictWord(135,0,923),new DictWord(134,10,1747),new DictWord(7,11,643),new DictWord(136,11,236),new DictWord(133,0,
					934),new DictWord(7,10,1364),new DictWord(7,10,1907),new DictWord(141,10,158),new DictWord(132,10,659),new DictWord(4,10,404),new DictWord(135,10,675),new DictWord(
					7,11,581),new DictWord(9,11,644),new DictWord(137,11,699),new DictWord(13,0,211),new DictWord(14,0,133),new DictWord(14,0,204),new DictWord(15,0,64),new DictWord(15
					,0,69),new DictWord(15,0,114),new DictWord(16,0,10),new DictWord(19,0,23),new DictWord(19,0,35),new DictWord(19,0,39),new DictWord(19,0,51),new DictWord(19,0,71),new DictWord(
					19,0,75),new DictWord(152,0,15),new DictWord(133,10,391),new DictWord(5,11,54),new DictWord(135,11,1513),new DictWord(7,0,222),new DictWord(8,0,341),new DictWord(5,
					10,540),new DictWord(134,10,1697),new DictWord(134,10,78),new DictWord(132,11,744),new DictWord(136,0,293),new DictWord(137,11,701),new DictWord(7,11,
					930),new DictWord(10,11,402),new DictWord(10,11,476),new DictWord(13,11,452),new DictWord(18,11,55),new DictWord(147,11,104),new DictWord(132,0,637),new DictWord(
					133,10,460),new DictWord(8,11,50),new DictWord(137,11,624),new DictWord(132,11,572),new DictWord(134,0,1159),new DictWord(4,10,199),new DictWord(139,10,
					34),new DictWord(134,0,847),new DictWord(134,10,388),new DictWord(6,11,43),new DictWord(7,11,38),new DictWord(8,11,248),new DictWord(9,11,504),new DictWord(138,11,
					513),new DictWord(9,0,683),new DictWord(4,10,511),new DictWord(6,10,608),new DictWord(9,10,333),new DictWord(10,10,602),new DictWord(11,10,441),new DictWord(11,10,
					723),new DictWord(11,10,976),new DictWord(140,10,357),new DictWord(9,0,867),new DictWord(138,0,837),new DictWord(6,0,944),new DictWord(135,11,326),new DictWord(135,
					0,1809),new DictWord(5,10,938),new DictWord(7,11,783),new DictWord(136,10,707),new DictWord(133,11,766),new DictWord(133,11,363),new DictWord(6,0,170),new DictWord(
					7,0,1080),new DictWord(8,0,395),new DictWord(8,0,487),new DictWord(141,0,147),new DictWord(6,11,258),new DictWord(140,11,409),new DictWord(4,0,535),new DictWord(8,0
					,618),new DictWord(5,11,249),new DictWord(148,11,82),new DictWord(6,0,1379),new DictWord(149,11,15),new DictWord(135,0,1625),new DictWord(150,0,23),new DictWord(5,
					11,393),new DictWord(6,11,378),new DictWord(7,11,1981),new DictWord(9,11,32),new DictWord(9,11,591),new DictWord(10,11,685),new DictWord(10,11,741),new DictWord(142
					,11,382),new DictWord(133,11,788),new DictWord(7,11,1968),new DictWord(10,11,19),new DictWord(139,11,911),new DictWord(7,11,1401),new DictWord(135,11,
					1476),new DictWord(4,11,61),new DictWord(5,11,58),new DictWord(5,11,171),new DictWord(5,11,635),new DictWord(5,11,683),new DictWord(5,11,700),new DictWord(6,11,291)
				,new DictWord(6,11,566),new DictWord(7,11,1650),new DictWord(11,11,523),new DictWord(12,11,273),new DictWord(12,11,303),new DictWord(15,11,39),new DictWord(143,11,
					111),new DictWord(6,10,469),new DictWord(7,10,1709),new DictWord(138,10,515),new DictWord(4,0,778),new DictWord(134,11,589),new DictWord(132,0,46),new DictWord(5,0,
					811),new DictWord(6,0,1679),new DictWord(6,0,1714),new DictWord(135,0,2032),new DictWord(7,0,1458),new DictWord(9,0,407),new DictWord(11,0,15),new DictWord(12,0,651
				),new DictWord(149,0,37),new DictWord(7,0,938),new DictWord(132,10,500),new DictWord(6,0,34),new DictWord(7,0,69),new DictWord(7,0,1089),new DictWord(7,0,1281),new DictWord(8,0
					,708),new DictWord(8,0,721),new DictWord(9,0,363),new DictWord(148,0,98),new DictWord(10,11,231),new DictWord(147,11,124),new DictWord(7,11,726),new DictWord(152,11
					,9),new DictWord(5,10,68),new DictWord(134,10,383),new DictWord(136,11,583),new DictWord(4,11,917),new DictWord(133,11,1005),new DictWord(11,10,216),new DictWord(
					139,10,340),new DictWord(135,11,1675),new DictWord(8,0,441),new DictWord(10,0,314),new DictWord(143,0,3),new DictWord(132,11,919),new DictWord(4,10,337)
				,new DictWord(6,10,353),new DictWord(7,10,1934),new DictWord(8,10,488),new DictWord(137,10,429),new DictWord(7,0,889),new DictWord(7,10,1795),new DictWord(8,10,259)
				,new DictWord(9,10,135),new DictWord(9,10,177),new DictWord(9,10,860),new DictWord(10,10,825),new DictWord(11,10,115),new DictWord(11,10,370),new DictWord(11,10,405
				),new DictWord(11,10,604),new DictWord(12,10,10),new DictWord(12,10,667),new DictWord(12,10,669),new DictWord(13,10,76),new DictWord(14,10,310),new DictWord(15,10,
					76),new DictWord(15,10,147),new DictWord(148,10,23),new DictWord(4,10,15),new DictWord(4,11,255),new DictWord(5,10,22),new DictWord(5,11,302),new DictWord(6,11,132)
				,new DictWord(6,10,244),new DictWord(7,10,40),new DictWord(7,11,128),new DictWord(7,10,200),new DictWord(7,11,283),new DictWord(7,10,906),new DictWord(7,10,1199),new DictWord(7
					,11,1299),new DictWord(9,10,616),new DictWord(10,11,52),new DictWord(10,11,514),new DictWord(10,10,716),new DictWord(11,10,635),new DictWord(11,10,801),
				new DictWord(11,11,925),new DictWord(12,10,458),new DictWord(13,11,92),new DictWord(142,11,309),new DictWord(132,0,462),new DictWord(137,11,173),new DictWord(135,10
					,1735),new DictWord(8,0,525),new DictWord(5,10,598),new DictWord(7,10,791),new DictWord(8,10,108),new DictWord(137,10,123),new DictWord(5,0,73),new DictWord(6,0,23)
				,new DictWord(134,0,338),new DictWord(132,0,676),new DictWord(132,10,683),new DictWord(7,0,725),new DictWord(8,0,498),new DictWord(139,0,268),new DictWord(12,0,21),
				new DictWord(151,0,7),new DictWord(135,0,773),new DictWord(4,10,155),new DictWord(135,10,1689),new DictWord(4,0,164),new DictWord(5,0,730),new DictWord(5,10,151),new DictWord(5
					,10,741),new DictWord(6,11,210),new DictWord(7,10,498),new DictWord(7,10,870),new DictWord(7,10,1542),new DictWord(12,10,213),new DictWord(14,10,36),new DictWord(14
					,10,391),new DictWord(17,10,111),new DictWord(18,10,6),new DictWord(18,10,46),new DictWord(18,10,151),new DictWord(19,10,36),new DictWord(20,10,32),new DictWord(20,
					10,56),new DictWord(20,10,69),new DictWord(20,10,102),new DictWord(21,10,4),new DictWord(22,10,8),new DictWord(22,10,10),new DictWord(22,10,14),new DictWord(150,10,
					31),new DictWord(4,10,624),new DictWord(135,10,1752),new DictWord(4,0,583),new DictWord(9,0,936),new DictWord(15,0,214),new DictWord(18,0,199),new DictWord(24,0,26)
				,new DictWord(134,11,588),new DictWord(7,0,1462),new DictWord(11,0,659),new DictWord(4,11,284),new DictWord(134,11,223),new DictWord(133,0,220),new DictWord(139,0,
					803),new DictWord(132,0,544),new DictWord(4,10,492),new DictWord(133,10,451),new DictWord(16,0,98),new DictWord(148,0,119),new DictWord(4,11,218),new DictWord(7,11,
					526),new DictWord(143,11,137),new DictWord(135,10,835),new DictWord(4,11,270),new DictWord(5,11,192),new DictWord(6,11,332),new DictWord(7,11,1322),new DictWord(13,
					11,9),new DictWord(13,10,70),new DictWord(14,11,104),new DictWord(142,11,311),new DictWord(132,10,539),new DictWord(140,11,661),new DictWord(5,0,176),new DictWord(6
					,0,437),new DictWord(6,0,564),new DictWord(11,0,181),new DictWord(141,0,183),new DictWord(135,0,1192),new DictWord(6,10,113),new DictWord(135,10,436),new DictWord(
					136,10,718),new DictWord(135,10,520),new DictWord(135,0,1878),new DictWord(140,11,196),new DictWord(7,11,379),new DictWord(8,11,481),new DictWord(137,11
					,377),new DictWord(5,11,1003),new DictWord(6,11,149),new DictWord(137,11,746),new DictWord(8,11,262),new DictWord(9,11,627),new DictWord(10,11,18),new DictWord(11,
					11,214),new DictWord(11,11,404),new DictWord(11,11,457),new DictWord(11,11,780),new DictWord(11,11,849),new DictWord(11,11,913),new DictWord(13,11,330),
				new DictWord(13,11,401),new DictWord(142,11,200),new DictWord(149,0,26),new DictWord(136,11,304),new DictWord(132,11,142),new DictWord(135,0,944),new DictWord(4,0,
					790),new DictWord(5,0,273),new DictWord(134,0,394),new DictWord(134,0,855),new DictWord(4,0,135),new DictWord(6,0,127),new DictWord(7,0,1185),new DictWord(7,0,1511)
				,new DictWord(8,0,613),new DictWord(11,0,5),new DictWord(12,0,336),new DictWord(12,0,495),new DictWord(12,0,586),new DictWord(12,0,660),new DictWord(12,0,668),new DictWord(14,0
					,385),new DictWord(15,0,118),new DictWord(17,0,20),new DictWord(146,0,98),new DictWord(6,0,230),new DictWord(9,0,752),new DictWord(18,0,109),new DictWord(12,10,610)
				,new DictWord(13,10,431),new DictWord(144,10,59),new DictWord(7,0,1954),new DictWord(135,11,925),new DictWord(4,11,471),new DictWord(5,11,51),new DictWord(6,11,602)
				,new DictWord(8,11,484),new DictWord(10,11,195),new DictWord(140,11,159),new DictWord(132,10,307),new DictWord(136,11,688),new DictWord(132,11,697),new DictWord(7,
					11,812),new DictWord(7,11,1261),new DictWord(7,11,1360),new DictWord(9,11,632),new DictWord(140,11,352),new DictWord(5,0,162),new DictWord(8,0,68),new DictWord(133,
					10,964),new DictWord(4,0,654),new DictWord(136,11,212),new DictWord(4,0,156),new DictWord(7,0,998),new DictWord(7,0,1045),new DictWord(7,0,1860),new DictWord(9,0,48
				),new DictWord(9,0,692),new DictWord(11,0,419),new DictWord(139,0,602),new DictWord(133,11,221),new DictWord(4,11,373),new DictWord(5,11,283),new DictWord(6,11,480)
				,new DictWord(135,11,609),new DictWord(142,11,216),new DictWord(132,0,240),new DictWord(6,11,192),new DictWord(9,11,793),new DictWord(145,11,55),new DictWord(4,10,
					75),new DictWord(5,10,180),new DictWord(6,10,500),new DictWord(7,10,58),new DictWord(7,10,710),new DictWord(138,10,645),new DictWord(4,11,132),new DictWord(5,11,69)
				,new DictWord(5,10,649),new DictWord(135,11,1242),new DictWord(6,10,276),new DictWord(7,10,282),new DictWord(7,10,879),new DictWord(7,10,924),new DictWord(8,10,459)
				,new DictWord(9,10,599),new DictWord(9,10,754),new DictWord(11,10,574),new DictWord(12,10,128),new DictWord(12,10,494),new DictWord(13,10,52),new DictWord(13,10,301
				),new DictWord(15,10,30),new DictWord(143,10,132),new DictWord(132,10,200),new DictWord(4,11,111),new DictWord(135,11,302),new DictWord(9,0,197),new DictWord(10,0,
					300),new DictWord(12,0,473),new DictWord(13,0,90),new DictWord(141,0,405),new DictWord(132,11,767),new DictWord(6,11,42),new DictWord(7,11,1416),new DictWord(7,11,
					1590),new DictWord(7,11,2005),new DictWord(8,11,131),new DictWord(8,11,466),new DictWord(9,11,672),new DictWord(13,11,252),new DictWord(148,11,103),new DictWord(8,0
					,958),new DictWord(8,0,999),new DictWord(10,0,963),new DictWord(138,0,1001),new DictWord(135,10,1621),new DictWord(135,0,858),new DictWord(4,0,606),new DictWord(137
					,11,444),new DictWord(6,11,44),new DictWord(136,11,368),new DictWord(139,11,172),new DictWord(4,11,570),new DictWord(133,11,120),new DictWord(139,11,624
				),new DictWord(7,0,1978),new DictWord(8,0,676),new DictWord(6,10,225),new DictWord(137,10,211),new DictWord(7,0,972),new DictWord(11,0,102),new DictWord(136,10,687)
				,new DictWord(6,11,227),new DictWord(135,11,1589),new DictWord(8,10,58),new DictWord(9,10,724),new DictWord(11,10,809),new DictWord(13,10,113),new DictWord(145,10,
					72),new DictWord(4,0,361),new DictWord(133,0,315),new DictWord(132,0,461),new DictWord(6,10,345),new DictWord(135,10,1247),new DictWord(132,0,472),new DictWord(8,10
					,767),new DictWord(8,10,803),new DictWord(9,10,301),new DictWord(137,10,903),new DictWord(135,11,1333),new DictWord(135,11,477),new DictWord(7,10,1949),
				new DictWord(136,10,674),new DictWord(6,0,905),new DictWord(138,0,747),new DictWord(133,0,155),new DictWord(134,10,259),new DictWord(7,0,163),new DictWord(8,0,319),
				new DictWord(9,0,402),new DictWord(10,0,24),new DictWord(10,0,681),new DictWord(11,0,200),new DictWord(12,0,253),new DictWord(12,0,410),new DictWord(142,0,219),new DictWord(5,0
					,475),new DictWord(7,0,1780),new DictWord(9,0,230),new DictWord(11,0,297),new DictWord(11,0,558),new DictWord(14,0,322),new DictWord(19,0,76),new DictWord(6,11,1667
				),new DictWord(7,11,2036),new DictWord(138,11,600),new DictWord(136,10,254),new DictWord(6,0,848),new DictWord(135,0,1956),new DictWord(6,11,511),new DictWord(140,
					11,132),new DictWord(5,11,568),new DictWord(6,11,138),new DictWord(135,11,1293),new DictWord(6,0,631),new DictWord(137,0,838),new DictWord(149,0,36),new DictWord(4,
					11,565),new DictWord(8,11,23),new DictWord(136,11,827),new DictWord(5,0,944),new DictWord(134,0,1769),new DictWord(4,0,144),new DictWord(6,0,842),new DictWord(6,0,
					1400),new DictWord(4,11,922),new DictWord(133,11,1023),new DictWord(133,10,248),new DictWord(9,10,800),new DictWord(10,10,693),new DictWord(11,10,482),new DictWord(
					11,10,734),new DictWord(139,10,789),new DictWord(7,11,1002),new DictWord(139,11,145),new DictWord(4,10,116),new DictWord(5,10,95),new DictWord(5,10,445)
				,new DictWord(7,10,1688),new DictWord(8,10,29),new DictWord(9,10,272),new DictWord(11,10,509),new DictWord(139,10,915),new DictWord(14,0,369),new DictWord(146,0,72)
				,new DictWord(135,10,1641),new DictWord(132,11,740),new DictWord(133,10,543),new DictWord(140,11,116),new DictWord(6,0,247),new DictWord(9,0,555),new DictWord(5,10,
					181),new DictWord(136,10,41),new DictWord(133,10,657),new DictWord(136,0,996),new DictWord(138,10,709),new DictWord(7,0,189),new DictWord(8,10,202),new DictWord(138
					,10,536),new DictWord(136,11,402),new DictWord(4,11,716),new DictWord(141,11,31),new DictWord(10,0,280),new DictWord(138,0,797),new DictWord(9,10,423),new DictWord(
					140,10,89),new DictWord(8,10,113),new DictWord(9,10,877),new DictWord(10,10,554),new DictWord(11,10,83),new DictWord(12,10,136),new DictWord(147,10,109)
				,new DictWord(133,10,976),new DictWord(7,0,746),new DictWord(132,10,206),new DictWord(136,0,526),new DictWord(139,0,345),new DictWord(136,0,1017),new DictWord(8,11,
					152),new DictWord(9,11,53),new DictWord(9,11,268),new DictWord(9,11,901),new DictWord(10,11,518),new DictWord(10,11,829),new DictWord(11,11,188),new DictWord(13,11,
					74),new DictWord(14,11,46),new DictWord(15,11,17),new DictWord(15,11,33),new DictWord(17,11,40),new DictWord(18,11,36),new DictWord(19,11,20),new DictWord(22,11,1),
				new DictWord(152,11,2),new DictWord(133,11,736),new DictWord(136,11,532),new DictWord(5,0,428),new DictWord(138,0,651),new DictWord(135,11,681),new DictWord(135,0,
					1162),new DictWord(7,0,327),new DictWord(13,0,230),new DictWord(17,0,113),new DictWord(8,10,226),new DictWord(10,10,537),new DictWord(11,10,570),new DictWord(11,10,
					605),new DictWord(11,10,799),new DictWord(11,10,804),new DictWord(12,10,85),new DictWord(12,10,516),new DictWord(12,10,623),new DictWord(12,11,677),new DictWord(13,
					10,361),new DictWord(14,10,77),new DictWord(14,10,78),new DictWord(147,10,110),new DictWord(4,0,792),new DictWord(7,0,1717),new DictWord(10,0,546),new DictWord(132,
					10,769),new DictWord(4,11,684),new DictWord(136,11,384),new DictWord(132,10,551),new DictWord(134,0,1203),new DictWord(9,10,57),new DictWord(9,10,459),new DictWord(
					10,10,425),new DictWord(11,10,119),new DictWord(12,10,184),new DictWord(12,10,371),new DictWord(13,10,358),new DictWord(145,10,51),new DictWord(5,0,672)
				,new DictWord(5,10,814),new DictWord(8,10,10),new DictWord(9,10,421),new DictWord(9,10,729),new DictWord(10,10,609),new DictWord(139,10,689),new DictWord(138,0,189)
				,new DictWord(134,10,624),new DictWord(7,11,110),new DictWord(7,11,188),new DictWord(8,11,290),new DictWord(8,11,591),new DictWord(9,11,382),new DictWord(9,11,649),
				new DictWord(11,11,71),new DictWord(11,11,155),new DictWord(11,11,313),new DictWord(12,11,5),new DictWord(13,11,325),new DictWord(142,11,287),new DictWord(133,0,99)
				,new DictWord(6,0,1053),new DictWord(135,0,298),new DictWord(7,11,360),new DictWord(7,11,425),new DictWord(9,11,66),new DictWord(9,11,278),new DictWord(138,11,644),
				new DictWord(4,0,397),new DictWord(136,0,555),new DictWord(137,10,269),new DictWord(132,10,528),new DictWord(4,11,900),new DictWord(133,11,861),new DictWord(6,0,
					1157),new DictWord(5,11,254),new DictWord(7,11,985),new DictWord(136,11,73),new DictWord(7,11,1959),new DictWord(136,11,683),new DictWord(12,0,398),new DictWord(20,
					0,39),new DictWord(21,0,11),new DictWord(150,0,41),new DictWord(4,0,485),new DictWord(7,0,353),new DictWord(135,0,1523),new DictWord(6,0,366),new DictWord(7,0,1384)
				,new DictWord(135,0,1601),new DictWord(138,0,787),new DictWord(137,0,282),new DictWord(5,10,104),new DictWord(6,10,173),new DictWord(135,10,1631),new DictWord(139,
					11,146),new DictWord(4,0,157),new DictWord(133,0,471),new DictWord(134,0,941),new DictWord(132,11,725),new DictWord(7,0,1336),new DictWord(8,10,138),new DictWord(8,
					10,342),new DictWord(9,10,84),new DictWord(10,10,193),new DictWord(11,10,883),new DictWord(140,10,359),new DictWord(134,11,196),new DictWord(136,0,116),
				new DictWord(133,11,831),new DictWord(134,0,787),new DictWord(134,10,95),new DictWord(6,10,406),new DictWord(10,10,409),new DictWord(10,10,447),new DictWord(11,10,
					44),new DictWord(140,10,100),new DictWord(5,0,160),new DictWord(7,0,363),new DictWord(7,0,589),new DictWord(10,0,170),new DictWord(141,0,55),new DictWord(134,0,1815
				),new DictWord(132,0,866),new DictWord(6,0,889),new DictWord(6,0,1067),new DictWord(6,0,1183),new DictWord(4,11,321),new DictWord(134,11,569),new DictWord(5,11,848)
				,new DictWord(134,11,66),new DictWord(4,11,36),new DictWord(6,10,1636),new DictWord(7,11,1387),new DictWord(10,11,205),new DictWord(11,11,755),new DictWord(141,11,
					271),new DictWord(132,0,689),new DictWord(9,0,820),new DictWord(4,10,282),new DictWord(7,10,1034),new DictWord(11,10,398),new DictWord(11,10,634),new DictWord(12,10
					,1),new DictWord(12,10,79),new DictWord(12,10,544),new DictWord(14,10,237),new DictWord(17,10,10),new DictWord(146,10,20),new DictWord(4,0,108),new DictWord(7,0,804
				),new DictWord(139,0,498),new DictWord(132,11,887),new DictWord(6,0,1119),new DictWord(135,11,620),new DictWord(6,11,165),new DictWord(138,11,388),new DictWord(5,0,
					244),new DictWord(5,10,499),new DictWord(6,10,476),new DictWord(7,10,600),new DictWord(7,10,888),new DictWord(135,10,1096),new DictWord(140,0,609),new DictWord(135,
					0,1005),new DictWord(4,0,412),new DictWord(133,0,581),new DictWord(4,11,719),new DictWord(135,11,155),new DictWord(7,10,296),new DictWord(7,10,596),new DictWord(8,
					10,560),new DictWord(8,10,586),new DictWord(9,10,612),new DictWord(11,10,304),new DictWord(12,10,46),new DictWord(13,10,89),new DictWord(14,10,112),new DictWord(145
					,10,122),new DictWord(4,0,895),new DictWord(133,0,772),new DictWord(142,11,307),new DictWord(135,0,1898),new DictWord(4,0,926),new DictWord(133,0,983),new DictWord(
					4,11,353),new DictWord(6,11,146),new DictWord(6,11,1789),new DictWord(7,11,288),new DictWord(7,11,990),new DictWord(7,11,1348),new DictWord(9,11,665),new DictWord(9
					,11,898),new DictWord(11,11,893),new DictWord(142,11,212),new DictWord(132,0,538),new DictWord(133,11,532),new DictWord(6,0,294),new DictWord(7,0,1267),
				new DictWord(8,0,624),new DictWord(141,0,496),new DictWord(7,0,1325),new DictWord(4,11,45),new DictWord(135,11,1257),new DictWord(138,0,301),new DictWord(9,0,298),new DictWord(
					12,0,291),new DictWord(13,0,276),new DictWord(14,0,6),new DictWord(17,0,18),new DictWord(21,0,32),new DictWord(7,10,1599),new DictWord(7,10,1723),new DictWord(8,10,
					79),new DictWord(8,10,106),new DictWord(8,10,190),new DictWord(8,10,302),new DictWord(8,10,383),new DictWord(8,10,713),new DictWord(9,10,119),new DictWord(9,10,233)
				,new DictWord(9,10,419),new DictWord(9,10,471),new DictWord(10,10,181),new DictWord(10,10,406),new DictWord(11,10,57),new DictWord(11,10,85),new DictWord(11,10,120)
				,new DictWord(11,10,177),new DictWord(11,10,296),new DictWord(11,10,382),new DictWord(11,10,454),new DictWord(11,10,758),new DictWord(11,10,999),new DictWord(12,10,
					27),new DictWord(12,10,131),new DictWord(12,10,245),new DictWord(12,10,312),new DictWord(12,10,446),new DictWord(12,10,454),new DictWord(13,10,98),new DictWord(13,
					10,426),new DictWord(13,10,508),new DictWord(14,10,163),new DictWord(14,10,272),new DictWord(14,10,277),new DictWord(14,10,370),new DictWord(15,10,95),new DictWord(
					15,10,138),new DictWord(15,10,167),new DictWord(17,10,38),new DictWord(148,10,96),new DictWord(132,0,757),new DictWord(134,0,1263),new DictWord(4,0,820)
				,new DictWord(134,10,1759),new DictWord(133,0,722),new DictWord(136,11,816),new DictWord(138,10,372),new DictWord(145,10,16),new DictWord(134,0,1039),new DictWord(4
					,0,991),new DictWord(134,0,2028),new DictWord(133,10,258),new DictWord(7,0,1875),new DictWord(139,0,124),new DictWord(6,11,559),new DictWord(6,11,1691),
				new DictWord(135,11,586),new DictWord(5,0,324),new DictWord(7,0,881),new DictWord(8,10,134),new DictWord(9,10,788),new DictWord(140,10,438),new DictWord(7,11,1823),
				new DictWord(139,11,693),new DictWord(6,0,1348),new DictWord(134,0,1545),new DictWord(134,0,911),new DictWord(132,0,954),new DictWord(8,0,329),new DictWord(8,0,414)
				,new DictWord(7,10,1948),new DictWord(135,10,2004),new DictWord(5,0,517),new DictWord(6,10,439),new DictWord(7,10,780),new DictWord(135,10,1040),new DictWord(132,0,
					816),new DictWord(5,10,1),new DictWord(6,10,81),new DictWord(138,10,520),new DictWord(9,0,713),new DictWord(10,0,222),new DictWord(5,10,482),new DictWord(8,10,98),new DictWord(
					10,10,700),new DictWord(10,10,822),new DictWord(11,10,302),new DictWord(11,10,778),new DictWord(12,10,50),new DictWord(12,10,127),new DictWord(12,10,396
				),new DictWord(13,10,62),new DictWord(13,10,328),new DictWord(14,10,122),new DictWord(147,10,72),new DictWord(137,0,33),new DictWord(5,10,2),new DictWord(7,10,1494)
				,new DictWord(136,10,589),new DictWord(6,10,512),new DictWord(7,10,797),new DictWord(8,10,253),new DictWord(9,10,77),new DictWord(10,10,1),new DictWord(10,11,108),new DictWord(
					10,10,129),new DictWord(10,10,225),new DictWord(11,11,116),new DictWord(11,10,118),new DictWord(11,10,226),new DictWord(11,10,251),new DictWord(11,10,
					430),new DictWord(11,10,701),new DictWord(11,10,974),new DictWord(11,10,982),new DictWord(12,10,64),new DictWord(12,10,260),new DictWord(12,10,488),new DictWord(140
					,10,690),new DictWord(134,11,456),new DictWord(133,11,925),new DictWord(5,0,150),new DictWord(7,0,106),new DictWord(7,0,774),new DictWord(8,0,603),new DictWord(9,0,
					593),new DictWord(9,0,634),new DictWord(10,0,44),new DictWord(10,0,173),new DictWord(11,0,462),new DictWord(11,0,515),new DictWord(13,0,216),new DictWord(13,0,288),
				new DictWord(142,0,400),new DictWord(137,10,347),new DictWord(5,0,748),new DictWord(134,0,553),new DictWord(12,0,108),new DictWord(141,0,291),new DictWord(7,0,420),
				new DictWord(4,10,12),new DictWord(7,10,522),new DictWord(7,10,809),new DictWord(8,10,797),new DictWord(141,10,88),new DictWord(6,11,193),new DictWord(7,11,240),new DictWord(7,
					11,1682),new DictWord(10,11,51),new DictWord(10,11,640),new DictWord(11,11,410),new DictWord(13,11,82),new DictWord(14,11,247),new DictWord(14,11,331),new DictWord(
					142,11,377),new DictWord(133,10,528),new DictWord(135,0,1777),new DictWord(4,0,493),new DictWord(144,0,55),new DictWord(136,11,633),new DictWord(139,0,
					81),new DictWord(6,0,980),new DictWord(136,0,321),new DictWord(148,10,109),new DictWord(5,10,266),new DictWord(9,10,290),new DictWord(9,10,364),new DictWord(10,10,
					293),new DictWord(11,10,606),new DictWord(142,10,45),new DictWord(6,0,568),new DictWord(7,0,112),new DictWord(7,0,1804),new DictWord(8,0,362),new DictWord(8,0,410),
				new DictWord(8,0,830),new DictWord(9,0,514),new DictWord(11,0,649),new DictWord(142,0,157),new DictWord(4,0,74),new DictWord(6,0,510),new DictWord(6,10,594),new DictWord(9,10,
					121),new DictWord(10,10,49),new DictWord(10,10,412),new DictWord(139,10,834),new DictWord(134,0,838),new DictWord(136,10,748),new DictWord(132,10,466),new DictWord(
					132,0,625),new DictWord(135,11,1443),new DictWord(4,11,237),new DictWord(135,11,514),new DictWord(9,10,378),new DictWord(141,10,162),new DictWord(6,0,16
				),new DictWord(6,0,158),new DictWord(7,0,43),new DictWord(7,0,129),new DictWord(7,0,181),new DictWord(8,0,276),new DictWord(8,0,377),new DictWord(10,0,523),new DictWord(11,0,
					816),new DictWord(12,0,455),new DictWord(13,0,303),new DictWord(142,0,135),new DictWord(135,0,281),new DictWord(4,0,1),new DictWord(7,0,1143),new DictWord(7,0,1463)
				,new DictWord(8,0,61),new DictWord(9,0,207),new DictWord(9,0,390),new DictWord(9,0,467),new DictWord(139,0,836),new DictWord(6,11,392),new DictWord(7,11,65),new DictWord(135,11
					,2019),new DictWord(132,10,667),new DictWord(4,0,723),new DictWord(5,0,895),new DictWord(7,0,1031),new DictWord(8,0,199),new DictWord(8,0,340),new DictWord(9,0,153)
				,new DictWord(9,0,215),new DictWord(10,0,21),new DictWord(10,0,59),new DictWord(10,0,80),new DictWord(10,0,224),new DictWord(10,0,838),new DictWord(11,0,229),new DictWord(11,0,
					652),new DictWord(12,0,192),new DictWord(13,0,146),new DictWord(142,0,91),new DictWord(132,0,295),new DictWord(137,0,51),new DictWord(9,11,222),new DictWord(10,11,
					43),new DictWord(139,11,900),new DictWord(5,0,309),new DictWord(140,0,211),new DictWord(5,0,125),new DictWord(8,0,77),new DictWord(138,0,15),new DictWord(136,11,604
				),new DictWord(138,0,789),new DictWord(5,0,173),new DictWord(4,10,39),new DictWord(7,10,1843),new DictWord(8,10,407),new DictWord(11,10,144),new DictWord(140,10,523
				),new DictWord(138,11,265),new DictWord(133,0,439),new DictWord(132,10,510),new DictWord(7,0,648),new DictWord(7,0,874),new DictWord(11,0,164),new DictWord(12,0,76)
				,new DictWord(18,0,9),new DictWord(7,10,1980),new DictWord(10,10,487),new DictWord(138,10,809),new DictWord(12,0,111),new DictWord(14,0,294),new DictWord(19,0,45),new DictWord(
					13,10,260),new DictWord(146,10,63),new DictWord(133,11,549),new DictWord(134,10,570),new DictWord(4,0,8),new DictWord(7,0,1152),new DictWord(7,0,1153),new DictWord(
					7,0,1715),new DictWord(9,0,374),new DictWord(10,0,478),new DictWord(139,0,648),new DictWord(135,0,1099),new DictWord(5,0,575),new DictWord(6,0,354),new DictWord(135
					,0,701),new DictWord(7,11,36),new DictWord(8,11,201),new DictWord(136,11,605),new DictWord(4,10,787),new DictWord(136,11,156),new DictWord(6,0,518),new DictWord(149
					,11,13),new DictWord(140,11,224),new DictWord(134,0,702),new DictWord(132,10,516),new DictWord(5,11,724),new DictWord(10,11,305),new DictWord(11,11,151)
				,new DictWord(12,11,33),new DictWord(12,11,121),new DictWord(12,11,381),new DictWord(17,11,3),new DictWord(17,11,27),new DictWord(17,11,78),new DictWord(18,11,18),new DictWord(
					19,11,54),new DictWord(149,11,5),new DictWord(8,0,87),new DictWord(4,11,523),new DictWord(5,11,638),new DictWord(11,10,887),new DictWord(14,10,365),new DictWord(142
					,10,375),new DictWord(138,0,438),new DictWord(136,10,821),new DictWord(135,11,1908),new DictWord(6,11,242),new DictWord(7,11,227),new DictWord(7,11,1581
				),new DictWord(8,11,104),new DictWord(9,11,113),new DictWord(9,11,220),new DictWord(9,11,427),new DictWord(10,11,74),new DictWord(10,11,239),new DictWord(11,11,579)
				,new DictWord(11,11,1023),new DictWord(13,11,4),new DictWord(13,11,204),new DictWord(13,11,316),new DictWord(18,11,95),new DictWord(148,11,86),new DictWord(4,0,69),
				new DictWord(5,0,122),new DictWord(5,0,849),new DictWord(6,0,1633),new DictWord(9,0,656),new DictWord(138,0,464),new DictWord(7,0,1802),new DictWord(4,10,10),new DictWord(139,
					10,786),new DictWord(135,11,861),new DictWord(139,0,499),new DictWord(7,0,476),new DictWord(7,0,1592),new DictWord(138,0,87),new DictWord(133,10,684),new DictWord(4
					,0,840),new DictWord(134,10,27),new DictWord(142,0,283),new DictWord(6,0,1620),new DictWord(7,11,1328),new DictWord(136,11,494),new DictWord(5,0,859),new DictWord(7
					,0,1160),new DictWord(8,0,107),new DictWord(9,0,291),new DictWord(9,0,439),new DictWord(10,0,663),new DictWord(11,0,609),new DictWord(140,0,197),new DictWord(7,11,
					1306),new DictWord(8,11,505),new DictWord(9,11,482),new DictWord(10,11,126),new DictWord(11,11,225),new DictWord(12,11,347),new DictWord(12,11,449),new DictWord(13,
					11,19),new DictWord(142,11,218),new DictWord(5,11,268),new DictWord(10,11,764),new DictWord(12,11,120),new DictWord(13,11,39),new DictWord(145,11,127),new DictWord(
					145,10,56),new DictWord(7,11,1672),new DictWord(10,11,472),new DictWord(11,11,189),new DictWord(143,11,51),new DictWord(6,10,342),new DictWord(6,10,496)
				,new DictWord(8,10,275),new DictWord(137,10,206),new DictWord(133,0,600),new DictWord(4,0,117),new DictWord(6,0,372),new DictWord(7,0,1905),new DictWord(142,0,323),
				new DictWord(4,10,909),new DictWord(5,10,940),new DictWord(135,11,1471),new DictWord(132,10,891),new DictWord(4,0,722),new DictWord(139,0,471),new DictWord(4,11,384
				),new DictWord(135,11,1022),new DictWord(132,10,687),new DictWord(9,0,5),new DictWord(12,0,216),new DictWord(12,0,294),new DictWord(12,0,298),new DictWord(12,0,400)
				,new DictWord(12,0,518),new DictWord(13,0,229),new DictWord(143,0,139),new DictWord(135,11,1703),new DictWord(7,11,1602),new DictWord(10,11,698),new DictWord(12,11,
					212),new DictWord(141,11,307),new DictWord(6,10,41),new DictWord(141,10,160),new DictWord(135,11,1077),new DictWord(9,11,159),new DictWord(11,11,28),new DictWord(
					140,11,603),new DictWord(4,0,514),new DictWord(7,0,1304),new DictWord(138,0,477),new DictWord(134,0,1774),new DictWord(9,0,88),new DictWord(139,0,270),new DictWord(
					5,0,12),new DictWord(7,0,375),new DictWord(9,0,438),new DictWord(134,10,1718),new DictWord(132,11,515),new DictWord(136,10,778),new DictWord(8,11,632),new DictWord(
					8,11,697),new DictWord(137,11,854),new DictWord(6,0,362),new DictWord(6,0,997),new DictWord(146,0,51),new DictWord(7,0,816),new DictWord(7,0,1241),new DictWord(9,0,
					283),new DictWord(9,0,520),new DictWord(10,0,213),new DictWord(10,0,307),new DictWord(10,0,463),new DictWord(10,0,671),new DictWord(10,0,746),new DictWord(11,0,401)
				,new DictWord(11,0,794),new DictWord(12,0,517),new DictWord(18,0,107),new DictWord(147,0,115),new DictWord(133,10,115),new DictWord(150,11,28),new DictWord(4,11,136
				),new DictWord(133,11,551),new DictWord(142,10,314),new DictWord(132,0,258),new DictWord(6,0,22),new DictWord(7,0,903),new DictWord(7,0,1963),new DictWord(8,0,639),
				new DictWord(138,0,577),new DictWord(5,0,681),new DictWord(8,0,782),new DictWord(13,0,130),new DictWord(17,0,84),new DictWord(5,10,193),new DictWord(140,10,178),new DictWord(9,
					11,17),new DictWord(138,11,291),new DictWord(7,11,1287),new DictWord(9,11,44),new DictWord(10,11,552),new DictWord(10,11,642),new DictWord(11,11,839),new DictWord(
					12,11,274),new DictWord(12,11,275),new DictWord(12,11,372),new DictWord(13,11,91),new DictWord(142,11,125),new DictWord(135,10,174),new DictWord(4,0,664
				),new DictWord(5,0,804),new DictWord(139,0,1013),new DictWord(134,0,942),new DictWord(6,0,1349),new DictWord(6,0,1353),new DictWord(6,0,1450),new DictWord(7,11,1518
				),new DictWord(139,11,694),new DictWord(11,0,356),new DictWord(4,10,122),new DictWord(5,10,796),new DictWord(5,10,952),new DictWord(6,10,1660),new DictWord(6,10,
					1671),new DictWord(8,10,567),new DictWord(9,10,687),new DictWord(9,10,742),new DictWord(10,10,686),new DictWord(11,10,682),new DictWord(140,10,281),new DictWord(5,0
					,32),new DictWord(6,11,147),new DictWord(7,11,886),new DictWord(9,11,753),new DictWord(138,11,268),new DictWord(5,10,179),new DictWord(7,10,1095),new DictWord(135,
					10,1213),new DictWord(4,10,66),new DictWord(7,10,722),new DictWord(135,10,904),new DictWord(135,10,352),new DictWord(9,11,245),new DictWord(138,11,137),
				new DictWord(4,0,289),new DictWord(7,0,629),new DictWord(7,0,1698),new DictWord(7,0,1711),new DictWord(12,0,215),new DictWord(133,11,414),new DictWord(6,0,1975),new DictWord(
					135,11,1762),new DictWord(6,0,450),new DictWord(136,0,109),new DictWord(141,10,35),new DictWord(134,11,599),new DictWord(136,0,705),new DictWord(133,0,
					664),new DictWord(134,11,1749),new DictWord(11,11,402),new DictWord(12,11,109),new DictWord(12,11,431),new DictWord(13,11,179),new DictWord(13,11,206),new DictWord(
					14,11,175),new DictWord(14,11,217),new DictWord(16,11,3),new DictWord(148,11,53),new DictWord(135,0,1238),new DictWord(134,11,1627),new DictWord(132,11,
					488),new DictWord(13,0,318),new DictWord(10,10,592),new DictWord(10,10,753),new DictWord(12,10,317),new DictWord(12,10,355),new DictWord(12,10,465),new DictWord(12,
					10,469),new DictWord(12,10,560),new DictWord(140,10,578),new DictWord(133,10,564),new DictWord(132,11,83),new DictWord(140,11,676),new DictWord(6,0,1872
				),new DictWord(6,0,1906),new DictWord(6,0,1907),new DictWord(9,0,934),new DictWord(9,0,956),new DictWord(9,0,960),new DictWord(9,0,996),new DictWord(12,0,794),new DictWord(12,0
					,876),new DictWord(12,0,880),new DictWord(12,0,918),new DictWord(15,0,230),new DictWord(18,0,234),new DictWord(18,0,238),new DictWord(21,0,38),new DictWord(149,0,62
				),new DictWord(134,10,556),new DictWord(134,11,278),new DictWord(137,0,103),new DictWord(7,10,544),new DictWord(8,10,719),new DictWord(138,10,61),new DictWord(4,10,
					5),new DictWord(5,10,498),new DictWord(8,10,637),new DictWord(137,10,521),new DictWord(7,0,777),new DictWord(12,0,229),new DictWord(12,0,239),new DictWord(15,0,12),
				new DictWord(12,11,229),new DictWord(12,11,239),new DictWord(143,11,12),new DictWord(6,0,26),new DictWord(7,11,388),new DictWord(7,11,644),new DictWord(139,11,781),
				new DictWord(7,11,229),new DictWord(8,11,59),new DictWord(9,11,190),new DictWord(9,11,257),new DictWord(10,11,378),new DictWord(140,11,191),new DictWord(133,10,927)
				,new DictWord(135,10,1441),new DictWord(4,10,893),new DictWord(5,10,780),new DictWord(133,10,893),new DictWord(4,0,414),new DictWord(5,0,467),new DictWord(9,0,654),
				new DictWord(10,0,451),new DictWord(12,0,59),new DictWord(141,0,375),new DictWord(142,0,173),new DictWord(135,0,17),new DictWord(7,0,1350),new DictWord(133,10,238),
				new DictWord(135,0,955),new DictWord(4,0,960),new DictWord(10,0,887),new DictWord(12,0,753),new DictWord(18,0,161),new DictWord(18,0,162),new DictWord(152,0,19),new DictWord(
					136,11,344),new DictWord(6,10,1729),new DictWord(137,11,288),new DictWord(132,11,660),new DictWord(4,0,217),new DictWord(5,0,710),new DictWord(7,0,760),
				new DictWord(7,0,1926),new DictWord(9,0,428),new DictWord(9,0,708),new DictWord(10,0,254),new DictWord(10,0,296),new DictWord(10,0,720),new DictWord(11,0,109),new DictWord(11,0
					,255),new DictWord(12,0,165),new DictWord(12,0,315),new DictWord(13,0,107),new DictWord(13,0,203),new DictWord(14,0,54),new DictWord(14,0,99),new DictWord(14,0,114)
				,new DictWord(14,0,388),new DictWord(16,0,85),new DictWord(17,0,9),new DictWord(17,0,33),new DictWord(20,0,25),new DictWord(20,0,28),new DictWord(20,0,29),new DictWord(21,0,9),
				new DictWord(21,0,10),new DictWord(21,0,34),new DictWord(22,0,17),new DictWord(4,10,60),new DictWord(7,10,1800),new DictWord(8,10,314),new DictWord(9,10,700),new DictWord(139,
					10,487),new DictWord(7,11,1035),new DictWord(138,11,737),new DictWord(7,11,690),new DictWord(9,11,217),new DictWord(9,11,587),new DictWord(140,11,521),new DictWord(
					6,0,919),new DictWord(7,11,706),new DictWord(7,11,1058),new DictWord(138,11,538),new DictWord(7,10,1853),new DictWord(138,10,437),new DictWord(136,10,
					419),new DictWord(6,0,280),new DictWord(10,0,502),new DictWord(11,0,344),new DictWord(140,0,38),new DictWord(5,0,45),new DictWord(7,0,1161),new DictWord(11,0,448),new DictWord(
					11,0,880),new DictWord(13,0,139),new DictWord(13,0,407),new DictWord(15,0,16),new DictWord(17,0,95),new DictWord(18,0,66),new DictWord(18,0,88),new DictWord(18,0,
					123),new DictWord(149,0,7),new DictWord(11,11,92),new DictWord(11,11,196),new DictWord(11,11,409),new DictWord(11,11,450),new DictWord(11,11,666),new DictWord(11,11
					,777),new DictWord(12,11,262),new DictWord(13,11,385),new DictWord(13,11,393),new DictWord(15,11,115),new DictWord(16,11,45),new DictWord(145,11,82),new DictWord(
					136,0,777),new DictWord(134,11,1744),new DictWord(4,0,410),new DictWord(7,0,521),new DictWord(133,10,828),new DictWord(134,0,673),new DictWord(7,0,1110)
				,new DictWord(7,0,1778),new DictWord(7,10,176),new DictWord(135,10,178),new DictWord(5,10,806),new DictWord(7,11,268),new DictWord(7,10,1976),new DictWord(136,11,
					569),new DictWord(4,11,733),new DictWord(9,11,194),new DictWord(10,11,92),new DictWord(11,11,198),new DictWord(12,11,84),new DictWord(12,11,87),new DictWord(13,11,
					128),new DictWord(144,11,74),new DictWord(5,0,341),new DictWord(7,0,1129),new DictWord(11,0,414),new DictWord(4,10,51),new DictWord(6,10,4),new DictWord(7,10,591),new DictWord(
					7,10,849),new DictWord(7,10,951),new DictWord(7,10,1613),new DictWord(7,10,1760),new DictWord(7,10,1988),new DictWord(9,10,434),new DictWord(10,10,754),
				new DictWord(11,10,25),new DictWord(139,10,37),new DictWord(133,10,902),new DictWord(135,10,928),new DictWord(135,0,787),new DictWord(132,0,436),new DictWord(134,10
					,270),new DictWord(7,0,1587),new DictWord(135,0,1707),new DictWord(6,0,377),new DictWord(7,0,1025),new DictWord(9,0,613),new DictWord(145,0,104),new DictWord(7,11,
					982),new DictWord(7,11,1361),new DictWord(10,11,32),new DictWord(143,11,56),new DictWord(139,0,96),new DictWord(132,0,451),new DictWord(132,10,416),new DictWord(142
					,10,372),new DictWord(5,10,152),new DictWord(5,10,197),new DictWord(7,11,306),new DictWord(7,10,340),new DictWord(7,10,867),new DictWord(10,10,548),new DictWord(10,
					10,581),new DictWord(11,10,6),new DictWord(12,10,3),new DictWord(12,10,19),new DictWord(14,10,110),new DictWord(142,10,289),new DictWord(134,0,680),new DictWord(134
					,11,609),new DictWord(7,0,483),new DictWord(7,10,190),new DictWord(8,10,28),new DictWord(8,10,141),new DictWord(8,10,444),new DictWord(8,10,811),new DictWord(9,10,
					468),new DictWord(11,10,334),new DictWord(12,10,24),new DictWord(12,10,386),new DictWord(140,10,576),new DictWord(10,0,916),new DictWord(133,10,757),new DictWord(5,
					10,721),new DictWord(135,10,1553),new DictWord(133,11,178),new DictWord(134,0,937),new DictWord(132,10,898),new DictWord(133,0,739),new DictWord(147,0,
					82),new DictWord(135,0,663),new DictWord(146,0,128),new DictWord(5,10,277),new DictWord(141,10,247),new DictWord(134,0,1087),new DictWord(132,10,435),new DictWord(6
					,11,381),new DictWord(7,11,645),new DictWord(7,11,694),new DictWord(136,11,546),new DictWord(7,0,503),new DictWord(135,0,1885),new DictWord(6,0,1965),new DictWord(8
					,0,925),new DictWord(138,0,955),new DictWord(4,0,113),new DictWord(5,0,163),new DictWord(5,0,735),new DictWord(7,0,1009),new DictWord(9,0,9),new DictWord(9,0,771),new DictWord(
					12,0,90),new DictWord(13,0,138),new DictWord(13,0,410),new DictWord(143,0,128),new DictWord(4,0,324),new DictWord(138,0,104),new DictWord(7,0,460),new DictWord(5,10
					,265),new DictWord(134,10,212),new DictWord(133,11,105),new DictWord(7,11,261),new DictWord(7,11,1107),new DictWord(7,11,1115),new DictWord(7,11,1354),new DictWord(
					7,11,1588),new DictWord(7,11,1705),new DictWord(7,11,1902),new DictWord(9,11,465),new DictWord(10,11,248),new DictWord(10,11,349),new DictWord(10,11,647
				),new DictWord(11,11,527),new DictWord(11,11,660),new DictWord(11,11,669),new DictWord(12,11,529),new DictWord(141,11,305),new DictWord(5,11,438),new DictWord(9,11,
					694),new DictWord(12,11,627),new DictWord(141,11,210),new DictWord(152,11,11),new DictWord(4,0,935),new DictWord(133,0,823),new DictWord(132,10,702),new DictWord(5,
					0,269),new DictWord(7,0,434),new DictWord(7,0,891),new DictWord(8,0,339),new DictWord(9,0,702),new DictWord(11,0,594),new DictWord(11,0,718),new DictWord(17,0,100),
				new DictWord(5,10,808),new DictWord(135,10,2045),new DictWord(7,0,1014),new DictWord(9,0,485),new DictWord(141,0,264),new DictWord(134,0,1713),new DictWord(7,0,1810
				),new DictWord(11,0,866),new DictWord(12,0,103),new DictWord(13,0,495),new DictWord(140,11,233),new DictWord(4,0,423),new DictWord(10,0,949),new DictWord(138,0,1013
				),new DictWord(135,0,900),new DictWord(8,11,25),new DictWord(138,11,826),new DictWord(5,10,166),new DictWord(8,10,739),new DictWord(140,10,511),new DictWord(134,0,
					2018),new DictWord(7,11,1270),new DictWord(139,11,612),new DictWord(4,10,119),new DictWord(5,10,170),new DictWord(5,10,447),new DictWord(7,10,1708),new DictWord(7,
					10,1889),new DictWord(9,10,357),new DictWord(9,10,719),new DictWord(12,10,486),new DictWord(140,10,596),new DictWord(12,0,574),new DictWord(140,11,574),
				new DictWord(132,11,308),new DictWord(6,0,964),new DictWord(6,0,1206),new DictWord(134,0,1302),new DictWord(4,10,450),new DictWord(135,10,1158),new DictWord(135,11,
					150),new DictWord(136,11,649),new DictWord(14,0,213),new DictWord(148,0,38),new DictWord(9,11,45),new DictWord(9,11,311),new DictWord(141,11,42),new DictWord(134,11
					,521),new DictWord(7,10,1375),new DictWord(7,10,1466),new DictWord(138,10,331),new DictWord(132,10,754),new DictWord(5,11,339),new DictWord(7,11,1442),new DictWord(
					14,11,3),new DictWord(15,11,41),new DictWord(147,11,66),new DictWord(136,11,378),new DictWord(134,0,1022),new DictWord(5,10,850),new DictWord(136,10,799
				),new DictWord(142,0,143),new DictWord(135,0,2029),new DictWord(134,11,1628),new DictWord(8,0,523),new DictWord(150,0,34),new DictWord(5,0,625),new DictWord(135,0,
					1617),new DictWord(7,0,275),new DictWord(7,10,238),new DictWord(7,10,2033),new DictWord(8,10,120),new DictWord(8,10,188),new DictWord(8,10,659),new DictWord(9,10,
					598),new DictWord(10,10,466),new DictWord(12,10,342),new DictWord(12,10,588),new DictWord(13,10,503),new DictWord(14,10,246),new DictWord(143,10,92),new DictWord(7,
					0,37),new DictWord(8,0,425),new DictWord(8,0,693),new DictWord(9,0,720),new DictWord(10,0,380),new DictWord(10,0,638),new DictWord(11,0,273),new DictWord(11,0,473),
				new DictWord(12,0,61),new DictWord(143,0,43),new DictWord(135,11,829),new DictWord(135,0,1943),new DictWord(132,0,765),new DictWord(5,11,486),new DictWord(135,11,
					1349),new DictWord(7,11,1635),new DictWord(8,11,17),new DictWord(10,11,217),new DictWord(138,11,295),new DictWord(4,10,201),new DictWord(7,10,1744),new DictWord(8,
					10,602),new DictWord(11,10,247),new DictWord(11,10,826),new DictWord(145,10,65),new DictWord(138,11,558),new DictWord(11,0,551),new DictWord(142,0,159),
				new DictWord(8,10,164),new DictWord(146,10,62),new DictWord(139,11,176),new DictWord(132,0,168),new DictWord(136,0,1010),new DictWord(134,0,1994),new DictWord(135,0
					,91),new DictWord(138,0,532),new DictWord(135,10,1243),new DictWord(135,0,1884),new DictWord(132,10,907),new DictWord(5,10,100),new DictWord(10,10,329),
				new DictWord(12,10,416),new DictWord(149,10,29),new DictWord(134,11,447),new DictWord(132,10,176),new DictWord(5,10,636),new DictWord(5,10,998),new DictWord(7,10,9)
				,new DictWord(7,10,1508),new DictWord(8,10,26),new DictWord(9,10,317),new DictWord(9,10,358),new DictWord(10,10,210),new DictWord(10,10,292),new DictWord(10,10,533)
				,new DictWord(11,10,555),new DictWord(12,10,526),new DictWord(12,10,607),new DictWord(13,10,263),new DictWord(13,10,459),new DictWord(142,10,271),new DictWord(4,11,
					609),new DictWord(135,11,756),new DictWord(6,0,15),new DictWord(7,0,70),new DictWord(10,0,240),new DictWord(147,0,93),new DictWord(4,11,930),new DictWord(133,11,947
				),new DictWord(134,0,1227),new DictWord(134,0,1534),new DictWord(133,11,939),new DictWord(133,11,962),new DictWord(5,11,651),new DictWord(8,11,170),new DictWord(9,
					11,61),new DictWord(9,11,63),new DictWord(10,11,23),new DictWord(10,11,37),new DictWord(10,11,834),new DictWord(11,11,4),new DictWord(11,11,187),new DictWord(11,11,
					281),new DictWord(11,11,503),new DictWord(11,11,677),new DictWord(12,11,96),new DictWord(12,11,130),new DictWord(12,11,244),new DictWord(14,11,5),new DictWord(14,11
					,40),new DictWord(14,11,162),new DictWord(14,11,202),new DictWord(146,11,133),new DictWord(4,11,406),new DictWord(5,11,579),new DictWord(12,11,492),new DictWord(150
					,11,15),new DictWord(139,0,392),new DictWord(6,10,610),new DictWord(10,10,127),new DictWord(141,10,27),new DictWord(7,0,655),new DictWord(7,0,1844),new DictWord(136
					,10,119),new DictWord(4,0,145),new DictWord(6,0,176),new DictWord(7,0,395),new DictWord(137,0,562),new DictWord(132,0,501),new DictWord(140,11,145),new DictWord(136
					,0,1019),new DictWord(134,0,509),new DictWord(139,0,267),new DictWord(6,11,17),new DictWord(7,11,16),new DictWord(7,11,1001),new DictWord(7,11,1982),new DictWord(9,
					11,886),new DictWord(10,11,489),new DictWord(10,11,800),new DictWord(11,11,782),new DictWord(12,11,320),new DictWord(13,11,467),new DictWord(14,11,145),
				new DictWord(14,11,387),new DictWord(143,11,119),new DictWord(145,11,17),new DictWord(6,0,1099),new DictWord(133,11,458),new DictWord(7,11,1983),new DictWord(8,11,0
				),new DictWord(8,11,171),new DictWord(9,11,120),new DictWord(9,11,732),new DictWord(10,11,473),new DictWord(11,11,656),new DictWord(11,11,998),new DictWord(18,11,0)
				,new DictWord(18,11,2),new DictWord(147,11,21),new DictWord(12,11,427),new DictWord(146,11,38),new DictWord(10,0,948),new DictWord(138,0,968),new DictWord(7,10,126)
				,new DictWord(136,10,84),new DictWord(136,10,790),new DictWord(4,0,114),new DictWord(9,0,492),new DictWord(13,0,462),new DictWord(142,0,215),new DictWord(6,10,64),new DictWord(
					12,10,377),new DictWord(141,10,309),new DictWord(4,0,77),new DictWord(5,0,361),new DictWord(6,0,139),new DictWord(6,0,401),new DictWord(6,0,404),new DictWord(7,0,
					413),new DictWord(7,0,715),new DictWord(7,0,1716),new DictWord(11,0,279),new DictWord(12,0,179),new DictWord(12,0,258),new DictWord(13,0,244),new DictWord(142,0,358
				),new DictWord(134,0,1717),new DictWord(7,0,772),new DictWord(7,0,1061),new DictWord(7,0,1647),new DictWord(8,0,82),new DictWord(11,0,250),new DictWord(11,0,607),new DictWord(
					12,0,311),new DictWord(12,0,420),new DictWord(13,0,184),new DictWord(13,0,367),new DictWord(7,10,1104),new DictWord(11,10,269),new DictWord(11,10,539),new DictWord(
					11,10,627),new DictWord(11,10,706),new DictWord(11,10,975),new DictWord(12,10,248),new DictWord(12,10,434),new DictWord(12,10,600),new DictWord(12,10,
					622),new DictWord(13,10,297),new DictWord(13,10,485),new DictWord(14,10,69),new DictWord(14,10,409),new DictWord(143,10,108),new DictWord(135,0,724),new DictWord(4,
					11,512),new DictWord(4,11,519),new DictWord(133,11,342),new DictWord(134,0,1133),new DictWord(145,11,29),new DictWord(11,10,977),new DictWord(141,10,507
				),new DictWord(6,0,841),new DictWord(6,0,1042),new DictWord(6,0,1194),new DictWord(10,0,993),new DictWord(140,0,1021),new DictWord(6,11,31),new DictWord(7,11,491),new DictWord(
					7,11,530),new DictWord(8,11,592),new DictWord(9,10,34),new DictWord(11,11,53),new DictWord(11,10,484),new DictWord(11,11,779),new DictWord(12,11,167),new DictWord(
					12,11,411),new DictWord(14,11,14),new DictWord(14,11,136),new DictWord(15,11,72),new DictWord(16,11,17),new DictWord(144,11,72),new DictWord(4,0,1021),new DictWord(
					6,0,2037),new DictWord(133,11,907),new DictWord(7,0,373),new DictWord(8,0,335),new DictWord(8,0,596),new DictWord(9,0,488),new DictWord(6,10,1700),new DictWord(7,10
					,293),new DictWord(7,10,382),new DictWord(7,10,1026),new DictWord(7,10,1087),new DictWord(7,10,2027),new DictWord(8,10,252),new DictWord(8,10,727),new DictWord(8,10
					,729),new DictWord(9,10,30),new DictWord(9,10,199),new DictWord(9,10,231),new DictWord(9,10,251),new DictWord(9,10,334),new DictWord(9,10,361),new DictWord(9,10,712
				),new DictWord(10,10,55),new DictWord(10,10,60),new DictWord(10,10,232),new DictWord(10,10,332),new DictWord(10,10,384),new DictWord(10,10,396),new DictWord(10,10,
					504),new DictWord(10,10,542),new DictWord(10,10,652),new DictWord(11,10,20),new DictWord(11,10,48),new DictWord(11,10,207),new DictWord(11,10,291),new DictWord(11,
					10,298),new DictWord(11,10,342),new DictWord(11,10,365),new DictWord(11,10,394),new DictWord(11,10,620),new DictWord(11,10,705),new DictWord(11,10,1017)
				,new DictWord(12,10,123),new DictWord(12,10,340),new DictWord(12,10,406),new DictWord(12,10,643),new DictWord(13,10,61),new DictWord(13,10,269),new DictWord(13,10,
					311),new DictWord(13,10,319),new DictWord(13,10,486),new DictWord(14,10,234),new DictWord(15,10,62),new DictWord(15,10,85),new DictWord(16,10,71),new DictWord(18,10
					,119),new DictWord(148,10,105),new DictWord(150,0,37),new DictWord(4,11,208),new DictWord(5,11,106),new DictWord(6,11,531),new DictWord(8,11,408),new DictWord(9,11,
					188),new DictWord(138,11,572),new DictWord(132,0,564),new DictWord(6,0,513),new DictWord(135,0,1052),new DictWord(132,0,825),new DictWord(9,0,899),new DictWord(140,
					11,441),new DictWord(134,0,778),new DictWord(133,11,379),new DictWord(7,0,1417),new DictWord(12,0,382),new DictWord(17,0,48),new DictWord(152,0,12),new DictWord(132
					,11,241),new DictWord(7,0,1116),new DictWord(6,10,379),new DictWord(7,10,270),new DictWord(8,10,176),new DictWord(8,10,183),new DictWord(9,10,432),new DictWord(9,10
					,661),new DictWord(12,10,247),new DictWord(12,10,617),new DictWord(146,10,125),new DictWord(5,10,792),new DictWord(133,10,900),new DictWord(6,0,545),new DictWord(7,
					0,565),new DictWord(7,0,1669),new DictWord(10,0,114),new DictWord(11,0,642),new DictWord(140,0,618),new DictWord(133,0,5),new DictWord(138,11,7),new DictWord(132,11
					,259),new DictWord(135,0,192),new DictWord(134,0,701),new DictWord(136,0,763),new DictWord(135,10,1979),new DictWord(4,10,901),new DictWord(133,10,776),
				new DictWord(10,0,755),new DictWord(147,0,29),new DictWord(133,0,759),new DictWord(4,11,173),new DictWord(5,11,312),new DictWord(5,11,512),new DictWord(135,11,1285)
				,new DictWord(7,11,1603),new DictWord(7,11,1691),new DictWord(9,11,464),new DictWord(11,11,195),new DictWord(12,11,279),new DictWord(12,11,448),new DictWord(14,11,
					11),new DictWord(147,11,102),new DictWord(7,0,370),new DictWord(7,0,1007),new DictWord(7,0,1177),new DictWord(135,0,1565),new DictWord(135,0,1237),new DictWord(4,0,
					87),new DictWord(5,0,250),new DictWord(141,0,298),new DictWord(4,11,452),new DictWord(5,11,583),new DictWord(5,11,817),new DictWord(6,11,433),new DictWord(7,11,593)
				,new DictWord(7,11,720),new DictWord(7,11,1378),new DictWord(8,11,161),new DictWord(9,11,284),new DictWord(10,11,313),new DictWord(139,11,886),new DictWord(4,11,547
				),new DictWord(135,11,1409),new DictWord(136,11,722),new DictWord(4,10,37),new DictWord(5,10,334),new DictWord(135,10,1253),new DictWord(132,10,508),new DictWord(12
					,0,107),new DictWord(146,0,31),new DictWord(8,11,420),new DictWord(139,11,193),new DictWord(135,0,814),new DictWord(135,11,409),new DictWord(140,0,991),
				new DictWord(4,0,57),new DictWord(7,0,1195),new DictWord(7,0,1438),new DictWord(7,0,1548),new DictWord(7,0,1835),new DictWord(7,0,1904),new DictWord(9,0,757),new DictWord(10,0,
					604),new DictWord(139,0,519),new DictWord(132,0,540),new DictWord(138,11,308),new DictWord(132,10,533),new DictWord(136,0,608),new DictWord(144,11,65),new DictWord(
					4,0,1014),new DictWord(134,0,2029),new DictWord(4,0,209),new DictWord(7,0,902),new DictWord(5,11,1002),new DictWord(136,11,745),new DictWord(134,0,2030)
				,new DictWord(6,0,303),new DictWord(7,0,335),new DictWord(7,0,1437),new DictWord(7,0,1668),new DictWord(8,0,553),new DictWord(8,0,652),new DictWord(8,0,656),new DictWord(9,0,
					558),new DictWord(11,0,743),new DictWord(149,0,18),new DictWord(5,11,575),new DictWord(6,11,354),new DictWord(135,11,701),new DictWord(4,11,239),new DictWord(6,11,
					477),new DictWord(7,11,1607),new DictWord(11,11,68),new DictWord(139,11,617),new DictWord(132,0,559),new DictWord(8,0,527),new DictWord(18,0,60),new DictWord(147,0,
					24),new DictWord(133,10,920),new DictWord(138,0,511),new DictWord(133,0,1017),new DictWord(133,0,675),new DictWord(138,10,391),new DictWord(11,0,156),new DictWord(
					135,10,1952),new DictWord(138,11,369),new DictWord(132,11,367),new DictWord(133,0,709),new DictWord(6,0,698),new DictWord(134,0,887),new DictWord(142,10
					,126),new DictWord(134,0,1745),new DictWord(132,10,483),new DictWord(13,11,299),new DictWord(142,11,75),new DictWord(133,0,714),new DictWord(7,0,8),new DictWord(136
					,0,206),new DictWord(138,10,480),new DictWord(4,11,694),new DictWord(9,10,495),new DictWord(146,10,104),new DictWord(7,11,1248),new DictWord(11,11,621),
				new DictWord(139,11,702),new DictWord(140,11,687),new DictWord(132,0,776),new DictWord(139,10,1009),new DictWord(135,0,1272),new DictWord(134,0,1059),new DictWord(8
					,10,653),new DictWord(13,10,93),new DictWord(147,10,14),new DictWord(135,11,213),new DictWord(136,0,406),new DictWord(133,10,172),new DictWord(132,0,947
				),new DictWord(8,0,175),new DictWord(10,0,168),new DictWord(138,0,573),new DictWord(132,0,870),new DictWord(6,0,1567),new DictWord(151,11,28),new DictWord(134,11,
					472),new DictWord(5,10,260),new DictWord(136,11,132),new DictWord(4,11,751),new DictWord(11,11,390),new DictWord(140,11,32),new DictWord(4,11,409),new DictWord(133,
					11,78),new DictWord(12,0,554),new DictWord(6,11,473),new DictWord(145,11,105),new DictWord(133,0,784),new DictWord(8,0,908),new DictWord(136,11,306),new DictWord(
					139,0,882),new DictWord(6,0,358),new DictWord(7,0,1393),new DictWord(8,0,396),new DictWord(10,0,263),new DictWord(14,0,154),new DictWord(16,0,48),new DictWord(17,0,
					8),new DictWord(7,11,1759),new DictWord(8,11,396),new DictWord(10,11,263),new DictWord(14,11,154),new DictWord(16,11,48),new DictWord(145,11,8),new DictWord(13,11,
					163),new DictWord(13,11,180),new DictWord(18,11,78),new DictWord(148,11,35),new DictWord(14,0,32),new DictWord(18,0,85),new DictWord(20,0,2),new DictWord(152,0,16),
				new DictWord(7,0,228),new DictWord(10,0,770),new DictWord(8,10,167),new DictWord(8,10,375),new DictWord(9,10,82),new DictWord(9,10,561),new DictWord(138,10,620),new DictWord(
					132,0,845),new DictWord(9,0,14),new DictWord(9,0,441),new DictWord(10,0,306),new DictWord(139,0,9),new DictWord(11,0,966),new DictWord(12,0,287),new DictWord(13,0,
					342),new DictWord(13,0,402),new DictWord(15,0,110),new DictWord(15,0,163),new DictWord(8,10,194),new DictWord(136,10,756),new DictWord(134,0,1578),new DictWord(4,0,
					967),new DictWord(6,0,1820),new DictWord(6,0,1847),new DictWord(140,0,716),new DictWord(136,0,594),new DictWord(7,0,1428),new DictWord(7,0,1640),new DictWord(7,0,
					1867),new DictWord(9,0,169),new DictWord(9,0,182),new DictWord(9,0,367),new DictWord(9,0,478),new DictWord(9,0,506),new DictWord(9,0,551),new DictWord(9,0,557),new DictWord(9,0
					,648),new DictWord(9,0,697),new DictWord(9,0,705),new DictWord(9,0,725),new DictWord(9,0,787),new DictWord(9,0,794),new DictWord(10,0,198),new DictWord(10,0,214),new DictWord(
					10,0,267),new DictWord(10,0,275),new DictWord(10,0,456),new DictWord(10,0,551),new DictWord(10,0,561),new DictWord(10,0,613),new DictWord(10,0,627),new DictWord(10,
					0,668),new DictWord(10,0,675),new DictWord(10,0,691),new DictWord(10,0,695),new DictWord(10,0,707),new DictWord(10,0,715),new DictWord(11,0,183),new DictWord(11,0,
					201),new DictWord(11,0,244),new DictWord(11,0,262),new DictWord(11,0,352),new DictWord(11,0,439),new DictWord(11,0,493),new DictWord(11,0,572),new DictWord(11,0,591
				),new DictWord(11,0,608),new DictWord(11,0,611),new DictWord(11,0,646),new DictWord(11,0,674),new DictWord(11,0,711),new DictWord(11,0,751),new DictWord(11,0,761),new DictWord(
					11,0,776),new DictWord(11,0,785),new DictWord(11,0,850),new DictWord(11,0,853),new DictWord(11,0,862),new DictWord(11,0,865),new DictWord(11,0,868),new DictWord(11,
					0,875),new DictWord(11,0,898),new DictWord(11,0,902),new DictWord(11,0,903),new DictWord(11,0,910),new DictWord(11,0,932),new DictWord(11,0,942),new DictWord(11,0,
					957),new DictWord(11,0,967),new DictWord(11,0,972),new DictWord(12,0,148),new DictWord(12,0,195),new DictWord(12,0,220),new DictWord(12,0,237),new DictWord(12,0,318
				),new DictWord(12,0,339),new DictWord(12,0,393),new DictWord(12,0,445),new DictWord(12,0,450),new DictWord(12,0,474),new DictWord(12,0,505),new DictWord(12,0,509),new DictWord(
					12,0,533),new DictWord(12,0,591),new DictWord(12,0,594),new DictWord(12,0,597),new DictWord(12,0,621),new DictWord(12,0,633),new DictWord(12,0,642),new DictWord(13,
					0,59),new DictWord(13,0,60),new DictWord(13,0,145),new DictWord(13,0,239),new DictWord(13,0,250),new DictWord(13,0,329),new DictWord(13,0,344),new DictWord(13,0,365
				),new DictWord(13,0,372),new DictWord(13,0,387),new DictWord(13,0,403),new DictWord(13,0,414),new DictWord(13,0,456),new DictWord(13,0,470),new DictWord(13,0,478),new DictWord(
					13,0,483),new DictWord(13,0,489),new DictWord(14,0,55),new DictWord(14,0,57),new DictWord(14,0,81),new DictWord(14,0,90),new DictWord(14,0,148),new DictWord(14,0,
					239),new DictWord(14,0,266),new DictWord(14,0,321),new DictWord(14,0,326),new DictWord(14,0,327),new DictWord(14,0,330),new DictWord(14,0,347),new DictWord(14,0,355
				),new DictWord(14,0,401),new DictWord(14,0,404),new DictWord(14,0,411),new DictWord(14,0,414),new DictWord(14,0,416),new DictWord(14,0,420),new DictWord(15,0,61),new DictWord(
					15,0,74),new DictWord(15,0,87),new DictWord(15,0,88),new DictWord(15,0,94),new DictWord(15,0,96),new DictWord(15,0,116),new DictWord(15,0,149),new DictWord(15,0,154
				),new DictWord(16,0,50),new DictWord(16,0,63),new DictWord(16,0,73),new DictWord(17,0,2),new DictWord(17,0,66),new DictWord(17,0,92),new DictWord(17,0,103),new DictWord(17,0,
					112),new DictWord(17,0,120),new DictWord(18,0,50),new DictWord(18,0,54),new DictWord(18,0,82),new DictWord(18,0,86),new DictWord(18,0,90),new DictWord(18,0,111),new DictWord(18
					,0,115),new DictWord(18,0,156),new DictWord(19,0,40),new DictWord(19,0,79),new DictWord(20,0,78),new DictWord(21,0,22),new DictWord(135,11,883),new DictWord(5,0,161
				),new DictWord(135,0,839),new DictWord(4,0,782),new DictWord(13,11,293),new DictWord(142,11,56),new DictWord(133,11,617),new DictWord(139,11,50),new DictWord(135,10
					,22),new DictWord(145,0,64),new DictWord(5,10,639),new DictWord(7,10,1249),new DictWord(139,10,896),new DictWord(138,0,998),new DictWord(135,11,2042),new DictWord(4
					,11,546),new DictWord(142,11,233),new DictWord(6,0,1043),new DictWord(134,0,1574),new DictWord(134,0,1496),new DictWord(4,10,102),new DictWord(7,10,815)
				,new DictWord(7,10,1699),new DictWord(139,10,964),new DictWord(12,0,781),new DictWord(142,0,461),new DictWord(4,11,313),new DictWord(133,11,577),new DictWord(6,0,
					639),new DictWord(6,0,1114),new DictWord(137,0,817),new DictWord(8,11,184),new DictWord(141,11,433),new DictWord(7,0,1814),new DictWord(135,11,935),new DictWord(10,
					0,997),new DictWord(140,0,958),new DictWord(4,0,812),new DictWord(137,11,625),new DictWord(132,10,899),new DictWord(136,10,795),new DictWord(5,11,886),new DictWord(
					6,11,46),new DictWord(6,11,1790),new DictWord(7,11,14),new DictWord(7,11,732),new DictWord(7,11,1654),new DictWord(8,11,95),new DictWord(8,11,327),new DictWord(8,11
					,616),new DictWord(10,11,598),new DictWord(10,11,769),new DictWord(11,11,134),new DictWord(11,11,747),new DictWord(12,11,378),new DictWord(142,11,97),new DictWord(
					136,0,139),new DictWord(6,10,52),new DictWord(9,10,104),new DictWord(9,10,559),new DictWord(12,10,308),new DictWord(147,10,87),new DictWord(133,11,1021)
				,new DictWord(132,10,604),new DictWord(132,10,301),new DictWord(136,10,779),new DictWord(7,0,643),new DictWord(136,0,236),new DictWord(132,11,153),new DictWord(134,
					0,1172),new DictWord(147,10,32),new DictWord(133,11,798),new DictWord(6,0,1338),new DictWord(132,11,587),new DictWord(6,11,598),new DictWord(7,11,42),new DictWord(8
					,11,695),new DictWord(10,11,212),new DictWord(11,11,158),new DictWord(14,11,196),new DictWord(145,11,85),new DictWord(135,10,508),new DictWord(5,11,957)
				,new DictWord(5,11,1008),new DictWord(135,11,249),new DictWord(4,11,129),new DictWord(135,11,465),new DictWord(5,0,54),new DictWord(7,11,470),new DictWord(7,11,1057
				),new DictWord(7,11,1201),new DictWord(9,11,755),new DictWord(11,11,906),new DictWord(140,11,527),new DictWord(7,11,908),new DictWord(146,11,7),new DictWord(5,11,
					148),new DictWord(136,11,450),new DictWord(144,11,1),new DictWord(4,0,256),new DictWord(135,0,1488),new DictWord(9,0,351),new DictWord(6,10,310),new DictWord(7,10,
					1849),new DictWord(8,10,72),new DictWord(8,10,272),new DictWord(8,10,431),new DictWord(9,10,12),new DictWord(10,10,563),new DictWord(10,10,630),new DictWord(10,10,
					796),new DictWord(10,10,810),new DictWord(11,10,367),new DictWord(11,10,599),new DictWord(11,10,686),new DictWord(140,10,672),new DictWord(6,0,1885),new DictWord(6,
					0,1898),new DictWord(6,0,1899),new DictWord(140,0,955),new DictWord(4,0,714),new DictWord(133,0,469),new DictWord(6,0,1270),new DictWord(134,0,1456),new DictWord(
					132,0,744),new DictWord(6,0,313),new DictWord(7,10,537),new DictWord(8,10,64),new DictWord(9,10,127),new DictWord(10,10,496),new DictWord(12,10,510),new DictWord(
					141,10,384),new DictWord(4,11,217),new DictWord(4,10,244),new DictWord(5,11,710),new DictWord(7,10,233),new DictWord(7,11,1926),new DictWord(9,11,428),new DictWord(
					9,11,708),new DictWord(10,11,254),new DictWord(10,11,296),new DictWord(10,11,720),new DictWord(11,11,109),new DictWord(11,11,255),new DictWord(12,11,165
				),new DictWord(12,11,315),new DictWord(13,11,107),new DictWord(13,11,203),new DictWord(14,11,54),new DictWord(14,11,99),new DictWord(14,11,114),new DictWord(14,11,
					388),new DictWord(16,11,85),new DictWord(17,11,9),new DictWord(17,11,33),new DictWord(20,11,25),new DictWord(20,11,28),new DictWord(20,11,29),new DictWord(21,11,9),
				new DictWord(21,11,10),new DictWord(21,11,34),new DictWord(150,11,17),new DictWord(138,0,402),new DictWord(7,0,969),new DictWord(146,0,55),new DictWord(8,0,50),new DictWord(137
					,0,624),new DictWord(134,0,1355),new DictWord(132,0,572),new DictWord(134,10,1650),new DictWord(10,10,702),new DictWord(139,10,245),new DictWord(10,0,
					847),new DictWord(142,0,445),new DictWord(6,0,43),new DictWord(7,0,38),new DictWord(8,0,248),new DictWord(138,0,513),new DictWord(133,0,369),new DictWord(137,10,338
				),new DictWord(133,0,766),new DictWord(133,0,363),new DictWord(133,10,896),new DictWord(8,11,392),new DictWord(11,11,54),new DictWord(13,11,173),new DictWord(13,11,
					294),new DictWord(148,11,7),new DictWord(134,0,678),new DictWord(7,11,1230),new DictWord(136,11,531),new DictWord(6,0,258),new DictWord(140,0,409),new DictWord(5,0,
					249),new DictWord(148,0,82),new DictWord(7,10,1117),new DictWord(136,10,539),new DictWord(5,0,393),new DictWord(6,0,378),new DictWord(7,0,1981),new DictWord(9,0,32)
				,new DictWord(9,0,591),new DictWord(10,0,685),new DictWord(10,0,741),new DictWord(142,0,382),new DictWord(133,0,788),new DictWord(134,0,1281),new DictWord(134,0,
					1295),new DictWord(7,0,1968),new DictWord(141,0,509),new DictWord(4,0,61),new DictWord(5,0,58),new DictWord(5,0,171),new DictWord(5,0,683),new DictWord(6,0,291),new DictWord(6,
					0,566),new DictWord(7,0,1650),new DictWord(11,0,523),new DictWord(12,0,273),new DictWord(12,0,303),new DictWord(15,0,39),new DictWord(143,0,111),new DictWord(6,0,
					706),new DictWord(134,0,1283),new DictWord(134,0,589),new DictWord(135,11,1433),new DictWord(133,11,435),new DictWord(7,0,1059),new DictWord(13,0,54),new DictWord(5
					,10,4),new DictWord(5,10,810),new DictWord(6,10,13),new DictWord(6,10,538),new DictWord(6,10,1690),new DictWord(6,10,1726),new DictWord(7,10,1819),new DictWord(8,10
					,148),new DictWord(8,10,696),new DictWord(8,10,791),new DictWord(12,10,125),new DictWord(143,10,9),new DictWord(135,10,1268),new DictWord(5,11,85),new DictWord(6,11
					,419),new DictWord(7,11,134),new DictWord(7,11,305),new DictWord(7,11,361),new DictWord(7,11,1337),new DictWord(8,11,71),new DictWord(140,11,519),new DictWord(137,0
					,824),new DictWord(140,11,688),new DictWord(5,11,691),new DictWord(7,11,345),new DictWord(7,10,1385),new DictWord(9,11,94),new DictWord(11,10,582),new DictWord(11,
					10,650),new DictWord(11,10,901),new DictWord(11,10,949),new DictWord(12,11,169),new DictWord(12,10,232),new DictWord(12,10,236),new DictWord(13,10,413),
				new DictWord(13,10,501),new DictWord(146,10,116),new DictWord(4,0,917),new DictWord(133,0,1005),new DictWord(7,0,1598),new DictWord(5,11,183),new DictWord(6,11,582)
				,new DictWord(9,11,344),new DictWord(10,11,679),new DictWord(140,11,435),new DictWord(4,10,925),new DictWord(5,10,803),new DictWord(8,10,698),new DictWord(138,10,
					828),new DictWord(132,0,919),new DictWord(135,11,511),new DictWord(139,10,992),new DictWord(4,0,255),new DictWord(5,0,302),new DictWord(6,0,132),new DictWord(7,0,
					128),new DictWord(7,0,283),new DictWord(7,0,1299),new DictWord(10,0,52),new DictWord(10,0,514),new DictWord(11,0,925),new DictWord(13,0,92),new DictWord(142,0,309),
				new DictWord(134,0,1369),new DictWord(135,10,1847),new DictWord(134,0,328),new DictWord(7,11,1993),new DictWord(136,11,684),new DictWord(133,10,383),new DictWord(
					137,0,173),new DictWord(134,11,583),new DictWord(134,0,1411),new DictWord(19,0,65),new DictWord(5,11,704),new DictWord(8,11,357),new DictWord(10,11,745)
				,new DictWord(14,11,426),new DictWord(17,11,94),new DictWord(147,11,57),new DictWord(9,10,660),new DictWord(138,10,347),new DictWord(4,11,179),new DictWord(5,11,198
				),new DictWord(133,11,697),new DictWord(7,11,347),new DictWord(7,11,971),new DictWord(8,11,181),new DictWord(138,11,711),new DictWord(141,0,442),new DictWord(11,0,
					842),new DictWord(11,0,924),new DictWord(13,0,317),new DictWord(13,0,370),new DictWord(13,0,469),new DictWord(13,0,471),new DictWord(14,0,397),new DictWord(18,0,69)
				,new DictWord(18,0,145),new DictWord(7,10,572),new DictWord(9,10,592),new DictWord(11,10,680),new DictWord(12,10,356),new DictWord(140,10,550),new DictWord(14,11,19
				),new DictWord(14,11,28),new DictWord(144,11,29),new DictWord(136,0,534),new DictWord(4,11,243),new DictWord(5,11,203),new DictWord(7,11,19),new DictWord(7,11,71),new DictWord(
					7,11,113),new DictWord(10,11,405),new DictWord(11,11,357),new DictWord(142,11,240),new DictWord(6,0,210),new DictWord(10,0,845),new DictWord(138,0,862),
				new DictWord(7,11,1351),new DictWord(9,11,581),new DictWord(10,11,639),new DictWord(11,11,453),new DictWord(140,11,584),new DictWord(7,11,1450),new DictWord(139,11,
					99),new DictWord(10,0,892),new DictWord(12,0,719),new DictWord(144,0,105),new DictWord(4,0,284),new DictWord(6,0,223),new DictWord(134,11,492),new DictWord(5,11,134
				),new DictWord(6,11,408),new DictWord(6,11,495),new DictWord(135,11,1593),new DictWord(136,0,529),new DictWord(137,0,807),new DictWord(4,0,218),new DictWord(7,0,526
				),new DictWord(143,0,137),new DictWord(6,0,1444),new DictWord(142,11,4),new DictWord(132,11,665),new DictWord(4,0,270),new DictWord(5,0,192),new DictWord(6,0,332),new DictWord(
					7,0,1322),new DictWord(4,11,248),new DictWord(7,11,137),new DictWord(137,11,349),new DictWord(140,0,661),new DictWord(7,0,1517),new DictWord(11,0,597),new DictWord(
					14,0,76),new DictWord(14,0,335),new DictWord(20,0,33),new DictWord(7,10,748),new DictWord(139,10,700),new DictWord(5,11,371),new DictWord(135,11,563),new DictWord(
					146,11,57),new DictWord(133,10,127),new DictWord(133,0,418),new DictWord(4,11,374),new DictWord(7,11,547),new DictWord(7,11,1700),new DictWord(7,11,1833
				),new DictWord(139,11,858),new DictWord(6,10,198),new DictWord(140,10,83),new DictWord(7,11,1812),new DictWord(13,11,259),new DictWord(13,11,356),new DictWord(14,11
					,242),new DictWord(147,11,114),new DictWord(7,0,379),new DictWord(8,0,481),new DictWord(9,0,377),new DictWord(5,10,276),new DictWord(6,10,55),new DictWord(135,10,
					1369),new DictWord(138,11,286),new DictWord(5,0,1003),new DictWord(6,0,149),new DictWord(6,10,1752),new DictWord(136,10,726),new DictWord(8,0,262),new DictWord(9,0,
					627),new DictWord(10,0,18),new DictWord(11,0,214),new DictWord(11,0,404),new DictWord(11,0,457),new DictWord(11,0,780),new DictWord(11,0,913),new DictWord(13,0,401)
				,new DictWord(14,0,200),new DictWord(6,11,1647),new DictWord(7,11,1552),new DictWord(7,11,2010),new DictWord(9,11,494),new DictWord(137,11,509),new DictWord(135,0,
					742),new DictWord(136,0,304),new DictWord(132,0,142),new DictWord(133,10,764),new DictWord(6,10,309),new DictWord(7,10,331),new DictWord(138,10,550),new DictWord(
					135,10,1062),new DictWord(6,11,123),new DictWord(7,11,214),new DictWord(7,10,986),new DictWord(9,11,728),new DictWord(10,11,157),new DictWord(11,11,346)
				,new DictWord(11,11,662),new DictWord(143,11,106),new DictWord(135,10,1573),new DictWord(7,0,925),new DictWord(137,0,799),new DictWord(4,0,471),new DictWord(5,0,51)
				,new DictWord(6,0,602),new DictWord(8,0,484),new DictWord(138,0,195),new DictWord(136,0,688),new DictWord(132,0,697),new DictWord(6,0,1169),new DictWord(6,0,1241),new DictWord(
					6,10,194),new DictWord(7,10,133),new DictWord(10,10,493),new DictWord(10,10,570),new DictWord(139,10,664),new DictWord(140,0,751),new DictWord(7,0,929),
				new DictWord(10,0,452),new DictWord(11,0,878),new DictWord(16,0,33),new DictWord(5,10,24),new DictWord(5,10,569),new DictWord(6,10,3),new DictWord(6,10,119),new DictWord(6,10,
					143),new DictWord(6,10,440),new DictWord(7,10,599),new DictWord(7,10,1686),new DictWord(7,10,1854),new DictWord(8,10,424),new DictWord(9,10,43),new DictWord(9,10,
					584),new DictWord(9,10,760),new DictWord(10,10,328),new DictWord(11,10,159),new DictWord(11,10,253),new DictWord(12,10,487),new DictWord(140,10,531),new DictWord(4,
					11,707),new DictWord(13,11,106),new DictWord(18,11,49),new DictWord(147,11,41),new DictWord(5,0,221),new DictWord(5,11,588),new DictWord(134,11,393),new DictWord(
					134,0,1437),new DictWord(6,11,211),new DictWord(7,11,1690),new DictWord(11,11,486),new DictWord(140,11,369),new DictWord(5,10,14),new DictWord(5,10,892)
				,new DictWord(6,10,283),new DictWord(7,10,234),new DictWord(136,10,537),new DictWord(4,0,988),new DictWord(136,0,955),new DictWord(135,0,1251),new DictWord(4,10,126
				),new DictWord(8,10,635),new DictWord(147,10,34),new DictWord(4,10,316),new DictWord(135,10,1561),new DictWord(137,10,861),new DictWord(4,10,64),new DictWord(5,10,
					352),new DictWord(5,10,720),new DictWord(6,10,368),new DictWord(139,10,359),new DictWord(134,0,192),new DictWord(4,0,132),new DictWord(5,0,69),new DictWord(135,0,
					1242),new DictWord(7,10,1577),new DictWord(10,10,304),new DictWord(10,10,549),new DictWord(12,10,365),new DictWord(13,10,220),new DictWord(13,10,240),new DictWord(
					142,10,33),new DictWord(4,0,111),new DictWord(7,0,865),new DictWord(134,11,219),new DictWord(5,11,582),new DictWord(6,11,1646),new DictWord(7,11,99),new DictWord(7,
					11,1962),new DictWord(7,11,1986),new DictWord(8,11,515),new DictWord(8,11,773),new DictWord(9,11,23),new DictWord(9,11,491),new DictWord(12,11,620),new DictWord(14,
					11,52),new DictWord(145,11,50),new DictWord(132,0,767),new DictWord(7,11,568),new DictWord(148,11,21),new DictWord(6,0,42),new DictWord(7,0,1416),new DictWord(7,0,
					2005),new DictWord(8,0,131),new DictWord(8,0,466),new DictWord(9,0,672),new DictWord(13,0,252),new DictWord(20,0,103),new DictWord(133,11,851),new DictWord(135,0,
					1050),new DictWord(6,10,175),new DictWord(137,10,289),new DictWord(5,10,432),new DictWord(133,10,913),new DictWord(6,0,44),new DictWord(136,0,368),new DictWord(135,
					11,784),new DictWord(132,0,570),new DictWord(133,0,120),new DictWord(139,10,595),new DictWord(140,0,29),new DictWord(6,0,227),new DictWord(135,0,1589),new DictWord(
					4,11,98),new DictWord(7,11,1365),new DictWord(9,11,422),new DictWord(9,11,670),new DictWord(10,11,775),new DictWord(11,11,210),new DictWord(13,11,26),new DictWord(
					13,11,457),new DictWord(141,11,476),new DictWord(140,10,80),new DictWord(5,10,931),new DictWord(134,10,1698),new DictWord(133,0,522),new DictWord(134,0,
					1120),new DictWord(135,0,1529),new DictWord(12,0,739),new DictWord(14,0,448),new DictWord(142,0,467),new DictWord(11,10,526),new DictWord(11,10,939),new DictWord(
					141,10,290),new DictWord(5,10,774),new DictWord(6,10,1637),new DictWord(6,10,1686),new DictWord(134,10,1751),new DictWord(6,0,1667),new DictWord(135,0,
					2036),new DictWord(7,10,1167),new DictWord(11,10,934),new DictWord(13,10,391),new DictWord(145,10,76),new DictWord(137,11,147),new DictWord(6,10,260),new DictWord(7
					,10,1484),new DictWord(11,11,821),new DictWord(12,11,110),new DictWord(12,11,153),new DictWord(18,11,41),new DictWord(150,11,19),new DictWord(6,0,511),new DictWord(
					12,0,132),new DictWord(134,10,573),new DictWord(5,0,568),new DictWord(6,0,138),new DictWord(135,0,1293),new DictWord(132,0,1020),new DictWord(8,0,258),new DictWord(
					9,0,208),new DictWord(137,0,359),new DictWord(4,0,565),new DictWord(8,0,23),new DictWord(136,0,827),new DictWord(134,0,344),new DictWord(4,0,922),new DictWord(5,0,
					1023),new DictWord(13,11,477),new DictWord(14,11,120),new DictWord(148,11,61),new DictWord(134,0,240),new DictWord(5,11,209),new DictWord(6,11,30),new DictWord(11,
					11,56),new DictWord(139,11,305),new DictWord(6,0,171),new DictWord(7,0,1002),new DictWord(7,0,1324),new DictWord(9,0,415),new DictWord(14,0,230),new DictWord(18,0,
					68),new DictWord(4,10,292),new DictWord(4,10,736),new DictWord(5,10,871),new DictWord(6,10,1689),new DictWord(7,10,1944),new DictWord(137,10,580),new DictWord(9,11,
					635),new DictWord(139,11,559),new DictWord(4,11,150),new DictWord(5,11,303),new DictWord(134,11,327),new DictWord(6,10,63),new DictWord(135,10,920),new DictWord(133
					,10,793),new DictWord(8,11,192),new DictWord(10,11,78),new DictWord(10,11,555),new DictWord(11,11,308),new DictWord(13,11,359),new DictWord(147,11,95),new DictWord(
					135,11,786),new DictWord(135,11,1712),new DictWord(136,0,402),new DictWord(6,0,754),new DictWord(6,11,1638),new DictWord(7,11,79),new DictWord(7,11,496)
				,new DictWord(9,11,138),new DictWord(10,11,336),new DictWord(11,11,12),new DictWord(12,11,412),new DictWord(12,11,440),new DictWord(142,11,305),new DictWord(4,0,716
				),new DictWord(141,0,31),new DictWord(133,0,982),new DictWord(8,0,691),new DictWord(8,0,731),new DictWord(5,10,67),new DictWord(6,10,62),new DictWord(6,10,374),new DictWord(135
					,10,1391),new DictWord(9,10,790),new DictWord(140,10,47),new DictWord(139,11,556),new DictWord(151,11,1),new DictWord(7,11,204),new DictWord(7,11,415),new DictWord(
					8,11,42),new DictWord(10,11,85),new DictWord(11,11,33),new DictWord(11,11,564),new DictWord(12,11,571),new DictWord(149,11,1),new DictWord(8,0,888),new DictWord(7,
					11,610),new DictWord(135,11,1501),new DictWord(4,10,391),new DictWord(135,10,1169),new DictWord(5,0,847),new DictWord(9,0,840),new DictWord(138,0,803),new DictWord(
					137,0,823),new DictWord(134,0,785),new DictWord(8,0,152),new DictWord(9,0,53),new DictWord(9,0,268),new DictWord(9,0,901),new DictWord(10,0,518),new DictWord(10,0,
					829),new DictWord(11,0,188),new DictWord(13,0,74),new DictWord(14,0,46),new DictWord(15,0,17),new DictWord(15,0,33),new DictWord(17,0,40),new DictWord(18,0,36),new DictWord(19,
					0,20),new DictWord(22,0,1),new DictWord(152,0,2),new DictWord(4,11,3),new DictWord(5,11,247),new DictWord(5,11,644),new DictWord(7,11,744),new DictWord(7,11,1207),new DictWord(
					7,11,1225),new DictWord(7,11,1909),new DictWord(146,11,147),new DictWord(136,0,532),new DictWord(135,0,681),new DictWord(132,10,271),new DictWord(140,0,
					314),new DictWord(140,0,677),new DictWord(4,0,684),new DictWord(136,0,384),new DictWord(5,11,285),new DictWord(9,11,67),new DictWord(13,11,473),new DictWord(143,11,
					82),new DictWord(4,10,253),new DictWord(5,10,544),new DictWord(7,10,300),new DictWord(137,10,340),new DictWord(7,0,110),new DictWord(7,0,447),new DictWord(8,0,290),
				new DictWord(8,0,591),new DictWord(9,0,382),new DictWord(9,0,649),new DictWord(11,0,71),new DictWord(11,0,155),new DictWord(11,0,313),new DictWord(12,0,5),new DictWord(13,0,325
				),new DictWord(142,0,287),new DictWord(134,0,1818),new DictWord(136,0,1007),new DictWord(138,0,321),new DictWord(7,0,360),new DictWord(7,0,425),new DictWord(9,0,66)
				,new DictWord(9,0,278),new DictWord(138,0,644),new DictWord(133,10,818),new DictWord(5,0,385),new DictWord(5,10,541),new DictWord(6,10,94),new DictWord(6,10,499),new DictWord(7
					,10,230),new DictWord(139,10,321),new DictWord(4,10,920),new DictWord(5,10,25),new DictWord(5,10,790),new DictWord(6,10,457),new DictWord(7,10,853),new DictWord(136
					,10,788),new DictWord(4,0,900),new DictWord(133,0,861),new DictWord(5,0,254),new DictWord(7,0,985),new DictWord(136,0,73),new DictWord(7,0,1959),new DictWord(136,0,
					683),new DictWord(134,10,1765),new DictWord(133,10,822),new DictWord(132,10,634),new DictWord(4,11,29),new DictWord(6,11,532),new DictWord(7,11,1628),new DictWord(7
					,11,1648),new DictWord(9,11,303),new DictWord(9,11,350),new DictWord(10,11,433),new DictWord(11,11,97),new DictWord(11,11,557),new DictWord(11,11,745),new DictWord(
					12,11,289),new DictWord(12,11,335),new DictWord(12,11,348),new DictWord(12,11,606),new DictWord(13,11,116),new DictWord(13,11,233),new DictWord(13,11,
					466),new DictWord(14,11,181),new DictWord(14,11,209),new DictWord(14,11,232),new DictWord(14,11,236),new DictWord(14,11,300),new DictWord(16,11,41),new DictWord(148
					,11,97),new DictWord(19,0,86),new DictWord(6,10,36),new DictWord(7,10,658),new DictWord(136,10,454),new DictWord(135,11,1692),new DictWord(132,0,725),new DictWord(5
					,11,501),new DictWord(7,11,1704),new DictWord(9,11,553),new DictWord(11,11,520),new DictWord(12,11,557),new DictWord(141,11,249),new DictWord(134,0,196)
				,new DictWord(133,0,831),new DictWord(136,0,723),new DictWord(7,0,1897),new DictWord(13,0,80),new DictWord(13,0,437),new DictWord(145,0,74),new DictWord(4,0,992),new DictWord(6
					,0,627),new DictWord(136,0,994),new DictWord(135,11,1294),new DictWord(132,10,104),new DictWord(5,0,848),new DictWord(6,0,66),new DictWord(136,0,764),new DictWord(4
					,0,36),new DictWord(7,0,1387),new DictWord(10,0,205),new DictWord(139,0,755),new DictWord(6,0,1046),new DictWord(134,0,1485),new DictWord(134,0,950),new DictWord(
					132,0,887),new DictWord(14,0,450),new DictWord(148,0,111),new DictWord(7,0,620),new DictWord(7,0,831),new DictWord(9,10,542),new DictWord(9,10,566),new DictWord(138
					,10,728),new DictWord(6,0,165),new DictWord(138,0,388),new DictWord(139,10,263),new DictWord(4,0,719),new DictWord(135,0,155),new DictWord(138,10,468),new DictWord(
					6,11,453),new DictWord(144,11,36),new DictWord(134,11,129),new DictWord(5,0,533),new DictWord(7,0,755),new DictWord(138,0,780),new DictWord(134,0,1465),
				new DictWord(4,0,353),new DictWord(6,0,146),new DictWord(6,0,1789),new DictWord(7,0,427),new DictWord(7,0,990),new DictWord(7,0,1348),new DictWord(9,0,665),new DictWord(9,0,898
				),new DictWord(11,0,893),new DictWord(142,0,212),new DictWord(7,10,87),new DictWord(142,10,288),new DictWord(4,0,45),new DictWord(135,0,1257),new DictWord(12,0,7),new DictWord(
					7,10,988),new DictWord(7,10,1939),new DictWord(9,10,64),new DictWord(9,10,502),new DictWord(12,10,34),new DictWord(13,10,12),new DictWord(13,10,234),new DictWord(
					147,10,77),new DictWord(4,0,607),new DictWord(5,11,60),new DictWord(6,11,504),new DictWord(7,11,614),new DictWord(7,11,1155),new DictWord(140,11,0),new DictWord(135
					,10,141),new DictWord(8,11,198),new DictWord(11,11,29),new DictWord(140,11,534),new DictWord(140,0,65),new DictWord(136,0,816),new DictWord(132,10,619),
				new DictWord(139,0,88),new DictWord(5,10,246),new DictWord(8,10,189),new DictWord(9,10,355),new DictWord(9,10,512),new DictWord(10,10,124),new DictWord(10,10,453),new DictWord(
					11,10,143),new DictWord(11,10,416),new DictWord(11,10,859),new DictWord(141,10,341),new DictWord(4,11,379),new DictWord(135,11,1397),new DictWord(4,0,
					600),new DictWord(137,0,621),new DictWord(133,0,367),new DictWord(134,0,561),new DictWord(6,0,559),new DictWord(134,0,1691),new DictWord(6,0,585),new DictWord(134,
					11,585),new DictWord(135,11,1228),new DictWord(4,11,118),new DictWord(5,10,678),new DictWord(6,11,274),new DictWord(6,11,361),new DictWord(7,11,75),new DictWord(141
					,11,441),new DictWord(135,11,1818),new DictWord(137,11,841),new DictWord(5,0,573),new DictWord(6,0,287),new DictWord(7,10,862),new DictWord(7,10,1886),new DictWord(
					138,10,179),new DictWord(132,10,517),new DictWord(140,11,693),new DictWord(5,11,314),new DictWord(6,11,221),new DictWord(7,11,419),new DictWord(10,11,
					650),new DictWord(11,11,396),new DictWord(12,11,156),new DictWord(13,11,369),new DictWord(14,11,333),new DictWord(145,11,47),new DictWord(140,10,540),new DictWord(
					136,10,667),new DictWord(11,10,403),new DictWord(146,10,83),new DictWord(6,0,672),new DictWord(133,10,761),new DictWord(9,0,157),new DictWord(10,10,131)
				,new DictWord(140,10,72),new DictWord(7,0,714),new DictWord(134,11,460),new DictWord(134,0,456),new DictWord(133,0,925),new DictWord(5,11,682),new DictWord(135,11,
					1887),new DictWord(136,11,510),new DictWord(136,11,475),new DictWord(133,11,1016),new DictWord(9,0,19),new DictWord(7,11,602),new DictWord(8,11,179),new DictWord(10
					,11,781),new DictWord(140,11,126),new DictWord(6,11,329),new DictWord(138,11,111),new DictWord(6,0,822),new DictWord(134,0,1473),new DictWord(144,11,86)
				,new DictWord(11,0,113),new DictWord(139,11,113),new DictWord(5,11,821),new DictWord(134,11,1687),new DictWord(133,10,449),new DictWord(7,0,463),new DictWord(17,0,
					69),new DictWord(136,10,103),new DictWord(7,10,2028),new DictWord(138,10,641),new DictWord(6,0,193),new DictWord(7,0,240),new DictWord(7,0,1682),new DictWord(10,0,
					51),new DictWord(10,0,640),new DictWord(11,0,410),new DictWord(13,0,82),new DictWord(14,0,247),new DictWord(14,0,331),new DictWord(142,0,377),new DictWord(6,0,471),
				new DictWord(11,0,411),new DictWord(142,0,2),new DictWord(5,11,71),new DictWord(7,11,1407),new DictWord(9,11,388),new DictWord(9,11,704),new DictWord(10,11,261),new DictWord(10
					,11,619),new DictWord(11,11,547),new DictWord(11,11,619),new DictWord(143,11,157),new DictWord(136,0,633),new DictWord(135,0,1148),new DictWord(6,0,554)
				,new DictWord(7,0,1392),new DictWord(12,0,129),new DictWord(7,10,1274),new DictWord(7,10,1386),new DictWord(7,11,2008),new DictWord(9,11,337),new DictWord(10,11,517
				),new DictWord(146,10,87),new DictWord(7,0,803),new DictWord(8,0,542),new DictWord(6,10,187),new DictWord(7,10,1203),new DictWord(8,10,380),new DictWord(14,10,117),
				new DictWord(149,10,28),new DictWord(6,10,297),new DictWord(7,10,793),new DictWord(139,10,938),new DictWord(8,0,438),new DictWord(11,0,363),new DictWord(7,10,464),new DictWord(
					11,10,105),new DictWord(12,10,231),new DictWord(14,10,386),new DictWord(15,10,102),new DictWord(148,10,75),new DictWord(5,11,16),new DictWord(6,11,86),new DictWord(
					6,11,603),new DictWord(7,11,292),new DictWord(7,11,561),new DictWord(8,11,257),new DictWord(8,11,382),new DictWord(9,11,721),new DictWord(9,11,778),new DictWord(11,
					11,581),new DictWord(140,11,466),new DictWord(6,0,717),new DictWord(4,11,486),new DictWord(133,11,491),new DictWord(132,0,875),new DictWord(132,11,72),new DictWord(
					6,11,265),new DictWord(135,11,847),new DictWord(4,0,237),new DictWord(135,0,514),new DictWord(6,0,392),new DictWord(7,0,65),new DictWord(135,0,2019),new DictWord(
					140,11,261),new DictWord(135,11,922),new DictWord(137,11,404),new DictWord(12,0,563),new DictWord(14,0,101),new DictWord(18,0,129),new DictWord(7,10,
					1010),new DictWord(11,10,733),new DictWord(11,10,759),new DictWord(13,10,34),new DictWord(146,10,45),new DictWord(7,10,1656),new DictWord(9,10,369),new DictWord(10,
					10,338),new DictWord(10,10,490),new DictWord(11,10,154),new DictWord(11,10,545),new DictWord(11,10,775),new DictWord(13,10,77),new DictWord(141,10,274),
				new DictWord(4,0,444),new DictWord(10,0,146),new DictWord(140,0,9),new DictWord(139,11,163),new DictWord(7,0,1260),new DictWord(135,0,1790),new DictWord(9,0,222),new DictWord(
					10,0,43),new DictWord(139,0,900),new DictWord(137,11,234),new DictWord(138,0,971),new DictWord(137,0,761),new DictWord(134,0,699),new DictWord(136,11,
					434),new DictWord(6,0,1116),new DictWord(7,0,1366),new DictWord(5,10,20),new DictWord(6,11,197),new DictWord(6,10,298),new DictWord(7,10,659),new DictWord(8,11,205)
				,new DictWord(137,10,219),new DictWord(132,11,490),new DictWord(11,11,820),new DictWord(150,11,51),new DictWord(7,10,1440),new DictWord(11,10,854),new DictWord(11,
					10,872),new DictWord(11,10,921),new DictWord(12,10,551),new DictWord(13,10,472),new DictWord(142,10,367),new DictWord(140,11,13),new DictWord(132,0,829)
				,new DictWord(12,0,242),new DictWord(132,10,439),new DictWord(136,10,669),new DictWord(6,0,593),new DictWord(6,11,452),new DictWord(7,11,312),new DictWord(138,11,
					219),new DictWord(4,11,333),new DictWord(9,11,176),new DictWord(12,11,353),new DictWord(141,11,187),new DictWord(7,0,36),new DictWord(8,0,201),new DictWord(136,0,
					605),new DictWord(140,0,224),new DictWord(132,10,233),new DictWord(134,0,1430),new DictWord(134,0,1806),new DictWord(4,0,523),new DictWord(133,0,638),new DictWord(6
					,0,1889),new DictWord(9,0,958),new DictWord(9,0,971),new DictWord(9,0,976),new DictWord(12,0,796),new DictWord(12,0,799),new DictWord(12,0,808),new DictWord(12,0,
					835),new DictWord(12,0,836),new DictWord(12,0,914),new DictWord(12,0,946),new DictWord(15,0,216),new DictWord(15,0,232),new DictWord(18,0,183),new DictWord(18,0,187
				),new DictWord(18,0,194),new DictWord(18,0,212),new DictWord(18,0,232),new DictWord(149,0,49),new DictWord(132,10,482),new DictWord(6,0,827),new DictWord(134,0,1434
				),new DictWord(135,10,346),new DictWord(134,0,2043),new DictWord(6,0,242),new DictWord(7,0,227),new DictWord(7,0,1581),new DictWord(8,0,104),new DictWord(9,0,113),new DictWord(
					9,0,220),new DictWord(9,0,427),new DictWord(10,0,136),new DictWord(10,0,239),new DictWord(11,0,579),new DictWord(11,0,1023),new DictWord(13,0,4),new DictWord(13,0,
					204),new DictWord(13,0,316),new DictWord(148,0,86),new DictWord(134,11,1685),new DictWord(7,0,148),new DictWord(8,0,284),new DictWord(141,0,63),new DictWord(142,0,
					10),new DictWord(135,11,584),new DictWord(134,0,1249),new DictWord(7,0,861),new DictWord(135,10,334),new DictWord(5,10,795),new DictWord(6,10,1741),new DictWord(137
					,11,70),new DictWord(132,0,807),new DictWord(7,11,135),new DictWord(8,11,7),new DictWord(8,11,62),new DictWord(9,11,243),new DictWord(10,11,658),new DictWord(10,11,
					697),new DictWord(11,11,456),new DictWord(139,11,756),new DictWord(9,11,395),new DictWord(138,11,79),new DictWord(137,11,108),new DictWord(147,0,94),new DictWord(
					136,0,494),new DictWord(135,11,631),new DictWord(135,10,622),new DictWord(7,0,1510),new DictWord(135,10,1750),new DictWord(4,10,203),new DictWord(135,10
					,1936),new DictWord(7,11,406),new DictWord(7,11,459),new DictWord(8,11,606),new DictWord(139,11,726),new DictWord(7,0,1306),new DictWord(8,0,505),new DictWord(9,0,
					482),new DictWord(10,0,126),new DictWord(11,0,225),new DictWord(12,0,347),new DictWord(12,0,449),new DictWord(13,0,19),new DictWord(14,0,218),new DictWord(142,0,435
				),new DictWord(5,0,268),new DictWord(10,0,764),new DictWord(12,0,120),new DictWord(13,0,39),new DictWord(145,0,127),new DictWord(142,11,68),new DictWord(11,10,678),
				new DictWord(140,10,307),new DictWord(12,11,268),new DictWord(12,11,640),new DictWord(142,11,119),new DictWord(135,10,2044),new DictWord(133,11,612),new DictWord(4,
					11,372),new DictWord(7,11,482),new DictWord(8,11,158),new DictWord(9,11,602),new DictWord(9,11,615),new DictWord(10,11,245),new DictWord(10,11,678),new DictWord(10,
					11,744),new DictWord(11,11,248),new DictWord(139,11,806),new DictWord(7,10,311),new DictWord(9,10,308),new DictWord(140,10,255),new DictWord(4,0,384),new DictWord(
					135,0,1022),new DictWord(5,11,854),new DictWord(135,11,1991),new DictWord(135,10,1266),new DictWord(4,10,400),new DictWord(5,10,267),new DictWord(135,10
					,232),new DictWord(135,0,1703),new DictWord(9,0,159),new DictWord(11,0,661),new DictWord(140,0,603),new DictWord(4,0,964),new DictWord(14,0,438),new DictWord(14,0,
					444),new DictWord(14,0,456),new DictWord(22,0,60),new DictWord(22,0,63),new DictWord(9,11,106),new DictWord(9,11,163),new DictWord(9,11,296),new DictWord(10,11,167)
				,new DictWord(10,11,172),new DictWord(10,11,777),new DictWord(139,11,16),new DictWord(136,0,583),new DictWord(132,0,515),new DictWord(8,0,632),new DictWord(8,0,697)
				,new DictWord(137,0,854),new DictWord(5,11,195),new DictWord(135,11,1685),new DictWord(6,0,1123),new DictWord(134,0,1365),new DictWord(134,11,328),new DictWord(7,11
					,1997),new DictWord(8,11,730),new DictWord(139,11,1006),new DictWord(4,0,136),new DictWord(133,0,551),new DictWord(134,0,1782),new DictWord(7,0,1287),new DictWord(9
					,0,44),new DictWord(10,0,552),new DictWord(10,0,642),new DictWord(11,0,839),new DictWord(12,0,274),new DictWord(12,0,275),new DictWord(12,0,372),new DictWord(13,0,
					91),new DictWord(142,0,125),new DictWord(5,11,751),new DictWord(11,11,797),new DictWord(140,11,203),new DictWord(133,0,732),new DictWord(7,0,679),new DictWord(8,0,
					313),new DictWord(4,10,100),new DictWord(135,11,821),new DictWord(10,0,361),new DictWord(142,0,316),new DictWord(134,0,595),new DictWord(6,0,147),new DictWord(7,0,
					886),new DictWord(9,0,753),new DictWord(138,0,268),new DictWord(5,10,362),new DictWord(5,10,443),new DictWord(6,10,318),new DictWord(7,10,1019),new DictWord(139,10,
					623),new DictWord(5,10,463),new DictWord(136,10,296),new DictWord(4,10,454),new DictWord(5,11,950),new DictWord(5,11,994),new DictWord(134,11,351),new DictWord(138,
					0,137),new DictWord(5,10,48),new DictWord(5,10,404),new DictWord(6,10,557),new DictWord(7,10,458),new DictWord(8,10,597),new DictWord(10,10,455),new DictWord(10,10,
					606),new DictWord(11,10,49),new DictWord(11,10,548),new DictWord(12,10,476),new DictWord(13,10,18),new DictWord(141,10,450),new DictWord(133,0,414),new DictWord(135
					,0,1762),new DictWord(5,11,421),new DictWord(135,11,47),new DictWord(5,10,442),new DictWord(135,10,1984),new DictWord(134,0,599),new DictWord(134,0,1749
				),new DictWord(134,0,1627),new DictWord(4,0,488),new DictWord(132,11,350),new DictWord(137,11,751),new DictWord(132,0,83),new DictWord(140,0,676),new DictWord(133,
					11,967),new DictWord(7,0,1639),new DictWord(5,10,55),new DictWord(140,10,161),new DictWord(4,11,473),new DictWord(7,11,623),new DictWord(8,11,808),new DictWord(9,11
					,871),new DictWord(9,11,893),new DictWord(11,11,38),new DictWord(11,11,431),new DictWord(12,11,112),new DictWord(12,11,217),new DictWord(12,11,243),new DictWord(12,
					11,562),new DictWord(12,11,683),new DictWord(13,11,141),new DictWord(13,11,197),new DictWord(13,11,227),new DictWord(13,11,406),new DictWord(13,11,487),
				new DictWord(14,11,156),new DictWord(14,11,203),new DictWord(14,11,224),new DictWord(14,11,256),new DictWord(18,11,58),new DictWord(150,11,0),new DictWord(133,10,
					450),new DictWord(7,11,736),new DictWord(139,11,264),new DictWord(134,0,278),new DictWord(4,11,222),new DictWord(7,11,286),new DictWord(136,11,629),new DictWord(135
					,10,869),new DictWord(140,0,97),new DictWord(144,0,14),new DictWord(134,0,1085),new DictWord(4,10,213),new DictWord(7,10,223),new DictWord(136,10,80),new DictWord(7
					,0,388),new DictWord(7,0,644),new DictWord(139,0,781),new DictWord(132,0,849),new DictWord(7,0,229),new DictWord(8,0,59),new DictWord(9,0,190),new DictWord(10,0,378
				),new DictWord(140,0,191),new DictWord(7,10,381),new DictWord(7,10,806),new DictWord(7,10,820),new DictWord(8,10,354),new DictWord(8,10,437),new DictWord(8,10,787),
				new DictWord(9,10,657),new DictWord(10,10,58),new DictWord(10,10,339),new DictWord(10,10,749),new DictWord(11,10,914),new DictWord(12,10,162),new DictWord(13,10,75)
				,new DictWord(14,10,106),new DictWord(14,10,198),new DictWord(14,10,320),new DictWord(14,10,413),new DictWord(146,10,43),new DictWord(141,11,306),new DictWord(136,
					10,747),new DictWord(134,0,1115),new DictWord(16,0,94),new DictWord(16,0,108),new DictWord(136,11,146),new DictWord(6,0,700),new DictWord(6,0,817),new DictWord(134,
					0,1002),new DictWord(133,10,692),new DictWord(4,11,465),new DictWord(135,11,1663),new DictWord(134,10,191),new DictWord(6,0,1414),new DictWord(135,11,
					913),new DictWord(132,0,660),new DictWord(7,0,1035),new DictWord(138,0,737),new DictWord(6,10,162),new DictWord(7,10,1960),new DictWord(136,10,831),new DictWord(132
					,10,706),new DictWord(7,0,690),new DictWord(9,0,217),new DictWord(9,0,587),new DictWord(140,0,521),new DictWord(138,10,426),new DictWord(135,10,1235),new DictWord(6
					,11,82),new DictWord(7,11,138),new DictWord(7,11,517),new DictWord(9,11,673),new DictWord(139,11,238),new DictWord(138,0,272),new DictWord(5,11,495),new DictWord(7,
					11,834),new DictWord(9,11,733),new DictWord(139,11,378),new DictWord(134,0,1744),new DictWord(132,0,1011),new DictWord(7,11,828),new DictWord(142,11,116
				),new DictWord(4,0,733),new DictWord(9,0,194),new DictWord(10,0,92),new DictWord(11,0,198),new DictWord(12,0,84),new DictWord(13,0,128),new DictWord(133,11,559),new DictWord(10
					,0,57),new DictWord(10,0,277),new DictWord(6,11,21),new DictWord(6,11,1737),new DictWord(7,11,1444),new DictWord(136,11,224),new DictWord(4,10,204),new DictWord(137
					,10,902),new DictWord(136,10,833),new DictWord(11,0,348),new DictWord(12,0,99),new DictWord(18,0,1),new DictWord(18,0,11),new DictWord(19,0,4),new DictWord(7,10,366
				),new DictWord(9,10,287),new DictWord(12,10,199),new DictWord(12,10,556),new DictWord(140,10,577),new DictWord(6,0,1981),new DictWord(136,0,936),new DictWord(21,0,
					33),new DictWord(150,0,40),new DictWord(5,11,519),new DictWord(138,11,204),new DictWord(5,10,356),new DictWord(135,10,224),new DictWord(134,0,775),new DictWord(135,
					0,306),new DictWord(7,10,630),new DictWord(9,10,567),new DictWord(11,10,150),new DictWord(11,10,444),new DictWord(141,10,119),new DictWord(5,0,979),new DictWord(134
					,10,539),new DictWord(133,0,611),new DictWord(4,11,402),new DictWord(135,11,1679),new DictWord(5,0,178),new DictWord(7,11,2),new DictWord(8,11,323),new DictWord(136
					,11,479),new DictWord(5,11,59),new DictWord(135,11,672),new DictWord(4,0,1010),new DictWord(6,0,1969),new DictWord(138,11,237),new DictWord(133,11,412),
				new DictWord(146,11,34),new DictWord(7,11,1740),new DictWord(146,11,48),new DictWord(134,0,664),new DictWord(139,10,814),new DictWord(4,11,85),new DictWord(135,11,
					549),new DictWord(133,11,94),new DictWord(133,11,457),new DictWord(132,0,390),new DictWord(134,0,1510),new DictWord(4,10,235),new DictWord(135,10,255),new DictWord(
					4,10,194),new DictWord(5,10,584),new DictWord(6,11,11),new DictWord(6,10,384),new DictWord(7,11,187),new DictWord(7,10,583),new DictWord(10,10,761),new DictWord(11,
					10,760),new DictWord(139,10,851),new DictWord(4,11,522),new DictWord(139,11,802),new DictWord(135,0,493),new DictWord(10,11,776),new DictWord(13,11,345)
				,new DictWord(142,11,425),new DictWord(146,0,37),new DictWord(4,11,52),new DictWord(135,11,661),new DictWord(134,0,724),new DictWord(134,0,829),new DictWord(133,11,
					520),new DictWord(133,10,562),new DictWord(4,11,281),new DictWord(5,11,38),new DictWord(7,11,194),new DictWord(7,11,668),new DictWord(7,11,1893),new DictWord(137,11
					,397),new DictWord(5,10,191),new DictWord(137,10,271),new DictWord(7,0,1537),new DictWord(14,0,96),new DictWord(143,0,73),new DictWord(5,0,473),new DictWord(11,0,
					168),new DictWord(4,10,470),new DictWord(6,10,153),new DictWord(7,10,1503),new DictWord(7,10,1923),new DictWord(10,10,701),new DictWord(11,10,132),new DictWord(11,
					10,227),new DictWord(11,10,320),new DictWord(11,10,436),new DictWord(11,10,525),new DictWord(11,10,855),new DictWord(12,10,41),new DictWord(12,10,286),new DictWord(
					13,10,103),new DictWord(13,10,284),new DictWord(14,10,255),new DictWord(14,10,262),new DictWord(15,10,117),new DictWord(143,10,127),new DictWord(133,0,
					105),new DictWord(5,0,438),new DictWord(9,0,694),new DictWord(12,0,627),new DictWord(141,0,210),new DictWord(133,10,327),new DictWord(6,10,552),new DictWord(7,10,
					1754),new DictWord(137,10,604),new DictWord(134,0,1256),new DictWord(152,0,11),new DictWord(5,11,448),new DictWord(11,11,98),new DictWord(139,11,524),new DictWord(7
					,0,1626),new DictWord(5,10,80),new DictWord(6,10,405),new DictWord(7,10,403),new DictWord(7,10,1502),new DictWord(8,10,456),new DictWord(9,10,487),new DictWord(9,10
					,853),new DictWord(9,10,889),new DictWord(10,10,309),new DictWord(11,10,721),new DictWord(11,10,994),new DictWord(12,10,430),new DictWord(13,10,165),new DictWord(14
					,11,16),new DictWord(146,11,44),new DictWord(132,0,779),new DictWord(8,0,25),new DictWord(138,0,826),new DictWord(4,10,453),new DictWord(5,10,887),new DictWord(6,10
					,535),new DictWord(8,10,6),new DictWord(8,10,543),new DictWord(136,10,826),new DictWord(137,11,461),new DictWord(140,11,632),new DictWord(132,0,308),new DictWord(
					135,0,741),new DictWord(132,0,671),new DictWord(7,0,150),new DictWord(8,0,649),new DictWord(136,0,1020),new DictWord(9,0,99),new DictWord(6,11,336),new DictWord(8,
					11,552),new DictWord(9,11,285),new DictWord(10,11,99),new DictWord(139,11,568),new DictWord(134,0,521),new DictWord(5,0,339),new DictWord(14,0,3),new DictWord(15,0,
					41),new DictWord(15,0,166),new DictWord(147,0,66),new DictWord(6,11,423),new DictWord(7,11,665),new DictWord(7,11,1210),new DictWord(9,11,218),new DictWord(141,11,
					222),new DictWord(6,0,543),new DictWord(5,10,101),new DictWord(5,11,256),new DictWord(6,10,88),new DictWord(7,10,1677),new DictWord(9,10,100),new DictWord(10,10,677
				),new DictWord(14,10,169),new DictWord(14,10,302),new DictWord(14,10,313),new DictWord(15,10,48),new DictWord(143,10,84),new DictWord(4,10,310),new DictWord(7,10,
					708),new DictWord(7,10,996),new DictWord(9,10,795),new DictWord(10,10,390),new DictWord(10,10,733),new DictWord(11,10,451),new DictWord(12,10,249),new DictWord(14,
					10,115),new DictWord(14,10,286),new DictWord(143,10,100),new DictWord(133,10,587),new DictWord(13,11,417),new DictWord(14,11,129),new DictWord(143,11,15
				),new DictWord(134,0,1358),new DictWord(136,11,554),new DictWord(132,10,498),new DictWord(7,10,217),new DictWord(8,10,140),new DictWord(138,10,610),new DictWord(135
					,11,989),new DictWord(135,11,634),new DictWord(6,0,155),new DictWord(140,0,234),new DictWord(135,11,462),new DictWord(132,11,618),new DictWord(134,0,
					1628),new DictWord(132,0,766),new DictWord(4,11,339),new DictWord(5,10,905),new DictWord(135,11,259),new DictWord(135,0,829),new DictWord(4,11,759),new DictWord(141
					,11,169),new DictWord(7,0,1445),new DictWord(4,10,456),new DictWord(7,10,358),new DictWord(7,10,1637),new DictWord(8,10,643),new DictWord(139,10,483),new DictWord(5
					,0,486),new DictWord(135,0,1349),new DictWord(5,11,688),new DictWord(135,11,712),new DictWord(7,0,1635),new DictWord(8,0,17),new DictWord(10,0,217),new DictWord(10,
					0,295),new DictWord(12,0,2),new DictWord(140,11,2),new DictWord(138,0,558),new DictWord(150,10,56),new DictWord(4,11,278),new DictWord(5,11,465),new DictWord(135,11
					,1367),new DictWord(136,11,482),new DictWord(133,10,535),new DictWord(6,0,1362),new DictWord(6,0,1461),new DictWord(10,11,274),new DictWord(10,11,625),new DictWord(
					139,11,530),new DictWord(5,0,599),new DictWord(5,11,336),new DictWord(6,11,341),new DictWord(6,11,478),new DictWord(6,11,1763),new DictWord(136,11,386),
				new DictWord(7,10,1748),new DictWord(137,11,151),new DictWord(134,0,1376),new DictWord(133,10,539),new DictWord(135,11,73),new DictWord(135,11,1971),new DictWord(
					139,11,283),new DictWord(9,0,93),new DictWord(139,0,474),new DictWord(6,10,91),new DictWord(135,10,435),new DictWord(6,0,447),new DictWord(5,11,396),new DictWord(
					134,11,501),new DictWord(4,10,16),new DictWord(5,10,316),new DictWord(5,10,842),new DictWord(6,10,370),new DictWord(6,10,1778),new DictWord(8,10,166),new DictWord(
					11,10,812),new DictWord(12,10,206),new DictWord(12,10,351),new DictWord(14,10,418),new DictWord(16,10,15),new DictWord(16,10,34),new DictWord(18,10,3),new DictWord(
					19,10,3),new DictWord(19,10,7),new DictWord(20,10,4),new DictWord(149,10,21),new DictWord(7,0,577),new DictWord(7,0,1432),new DictWord(9,0,475),new DictWord(9,0,505
				),new DictWord(9,0,526),new DictWord(9,0,609),new DictWord(9,0,689),new DictWord(9,0,726),new DictWord(9,0,735),new DictWord(9,0,738),new DictWord(10,0,556),new DictWord(10,0,
					674),new DictWord(10,0,684),new DictWord(11,0,89),new DictWord(11,0,202),new DictWord(11,0,272),new DictWord(11,0,380),new DictWord(11,0,415),new DictWord(11,0,505)
				,new DictWord(11,0,537),new DictWord(11,0,550),new DictWord(11,0,562),new DictWord(11,0,640),new DictWord(11,0,667),new DictWord(11,0,688),new DictWord(11,0,847),new DictWord(
					11,0,927),new DictWord(11,0,930),new DictWord(11,0,940),new DictWord(12,0,144),new DictWord(12,0,325),new DictWord(12,0,329),new DictWord(12,0,389),new DictWord(12,
					0,403),new DictWord(12,0,451),new DictWord(12,0,515),new DictWord(12,0,604),new DictWord(12,0,616),new DictWord(12,0,626),new DictWord(13,0,66),new DictWord(13,0,
					131),new DictWord(13,0,167),new DictWord(13,0,236),new DictWord(13,0,368),new DictWord(13,0,411),new DictWord(13,0,434),new DictWord(13,0,453),new DictWord(13,0,461
				),new DictWord(13,0,474),new DictWord(14,0,59),new DictWord(14,0,60),new DictWord(14,0,139),new DictWord(14,0,152),new DictWord(14,0,276),new DictWord(14,0,353),new DictWord(14
					,0,402),new DictWord(15,0,28),new DictWord(15,0,81),new DictWord(15,0,123),new DictWord(15,0,152),new DictWord(18,0,136),new DictWord(148,0,88),new DictWord(4,11,
					929),new DictWord(133,11,799),new DictWord(136,11,46),new DictWord(142,0,307),new DictWord(4,0,609),new DictWord(7,0,756),new DictWord(9,0,544),new DictWord(11,0,
					413),new DictWord(144,0,25),new DictWord(10,0,687),new DictWord(7,10,619),new DictWord(10,10,547),new DictWord(11,10,122),new DictWord(140,10,601),new DictWord(4,0,
					930),new DictWord(133,0,947),new DictWord(133,0,939),new DictWord(142,0,21),new DictWord(4,11,892),new DictWord(133,11,770),new DictWord(133,0,962),new DictWord(5,0
					,651),new DictWord(8,0,170),new DictWord(9,0,61),new DictWord(9,0,63),new DictWord(10,0,23),new DictWord(10,0,37),new DictWord(10,0,834),new DictWord(11,0,4),new DictWord(11,0,
					187),new DictWord(11,0,281),new DictWord(11,0,503),new DictWord(11,0,677),new DictWord(12,0,96),new DictWord(12,0,130),new DictWord(12,0,244),new DictWord(14,0,5),new DictWord(
					14,0,40),new DictWord(14,0,162),new DictWord(14,0,202),new DictWord(146,0,133),new DictWord(4,0,406),new DictWord(5,0,579),new DictWord(12,0,492),new DictWord(150,0
					,15),new DictWord(135,11,158),new DictWord(135,0,597),new DictWord(132,0,981),new DictWord(132,10,888),new DictWord(4,10,149),new DictWord(138,10,368),new DictWord(
					132,0,545),new DictWord(4,10,154),new DictWord(7,10,1134),new DictWord(136,10,105),new DictWord(135,11,2001),new DictWord(134,0,1558),new DictWord(4,10,
					31),new DictWord(6,10,429),new DictWord(7,10,962),new DictWord(9,10,458),new DictWord(139,10,691),new DictWord(132,10,312),new DictWord(135,10,1642),new DictWord(6,
					0,17),new DictWord(6,0,1304),new DictWord(7,0,16),new DictWord(7,0,1001),new DictWord(9,0,886),new DictWord(10,0,489),new DictWord(10,0,800),new DictWord(11,0,782),
				new DictWord(12,0,320),new DictWord(13,0,467),new DictWord(14,0,145),new DictWord(14,0,387),new DictWord(143,0,119),new DictWord(135,0,1982),new DictWord(17,0,17),new DictWord(
					7,11,1461),new DictWord(140,11,91),new DictWord(4,10,236),new DictWord(132,11,602),new DictWord(138,0,907),new DictWord(136,0,110),new DictWord(7,0,272)
				,new DictWord(19,0,53),new DictWord(5,10,836),new DictWord(5,10,857),new DictWord(134,10,1680),new DictWord(5,0,458),new DictWord(7,11,1218),new DictWord(136,11,303
				),new DictWord(7,0,1983),new DictWord(8,0,0),new DictWord(8,0,171),new DictWord(9,0,120),new DictWord(9,0,732),new DictWord(10,0,473),new DictWord(11,0,656),new DictWord(11,0,
					998),new DictWord(18,0,0),new DictWord(18,0,2),new DictWord(19,0,21),new DictWord(10,10,68),new DictWord(139,10,494),new DictWord(137,11,662),new DictWord(4,11,13),
				new DictWord(5,11,567),new DictWord(7,11,1498),new DictWord(9,11,124),new DictWord(11,11,521),new DictWord(140,11,405),new DictWord(4,10,81),new DictWord(139,10,867
				),new DictWord(135,11,1006),new DictWord(7,11,800),new DictWord(7,11,1783),new DictWord(138,11,12),new DictWord(9,0,295),new DictWord(10,0,443),new DictWord(5,10,
					282),new DictWord(8,10,650),new DictWord(137,10,907),new DictWord(132,11,735),new DictWord(4,11,170),new DictWord(4,10,775),new DictWord(135,11,323),new DictWord(6,
					0,1844),new DictWord(10,0,924),new DictWord(11,11,844),new DictWord(12,11,104),new DictWord(140,11,625),new DictWord(5,11,304),new DictWord(7,11,1403),new DictWord(
					140,11,498),new DictWord(134,0,1232),new DictWord(4,0,519),new DictWord(10,0,70),new DictWord(12,0,26),new DictWord(14,0,17),new DictWord(14,0,178),new DictWord(15,
					0,34),new DictWord(149,0,12),new DictWord(132,0,993),new DictWord(4,11,148),new DictWord(133,11,742),new DictWord(6,0,31),new DictWord(7,0,491),new DictWord(7,0,530
				),new DictWord(8,0,592),new DictWord(11,0,53),new DictWord(11,0,779),new DictWord(12,0,167),new DictWord(12,0,411),new DictWord(14,0,14),new DictWord(14,0,136),new DictWord(15,
					0,72),new DictWord(16,0,17),new DictWord(144,0,72),new DictWord(133,0,907),new DictWord(134,0,733),new DictWord(133,11,111),new DictWord(4,10,71),new DictWord(5,10,
					376),new DictWord(7,10,119),new DictWord(138,10,665),new DictWord(136,0,55),new DictWord(8,0,430),new DictWord(136,11,430),new DictWord(4,0,208),new DictWord(5,0,
					106),new DictWord(6,0,531),new DictWord(8,0,408),new DictWord(9,0,188),new DictWord(138,0,572),new DictWord(12,0,56),new DictWord(11,10,827),new DictWord(14,10,34),
				new DictWord(143,10,148),new DictWord(134,0,1693),new DictWord(133,11,444),new DictWord(132,10,479),new DictWord(140,0,441),new DictWord(9,0,449),new DictWord(10,0,
					192),new DictWord(138,0,740),new DictWord(134,0,928),new DictWord(4,0,241),new DictWord(7,10,607),new DictWord(136,10,99),new DictWord(8,11,123),new DictWord(15,11,
					6),new DictWord(144,11,7),new DictWord(6,11,285),new DictWord(8,11,654),new DictWord(11,11,749),new DictWord(12,11,190),new DictWord(12,11,327),new DictWord(13,11,
					120),new DictWord(13,11,121),new DictWord(13,11,327),new DictWord(15,11,47),new DictWord(146,11,40),new DictWord(4,10,41),new DictWord(5,10,74),new DictWord(7,10,
					1627),new DictWord(11,10,871),new DictWord(140,10,619),new DictWord(7,0,1525),new DictWord(11,10,329),new DictWord(11,10,965),new DictWord(12,10,241),new DictWord(
					14,10,354),new DictWord(15,10,22),new DictWord(148,10,63),new DictWord(132,0,259),new DictWord(135,11,183),new DictWord(9,10,209),new DictWord(137,10,
					300),new DictWord(5,11,937),new DictWord(135,11,100),new DictWord(133,10,98),new DictWord(4,0,173),new DictWord(5,0,312),new DictWord(5,0,512),new DictWord(135,0,
					1285),new DictWord(141,0,185),new DictWord(7,0,1603),new DictWord(7,0,1691),new DictWord(9,0,464),new DictWord(11,0,195),new DictWord(12,0,279),new DictWord(12,0,
					448),new DictWord(14,0,11),new DictWord(147,0,102),new DictWord(135,0,1113),new DictWord(133,10,984),new DictWord(4,0,452),new DictWord(5,0,583),new DictWord(135,0,
					720),new DictWord(4,0,547),new DictWord(5,0,817),new DictWord(6,0,433),new DictWord(7,0,593),new DictWord(7,0,1378),new DictWord(8,0,161),new DictWord(9,0,284),new DictWord(10,
					0,313),new DictWord(139,0,886),new DictWord(8,0,722),new DictWord(4,10,182),new DictWord(6,10,205),new DictWord(135,10,220),new DictWord(150,0,13),new DictWord(4,10
					,42),new DictWord(9,10,205),new DictWord(9,10,786),new DictWord(138,10,659),new DictWord(6,0,289),new DictWord(7,0,1670),new DictWord(12,0,57),new DictWord(151,0,4)
				,new DictWord(132,10,635),new DictWord(14,0,43),new DictWord(146,0,21),new DictWord(139,10,533),new DictWord(135,0,1694),new DictWord(8,0,420),new DictWord(139,0,
					193),new DictWord(135,0,409),new DictWord(132,10,371),new DictWord(4,10,272),new DictWord(135,10,836),new DictWord(5,10,825),new DictWord(134,10,1640),new DictWord(
					5,11,251),new DictWord(5,11,956),new DictWord(8,11,268),new DictWord(9,11,214),new DictWord(146,11,142),new DictWord(138,0,308),new DictWord(6,0,1863),new DictWord(
					141,11,37),new DictWord(137,10,879),new DictWord(7,10,317),new DictWord(135,10,569),new DictWord(132,11,294),new DictWord(134,0,790),new DictWord(5,0,
					1002),new DictWord(136,0,745),new DictWord(5,11,346),new DictWord(5,11,711),new DictWord(136,11,390),new DictWord(135,0,289),new DictWord(5,0,504),new DictWord(11,0
					,68),new DictWord(137,10,307),new DictWord(4,0,239),new DictWord(6,0,477),new DictWord(7,0,1607),new DictWord(139,0,617),new DictWord(149,0,13),new DictWord(133,0,
					609),new DictWord(133,11,624),new DictWord(5,11,783),new DictWord(7,11,1998),new DictWord(135,11,2047),new DictWord(133,10,525),new DictWord(132,0,367),
				new DictWord(132,11,594),new DictWord(6,0,528),new DictWord(133,10,493),new DictWord(4,10,174),new DictWord(135,10,911),new DictWord(8,10,417),new DictWord(137,10,
					782),new DictWord(132,0,694),new DictWord(7,0,548),new DictWord(137,0,58),new DictWord(4,10,32),new DictWord(5,10,215),new DictWord(6,10,269),new DictWord(7,10,1782
				),new DictWord(7,10,1892),new DictWord(10,10,16),new DictWord(11,10,822),new DictWord(11,10,954),new DictWord(141,10,481),new DictWord(140,0,687),new DictWord(7,0,
					1749),new DictWord(136,10,477),new DictWord(132,11,569),new DictWord(133,10,308),new DictWord(135,10,1088),new DictWord(4,0,661),new DictWord(138,0,1004
				),new DictWord(5,11,37),new DictWord(6,11,39),new DictWord(6,11,451),new DictWord(7,11,218),new DictWord(7,11,667),new DictWord(7,11,1166),new DictWord(7,11,1687),new DictWord(
					8,11,662),new DictWord(144,11,2),new DictWord(9,0,445),new DictWord(12,0,53),new DictWord(13,0,492),new DictWord(5,10,126),new DictWord(8,10,297),new DictWord(9,10,
					366),new DictWord(140,10,374),new DictWord(7,10,1551),new DictWord(139,10,361),new DictWord(148,0,74),new DictWord(134,11,508),new DictWord(135,0,213),new DictWord(
					132,10,175),new DictWord(132,10,685),new DictWord(6,0,760),new DictWord(6,0,834),new DictWord(134,0,1248),new DictWord(7,11,453),new DictWord(7,11,635),
				new DictWord(7,11,796),new DictWord(8,11,331),new DictWord(9,11,328),new DictWord(9,11,330),new DictWord(9,11,865),new DictWord(10,11,119),new DictWord(10,11,235),new DictWord(
					11,11,111),new DictWord(11,11,129),new DictWord(11,11,240),new DictWord(12,11,31),new DictWord(12,11,66),new DictWord(12,11,222),new DictWord(12,11,269)
				,new DictWord(12,11,599),new DictWord(12,11,689),new DictWord(13,11,186),new DictWord(13,11,364),new DictWord(142,11,345),new DictWord(7,0,1672),new DictWord(139,0,
					189),new DictWord(133,10,797),new DictWord(133,10,565),new DictWord(6,0,1548),new DictWord(6,11,98),new DictWord(7,11,585),new DictWord(135,11,702),new DictWord(9,0
					,968),new DictWord(15,0,192),new DictWord(149,0,56),new DictWord(4,10,252),new DictWord(6,11,37),new DictWord(7,11,299),new DictWord(7,10,1068),new DictWord(7,11,
					1666),new DictWord(8,11,195),new DictWord(8,11,316),new DictWord(9,11,178),new DictWord(9,11,276),new DictWord(9,11,339),new DictWord(9,11,536),new DictWord(10,11,
					102),new DictWord(10,11,362),new DictWord(10,10,434),new DictWord(10,11,785),new DictWord(11,11,55),new DictWord(11,11,149),new DictWord(11,10,228),new DictWord(11,
					10,426),new DictWord(11,11,773),new DictWord(13,10,231),new DictWord(13,11,416),new DictWord(13,11,419),new DictWord(14,11,38),new DictWord(14,11,41),new DictWord(
					14,11,210),new DictWord(18,10,106),new DictWord(148,10,87),new DictWord(4,0,751),new DictWord(11,0,390),new DictWord(140,0,32),new DictWord(4,0,409),new DictWord(
					133,0,78),new DictWord(11,11,458),new DictWord(12,11,15),new DictWord(140,11,432),new DictWord(7,0,1602),new DictWord(10,0,257),new DictWord(10,0,698),new DictWord(
					11,0,544),new DictWord(11,0,585),new DictWord(12,0,212),new DictWord(13,0,307),new DictWord(5,10,231),new DictWord(7,10,601),new DictWord(9,10,277),new DictWord(9,
					10,674),new DictWord(10,10,178),new DictWord(10,10,418),new DictWord(10,10,509),new DictWord(11,10,531),new DictWord(12,10,113),new DictWord(12,10,475),
				new DictWord(13,10,99),new DictWord(142,10,428),new DictWord(6,0,473),new DictWord(145,0,105),new DictWord(6,0,1949),new DictWord(15,0,156),new DictWord(133,11,645)
				,new DictWord(7,10,1591),new DictWord(144,10,43),new DictWord(135,0,1779),new DictWord(135,10,1683),new DictWord(4,11,290),new DictWord(135,11,1356),new DictWord(
					134,0,763),new DictWord(6,11,70),new DictWord(7,11,1292),new DictWord(10,11,762),new DictWord(139,11,288),new DictWord(142,0,29),new DictWord(140,11,428
				),new DictWord(7,0,883),new DictWord(7,11,131),new DictWord(7,11,422),new DictWord(8,11,210),new DictWord(140,11,573),new DictWord(134,0,488),new DictWord(4,10,399)
				,new DictWord(5,10,119),new DictWord(5,10,494),new DictWord(7,10,751),new DictWord(137,10,556),new DictWord(133,0,617),new DictWord(132,11,936),new DictWord(139,0,
					50),new DictWord(7,0,1518),new DictWord(139,0,694),new DictWord(137,0,785),new DictWord(4,0,546),new DictWord(135,0,2042),new DictWord(7,11,716),new DictWord(13,11,
					97),new DictWord(141,11,251),new DictWord(132,11,653),new DictWord(145,0,22),new DictWord(134,0,1016),new DictWord(4,0,313),new DictWord(133,0,577),new DictWord(136
					,11,657),new DictWord(8,0,184),new DictWord(141,0,433),new DictWord(135,0,935),new DictWord(6,0,720),new DictWord(9,0,114),new DictWord(146,11,80),new DictWord(12,0
					,186),new DictWord(12,0,292),new DictWord(14,0,100),new DictWord(18,0,70),new DictWord(7,10,594),new DictWord(7,10,851),new DictWord(7,10,1858),new DictWord(9,10,
					411),new DictWord(9,10,574),new DictWord(9,10,666),new DictWord(9,10,737),new DictWord(10,10,346),new DictWord(10,10,712),new DictWord(11,10,246),new DictWord(11,10
					,432),new DictWord(11,10,517),new DictWord(11,10,647),new DictWord(11,10,679),new DictWord(11,10,727),new DictWord(12,10,304),new DictWord(12,10,305),new DictWord(
					12,10,323),new DictWord(12,10,483),new DictWord(12,10,572),new DictWord(12,10,593),new DictWord(12,10,602),new DictWord(13,10,95),new DictWord(13,10,101
				),new DictWord(13,10,171),new DictWord(13,10,315),new DictWord(13,10,378),new DictWord(13,10,425),new DictWord(13,10,475),new DictWord(14,10,63),new DictWord(14,10,
					380),new DictWord(14,10,384),new DictWord(15,10,133),new DictWord(18,10,112),new DictWord(148,10,72),new DictWord(135,10,1093),new DictWord(135,11,1836)
				,new DictWord(132,10,679),new DictWord(137,10,203),new DictWord(11,0,402),new DictWord(12,0,109),new DictWord(12,0,431),new DictWord(13,0,179),new DictWord(13,0,206
				),new DictWord(14,0,217),new DictWord(16,0,3),new DictWord(148,0,53),new DictWord(7,11,1368),new DictWord(8,11,232),new DictWord(8,11,361),new DictWord(10,11,682),new DictWord(
					138,11,742),new DictWord(137,10,714),new DictWord(5,0,886),new DictWord(6,0,46),new DictWord(6,0,1790),new DictWord(7,0,14),new DictWord(7,0,732),new DictWord(7,0,
					1654),new DictWord(8,0,95),new DictWord(8,0,327),new DictWord(8,0,616),new DictWord(9,0,892),new DictWord(10,0,598),new DictWord(10,0,769),new DictWord(11,0,134),new DictWord(
					11,0,747),new DictWord(12,0,378),new DictWord(14,0,97),new DictWord(137,11,534),new DictWord(4,0,969),new DictWord(136,10,825),new DictWord(137,11,27),new DictWord(
					6,0,727),new DictWord(142,11,12),new DictWord(133,0,1021),new DictWord(134,0,1190),new DictWord(134,11,1657),new DictWord(5,10,143),new DictWord(5,10,
					769),new DictWord(6,10,1760),new DictWord(7,10,682),new DictWord(7,10,1992),new DictWord(136,10,736),new DictWord(132,0,153),new DictWord(135,11,127),new DictWord(
					133,0,798),new DictWord(132,0,587),new DictWord(6,0,598),new DictWord(7,0,42),new DictWord(8,0,695),new DictWord(10,0,212),new DictWord(11,0,158),new DictWord(14,0,
					196),new DictWord(145,0,85),new DictWord(133,10,860),new DictWord(6,0,1929),new DictWord(134,0,1933),new DictWord(5,0,957),new DictWord(5,0,1008),new DictWord(9,0,
					577),new DictWord(12,0,141),new DictWord(6,10,422),new DictWord(7,10,0),new DictWord(7,10,1544),new DictWord(8,11,364),new DictWord(11,10,990),new DictWord(12,10,
					453),new DictWord(13,10,47),new DictWord(141,10,266),new DictWord(134,0,1319),new DictWord(4,0,129),new DictWord(135,0,465),new DictWord(7,0,470),new DictWord(7,0,
					1057),new DictWord(7,0,1201),new DictWord(9,0,755),new DictWord(11,0,906),new DictWord(140,0,527),new DictWord(7,0,908),new DictWord(146,0,7),new DictWord(5,0,148),
				new DictWord(136,0,450),new DictWord(5,10,515),new DictWord(137,10,131),new DictWord(7,10,1605),new DictWord(11,10,962),new DictWord(146,10,139),new DictWord(132,10
					,646),new DictWord(134,0,1166),new DictWord(4,10,396),new DictWord(7,10,728),new DictWord(9,10,117),new DictWord(13,10,202),new DictWord(148,10,51),new DictWord(6,
					10,121),new DictWord(6,10,124),new DictWord(6,10,357),new DictWord(7,10,1138),new DictWord(7,10,1295),new DictWord(8,10,162),new DictWord(139,10,655),new DictWord(
					14,0,374),new DictWord(142,11,374),new DictWord(138,0,253),new DictWord(139,0,1003),new DictWord(5,11,909),new DictWord(9,11,849),new DictWord(138,11,
					805),new DictWord(133,10,237),new DictWord(7,11,525),new DictWord(7,11,1579),new DictWord(8,11,497),new DictWord(136,11,573),new DictWord(137,0,46),new DictWord(132
					,0,879),new DictWord(134,0,806),new DictWord(135,0,1868),new DictWord(6,0,1837),new DictWord(134,0,1846),new DictWord(6,0,730),new DictWord(134,0,881),new DictWord(
					7,0,965),new DictWord(7,0,1460),new DictWord(7,0,1604),new DictWord(7,11,193),new DictWord(7,11,397),new DictWord(7,11,1105),new DictWord(8,11,124),new DictWord(8,
					11,619),new DictWord(9,11,305),new DictWord(10,11,264),new DictWord(11,11,40),new DictWord(12,11,349),new DictWord(13,11,134),new DictWord(13,11,295),new DictWord(
					14,11,155),new DictWord(15,11,120),new DictWord(146,11,105),new DictWord(136,0,506),new DictWord(143,0,10),new DictWord(4,11,262),new DictWord(7,11,342)
				,new DictWord(7,10,571),new DictWord(7,10,1877),new DictWord(10,10,366),new DictWord(141,11,23),new DictWord(133,11,641),new DictWord(10,0,22),new DictWord(9,10,513
				),new DictWord(10,10,39),new DictWord(12,10,122),new DictWord(140,10,187),new DictWord(135,11,1431),new DictWord(150,11,49),new DictWord(4,11,99),new DictWord(6,11,
					250),new DictWord(6,11,346),new DictWord(8,11,127),new DictWord(138,11,81),new DictWord(6,0,2014),new DictWord(8,0,928),new DictWord(10,0,960),new DictWord(10,0,979
				),new DictWord(140,0,996),new DictWord(134,0,296),new DictWord(132,11,915),new DictWord(5,11,75),new DictWord(9,11,517),new DictWord(10,11,470),new DictWord(12,11,
					155),new DictWord(141,11,224),new DictWord(137,10,873),new DictWord(4,0,854),new DictWord(140,11,18),new DictWord(134,0,587),new DictWord(7,10,107),new DictWord(7,
					10,838),new DictWord(8,10,550),new DictWord(138,10,401),new DictWord(11,0,636),new DictWord(15,0,145),new DictWord(17,0,34),new DictWord(19,0,50),new DictWord(23,0,
					20),new DictWord(11,10,588),new DictWord(11,10,864),new DictWord(11,10,968),new DictWord(143,10,160),new DictWord(135,11,216),new DictWord(7,0,982),new DictWord(10,
					0,32),new DictWord(143,0,56),new DictWord(133,10,768),new DictWord(133,11,954),new DictWord(6,11,304),new DictWord(7,11,1114),new DictWord(8,11,418),new DictWord(10
					,11,345),new DictWord(11,11,341),new DictWord(11,11,675),new DictWord(141,11,40),new DictWord(9,11,410),new DictWord(139,11,425),new DictWord(136,0,941)
				,new DictWord(5,0,435),new DictWord(132,10,894),new DictWord(5,0,85),new DictWord(6,0,419),new DictWord(7,0,134),new DictWord(7,0,305),new DictWord(7,0,361),new DictWord(7,0,
					1337),new DictWord(8,0,71),new DictWord(140,0,519),new DictWord(140,0,688),new DictWord(135,0,740),new DictWord(5,0,691),new DictWord(7,0,345),new DictWord(9,0,94),
				new DictWord(140,0,169),new DictWord(5,0,183),new DictWord(6,0,582),new DictWord(10,0,679),new DictWord(140,0,435),new DictWord(134,11,14),new DictWord(6,0,945),new DictWord(
					135,0,511),new DictWord(134,11,1708),new DictWord(5,11,113),new DictWord(6,11,243),new DictWord(7,11,1865),new DictWord(11,11,161),new DictWord(16,11,37
				),new DictWord(145,11,99),new DictWord(132,11,274),new DictWord(137,0,539),new DictWord(7,0,1993),new DictWord(8,0,684),new DictWord(134,10,272),new DictWord(6,0,
					659),new DictWord(134,0,982),new DictWord(4,10,9),new DictWord(5,10,128),new DictWord(7,10,368),new DictWord(11,10,480),new DictWord(148,10,3),new DictWord(134,0,
					583),new DictWord(132,0,803),new DictWord(133,0,704),new DictWord(4,0,179),new DictWord(5,0,198),new DictWord(133,0,697),new DictWord(7,0,347),new DictWord(7,0,971)
				,new DictWord(8,0,181),new DictWord(10,0,711),new DictWord(135,11,166),new DictWord(136,10,682),new DictWord(4,10,2),new DictWord(7,10,545),new DictWord(7,10,894),new DictWord(
					136,11,521),new DictWord(135,0,481),new DictWord(132,0,243),new DictWord(5,0,203),new DictWord(7,0,19),new DictWord(7,0,71),new DictWord(7,0,113),new DictWord(10,0,
					405),new DictWord(11,0,357),new DictWord(142,0,240),new DictWord(5,11,725),new DictWord(5,11,727),new DictWord(135,11,1811),new DictWord(6,0,826),new DictWord(137,
					11,304),new DictWord(7,0,1450),new DictWord(139,0,99),new DictWord(133,11,654),new DictWord(134,0,492),new DictWord(5,0,134),new DictWord(6,0,408),new DictWord(6,0,
					495),new DictWord(7,0,1593),new DictWord(6,11,273),new DictWord(10,11,188),new DictWord(13,11,377),new DictWord(146,11,77),new DictWord(9,10,769),new DictWord(140,
					10,185),new DictWord(135,11,410),new DictWord(142,0,4),new DictWord(4,0,665),new DictWord(134,11,1785),new DictWord(4,0,248),new DictWord(7,0,137),new DictWord(137,
					0,349),new DictWord(5,10,530),new DictWord(142,10,113),new DictWord(7,0,1270),new DictWord(139,0,612),new DictWord(132,11,780),new DictWord(5,0,371),new DictWord(
					135,0,563),new DictWord(135,0,826),new DictWord(6,0,1535),new DictWord(23,0,21),new DictWord(151,0,23),new DictWord(4,0,374),new DictWord(7,0,547),new DictWord(7,0,
					1700),new DictWord(7,0,1833),new DictWord(139,0,858),new DictWord(133,10,556),new DictWord(7,11,612),new DictWord(8,11,545),new DictWord(8,11,568),new DictWord(8,11
					,642),new DictWord(9,11,717),new DictWord(10,11,541),new DictWord(10,11,763),new DictWord(11,11,449),new DictWord(12,11,489),new DictWord(13,11,153),new DictWord(13
					,11,296),new DictWord(14,11,138),new DictWord(14,11,392),new DictWord(15,11,50),new DictWord(16,11,6),new DictWord(16,11,12),new DictWord(148,11,9),new DictWord(9,0
					,311),new DictWord(141,0,42),new DictWord(8,10,16),new DictWord(140,10,568),new DictWord(6,0,1968),new DictWord(6,0,2027),new DictWord(138,0,991),new DictWord(6,0,
					1647),new DictWord(7,0,1552),new DictWord(7,0,2010),new DictWord(9,0,494),new DictWord(137,0,509),new DictWord(133,11,948),new DictWord(6,10,186),new DictWord(137,
					10,426),new DictWord(134,0,769),new DictWord(134,0,642),new DictWord(132,10,585),new DictWord(6,0,123),new DictWord(7,0,214),new DictWord(9,0,728),new DictWord(10,0
					,157),new DictWord(11,0,346),new DictWord(11,0,662),new DictWord(143,0,106),new DictWord(142,11,381),new DictWord(135,0,1435),new DictWord(4,11,532),new DictWord(5,
					11,706),new DictWord(135,11,662),new DictWord(5,11,837),new DictWord(134,11,1651),new DictWord(4,10,93),new DictWord(5,10,252),new DictWord(6,10,229),new DictWord(7
					,10,291),new DictWord(9,10,550),new DictWord(139,10,644),new DictWord(148,0,79),new DictWord(137,10,749),new DictWord(134,0,1425),new DictWord(137,10,
					162),new DictWord(4,11,362),new DictWord(7,11,52),new DictWord(7,11,303),new DictWord(140,11,166),new DictWord(132,10,381),new DictWord(4,11,330),new DictWord(7,11,
					933),new DictWord(7,11,2012),new DictWord(136,11,292),new DictWord(135,11,767),new DictWord(4,0,707),new DictWord(5,0,588),new DictWord(6,0,393),new DictWord(13,0,
					106),new DictWord(18,0,49),new DictWord(147,0,41),new DictWord(6,0,211),new DictWord(7,0,1690),new DictWord(11,0,486),new DictWord(140,0,369),new DictWord(137,11,
					883),new DictWord(4,11,703),new DictWord(135,11,207),new DictWord(4,0,187),new DictWord(5,0,184),new DictWord(5,0,690),new DictWord(7,0,1869),new DictWord(10,0,756)
				,new DictWord(139,0,783),new DictWord(132,11,571),new DictWord(134,0,1382),new DictWord(5,0,175),new DictWord(6,10,77),new DictWord(6,10,157),new DictWord(7,10,974)
				,new DictWord(7,10,1301),new DictWord(7,10,1339),new DictWord(7,10,1490),new DictWord(7,10,1873),new DictWord(137,10,628),new DictWord(134,0,1493),new DictWord(5,11
					,873),new DictWord(133,11,960),new DictWord(134,0,1007),new DictWord(12,11,93),new DictWord(12,11,501),new DictWord(13,11,362),new DictWord(14,11,151),new DictWord(
					15,11,40),new DictWord(15,11,59),new DictWord(16,11,46),new DictWord(17,11,25),new DictWord(18,11,14),new DictWord(18,11,134),new DictWord(19,11,25),new DictWord(19
					,11,69),new DictWord(20,11,16),new DictWord(20,11,19),new DictWord(20,11,66),new DictWord(21,11,23),new DictWord(21,11,25),new DictWord(150,11,42),new DictWord(11,
					10,919),new DictWord(141,10,409),new DictWord(134,0,219),new DictWord(5,0,582),new DictWord(6,0,1646),new DictWord(7,0,99),new DictWord(7,0,1962),new DictWord(7,0,
					1986),new DictWord(8,0,515),new DictWord(8,0,773),new DictWord(9,0,23),new DictWord(9,0,491),new DictWord(12,0,620),new DictWord(142,0,93),new DictWord(133,0,851),new DictWord(
					5,11,33),new DictWord(134,11,470),new DictWord(135,11,1291),new DictWord(134,0,1278),new DictWord(135,11,1882),new DictWord(135,10,1489),new DictWord(
					132,0,1000),new DictWord(138,0,982),new DictWord(8,0,762),new DictWord(8,0,812),new DictWord(137,0,910),new DictWord(6,11,47),new DictWord(7,11,90),new DictWord(7,
					11,664),new DictWord(7,11,830),new DictWord(7,11,1380),new DictWord(7,11,2025),new DictWord(8,11,448),new DictWord(136,11,828),new DictWord(4,0,98),new DictWord(4,0
					,940),new DictWord(6,0,1819),new DictWord(6,0,1834),new DictWord(6,0,1841),new DictWord(7,0,1365),new DictWord(8,0,859),new DictWord(8,0,897),new DictWord(8,0,918),
				new DictWord(9,0,422),new DictWord(9,0,670),new DictWord(10,0,775),new DictWord(10,0,894),new DictWord(10,0,909),new DictWord(10,0,910),new DictWord(10,0,935),new DictWord(11,0
					,210),new DictWord(12,0,750),new DictWord(12,0,755),new DictWord(13,0,26),new DictWord(13,0,457),new DictWord(13,0,476),new DictWord(16,0,100),new DictWord(16,0,109
				),new DictWord(18,0,173),new DictWord(18,0,175),new DictWord(8,10,398),new DictWord(9,10,681),new DictWord(139,10,632),new DictWord(9,11,417),new DictWord(137,11,
					493),new DictWord(136,10,645),new DictWord(138,0,906),new DictWord(134,0,1730),new DictWord(134,10,20),new DictWord(133,11,1019),new DictWord(134,0,1185
				),new DictWord(10,0,40),new DictWord(136,10,769),new DictWord(9,0,147),new DictWord(134,11,208),new DictWord(140,0,650),new DictWord(5,0,209),new DictWord(6,0,30),new DictWord(
					11,0,56),new DictWord(139,0,305),new DictWord(132,0,553),new DictWord(138,11,344),new DictWord(6,11,68),new DictWord(7,11,398),new DictWord(7,11,448),new DictWord(7
					,11,1629),new DictWord(7,11,1813),new DictWord(8,11,387),new DictWord(8,11,442),new DictWord(9,11,710),new DictWord(10,11,282),new DictWord(138,11,722),
				new DictWord(5,0,597),new DictWord(14,0,20),new DictWord(142,11,20),new DictWord(135,0,1614),new DictWord(135,10,1757),new DictWord(4,0,150),new DictWord(5,0,303),new DictWord(
					6,0,327),new DictWord(135,10,937),new DictWord(16,0,49),new DictWord(7,10,1652),new DictWord(144,11,49),new DictWord(8,0,192),new DictWord(10,0,78),new DictWord(141
					,0,359),new DictWord(135,0,786),new DictWord(143,0,134),new DictWord(6,0,1638),new DictWord(7,0,79),new DictWord(7,0,496),new DictWord(9,0,138),new DictWord(10,0,
					336),new DictWord(11,0,12),new DictWord(12,0,412),new DictWord(12,0,440),new DictWord(142,0,305),new DictWord(136,11,491),new DictWord(4,10,579),new DictWord(5,10,
					226),new DictWord(5,10,323),new DictWord(135,10,960),new DictWord(7,0,204),new DictWord(7,0,415),new DictWord(8,0,42),new DictWord(10,0,85),new DictWord(139,0,564),
				new DictWord(132,0,614),new DictWord(4,11,403),new DictWord(5,11,441),new DictWord(7,11,450),new DictWord(11,11,101),new DictWord(12,11,193),new DictWord(141,11,430
				),new DictWord(135,11,1927),new DictWord(135,11,1330),new DictWord(4,0,3),new DictWord(5,0,247),new DictWord(5,0,644),new DictWord(7,0,744),new DictWord(7,0,1207),new DictWord(
					7,0,1225),new DictWord(7,0,1909),new DictWord(146,0,147),new DictWord(136,0,942),new DictWord(4,0,1019),new DictWord(134,0,2023),new DictWord(5,11,679),
				new DictWord(133,10,973),new DictWord(5,0,285),new DictWord(9,0,67),new DictWord(13,0,473),new DictWord(143,0,82),new DictWord(7,11,328),new DictWord(137,11,326),new DictWord(
					151,0,8),new DictWord(6,10,135),new DictWord(135,10,1176),new DictWord(135,11,1128),new DictWord(134,0,1309),new DictWord(135,11,1796),new DictWord(135,
					10,314),new DictWord(4,11,574),new DictWord(7,11,350),new DictWord(7,11,1024),new DictWord(8,11,338),new DictWord(9,11,677),new DictWord(10,11,808),new DictWord(139
					,11,508),new DictWord(7,11,818),new DictWord(17,11,14),new DictWord(17,11,45),new DictWord(18,11,75),new DictWord(148,11,18),new DictWord(146,10,4),new DictWord(135
					,11,1081),new DictWord(4,0,29),new DictWord(6,0,532),new DictWord(7,0,1628),new DictWord(7,0,1648),new DictWord(9,0,350),new DictWord(10,0,433),new DictWord(11,0,97
				),new DictWord(11,0,557),new DictWord(11,0,745),new DictWord(12,0,289),new DictWord(12,0,335),new DictWord(12,0,348),new DictWord(12,0,606),new DictWord(13,0,116),new DictWord(
					13,0,233),new DictWord(13,0,466),new DictWord(14,0,181),new DictWord(14,0,209),new DictWord(14,0,232),new DictWord(14,0,236),new DictWord(14,0,300),new DictWord(16,
					0,41),new DictWord(148,0,97),new DictWord(7,0,318),new DictWord(6,10,281),new DictWord(8,10,282),new DictWord(8,10,480),new DictWord(8,10,499),new DictWord(9,10,198
				),new DictWord(10,10,143),new DictWord(10,10,169),new DictWord(10,10,211),new DictWord(10,10,417),new DictWord(10,10,574),new DictWord(11,10,147),new DictWord(11,10
					,395),new DictWord(12,10,75),new DictWord(12,10,407),new DictWord(12,10,608),new DictWord(13,10,500),new DictWord(142,10,251),new DictWord(135,11,1676),
				new DictWord(135,11,2037),new DictWord(135,0,1692),new DictWord(5,0,501),new DictWord(7,0,1704),new DictWord(9,0,553),new DictWord(11,0,520),new DictWord(12,0,557),
				new DictWord(141,0,249),new DictWord(6,0,1527),new DictWord(14,0,324),new DictWord(15,0,55),new DictWord(15,0,80),new DictWord(14,11,324),new DictWord(15,11,55),new DictWord(
					143,11,80),new DictWord(135,10,1776),new DictWord(8,0,988),new DictWord(137,11,297),new DictWord(132,10,419),new DictWord(142,0,223),new DictWord(139,11
					,234),new DictWord(7,0,1123),new DictWord(12,0,508),new DictWord(14,0,102),new DictWord(14,0,226),new DictWord(144,0,57),new DictWord(4,10,138),new DictWord(7,10,
					1012),new DictWord(7,10,1280),new DictWord(137,10,76),new DictWord(7,0,1764),new DictWord(5,10,29),new DictWord(140,10,638),new DictWord(134,0,2015),new DictWord(
					134,0,1599),new DictWord(138,11,56),new DictWord(6,11,306),new DictWord(7,11,1140),new DictWord(7,11,1340),new DictWord(8,11,133),new DictWord(138,11,
					449),new DictWord(139,11,1011),new DictWord(6,10,1710),new DictWord(135,10,2038),new DictWord(7,11,1763),new DictWord(140,11,310),new DictWord(6,0,129),
				new DictWord(4,10,17),new DictWord(5,10,23),new DictWord(7,10,995),new DictWord(11,10,383),new DictWord(11,10,437),new DictWord(12,10,460),new DictWord(140,10,532),
				new DictWord(5,11,329),new DictWord(136,11,260),new DictWord(133,10,862),new DictWord(132,0,534),new DictWord(6,0,811),new DictWord(135,0,626),new DictWord(132,11,
					657),new DictWord(4,0,25),new DictWord(5,0,60),new DictWord(6,0,504),new DictWord(7,0,614),new DictWord(7,0,1155),new DictWord(12,0,0),new DictWord(152,11,7),new DictWord(7,0,
					1248),new DictWord(11,0,621),new DictWord(139,0,702),new DictWord(137,0,321),new DictWord(8,10,70),new DictWord(12,10,171),new DictWord(141,10,272),new DictWord(10,
					10,233),new DictWord(139,10,76),new DictWord(4,0,379),new DictWord(7,0,1397),new DictWord(134,10,442),new DictWord(5,11,66),new DictWord(7,11,1896),new DictWord(136
					,11,288),new DictWord(134,11,1643),new DictWord(134,10,1709),new DictWord(4,11,21),new DictWord(5,11,91),new DictWord(5,11,570),new DictWord(5,11,648),new DictWord(
					5,11,750),new DictWord(5,11,781),new DictWord(6,11,54),new DictWord(6,11,112),new DictWord(6,11,402),new DictWord(6,11,1732),new DictWord(7,11,315),new DictWord(7,
					11,749),new DictWord(7,11,1347),new DictWord(7,11,1900),new DictWord(9,11,78),new DictWord(9,11,508),new DictWord(10,11,611),new DictWord(11,11,510),new DictWord(11
					,11,728),new DictWord(13,11,36),new DictWord(14,11,39),new DictWord(16,11,83),new DictWord(17,11,124),new DictWord(148,11,30),new DictWord(4,0,118),new DictWord(6,0
					,274),new DictWord(6,0,361),new DictWord(7,0,75),new DictWord(141,0,441),new DictWord(10,11,322),new DictWord(10,11,719),new DictWord(139,11,407),new DictWord(147,
					10,119),new DictWord(12,11,549),new DictWord(14,11,67),new DictWord(147,11,60),new DictWord(11,10,69),new DictWord(12,10,105),new DictWord(12,10,117),new DictWord(
					13,10,213),new DictWord(14,10,13),new DictWord(14,10,62),new DictWord(14,10,177),new DictWord(14,10,421),new DictWord(15,10,19),new DictWord(146,10,141)
				,new DictWord(9,0,841),new DictWord(137,10,309),new DictWord(7,10,608),new DictWord(7,10,976),new DictWord(8,11,125),new DictWord(8,11,369),new DictWord(8,11,524),new DictWord(
					9,10,146),new DictWord(10,10,206),new DictWord(10,11,486),new DictWord(10,10,596),new DictWord(11,11,13),new DictWord(11,11,381),new DictWord(11,11,736)
				,new DictWord(11,11,766),new DictWord(11,11,845),new DictWord(13,11,114),new DictWord(13,10,218),new DictWord(13,11,292),new DictWord(14,11,47),new DictWord(142,10,
					153),new DictWord(12,0,693),new DictWord(135,11,759),new DictWord(5,0,314),new DictWord(6,0,221),new DictWord(7,0,419),new DictWord(10,0,650),new DictWord(11,0,396)
				,new DictWord(12,0,156),new DictWord(13,0,369),new DictWord(14,0,333),new DictWord(145,0,47),new DictWord(6,11,1684),new DictWord(6,11,1731),new DictWord(7,11,356),
				new DictWord(7,11,1932),new DictWord(8,11,54),new DictWord(8,11,221),new DictWord(9,11,225),new DictWord(9,11,356),new DictWord(10,11,77),new DictWord(10,11,446),new DictWord(
					10,11,731),new DictWord(12,11,404),new DictWord(141,11,491),new DictWord(132,11,375),new DictWord(4,10,518),new DictWord(135,10,1136),new DictWord(4,0,
					913),new DictWord(4,11,411),new DictWord(11,11,643),new DictWord(140,11,115),new DictWord(4,11,80),new DictWord(133,11,44),new DictWord(8,10,689),new DictWord(137,
					10,863),new DictWord(138,0,880),new DictWord(4,10,18),new DictWord(7,10,145),new DictWord(7,10,444),new DictWord(7,10,1278),new DictWord(8,10,49),new DictWord(8,10,
					400),new DictWord(9,10,71),new DictWord(9,10,250),new DictWord(10,10,459),new DictWord(12,10,160),new DictWord(144,10,24),new DictWord(136,0,475),new DictWord(5,0,
					1016),new DictWord(5,11,299),new DictWord(135,11,1083),new DictWord(7,0,602),new DictWord(8,0,179),new DictWord(10,0,781),new DictWord(140,0,126),new DictWord(6,0,
					329),new DictWord(138,0,111),new DictWord(135,0,1864),new DictWord(4,11,219),new DictWord(7,11,1761),new DictWord(137,11,86),new DictWord(6,0,1888),new DictWord(6,0
					,1892),new DictWord(6,0,1901),new DictWord(6,0,1904),new DictWord(9,0,953),new DictWord(9,0,985),new DictWord(9,0,991),new DictWord(9,0,1001),new DictWord(12,0,818)
				,new DictWord(12,0,846),new DictWord(12,0,847),new DictWord(12,0,861),new DictWord(12,0,862),new DictWord(12,0,873),new DictWord(12,0,875),new DictWord(12,0,877),new DictWord(
					12,0,879),new DictWord(12,0,881),new DictWord(12,0,884),new DictWord(12,0,903),new DictWord(12,0,915),new DictWord(12,0,926),new DictWord(12,0,939),new DictWord(15,
					0,182),new DictWord(15,0,219),new DictWord(15,0,255),new DictWord(18,0,191),new DictWord(18,0,209),new DictWord(18,0,211),new DictWord(149,0,41),new DictWord(5,11,
					328),new DictWord(135,11,918),new DictWord(137,0,780),new DictWord(12,0,82),new DictWord(143,0,36),new DictWord(133,10,1010),new DictWord(5,0,821),new DictWord(134,
					0,1687),new DictWord(133,11,514),new DictWord(132,0,956),new DictWord(134,0,1180),new DictWord(10,0,112),new DictWord(5,10,87),new DictWord(7,10,313),new DictWord(7
					,10,1103),new DictWord(10,10,582),new DictWord(11,10,389),new DictWord(11,10,813),new DictWord(12,10,385),new DictWord(13,10,286),new DictWord(14,10,124
				),new DictWord(146,10,108),new DictWord(5,0,71),new DictWord(7,0,1407),new DictWord(9,0,704),new DictWord(10,0,261),new DictWord(10,0,619),new DictWord(11,0,547),new DictWord(
					11,0,619),new DictWord(143,0,157),new DictWord(4,0,531),new DictWord(5,0,455),new DictWord(5,11,301),new DictWord(6,11,571),new DictWord(14,11,49),new DictWord(146,
					11,102),new DictWord(132,10,267),new DictWord(6,0,385),new DictWord(7,0,2008),new DictWord(9,0,337),new DictWord(138,0,517),new DictWord(133,11,726),new DictWord(
					133,11,364),new DictWord(4,11,76),new DictWord(7,11,1550),new DictWord(9,11,306),new DictWord(9,11,430),new DictWord(9,11,663),new DictWord(10,11,683),new DictWord(
					11,11,427),new DictWord(11,11,753),new DictWord(12,11,334),new DictWord(12,11,442),new DictWord(14,11,258),new DictWord(14,11,366),new DictWord(143,11,
					131),new DictWord(6,0,1865),new DictWord(6,0,1879),new DictWord(6,0,1881),new DictWord(6,0,1894),new DictWord(6,0,1908),new DictWord(9,0,915),new DictWord(9,0,926),
				new DictWord(9,0,940),new DictWord(9,0,943),new DictWord(9,0,966),new DictWord(9,0,980),new DictWord(9,0,989),new DictWord(9,0,1005),new DictWord(9,0,1010),new DictWord(12,0,
					813),new DictWord(12,0,817),new DictWord(12,0,840),new DictWord(12,0,843),new DictWord(12,0,855),new DictWord(12,0,864),new DictWord(12,0,871),new DictWord(12,0,872
				),new DictWord(12,0,899),new DictWord(12,0,905),new DictWord(12,0,924),new DictWord(15,0,171),new DictWord(15,0,181),new DictWord(15,0,224),new DictWord(15,0,235),new DictWord(
					15,0,251),new DictWord(146,0,184),new DictWord(137,11,52),new DictWord(5,0,16),new DictWord(6,0,86),new DictWord(6,0,603),new DictWord(7,0,292),new DictWord(7,0,561
				),new DictWord(8,0,257),new DictWord(8,0,382),new DictWord(9,0,721),new DictWord(9,0,778),new DictWord(11,0,581),new DictWord(140,0,466),new DictWord(4,0,486),new DictWord(5,0,
					491),new DictWord(135,10,1121),new DictWord(4,0,72),new DictWord(6,0,265),new DictWord(135,0,1300),new DictWord(135,11,1183),new DictWord(10,10,249),new DictWord(
					139,10,209),new DictWord(132,10,561),new DictWord(137,11,519),new DictWord(4,11,656),new DictWord(4,10,760),new DictWord(135,11,779),new DictWord(9,10,
					154),new DictWord(140,10,485),new DictWord(135,11,1793),new DictWord(135,11,144),new DictWord(136,10,255),new DictWord(133,0,621),new DictWord(4,10,368)
				,new DictWord(135,10,641),new DictWord(135,11,1373),new DictWord(7,11,554),new DictWord(7,11,605),new DictWord(141,11,10),new DictWord(137,0,234),new DictWord(5,0,
					815),new DictWord(6,0,1688),new DictWord(134,0,1755),new DictWord(5,11,838),new DictWord(5,11,841),new DictWord(134,11,1649),new DictWord(7,0,1987),new DictWord(7,0
					,2040),new DictWord(136,0,743),new DictWord(133,11,1012),new DictWord(6,0,197),new DictWord(136,0,205),new DictWord(6,0,314),new DictWord(134,11,314),new DictWord(
					144,11,53),new DictWord(6,11,251),new DictWord(7,11,365),new DictWord(7,11,1357),new DictWord(7,11,1497),new DictWord(8,11,154),new DictWord(141,11,281)
				,new DictWord(133,11,340),new DictWord(6,0,452),new DictWord(7,0,312),new DictWord(138,0,219),new DictWord(138,0,589),new DictWord(4,0,333),new DictWord(9,0,176),new DictWord(
					12,0,353),new DictWord(141,0,187),new DictWord(9,10,92),new DictWord(147,10,91),new DictWord(134,0,1110),new DictWord(11,0,47),new DictWord(139,11,495),
				new DictWord(6,10,525),new DictWord(8,10,806),new DictWord(9,10,876),new DictWord(140,10,284),new DictWord(8,11,261),new DictWord(9,11,144),new DictWord(9,11,466),new DictWord(
					10,11,370),new DictWord(12,11,470),new DictWord(13,11,144),new DictWord(142,11,348),new DictWord(137,11,897),new DictWord(8,0,863),new DictWord(8,0,864)
				,new DictWord(8,0,868),new DictWord(8,0,884),new DictWord(10,0,866),new DictWord(10,0,868),new DictWord(10,0,873),new DictWord(10,0,911),new DictWord(10,0,912),new DictWord(10,
					0,944),new DictWord(12,0,727),new DictWord(6,11,248),new DictWord(9,11,546),new DictWord(10,11,535),new DictWord(11,11,681),new DictWord(141,11,135),new DictWord(6,
					0,300),new DictWord(135,0,1515),new DictWord(134,0,1237),new DictWord(139,10,958),new DictWord(133,10,594),new DictWord(140,11,250),new DictWord(134,0,
					1685),new DictWord(134,11,567),new DictWord(7,0,135),new DictWord(8,0,7),new DictWord(8,0,62),new DictWord(9,0,243),new DictWord(10,0,658),new DictWord(10,0,697),new DictWord(
					11,0,456),new DictWord(139,0,756),new DictWord(9,0,395),new DictWord(138,0,79),new DictWord(6,10,1641),new DictWord(136,10,820),new DictWord(4,10,302),new DictWord(
					135,10,1766),new DictWord(134,11,174),new DictWord(135,10,1313),new DictWord(135,0,631),new DictWord(134,10,1674),new DictWord(134,11,395),new DictWord(
					138,0,835),new DictWord(7,0,406),new DictWord(7,0,459),new DictWord(8,0,606),new DictWord(139,0,726),new DictWord(134,11,617),new DictWord(134,0,979),new DictWord(6
					,10,389),new DictWord(7,10,149),new DictWord(9,10,142),new DictWord(138,10,94),new DictWord(5,11,878),new DictWord(133,11,972),new DictWord(6,10,8),new DictWord(7,
					10,1881),new DictWord(8,10,91),new DictWord(136,11,511),new DictWord(133,0,612),new DictWord(132,11,351),new DictWord(4,0,372),new DictWord(7,0,482),new DictWord(8,
					0,158),new DictWord(9,0,602),new DictWord(9,0,615),new DictWord(10,0,245),new DictWord(10,0,678),new DictWord(10,0,744),new DictWord(11,0,248),new DictWord(139,0,
					806),new DictWord(5,0,854),new DictWord(135,0,1991),new DictWord(132,11,286),new DictWord(135,11,344),new DictWord(7,11,438),new DictWord(7,11,627),new DictWord(7,
					11,1516),new DictWord(8,11,40),new DictWord(9,11,56),new DictWord(9,11,294),new DictWord(10,11,30),new DictWord(10,11,259),new DictWord(11,11,969),new DictWord(146,
					11,148),new DictWord(135,0,1492),new DictWord(5,11,259),new DictWord(7,11,414),new DictWord(7,11,854),new DictWord(142,11,107),new DictWord(135,10,1746)
				,new DictWord(6,0,833),new DictWord(134,0,998),new DictWord(135,10,24),new DictWord(6,0,750),new DictWord(135,0,1739),new DictWord(4,10,503),new DictWord(135,10,
					1661),new DictWord(5,10,130),new DictWord(7,10,1314),new DictWord(9,10,610),new DictWord(10,10,718),new DictWord(11,10,601),new DictWord(11,10,819),new DictWord(11,
					10,946),new DictWord(140,10,536),new DictWord(10,10,149),new DictWord(11,10,280),new DictWord(142,10,336),new DictWord(132,11,738),new DictWord(135,10,
					1946),new DictWord(5,0,195),new DictWord(135,0,1685),new DictWord(7,0,1997),new DictWord(8,0,730),new DictWord(139,0,1006),new DictWord(151,11,17),new DictWord(133,
					11,866),new DictWord(14,0,463),new DictWord(14,0,470),new DictWord(150,0,61),new DictWord(5,0,751),new DictWord(8,0,266),new DictWord(11,0,578),new DictWord(4,10,
					392),new DictWord(135,10,1597),new DictWord(5,10,433),new DictWord(9,10,633),new DictWord(139,10,629),new DictWord(135,0,821),new DictWord(6,0,715),new DictWord(134
					,0,1325),new DictWord(133,11,116),new DictWord(6,0,868),new DictWord(132,11,457),new DictWord(134,0,959),new DictWord(6,10,234),new DictWord(138,11,199)
				,new DictWord(7,0,1053),new DictWord(7,10,1950),new DictWord(8,10,680),new DictWord(11,10,817),new DictWord(147,10,88),new DictWord(7,10,1222),new DictWord(138,10,
					386),new DictWord(5,0,950),new DictWord(5,0,994),new DictWord(6,0,351),new DictWord(134,0,1124),new DictWord(134,0,1081),new DictWord(7,0,1595),new DictWord(6,10,5)
				,new DictWord(11,10,249),new DictWord(12,10,313),new DictWord(16,10,66),new DictWord(145,10,26),new DictWord(148,0,59),new DictWord(5,11,527),new DictWord(6,11,189)
				,new DictWord(135,11,859),new DictWord(5,10,963),new DictWord(6,10,1773),new DictWord(11,11,104),new DictWord(11,11,554),new DictWord(15,11,60),new DictWord(143,11,
					125),new DictWord(135,0,47),new DictWord(137,0,684),new DictWord(134,11,116),new DictWord(134,0,1606),new DictWord(134,0,777),new DictWord(7,0,1020),new DictWord(8,
					10,509),new DictWord(136,10,792),new DictWord(135,0,1094),new DictWord(132,0,350),new DictWord(133,11,487),new DictWord(4,11,86),new DictWord(5,11,667),
				new DictWord(5,11,753),new DictWord(6,11,316),new DictWord(6,11,455),new DictWord(135,11,946),new DictWord(7,0,1812),new DictWord(13,0,259),new DictWord(13,0,356),new DictWord(
					14,0,242),new DictWord(147,0,114),new DictWord(132,10,931),new DictWord(133,0,967),new DictWord(4,0,473),new DictWord(7,0,623),new DictWord(8,0,808),new DictWord(9,
					0,871),new DictWord(9,0,893),new DictWord(11,0,38),new DictWord(11,0,431),new DictWord(12,0,112),new DictWord(12,0,217),new DictWord(12,0,243),new DictWord(12,0,562
				),new DictWord(12,0,663),new DictWord(12,0,683),new DictWord(13,0,141),new DictWord(13,0,197),new DictWord(13,0,227),new DictWord(13,0,406),new DictWord(13,0,487),new DictWord(
					14,0,156),new DictWord(14,0,203),new DictWord(14,0,224),new DictWord(14,0,256),new DictWord(18,0,58),new DictWord(150,0,0),new DictWord(138,0,286),new DictWord(7,10
					,943),new DictWord(139,10,614),new DictWord(135,10,1837),new DictWord(150,11,45),new DictWord(132,0,798),new DictWord(4,0,222),new DictWord(7,0,286),new DictWord(
					136,0,629),new DictWord(4,11,79),new DictWord(7,11,1773),new DictWord(10,11,450),new DictWord(11,11,589),new DictWord(13,11,332),new DictWord(13,11,493)
				,new DictWord(14,11,183),new DictWord(14,11,334),new DictWord(14,11,362),new DictWord(14,11,368),new DictWord(14,11,376),new DictWord(14,11,379),new DictWord(19,11,
					90),new DictWord(19,11,103),new DictWord(19,11,127),new DictWord(148,11,90),new DictWord(5,0,337),new DictWord(11,0,513),new DictWord(11,0,889),new DictWord(11,0,
					961),new DictWord(12,0,461),new DictWord(13,0,79),new DictWord(15,0,121),new DictWord(4,10,90),new DictWord(5,10,545),new DictWord(7,10,754),new DictWord(9,10,186),
				new DictWord(10,10,72),new DictWord(10,10,782),new DictWord(11,10,577),new DictWord(11,10,610),new DictWord(12,10,354),new DictWord(12,10,362),new DictWord(140,10,
					595),new DictWord(141,0,306),new DictWord(136,0,146),new DictWord(7,0,1646),new DictWord(9,10,329),new DictWord(11,10,254),new DictWord(141,11,124),new DictWord(4,0
					,465),new DictWord(135,0,1663),new DictWord(132,0,525),new DictWord(133,11,663),new DictWord(10,0,299),new DictWord(18,0,74),new DictWord(9,10,187),new DictWord(11,
					10,1016),new DictWord(145,10,44),new DictWord(7,0,165),new DictWord(7,0,919),new DictWord(4,10,506),new DictWord(136,10,517),new DictWord(5,10,295),new DictWord(135
					,10,1680),new DictWord(133,11,846),new DictWord(134,0,1064),new DictWord(5,11,378),new DictWord(7,11,1402),new DictWord(7,11,1414),new DictWord(8,11,465
				),new DictWord(9,11,286),new DictWord(10,11,185),new DictWord(10,11,562),new DictWord(10,11,635),new DictWord(11,11,31),new DictWord(11,11,393),new DictWord(12,11,
					456),new DictWord(13,11,312),new DictWord(18,11,65),new DictWord(18,11,96),new DictWord(147,11,89),new DictWord(132,0,596),new DictWord(7,10,987),new DictWord(9,10,
					688),new DictWord(10,10,522),new DictWord(11,10,788),new DictWord(140,10,566),new DictWord(6,0,82),new DictWord(7,0,138),new DictWord(7,0,517),new DictWord(7,0,1741
				),new DictWord(11,0,238),new DictWord(4,11,648),new DictWord(134,10,1775),new DictWord(7,0,1233),new DictWord(7,10,700),new DictWord(7,10,940),new DictWord(8,10,514
				),new DictWord(9,10,116),new DictWord(9,10,535),new DictWord(10,10,118),new DictWord(11,10,107),new DictWord(11,10,148),new DictWord(11,10,922),new DictWord(12,10,
					254),new DictWord(12,10,421),new DictWord(142,10,238),new DictWord(4,0,962),new DictWord(6,0,1824),new DictWord(8,0,894),new DictWord(12,0,708),new DictWord(12,0,
					725),new DictWord(14,0,451),new DictWord(20,0,94),new DictWord(22,0,59),new DictWord(150,0,62),new DictWord(5,11,945),new DictWord(6,11,1656),new DictWord(6,11,1787
				),new DictWord(7,11,167),new DictWord(8,11,824),new DictWord(9,11,391),new DictWord(10,11,375),new DictWord(139,11,185),new DictWord(5,0,495),new DictWord(7,0,834),
				new DictWord(9,0,733),new DictWord(139,0,378),new DictWord(4,10,743),new DictWord(135,11,1273),new DictWord(6,0,1204),new DictWord(7,11,1645),new DictWord(8,11,352)
				,new DictWord(137,11,249),new DictWord(139,10,292),new DictWord(133,0,559),new DictWord(132,11,152),new DictWord(9,0,499),new DictWord(10,0,341),new DictWord(15,0,
					144),new DictWord(19,0,49),new DictWord(7,10,1283),new DictWord(9,10,227),new DictWord(11,10,325),new DictWord(11,10,408),new DictWord(14,10,180),new DictWord(146,
					10,47),new DictWord(6,0,21),new DictWord(6,0,1737),new DictWord(7,0,1444),new DictWord(136,0,224),new DictWord(133,11,1006),new DictWord(7,0,1446),new DictWord(9,0,
					97),new DictWord(17,0,15),new DictWord(5,10,81),new DictWord(7,10,146),new DictWord(7,10,1342),new DictWord(8,10,53),new DictWord(8,10,561),new DictWord(8,10,694),new DictWord(
					8,10,754),new DictWord(9,10,115),new DictWord(9,10,894),new DictWord(10,10,462),new DictWord(10,10,813),new DictWord(11,10,230),new DictWord(11,10,657),
				new DictWord(11,10,699),new DictWord(11,10,748),new DictWord(12,10,119),new DictWord(12,10,200),new DictWord(12,10,283),new DictWord(142,10,273),new DictWord(5,10,
					408),new DictWord(137,10,747),new DictWord(135,11,431),new DictWord(135,11,832),new DictWord(6,0,729),new DictWord(134,0,953),new DictWord(4,0,727),new DictWord(8,0
					,565),new DictWord(5,11,351),new DictWord(7,11,264),new DictWord(136,11,565),new DictWord(134,0,1948),new DictWord(5,0,519),new DictWord(5,11,40),new DictWord(7,11,
					598),new DictWord(7,11,1638),new DictWord(8,11,78),new DictWord(9,11,166),new DictWord(9,11,640),new DictWord(9,11,685),new DictWord(9,11,773),new DictWord(11,11,
					215),new DictWord(13,11,65),new DictWord(14,11,172),new DictWord(14,11,317),new DictWord(145,11,6),new DictWord(8,11,60),new DictWord(9,11,343),new DictWord(139,11,
					769),new DictWord(137,11,455),new DictWord(134,0,1193),new DictWord(140,0,790),new DictWord(7,11,1951),new DictWord(8,11,765),new DictWord(8,11,772),new DictWord(
					140,11,671),new DictWord(7,11,108),new DictWord(8,11,219),new DictWord(8,11,388),new DictWord(9,11,639),new DictWord(9,11,775),new DictWord(11,11,275),new DictWord(
					140,11,464),new DictWord(132,11,468),new DictWord(7,10,30),new DictWord(8,10,86),new DictWord(8,10,315),new DictWord(8,10,700),new DictWord(9,10,576),new DictWord(9
					,10,858),new DictWord(11,10,310),new DictWord(11,10,888),new DictWord(11,10,904),new DictWord(12,10,361),new DictWord(141,10,248),new DictWord(5,11,15),
				new DictWord(6,11,56),new DictWord(7,11,1758),new DictWord(8,11,500),new DictWord(9,11,730),new DictWord(11,11,331),new DictWord(13,11,150),new DictWord(142,11,282)
				,new DictWord(4,0,402),new DictWord(7,0,2),new DictWord(8,0,323),new DictWord(136,0,479),new DictWord(138,10,839),new DictWord(11,0,580),new DictWord(142,0,201),new DictWord(5,
					0,59),new DictWord(135,0,672),new DictWord(137,10,617),new DictWord(146,0,34),new DictWord(134,11,1886),new DictWord(4,0,961),new DictWord(136,0,896),new DictWord(6
					,0,1285),new DictWord(5,11,205),new DictWord(6,11,438),new DictWord(137,11,711),new DictWord(134,10,428),new DictWord(7,10,524),new DictWord(8,10,169),new DictWord(
					8,10,234),new DictWord(9,10,480),new DictWord(138,10,646),new DictWord(148,0,46),new DictWord(141,0,479),new DictWord(133,11,534),new DictWord(6,0,2019)
				,new DictWord(134,10,1648),new DictWord(4,0,85),new DictWord(7,0,549),new DictWord(7,10,1205),new DictWord(138,10,637),new DictWord(4,0,663),new DictWord(5,0,94),new DictWord(7
					,11,235),new DictWord(7,11,1475),new DictWord(15,11,68),new DictWord(146,11,120),new DictWord(6,11,443),new DictWord(9,11,237),new DictWord(9,11,571),new DictWord(9
					,11,695),new DictWord(10,11,139),new DictWord(11,11,715),new DictWord(12,11,417),new DictWord(141,11,421),new DictWord(132,0,783),new DictWord(4,0,682),
				new DictWord(8,0,65),new DictWord(9,10,39),new DictWord(10,10,166),new DictWord(11,10,918),new DictWord(12,10,635),new DictWord(20,10,10),new DictWord(22,10,27),new DictWord(22
					,10,43),new DictWord(150,10,52),new DictWord(6,0,11),new DictWord(135,0,187),new DictWord(132,0,522),new DictWord(4,0,52),new DictWord(135,0,661),new DictWord(4,0,
					383),new DictWord(133,0,520),new DictWord(135,11,546),new DictWord(11,0,343),new DictWord(142,0,127),new DictWord(4,11,578),new DictWord(7,10,157),new DictWord(7,11
					,624),new DictWord(7,11,916),new DictWord(8,10,279),new DictWord(10,11,256),new DictWord(11,11,87),new DictWord(139,11,703),new DictWord(134,10,604),new DictWord(4,
					0,281),new DictWord(5,0,38),new DictWord(7,0,194),new DictWord(7,0,668),new DictWord(7,0,1893),new DictWord(137,0,397),new DictWord(7,10,945),new DictWord(11,10,713
				),new DictWord(139,10,744),new DictWord(139,10,1022),new DictWord(9,0,635),new DictWord(139,0,559),new DictWord(5,11,923),new DictWord(7,11,490),new DictWord(12,11,
					553),new DictWord(13,11,100),new DictWord(14,11,118),new DictWord(143,11,75),new DictWord(132,0,975),new DictWord(132,10,567),new DictWord(137,10,859),new DictWord(
					7,10,1846),new DictWord(7,11,1846),new DictWord(8,10,628),new DictWord(136,11,628),new DictWord(148,0,116),new DictWord(138,11,750),new DictWord(14,0,51
				),new DictWord(14,11,51),new DictWord(15,11,7),new DictWord(148,11,20),new DictWord(132,0,858),new DictWord(134,0,1075),new DictWord(4,11,924),new DictWord(133,10,
					762),new DictWord(136,0,535),new DictWord(133,0,448),new DictWord(10,10,784),new DictWord(141,10,191),new DictWord(133,10,298),new DictWord(7,0,610),new DictWord(
					135,0,1501),new DictWord(7,10,633),new DictWord(7,10,905),new DictWord(7,10,909),new DictWord(7,10,1538),new DictWord(9,10,767),new DictWord(140,10,636)
				,new DictWord(4,11,265),new DictWord(7,11,807),new DictWord(135,11,950),new DictWord(5,11,93),new DictWord(12,11,267),new DictWord(144,11,26),new DictWord(136,0,191
				),new DictWord(139,10,301),new DictWord(135,10,1970),new DictWord(135,0,267),new DictWord(4,0,319),new DictWord(5,0,699),new DictWord(138,0,673),new DictWord(6,0,
					336),new DictWord(7,0,92),new DictWord(7,0,182),new DictWord(8,0,453),new DictWord(8,0,552),new DictWord(9,0,204),new DictWord(9,0,285),new DictWord(10,0,99),new DictWord(11,0,
					568),new DictWord(11,0,950),new DictWord(12,0,94),new DictWord(16,0,20),new DictWord(16,0,70),new DictWord(19,0,55),new DictWord(12,10,644),new DictWord(144,10,90),
				new DictWord(6,0,551),new DictWord(7,0,1308),new DictWord(7,10,845),new DictWord(7,11,994),new DictWord(8,10,160),new DictWord(137,10,318),new DictWord(19,11,1),new DictWord(19
					,11,26),new DictWord(150,11,9),new DictWord(7,0,1406),new DictWord(9,0,218),new DictWord(141,0,222),new DictWord(5,0,256),new DictWord(138,0,69),new DictWord(5,11,
					233),new DictWord(5,11,320),new DictWord(6,11,140),new DictWord(7,11,330),new DictWord(136,11,295),new DictWord(6,0,1980),new DictWord(136,0,952),new DictWord(4,0,
					833),new DictWord(137,11,678),new DictWord(133,11,978),new DictWord(4,11,905),new DictWord(6,11,1701),new DictWord(137,11,843),new DictWord(138,10,735),
				new DictWord(136,10,76),new DictWord(17,0,39),new DictWord(148,0,36),new DictWord(18,0,81),new DictWord(146,11,81),new DictWord(14,0,352),new DictWord(17,0,53),new DictWord(18,
					0,146),new DictWord(18,0,152),new DictWord(19,0,11),new DictWord(150,0,54),new DictWord(135,0,634),new DictWord(138,10,841),new DictWord(132,0,618),new DictWord(4,0
					,339),new DictWord(7,0,259),new DictWord(17,0,73),new DictWord(4,11,275),new DictWord(140,11,376),new DictWord(132,11,509),new DictWord(7,11,273),new DictWord(139,
					11,377),new DictWord(4,0,759),new DictWord(13,0,169),new DictWord(137,10,804),new DictWord(6,10,96),new DictWord(135,10,1426),new DictWord(4,10,651),new DictWord(
					133,10,289),new DictWord(7,0,1075),new DictWord(8,10,35),new DictWord(9,10,511),new DictWord(10,10,767),new DictWord(147,10,118),new DictWord(6,0,649),new DictWord(
					6,0,670),new DictWord(136,0,482),new DictWord(5,0,336),new DictWord(6,0,341),new DictWord(6,0,478),new DictWord(6,0,1763),new DictWord(136,0,386),new DictWord(5,11,
					802),new DictWord(7,11,2021),new DictWord(8,11,805),new DictWord(14,11,94),new DictWord(15,11,65),new DictWord(16,11,4),new DictWord(16,11,77),new DictWord(16,11,80
				),new DictWord(145,11,5),new DictWord(6,0,1035),new DictWord(5,11,167),new DictWord(5,11,899),new DictWord(6,11,410),new DictWord(137,11,777),new DictWord(134,11,
					1705),new DictWord(5,0,924),new DictWord(133,0,969),new DictWord(132,10,704),new DictWord(135,0,73),new DictWord(135,11,10),new DictWord(135,10,1078),new DictWord(5
					,11,11),new DictWord(6,11,117),new DictWord(6,11,485),new DictWord(7,11,1133),new DictWord(9,11,582),new DictWord(9,11,594),new DictWord(11,11,21),new DictWord(11,
					11,818),new DictWord(12,11,535),new DictWord(141,11,86),new DictWord(135,0,1971),new DictWord(4,11,264),new DictWord(7,11,1067),new DictWord(8,11,204),new DictWord(
					8,11,385),new DictWord(139,11,953),new DictWord(6,0,1458),new DictWord(135,0,1344),new DictWord(5,0,396),new DictWord(134,0,501),new DictWord(4,10,720),
				new DictWord(133,10,306),new DictWord(4,0,929),new DictWord(5,0,799),new DictWord(8,0,46),new DictWord(8,0,740),new DictWord(133,10,431),new DictWord(7,11,646),new DictWord(7,
					11,1730),new DictWord(11,11,446),new DictWord(141,11,178),new DictWord(7,0,276),new DictWord(5,10,464),new DictWord(6,10,236),new DictWord(7,10,696),new DictWord(7,
					10,914),new DictWord(7,10,1108),new DictWord(7,10,1448),new DictWord(9,10,15),new DictWord(9,10,564),new DictWord(10,10,14),new DictWord(12,10,565),new DictWord(13,
					10,449),new DictWord(14,10,53),new DictWord(15,10,13),new DictWord(16,10,64),new DictWord(145,10,41),new DictWord(4,0,892),new DictWord(133,0,770),new DictWord(6,10
					,1767),new DictWord(12,10,194),new DictWord(145,10,107),new DictWord(135,0,158),new DictWord(5,10,840),new DictWord(138,11,608),new DictWord(134,0,1432)
				,new DictWord(138,11,250),new DictWord(8,11,794),new DictWord(9,11,400),new DictWord(10,11,298),new DictWord(142,11,228),new DictWord(151,0,25),new DictWord(7,11,
					1131),new DictWord(135,11,1468),new DictWord(135,0,2001),new DictWord(9,10,642),new DictWord(11,10,236),new DictWord(142,10,193),new DictWord(4,10,68),new DictWord(
					5,10,634),new DictWord(6,10,386),new DictWord(7,10,794),new DictWord(8,10,273),new DictWord(9,10,563),new DictWord(10,10,105),new DictWord(10,10,171),new DictWord(
					11,10,94),new DictWord(139,10,354),new DictWord(136,11,724),new DictWord(132,0,478),new DictWord(11,11,512),new DictWord(13,11,205),new DictWord(19,11,
					30),new DictWord(22,11,36),new DictWord(151,11,19),new DictWord(7,0,1461),new DictWord(140,0,91),new DictWord(6,11,190),new DictWord(7,11,768),new DictWord(135,11,
					1170),new DictWord(4,0,602),new DictWord(8,0,211),new DictWord(4,10,95),new DictWord(7,10,416),new DictWord(139,10,830),new DictWord(7,10,731),new DictWord(13,10,20
				),new DictWord(143,10,11),new DictWord(6,0,1068),new DictWord(135,0,1872),new DictWord(4,0,13),new DictWord(5,0,567),new DictWord(7,0,1498),new DictWord(9,0,124),new DictWord(
					11,0,521),new DictWord(12,0,405),new DictWord(135,11,1023),new DictWord(135,0,1006),new DictWord(132,0,735),new DictWord(138,0,812),new DictWord(4,0,170
				),new DictWord(135,0,323),new DictWord(6,11,137),new DictWord(9,11,75),new DictWord(9,11,253),new DictWord(10,11,194),new DictWord(138,11,444),new DictWord(5,0,304)
				,new DictWord(7,0,1403),new DictWord(5,10,864),new DictWord(10,10,648),new DictWord(11,10,671),new DictWord(143,10,46),new DictWord(135,11,1180),new DictWord(133,10
					,928),new DictWord(4,0,148),new DictWord(133,0,742),new DictWord(11,10,986),new DictWord(140,10,682),new DictWord(133,0,523),new DictWord(135,11,1743),new DictWord(
					7,0,730),new DictWord(18,0,144),new DictWord(19,0,61),new DictWord(8,10,44),new DictWord(9,10,884),new DictWord(10,10,580),new DictWord(11,10,399),new DictWord(11,
					10,894),new DictWord(143,10,122),new DictWord(5,11,760),new DictWord(7,11,542),new DictWord(8,11,135),new DictWord(136,11,496),new DictWord(136,0,981),new DictWord(
					133,0,111),new DictWord(10,0,132),new DictWord(11,0,191),new DictWord(11,0,358),new DictWord(139,0,460),new DictWord(7,11,319),new DictWord(7,11,355),new DictWord(7
					,11,763),new DictWord(10,11,389),new DictWord(145,11,43),new DictWord(134,0,890),new DictWord(134,0,1420),new DictWord(136,11,557),new DictWord(133,10,
					518),new DictWord(133,0,444),new DictWord(135,0,1787),new DictWord(135,10,1852),new DictWord(8,0,123),new DictWord(15,0,6),new DictWord(144,0,7),new DictWord(6,0,
					2041),new DictWord(10,11,38),new DictWord(139,11,784),new DictWord(136,0,932),new DictWord(5,0,937),new DictWord(135,0,100),new DictWord(6,0,995),new DictWord(4,11,
					58),new DictWord(5,11,286),new DictWord(6,11,319),new DictWord(7,11,402),new DictWord(7,11,1254),new DictWord(7,11,1903),new DictWord(8,11,356),new DictWord(140,11,
					408),new DictWord(4,11,389),new DictWord(9,11,181),new DictWord(9,11,255),new DictWord(10,11,8),new DictWord(10,11,29),new DictWord(10,11,816),new DictWord(11,11,
					311),new DictWord(11,11,561),new DictWord(12,11,67),new DictWord(141,11,181),new DictWord(138,0,255),new DictWord(5,0,138),new DictWord(4,10,934),new DictWord(136,
					10,610),new DictWord(4,0,965),new DictWord(10,0,863),new DictWord(138,0,898),new DictWord(10,10,804),new DictWord(138,10,832),new DictWord(12,0,631),new DictWord(8,
					10,96),new DictWord(9,10,36),new DictWord(10,10,607),new DictWord(11,10,423),new DictWord(11,10,442),new DictWord(12,10,309),new DictWord(14,10,199),new DictWord(15
					,10,90),new DictWord(145,10,110),new DictWord(134,0,1394),new DictWord(4,0,652),new DictWord(8,0,320),new DictWord(22,0,6),new DictWord(22,0,16),new DictWord(9,10,
					13),new DictWord(9,10,398),new DictWord(9,10,727),new DictWord(10,10,75),new DictWord(10,10,184),new DictWord(10,10,230),new DictWord(10,10,564),new DictWord(10,10,
					569),new DictWord(11,10,973),new DictWord(12,10,70),new DictWord(12,10,189),new DictWord(13,10,57),new DictWord(141,10,257),new DictWord(6,0,897),new DictWord(134,0
					,1333),new DictWord(4,0,692),new DictWord(133,0,321),new DictWord(133,11,373),new DictWord(135,0,922),new DictWord(5,0,619),new DictWord(133,0,698),new DictWord(137
					,10,631),new DictWord(5,10,345),new DictWord(135,10,1016),new DictWord(9,0,957),new DictWord(9,0,1018),new DictWord(12,0,828),new DictWord(12,0,844),new DictWord(12
					,0,897),new DictWord(12,0,901),new DictWord(12,0,943),new DictWord(15,0,180),new DictWord(18,0,197),new DictWord(18,0,200),new DictWord(18,0,213),new DictWord(18,0,
					214),new DictWord(146,0,226),new DictWord(5,0,917),new DictWord(134,0,1659),new DictWord(135,0,1100),new DictWord(134,0,1173),new DictWord(134,0,1930),new DictWord(
					5,0,251),new DictWord(5,0,956),new DictWord(8,0,268),new DictWord(9,0,214),new DictWord(146,0,142),new DictWord(133,10,673),new DictWord(137,10,850),new DictWord(4,
					10,287),new DictWord(133,10,1018),new DictWord(132,11,672),new DictWord(5,0,346),new DictWord(5,0,711),new DictWord(8,0,390),new DictWord(11,11,752),new DictWord(
					139,11,885),new DictWord(5,10,34),new DictWord(10,10,724),new DictWord(12,10,444),new DictWord(13,10,354),new DictWord(18,10,32),new DictWord(23,10,24),
				new DictWord(23,10,31),new DictWord(152,10,5),new DictWord(4,11,710),new DictWord(134,11,606),new DictWord(134,0,744),new DictWord(134,10,382),new DictWord(133,11,
					145),new DictWord(4,10,329),new DictWord(7,11,884),new DictWord(140,11,124),new DictWord(4,11,467),new DictWord(5,11,405),new DictWord(134,11,544),new DictWord(9,10
					,846),new DictWord(138,10,827),new DictWord(133,0,624),new DictWord(9,11,372),new DictWord(15,11,2),new DictWord(19,11,10),new DictWord(147,11,18),new DictWord(4,11
					,387),new DictWord(135,11,1288),new DictWord(5,0,783),new DictWord(7,0,1998),new DictWord(135,0,2047),new DictWord(132,10,906),new DictWord(136,10,366),
				new DictWord(135,11,550),new DictWord(4,10,123),new DictWord(4,10,649),new DictWord(5,10,605),new DictWord(7,10,1509),new DictWord(136,10,36),new DictWord(134,0,
					1125),new DictWord(132,0,594),new DictWord(133,10,767),new DictWord(135,11,1227),new DictWord(136,11,467),new DictWord(4,11,576),new DictWord(135,11,
					1263),new DictWord(4,0,268),new DictWord(7,0,1534),new DictWord(135,11,1534),new DictWord(4,10,273),new DictWord(5,10,658),new DictWord(5,11,919),new DictWord(5,10,
					995),new DictWord(134,11,1673),new DictWord(133,0,563),new DictWord(134,10,72),new DictWord(135,10,1345),new DictWord(4,11,82),new DictWord(5,11,333),new DictWord(5
					,11,904),new DictWord(6,11,207),new DictWord(7,11,325),new DictWord(7,11,1726),new DictWord(8,11,101),new DictWord(10,11,778),new DictWord(139,11,220),new DictWord(
					5,0,37),new DictWord(6,0,39),new DictWord(6,0,451),new DictWord(7,0,218),new DictWord(7,0,667),new DictWord(7,0,1166),new DictWord(7,0,1687),new DictWord(8,0,662),new DictWord(
					16,0,2),new DictWord(133,10,589),new DictWord(134,0,1332),new DictWord(133,11,903),new DictWord(134,0,508),new DictWord(5,10,117),new DictWord(6,10,514)
				,new DictWord(6,10,541),new DictWord(7,10,1164),new DictWord(7,10,1436),new DictWord(8,10,220),new DictWord(8,10,648),new DictWord(10,10,688),new DictWord(11,10,560
				),new DictWord(140,11,147),new DictWord(6,11,555),new DictWord(135,11,485),new DictWord(133,10,686),new DictWord(7,0,453),new DictWord(7,0,635),new DictWord(7,0,796
				),new DictWord(8,0,331),new DictWord(9,0,330),new DictWord(9,0,865),new DictWord(10,0,119),new DictWord(10,0,235),new DictWord(11,0,111),new DictWord(11,0,129),new DictWord(11,
					0,240),new DictWord(12,0,31),new DictWord(12,0,66),new DictWord(12,0,222),new DictWord(12,0,269),new DictWord(12,0,599),new DictWord(12,0,684),new DictWord(12,0,689
				),new DictWord(12,0,691),new DictWord(142,0,345),new DictWord(135,0,1834),new DictWord(4,11,705),new DictWord(7,11,615),new DictWord(138,11,251),new DictWord(136,11
					,345),new DictWord(137,0,527),new DictWord(6,0,98),new DictWord(7,0,702),new DictWord(135,0,991),new DictWord(11,0,576),new DictWord(14,0,74),new DictWord(7,10,196)
				,new DictWord(10,10,765),new DictWord(11,10,347),new DictWord(11,10,552),new DictWord(11,10,790),new DictWord(12,10,263),new DictWord(13,10,246),new DictWord(13,10,
					270),new DictWord(13,10,395),new DictWord(14,10,176),new DictWord(14,10,190),new DictWord(14,10,398),new DictWord(14,10,412),new DictWord(15,10,32),new DictWord(15,
					10,63),new DictWord(16,10,88),new DictWord(147,10,105),new DictWord(134,11,90),new DictWord(13,0,84),new DictWord(141,0,122),new DictWord(6,0,37),new DictWord(7,0,
					299),new DictWord(7,0,1666),new DictWord(8,0,195),new DictWord(8,0,316),new DictWord(9,0,178),new DictWord(9,0,276),new DictWord(9,0,339),new DictWord(9,0,536),new DictWord(10,
					0,102),new DictWord(10,0,362),new DictWord(10,0,785),new DictWord(11,0,55),new DictWord(11,0,149),new DictWord(11,0,773),new DictWord(13,0,416),new DictWord(13,0,
					419),new DictWord(14,0,38),new DictWord(14,0,41),new DictWord(142,0,210),new DictWord(5,10,381),new DictWord(135,10,1792),new DictWord(7,11,813),new DictWord(12,11,
					497),new DictWord(141,11,56),new DictWord(7,10,616),new DictWord(138,10,413),new DictWord(133,0,645),new DictWord(6,11,125),new DictWord(135,11,1277),new DictWord(
					132,0,290),new DictWord(6,0,70),new DictWord(7,0,1292),new DictWord(10,0,762),new DictWord(139,0,288),new DictWord(6,10,120),new DictWord(7,10,1188),new DictWord(7,
					10,1710),new DictWord(8,10,286),new DictWord(9,10,667),new DictWord(11,10,592),new DictWord(139,10,730),new DictWord(135,11,1784),new DictWord(7,0,1315)
				,new DictWord(135,11,1315),new DictWord(134,0,1955),new DictWord(135,10,1146),new DictWord(7,0,131),new DictWord(7,0,422),new DictWord(8,0,210),new DictWord(140,0,
					573),new DictWord(4,10,352),new DictWord(135,10,687),new DictWord(139,0,797),new DictWord(143,0,38),new DictWord(14,0,179),new DictWord(15,0,151),new DictWord(150,0
					,11),new DictWord(7,0,488),new DictWord(4,10,192),new DictWord(5,10,49),new DictWord(6,10,200),new DictWord(6,10,293),new DictWord(134,10,1696),new DictWord(132,0,
					936),new DictWord(135,11,703),new DictWord(6,11,160),new DictWord(7,11,1106),new DictWord(9,11,770),new DictWord(10,11,618),new DictWord(11,11,112),new DictWord(140
					,11,413),new DictWord(5,0,453),new DictWord(134,0,441),new DictWord(135,0,595),new DictWord(132,10,650),new DictWord(132,10,147),new DictWord(6,0,991),new DictWord(
					6,0,1182),new DictWord(12,11,271),new DictWord(145,11,109),new DictWord(133,10,934),new DictWord(140,11,221),new DictWord(132,0,653),new DictWord(7,0,
					505),new DictWord(135,0,523),new DictWord(134,0,903),new DictWord(135,11,479),new DictWord(7,11,304),new DictWord(9,11,646),new DictWord(9,11,862),new DictWord(10,
					11,262),new DictWord(11,11,696),new DictWord(12,11,208),new DictWord(15,11,79),new DictWord(147,11,108),new DictWord(146,0,80),new DictWord(135,11,981),
				new DictWord(142,0,432),new DictWord(132,0,314),new DictWord(137,11,152),new DictWord(7,0,1368),new DictWord(8,0,232),new DictWord(8,0,361),new DictWord(10,0,682),new DictWord(
					138,0,742),new DictWord(135,11,1586),new DictWord(9,0,534),new DictWord(4,11,434),new DictWord(11,11,663),new DictWord(12,11,210),new DictWord(13,11,166
				),new DictWord(13,11,310),new DictWord(14,11,373),new DictWord(147,11,43),new DictWord(7,11,1091),new DictWord(135,11,1765),new DictWord(6,11,550),new DictWord(135,
					11,652),new DictWord(137,0,27),new DictWord(142,0,12),new DictWord(4,10,637),new DictWord(5,11,553),new DictWord(7,11,766),new DictWord(138,11,824),new DictWord(7,
					11,737),new DictWord(8,11,298),new DictWord(136,11,452),new DictWord(7,0,736),new DictWord(139,0,264),new DictWord(134,0,1657),new DictWord(133,11,292),
				new DictWord(138,11,135),new DictWord(6,0,844),new DictWord(134,0,1117),new DictWord(135,0,127),new DictWord(9,10,867),new DictWord(138,10,837),new DictWord(6,0,
					1184),new DictWord(134,0,1208),new DictWord(134,0,1294),new DictWord(136,0,364),new DictWord(6,0,1415),new DictWord(7,0,1334),new DictWord(11,0,125),new DictWord(6,
					10,170),new DictWord(7,11,393),new DictWord(8,10,395),new DictWord(8,10,487),new DictWord(10,11,603),new DictWord(11,11,206),new DictWord(141,10,147),new DictWord(
					137,11,748),new DictWord(4,11,912),new DictWord(137,11,232),new DictWord(4,10,535),new DictWord(136,10,618),new DictWord(137,0,792),new DictWord(7,11,
					1973),new DictWord(136,11,716),new DictWord(135,11,98),new DictWord(5,0,909),new DictWord(9,0,849),new DictWord(138,0,805),new DictWord(4,0,630),new DictWord(132,0,
					699),new DictWord(5,11,733),new DictWord(14,11,103),new DictWord(150,10,23),new DictWord(12,11,158),new DictWord(18,11,8),new DictWord(19,11,62),new DictWord(20,11,
					6),new DictWord(22,11,4),new DictWord(23,11,2),new DictWord(151,11,9),new DictWord(132,0,968),new DictWord(132,10,778),new DictWord(132,10,46),new DictWord(5,10,811
				),new DictWord(6,10,1679),new DictWord(6,10,1714),new DictWord(135,10,2032),new DictWord(6,0,1446),new DictWord(7,10,1458),new DictWord(9,10,407),new DictWord(139,
					10,15),new DictWord(7,0,206),new DictWord(7,0,397),new DictWord(7,0,621),new DictWord(7,0,640),new DictWord(8,0,124),new DictWord(8,0,619),new DictWord(9,0,305),new DictWord(9,
					0,643),new DictWord(10,0,264),new DictWord(10,0,628),new DictWord(11,0,40),new DictWord(12,0,349),new DictWord(13,0,134),new DictWord(13,0,295),new DictWord(14,0,
					155),new DictWord(15,0,120),new DictWord(18,0,105),new DictWord(6,10,34),new DictWord(7,10,1089),new DictWord(8,10,708),new DictWord(8,10,721),new DictWord(9,10,363
				),new DictWord(148,10,98),new DictWord(4,0,262),new DictWord(5,0,641),new DictWord(135,0,342),new DictWord(137,11,72),new DictWord(4,0,99),new DictWord(6,0,250),new DictWord(6,
					0,346),new DictWord(8,0,127),new DictWord(138,0,81),new DictWord(132,0,915),new DictWord(5,0,75),new DictWord(9,0,517),new DictWord(10,0,470),new DictWord(12,0,155)
				,new DictWord(141,0,224),new DictWord(132,10,462),new DictWord(11,11,600),new DictWord(11,11,670),new DictWord(141,11,245),new DictWord(142,0,83),new DictWord(5,10,
					73),new DictWord(6,10,23),new DictWord(134,10,338),new DictWord(6,0,1031),new DictWord(139,11,923),new DictWord(7,11,164),new DictWord(7,11,1571),new DictWord(9,11,
					107),new DictWord(140,11,225),new DictWord(134,0,1470),new DictWord(133,0,954),new DictWord(6,0,304),new DictWord(8,0,418),new DictWord(10,0,345),new DictWord(11,0,
					341),new DictWord(139,0,675),new DictWord(9,0,410),new DictWord(139,0,425),new DictWord(4,11,27),new DictWord(5,11,484),new DictWord(5,11,510),new DictWord(6,11,434
				),new DictWord(7,11,1000),new DictWord(7,11,1098),new DictWord(8,11,2),new DictWord(136,11,200),new DictWord(134,0,734),new DictWord(140,11,257),new DictWord(7,10,
					725),new DictWord(8,10,498),new DictWord(139,10,268),new DictWord(134,0,1822),new DictWord(135,0,1798),new DictWord(135,10,773),new DictWord(132,11,460)
				,new DictWord(4,11,932),new DictWord(133,11,891),new DictWord(134,0,14),new DictWord(132,10,583),new DictWord(7,10,1462),new DictWord(8,11,625),new DictWord(139,10,
					659),new DictWord(5,0,113),new DictWord(6,0,243),new DictWord(6,0,1708),new DictWord(7,0,1865),new DictWord(11,0,161),new DictWord(16,0,37),new DictWord(17,0,99),new DictWord(
					133,10,220),new DictWord(134,11,76),new DictWord(5,11,461),new DictWord(135,11,1925),new DictWord(140,0,69),new DictWord(8,11,92),new DictWord(137,11,
					221),new DictWord(139,10,803),new DictWord(132,10,544),new DictWord(4,0,274),new DictWord(134,0,922),new DictWord(132,0,541),new DictWord(5,0,627),new DictWord(6,10
					,437),new DictWord(6,10,564),new DictWord(11,10,181),new DictWord(141,10,183),new DictWord(135,10,1192),new DictWord(7,0,166),new DictWord(132,11,763),new DictWord(
					133,11,253),new DictWord(134,0,849),new DictWord(9,11,73),new DictWord(10,11,110),new DictWord(14,11,185),new DictWord(145,11,119),new DictWord(5,11,212
				),new DictWord(12,11,35),new DictWord(141,11,382),new DictWord(133,0,717),new DictWord(137,0,304),new DictWord(136,0,600),new DictWord(133,0,654),new DictWord(6,0,
					273),new DictWord(10,0,188),new DictWord(13,0,377),new DictWord(146,0,77),new DictWord(4,10,790),new DictWord(5,10,273),new DictWord(134,10,394),new DictWord(132,0,
					543),new DictWord(135,0,410),new DictWord(11,0,98),new DictWord(11,0,524),new DictWord(141,0,87),new DictWord(132,0,941),new DictWord(135,11,1175),new DictWord(4,0,
					250),new DictWord(7,0,1612),new DictWord(11,0,186),new DictWord(12,0,133),new DictWord(6,10,127),new DictWord(7,10,1511),new DictWord(8,10,613),new DictWord(12,10,
					495),new DictWord(12,10,586),new DictWord(12,10,660),new DictWord(12,10,668),new DictWord(14,10,385),new DictWord(15,10,118),new DictWord(17,10,20),new DictWord(146
					,10,98),new DictWord(6,0,1785),new DictWord(133,11,816),new DictWord(134,0,1339),new DictWord(7,0,961),new DictWord(7,0,1085),new DictWord(7,0,1727),new DictWord(8,
					0,462),new DictWord(6,10,230),new DictWord(135,11,1727),new DictWord(9,0,636),new DictWord(135,10,1954),new DictWord(132,0,780),new DictWord(5,11,869),new DictWord(
					5,11,968),new DictWord(6,11,1626),new DictWord(8,11,734),new DictWord(136,11,784),new DictWord(4,11,542),new DictWord(6,11,1716),new DictWord(6,11,1727)
				,new DictWord(7,11,1082),new DictWord(7,11,1545),new DictWord(8,11,56),new DictWord(8,11,118),new DictWord(8,11,412),new DictWord(8,11,564),new DictWord(9,11,888),new DictWord(
					9,11,908),new DictWord(10,11,50),new DictWord(10,11,423),new DictWord(11,11,685),new DictWord(11,11,697),new DictWord(11,11,933),new DictWord(12,11,299)
				,new DictWord(13,11,126),new DictWord(13,11,136),new DictWord(13,11,170),new DictWord(141,11,190),new DictWord(134,11,226),new DictWord(4,11,232),new DictWord(9,11,
					202),new DictWord(10,11,474),new DictWord(140,11,433),new DictWord(137,11,500),new DictWord(5,0,529),new DictWord(136,10,68),new DictWord(132,10,654),new DictWord(4
					,10,156),new DictWord(7,10,998),new DictWord(7,10,1045),new DictWord(7,10,1860),new DictWord(9,10,48),new DictWord(9,10,692),new DictWord(11,10,419),new DictWord(
					139,10,602),new DictWord(7,0,1276),new DictWord(8,0,474),new DictWord(9,0,652),new DictWord(6,11,108),new DictWord(7,11,1003),new DictWord(7,11,1181),new DictWord(
					136,11,343),new DictWord(7,11,1264),new DictWord(7,11,1678),new DictWord(11,11,945),new DictWord(12,11,341),new DictWord(12,11,471),new DictWord(140,11,
					569),new DictWord(134,11,1712),new DictWord(5,0,948),new DictWord(12,0,468),new DictWord(19,0,96),new DictWord(148,0,24),new DictWord(4,11,133),new DictWord(7,11,
					711),new DictWord(7,11,1298),new DictWord(7,11,1585),new DictWord(135,11,1929),new DictWord(6,0,753),new DictWord(140,0,657),new DictWord(139,0,941),new DictWord(6,
					11,99),new DictWord(7,11,1808),new DictWord(145,11,57),new DictWord(6,11,574),new DictWord(7,11,428),new DictWord(7,11,1250),new DictWord(10,11,669),new DictWord(11
					,11,485),new DictWord(11,11,840),new DictWord(12,11,300),new DictWord(142,11,250),new DictWord(4,0,532),new DictWord(5,0,706),new DictWord(135,0,662),new DictWord(5
					,0,837),new DictWord(6,0,1651),new DictWord(139,0,985),new DictWord(7,0,1861),new DictWord(9,10,197),new DictWord(10,10,300),new DictWord(12,10,473),new DictWord(13
					,10,90),new DictWord(141,10,405),new DictWord(137,11,252),new DictWord(6,11,323),new DictWord(135,11,1564),new DictWord(4,0,330),new DictWord(4,0,863),new DictWord(
					7,0,933),new DictWord(7,0,2012),new DictWord(8,0,292),new DictWord(7,11,461),new DictWord(8,11,775),new DictWord(138,11,435),new DictWord(132,10,606),new DictWord(4
					,11,655),new DictWord(7,11,850),new DictWord(17,11,75),new DictWord(146,11,137),new DictWord(135,0,767),new DictWord(7,10,1978),new DictWord(136,10,676)
				,new DictWord(132,0,641),new DictWord(135,11,1559),new DictWord(134,0,1233),new DictWord(137,0,242),new DictWord(17,0,114),new DictWord(4,10,361),new DictWord(133,
					10,315),new DictWord(137,0,883),new DictWord(132,10,461),new DictWord(138,0,274),new DictWord(134,0,2008),new DictWord(134,0,1794),new DictWord(4,0,703)
				,new DictWord(135,0,207),new DictWord(12,0,285),new DictWord(132,10,472),new DictWord(132,0,571),new DictWord(5,0,873),new DictWord(5,0,960),new DictWord(8,0,823),new DictWord(
					9,0,881),new DictWord(136,11,577),new DictWord(7,0,617),new DictWord(10,0,498),new DictWord(11,0,501),new DictWord(12,0,16),new DictWord(140,0,150),new DictWord(138
					,10,747),new DictWord(132,0,431),new DictWord(133,10,155),new DictWord(11,0,283),new DictWord(11,0,567),new DictWord(7,10,163),new DictWord(8,10,319),new DictWord(9
					,10,402),new DictWord(10,10,24),new DictWord(10,10,681),new DictWord(11,10,200),new DictWord(12,10,253),new DictWord(12,10,410),new DictWord(142,10,219)
				,new DictWord(4,11,413),new DictWord(5,11,677),new DictWord(8,11,432),new DictWord(140,11,280),new DictWord(9,0,401),new DictWord(5,10,475),new DictWord(7,10,1780),
				new DictWord(11,10,297),new DictWord(11,10,558),new DictWord(14,10,322),new DictWord(147,10,76),new DictWord(6,0,781),new DictWord(9,0,134),new DictWord(10,0,2),new DictWord(10
					,0,27),new DictWord(10,0,333),new DictWord(11,0,722),new DictWord(143,0,1),new DictWord(5,0,33),new DictWord(6,0,470),new DictWord(139,0,424),new DictWord(135,0,
					2006),new DictWord(12,0,783),new DictWord(135,10,1956),new DictWord(136,0,274),new DictWord(135,0,1882),new DictWord(132,0,794),new DictWord(135,0,1848)
				,new DictWord(5,10,944),new DictWord(134,10,1769),new DictWord(6,0,47),new DictWord(7,0,90),new DictWord(7,0,664),new DictWord(7,0,830),new DictWord(7,0,1380),new DictWord(7,0,
					2025),new DictWord(8,0,448),new DictWord(136,0,828),new DictWord(132,10,144),new DictWord(134,0,1199),new DictWord(4,11,395),new DictWord(139,11,762),new DictWord(
					135,11,1504),new DictWord(9,0,417),new DictWord(137,0,493),new DictWord(9,11,174),new DictWord(10,11,164),new DictWord(11,11,440),new DictWord(11,11,841
				),new DictWord(143,11,98),new DictWord(134,11,426),new DictWord(139,11,1002),new DictWord(134,0,295),new DictWord(134,0,816),new DictWord(6,10,247),new DictWord(137
					,10,555),new DictWord(133,0,1019),new DictWord(4,0,620),new DictWord(5,11,476),new DictWord(10,10,280),new DictWord(138,10,797),new DictWord(139,0,464),
				new DictWord(5,11,76),new DictWord(6,11,458),new DictWord(6,11,497),new DictWord(7,11,764),new DictWord(7,11,868),new DictWord(9,11,658),new DictWord(10,11,594),new DictWord(11
					,11,173),new DictWord(11,11,566),new DictWord(12,11,20),new DictWord(12,11,338),new DictWord(141,11,200),new DictWord(134,0,208),new DictWord(4,11,526),
				new DictWord(7,11,1029),new DictWord(135,11,1054),new DictWord(132,11,636),new DictWord(6,11,233),new DictWord(7,11,660),new DictWord(7,11,1124),new DictWord(17,11,
					31),new DictWord(19,11,22),new DictWord(151,11,14),new DictWord(10,0,442),new DictWord(133,10,428),new DictWord(10,0,930),new DictWord(140,0,778),new DictWord(6,0,
					68),new DictWord(7,0,448),new DictWord(7,0,1629),new DictWord(7,0,1769),new DictWord(7,0,1813),new DictWord(8,0,442),new DictWord(8,0,516),new DictWord(9,0,710),new DictWord(10
					,0,282),new DictWord(10,0,722),new DictWord(7,10,1717),new DictWord(138,10,546),new DictWord(134,0,1128),new DictWord(11,0,844),new DictWord(12,0,104),new DictWord(
					140,0,625),new DictWord(4,11,432),new DictWord(135,11,824),new DictWord(138,10,189),new DictWord(133,0,787),new DictWord(133,10,99),new DictWord(4,11,
					279),new DictWord(7,11,301),new DictWord(137,11,362),new DictWord(8,0,491),new DictWord(4,10,397),new DictWord(136,10,555),new DictWord(4,11,178),new DictWord(133,
					11,399),new DictWord(134,0,711),new DictWord(144,0,9),new DictWord(4,0,403),new DictWord(5,0,441),new DictWord(7,0,450),new DictWord(10,0,840),new DictWord(11,0,101
				),new DictWord(12,0,193),new DictWord(141,0,430),new DictWord(135,11,1246),new DictWord(12,10,398),new DictWord(20,10,39),new DictWord(21,10,11),new DictWord(150,10
					,41),new DictWord(4,10,485),new DictWord(7,10,353),new DictWord(135,10,1523),new DictWord(6,10,366),new DictWord(7,10,1384),new DictWord(7,10,1601),new DictWord(135
					,11,1912),new DictWord(7,0,396),new DictWord(10,0,160),new DictWord(135,11,396),new DictWord(137,10,282),new DictWord(134,11,1692),new DictWord(4,10,157
				),new DictWord(5,10,471),new DictWord(6,11,202),new DictWord(10,11,448),new DictWord(11,11,208),new DictWord(12,11,360),new DictWord(17,11,117),new DictWord(17,11,
					118),new DictWord(18,11,27),new DictWord(148,11,67),new DictWord(133,0,679),new DictWord(137,0,326),new DictWord(136,10,116),new DictWord(7,11,872),new DictWord(10,
					11,516),new DictWord(139,11,167),new DictWord(132,11,224),new DictWord(5,11,546),new DictWord(7,11,35),new DictWord(8,11,11),new DictWord(8,11,12),new DictWord(9,11
					,315),new DictWord(9,11,533),new DictWord(10,11,802),new DictWord(11,11,166),new DictWord(12,11,525),new DictWord(142,11,243),new DictWord(7,0,1128),new DictWord(
					135,11,1920),new DictWord(5,11,241),new DictWord(8,11,242),new DictWord(9,11,451),new DictWord(10,11,667),new DictWord(11,11,598),new DictWord(140,11,
					429),new DictWord(6,0,737),new DictWord(5,10,160),new DictWord(7,10,363),new DictWord(7,10,589),new DictWord(10,10,170),new DictWord(141,10,55),new DictWord(135,0,
					1796),new DictWord(142,11,254),new DictWord(4,0,574),new DictWord(7,0,350),new DictWord(7,0,1024),new DictWord(8,0,338),new DictWord(9,0,677),new DictWord(138,0,808
				),new DictWord(134,0,1096),new DictWord(137,11,516),new DictWord(7,0,405),new DictWord(10,0,491),new DictWord(4,10,108),new DictWord(4,11,366),new DictWord(139,10,
					498),new DictWord(11,11,337),new DictWord(142,11,303),new DictWord(134,11,1736),new DictWord(7,0,1081),new DictWord(140,11,364),new DictWord(7,10,1005),
				new DictWord(140,10,609),new DictWord(7,0,1676),new DictWord(4,10,895),new DictWord(133,10,772),new DictWord(135,0,2037),new DictWord(6,0,1207),new DictWord(11,11,
					916),new DictWord(142,11,419),new DictWord(14,11,140),new DictWord(148,11,41),new DictWord(6,11,331),new DictWord(136,11,623),new DictWord(9,0,944),new DictWord(9,0
					,969),new DictWord(9,0,1022),new DictWord(12,0,913),new DictWord(12,0,936),new DictWord(15,0,177),new DictWord(15,0,193),new DictWord(4,10,926),new DictWord(133,10,
					983),new DictWord(5,0,354),new DictWord(135,11,506),new DictWord(8,0,598),new DictWord(9,0,664),new DictWord(138,0,441),new DictWord(4,11,640),new DictWord(133,11,
					513),new DictWord(137,0,297),new DictWord(132,10,538),new DictWord(6,10,294),new DictWord(7,10,1267),new DictWord(136,10,624),new DictWord(7,0,1772),new DictWord(7,
					11,1888),new DictWord(8,11,289),new DictWord(11,11,45),new DictWord(12,11,278),new DictWord(140,11,537),new DictWord(135,10,1325),new DictWord(138,0,751
				),new DictWord(141,0,37),new DictWord(134,0,1828),new DictWord(132,10,757),new DictWord(132,11,394),new DictWord(6,0,257),new DictWord(135,0,1522),new DictWord(4,0,
					582),new DictWord(9,0,191),new DictWord(135,11,1931),new DictWord(7,11,574),new DictWord(7,11,1719),new DictWord(137,11,145),new DictWord(132,11,658),new DictWord(
					10,0,790),new DictWord(132,11,369),new DictWord(9,11,781),new DictWord(10,11,144),new DictWord(11,11,385),new DictWord(13,11,161),new DictWord(13,11,228
				),new DictWord(13,11,268),new DictWord(148,11,107),new DictWord(8,0,469),new DictWord(10,0,47),new DictWord(136,11,374),new DictWord(6,0,306),new DictWord(7,0,1140)
				,new DictWord(7,0,1340),new DictWord(8,0,133),new DictWord(138,0,449),new DictWord(139,0,1011),new DictWord(7,10,1875),new DictWord(139,10,124),new DictWord(4,11,
					344),new DictWord(6,11,498),new DictWord(139,11,323),new DictWord(137,0,299),new DictWord(132,0,837),new DictWord(133,11,906),new DictWord(5,0,329),new DictWord(8,0
					,260),new DictWord(138,0,10),new DictWord(134,0,1320),new DictWord(4,0,657),new DictWord(146,0,158),new DictWord(135,0,1191),new DictWord(152,0,7),new DictWord(6,0,
					1939),new DictWord(8,0,974),new DictWord(138,0,996),new DictWord(135,0,1665),new DictWord(11,11,126),new DictWord(139,11,287),new DictWord(143,0,8),new DictWord(14,
					11,149),new DictWord(14,11,399),new DictWord(143,11,57),new DictWord(5,0,66),new DictWord(7,0,1896),new DictWord(136,0,288),new DictWord(7,0,175),new DictWord(10,0,
					494),new DictWord(5,10,150),new DictWord(8,10,603),new DictWord(9,10,593),new DictWord(9,10,634),new DictWord(10,10,173),new DictWord(11,10,462),new DictWord(11,10,
					515),new DictWord(13,10,216),new DictWord(13,10,288),new DictWord(142,10,400),new DictWord(134,0,1643),new DictWord(136,11,21),new DictWord(4,0,21),new DictWord(5,0
					,91),new DictWord(5,0,648),new DictWord(5,0,750),new DictWord(5,0,781),new DictWord(6,0,54),new DictWord(6,0,112),new DictWord(6,0,402),new DictWord(6,0,1732),new DictWord(7,0,
					315),new DictWord(7,0,749),new DictWord(7,0,1427),new DictWord(7,0,1900),new DictWord(9,0,78),new DictWord(9,0,508),new DictWord(10,0,611),new DictWord(10,0,811),new DictWord(
					11,0,510),new DictWord(11,0,728),new DictWord(13,0,36),new DictWord(14,0,39),new DictWord(16,0,83),new DictWord(17,0,124),new DictWord(148,0,30),new DictWord(4,0,
					668),new DictWord(136,0,570),new DictWord(10,0,322),new DictWord(10,0,719),new DictWord(139,0,407),new DictWord(135,11,1381),new DictWord(136,11,193),new DictWord(
					12,10,108),new DictWord(141,10,291),new DictWord(132,11,616),new DictWord(136,11,692),new DictWord(8,0,125),new DictWord(8,0,369),new DictWord(8,0,524),
				new DictWord(10,0,486),new DictWord(11,0,13),new DictWord(11,0,381),new DictWord(11,0,736),new DictWord(11,0,766),new DictWord(11,0,845),new DictWord(13,0,114),new DictWord(13,
					0,292),new DictWord(142,0,47),new DictWord(134,0,1247),new DictWord(6,0,1684),new DictWord(6,0,1731),new DictWord(7,0,356),new DictWord(8,0,54),new DictWord(8,0,221
				),new DictWord(9,0,225),new DictWord(9,0,356),new DictWord(10,0,77),new DictWord(10,0,446),new DictWord(10,0,731),new DictWord(12,0,404),new DictWord(141,0,491),new DictWord(
					135,10,1777),new DictWord(4,11,305),new DictWord(4,10,493),new DictWord(144,10,55),new DictWord(4,0,951),new DictWord(6,0,1809),new DictWord(6,0,1849),new DictWord(
					8,0,846),new DictWord(8,0,866),new DictWord(8,0,899),new DictWord(10,0,896),new DictWord(12,0,694),new DictWord(142,0,468),new DictWord(5,11,214),new DictWord(7,11,
					603),new DictWord(8,11,611),new DictWord(9,11,686),new DictWord(10,11,88),new DictWord(11,11,459),new DictWord(11,11,496),new DictWord(12,11,463),new DictWord(12,11
					,590),new DictWord(13,11,0),new DictWord(142,11,214),new DictWord(132,0,411),new DictWord(4,0,80),new DictWord(133,0,44),new DictWord(140,11,74),new DictWord(143,0,
					31),new DictWord(7,0,669),new DictWord(6,10,568),new DictWord(7,10,1804),new DictWord(8,10,362),new DictWord(8,10,410),new DictWord(8,10,830),new DictWord(9,10,514)
				,new DictWord(11,10,649),new DictWord(142,10,157),new DictWord(7,0,673),new DictWord(134,11,1703),new DictWord(132,10,625),new DictWord(134,0,1303),new DictWord(5,0
					,299),new DictWord(135,0,1083),new DictWord(138,0,704),new DictWord(6,0,275),new DictWord(7,0,408),new DictWord(6,10,158),new DictWord(7,10,129),new DictWord(7,10,
					181),new DictWord(8,10,276),new DictWord(8,10,377),new DictWord(10,10,523),new DictWord(11,10,816),new DictWord(12,10,455),new DictWord(13,10,303),new DictWord(142,
					10,135),new DictWord(4,0,219),new DictWord(7,0,367),new DictWord(7,0,1713),new DictWord(7,0,1761),new DictWord(9,0,86),new DictWord(9,0,537),new DictWord(10,0,165),
				new DictWord(12,0,219),new DictWord(140,0,561),new DictWord(8,0,216),new DictWord(4,10,1),new DictWord(4,11,737),new DictWord(6,11,317),new DictWord(7,10,1143),new DictWord(7,
					10,1463),new DictWord(9,10,207),new DictWord(9,10,390),new DictWord(9,10,467),new DictWord(10,11,98),new DictWord(11,11,294),new DictWord(11,10,836),new DictWord(12
					,11,60),new DictWord(12,11,437),new DictWord(13,11,64),new DictWord(13,11,380),new DictWord(142,11,430),new DictWord(6,11,1758),new DictWord(8,11,520),new DictWord(
					9,11,345),new DictWord(9,11,403),new DictWord(142,11,350),new DictWord(5,11,47),new DictWord(10,11,242),new DictWord(138,11,579),new DictWord(5,11,139),
				new DictWord(7,11,1168),new DictWord(138,11,539),new DictWord(135,0,1319),new DictWord(4,10,295),new DictWord(4,10,723),new DictWord(5,10,895),new DictWord(7,10,
					1031),new DictWord(8,10,199),new DictWord(8,10,340),new DictWord(9,10,153),new DictWord(9,10,215),new DictWord(10,10,21),new DictWord(10,10,59),new DictWord(10,10,
					80),new DictWord(10,10,224),new DictWord(10,10,838),new DictWord(11,10,229),new DictWord(11,10,652),new DictWord(12,10,192),new DictWord(13,10,146),new DictWord(142
					,10,91),new DictWord(140,0,428),new DictWord(137,10,51),new DictWord(133,0,514),new DictWord(5,10,309),new DictWord(140,10,211),new DictWord(6,0,1010),new DictWord(
					5,10,125),new DictWord(8,10,77),new DictWord(138,10,15),new DictWord(4,0,55),new DictWord(5,0,301),new DictWord(6,0,571),new DictWord(142,0,49),new DictWord(146,0,
					102),new DictWord(136,11,370),new DictWord(4,11,107),new DictWord(7,11,613),new DictWord(8,11,358),new DictWord(8,11,439),new DictWord(8,11,504),new DictWord(9,11,
					501),new DictWord(10,11,383),new DictWord(139,11,477),new DictWord(132,11,229),new DictWord(133,0,364),new DictWord(133,10,439),new DictWord(4,11,903),new DictWord(
					135,11,1816),new DictWord(11,0,379),new DictWord(140,10,76),new DictWord(4,0,76),new DictWord(4,0,971),new DictWord(7,0,1550),new DictWord(9,0,306),new DictWord(9,0
					,430),new DictWord(9,0,663),new DictWord(10,0,683),new DictWord(10,0,921),new DictWord(11,0,427),new DictWord(11,0,753),new DictWord(12,0,334),new DictWord(12,0,442
				),new DictWord(14,0,258),new DictWord(14,0,366),new DictWord(143,0,131),new DictWord(137,0,52),new DictWord(4,11,47),new DictWord(6,11,373),new DictWord(7,11,452),new DictWord(
					7,11,543),new DictWord(7,11,1714),new DictWord(7,11,1856),new DictWord(9,11,6),new DictWord(11,11,257),new DictWord(139,11,391),new DictWord(4,10,8),new DictWord(7,
					10,1152),new DictWord(7,10,1153),new DictWord(7,10,1715),new DictWord(9,10,374),new DictWord(10,10,478),new DictWord(139,10,648),new DictWord(4,11,785),
				new DictWord(133,11,368),new DictWord(135,10,1099),new DictWord(135,11,860),new DictWord(5,11,980),new DictWord(134,11,1754),new DictWord(134,0,1258),new DictWord(6
					,0,1058),new DictWord(6,0,1359),new DictWord(7,11,536),new DictWord(7,11,1331),new DictWord(136,11,143),new DictWord(4,0,656),new DictWord(135,0,779),new DictWord(
					136,10,87),new DictWord(5,11,19),new DictWord(6,11,533),new DictWord(146,11,126),new DictWord(7,0,144),new DictWord(138,10,438),new DictWord(5,11,395),new DictWord(
					5,11,951),new DictWord(134,11,1776),new DictWord(135,0,1373),new DictWord(7,0,554),new DictWord(7,0,605),new DictWord(141,0,10),new DictWord(4,10,69),new DictWord(5
					,10,122),new DictWord(9,10,656),new DictWord(138,10,464),new DictWord(5,10,849),new DictWord(134,10,1633),new DictWord(5,0,838),new DictWord(5,0,841),new DictWord(
					134,0,1649),new DictWord(133,0,1012),new DictWord(139,10,499),new DictWord(7,10,476),new DictWord(7,10,1592),new DictWord(138,10,87),new DictWord(6,0,
					251),new DictWord(7,0,365),new DictWord(7,0,1357),new DictWord(7,0,1497),new DictWord(8,0,154),new DictWord(141,0,281),new DictWord(132,11,441),new DictWord(132,11,
					695),new DictWord(7,11,497),new DictWord(9,11,387),new DictWord(147,11,81),new DictWord(133,0,340),new DictWord(14,10,283),new DictWord(142,11,283),new DictWord(134
					,0,810),new DictWord(135,11,1894),new DictWord(139,0,495),new DictWord(5,11,284),new DictWord(6,11,49),new DictWord(6,11,350),new DictWord(7,11,1),new DictWord(7,11
					,377),new DictWord(7,11,1693),new DictWord(8,11,18),new DictWord(8,11,678),new DictWord(9,11,161),new DictWord(9,11,585),new DictWord(9,11,671),new DictWord(9,11,
					839),new DictWord(11,11,912),new DictWord(141,11,427),new DictWord(5,10,859),new DictWord(7,10,1160),new DictWord(8,10,107),new DictWord(9,10,291),new DictWord(9,10
					,439),new DictWord(10,10,663),new DictWord(11,10,609),new DictWord(140,10,197),new DictWord(8,0,261),new DictWord(9,0,144),new DictWord(9,0,466),new DictWord(10,0,
					370),new DictWord(12,0,470),new DictWord(13,0,144),new DictWord(142,0,348),new DictWord(137,0,897),new DictWord(6,0,248),new DictWord(9,0,546),new DictWord(10,0,535
				),new DictWord(11,0,681),new DictWord(141,0,135),new DictWord(4,0,358),new DictWord(135,0,1496),new DictWord(134,0,567),new DictWord(136,0,445),new DictWord(4,10,
					117),new DictWord(6,10,372),new DictWord(7,10,1905),new DictWord(142,10,323),new DictWord(4,10,722),new DictWord(139,10,471),new DictWord(6,0,697),new DictWord(134,
					0,996),new DictWord(7,11,2007),new DictWord(9,11,101),new DictWord(9,11,450),new DictWord(10,11,66),new DictWord(10,11,842),new DictWord(11,11,536),new DictWord(140
					,11,587),new DictWord(132,0,577),new DictWord(134,0,1336),new DictWord(9,10,5),new DictWord(12,10,216),new DictWord(12,10,294),new DictWord(12,10,298),new DictWord(
					12,10,400),new DictWord(12,10,518),new DictWord(13,10,229),new DictWord(143,10,139),new DictWord(6,0,174),new DictWord(138,0,917),new DictWord(134,10,
					1774),new DictWord(5,10,12),new DictWord(7,10,375),new DictWord(9,10,88),new DictWord(9,10,438),new DictWord(11,11,62),new DictWord(139,10,270),new DictWord(134,11,
					1766),new DictWord(6,11,0),new DictWord(7,11,84),new DictWord(7,10,816),new DictWord(7,10,1241),new DictWord(9,10,283),new DictWord(9,10,520),new DictWord(10,10,213
				),new DictWord(10,10,307),new DictWord(10,10,463),new DictWord(10,10,671),new DictWord(10,10,746),new DictWord(11,10,401),new DictWord(11,10,794),new DictWord(11,11
					,895),new DictWord(12,10,517),new DictWord(17,11,11),new DictWord(18,10,107),new DictWord(147,10,115),new DictWord(5,0,878),new DictWord(133,0,972),new DictWord(6,
					11,1665),new DictWord(7,11,256),new DictWord(7,11,1388),new DictWord(138,11,499),new DictWord(4,10,258),new DictWord(136,10,639),new DictWord(4,11,22),new DictWord(
					5,11,10),new DictWord(6,10,22),new DictWord(7,11,848),new DictWord(7,10,903),new DictWord(7,10,1963),new DictWord(8,11,97),new DictWord(138,10,577),new DictWord(5,
					10,681),new DictWord(136,10,782),new DictWord(133,11,481),new DictWord(132,0,351),new DictWord(4,10,664),new DictWord(5,10,804),new DictWord(139,10,1013
				),new DictWord(6,11,134),new DictWord(7,11,437),new DictWord(7,11,959),new DictWord(9,11,37),new DictWord(14,11,285),new DictWord(14,11,371),new DictWord(144,11,60)
				,new DictWord(7,11,486),new DictWord(8,11,155),new DictWord(11,11,93),new DictWord(140,11,164),new DictWord(132,0,286),new DictWord(7,0,438),new DictWord(7,0,627),new DictWord(
					7,0,1516),new DictWord(8,0,40),new DictWord(9,0,56),new DictWord(9,0,294),new DictWord(10,0,30),new DictWord(11,0,969),new DictWord(11,0,995),new DictWord(146,0,148
				),new DictWord(5,11,591),new DictWord(135,11,337),new DictWord(134,0,1950),new DictWord(133,10,32),new DictWord(138,11,500),new DictWord(5,11,380),new DictWord(5,11
					,650),new DictWord(136,11,310),new DictWord(4,11,364),new DictWord(7,11,1156),new DictWord(7,11,1187),new DictWord(137,11,409),new DictWord(4,0,738),new DictWord(
					134,11,482),new DictWord(4,11,781),new DictWord(6,11,487),new DictWord(7,11,926),new DictWord(8,11,263),new DictWord(139,11,500),new DictWord(135,11,418
				),new DictWord(6,0,2047),new DictWord(10,0,969),new DictWord(4,10,289),new DictWord(7,10,629),new DictWord(7,10,1698),new DictWord(7,10,1711),new DictWord(140,10,
					215),new DictWord(6,10,450),new DictWord(136,10,109),new DictWord(134,0,818),new DictWord(136,10,705),new DictWord(133,0,866),new DictWord(4,11,94),new DictWord(135
					,11,1265),new DictWord(132,11,417),new DictWord(134,0,1467),new DictWord(135,10,1238),new DictWord(4,0,972),new DictWord(6,0,1851),new DictWord(134,0,
					1857),new DictWord(134,0,355),new DictWord(133,0,116),new DictWord(132,0,457),new DictWord(135,11,1411),new DictWord(4,11,408),new DictWord(4,11,741),new DictWord(
					135,11,500),new DictWord(134,10,26),new DictWord(142,11,137),new DictWord(5,0,527),new DictWord(6,0,189),new DictWord(7,0,859),new DictWord(136,0,267),new DictWord(
					11,0,104),new DictWord(11,0,554),new DictWord(15,0,60),new DictWord(143,0,125),new DictWord(134,0,1613),new DictWord(4,10,414),new DictWord(5,10,467),new DictWord(9
					,10,654),new DictWord(10,10,451),new DictWord(12,10,59),new DictWord(141,10,375),new DictWord(135,10,17),new DictWord(134,0,116),new DictWord(135,11,541
				),new DictWord(135,10,955),new DictWord(6,11,73),new DictWord(135,11,177),new DictWord(133,11,576),new DictWord(134,0,886),new DictWord(133,0,487),new DictWord(4,0,
					86),new DictWord(5,0,667),new DictWord(5,0,753),new DictWord(6,0,316),new DictWord(6,0,455),new DictWord(135,0,946),new DictWord(142,11,231),new DictWord(150,0,45),
				new DictWord(134,0,863),new DictWord(134,0,1953),new DictWord(6,10,280),new DictWord(10,10,502),new DictWord(11,10,344),new DictWord(140,10,38),new DictWord(4,0,79)
				,new DictWord(7,0,1773),new DictWord(10,0,450),new DictWord(11,0,589),new DictWord(13,0,332),new DictWord(13,0,493),new DictWord(14,0,183),new DictWord(14,0,334),new DictWord(
					14,0,362),new DictWord(14,0,368),new DictWord(14,0,376),new DictWord(14,0,379),new DictWord(19,0,90),new DictWord(19,0,103),new DictWord(19,0,127),new DictWord(148,
					0,90),new DictWord(5,10,45),new DictWord(7,10,1161),new DictWord(11,10,448),new DictWord(11,10,880),new DictWord(13,10,139),new DictWord(13,10,407),new DictWord(15,
					10,16),new DictWord(17,10,95),new DictWord(18,10,66),new DictWord(18,10,88),new DictWord(18,10,123),new DictWord(149,10,7),new DictWord(136,10,777),new DictWord(4,
					10,410),new DictWord(135,10,521),new DictWord(135,10,1778),new DictWord(135,11,538),new DictWord(142,0,381),new DictWord(133,11,413),new DictWord(134,0,
					1142),new DictWord(6,0,1189),new DictWord(136,11,495),new DictWord(5,0,663),new DictWord(6,0,1962),new DictWord(134,0,2003),new DictWord(7,11,54),new DictWord(8,11,
					312),new DictWord(10,11,191),new DictWord(10,11,614),new DictWord(140,11,567),new DictWord(132,10,436),new DictWord(133,0,846),new DictWord(10,0,528),new DictWord(
					11,0,504),new DictWord(7,10,1587),new DictWord(135,10,1707),new DictWord(5,0,378),new DictWord(8,0,465),new DictWord(9,0,286),new DictWord(10,0,185),new DictWord(10
					,0,562),new DictWord(10,0,635),new DictWord(11,0,31),new DictWord(11,0,393),new DictWord(13,0,312),new DictWord(18,0,65),new DictWord(18,0,96),new DictWord(147,0,89
				),new DictWord(7,0,899),new DictWord(14,0,325),new DictWord(6,11,468),new DictWord(7,11,567),new DictWord(7,11,1478),new DictWord(8,11,530),new DictWord(142,11,290)
				,new DictWord(7,0,1880),new DictWord(9,0,680),new DictWord(139,0,798),new DictWord(134,0,1770),new DictWord(132,0,648),new DictWord(150,11,35),new DictWord(5,0,945)
				,new DictWord(6,0,1656),new DictWord(6,0,1787),new DictWord(7,0,167),new DictWord(8,0,824),new DictWord(9,0,391),new DictWord(10,0,375),new DictWord(139,0,185),new DictWord(6,
					11,484),new DictWord(135,11,822),new DictWord(134,0,2046),new DictWord(7,0,1645),new DictWord(8,0,352),new DictWord(137,0,249),new DictWord(132,0,152),new DictWord(
					6,0,611),new DictWord(135,0,1733),new DictWord(6,11,1724),new DictWord(135,11,2022),new DictWord(133,0,1006),new DictWord(141,11,96),new DictWord(5,0,
					420),new DictWord(135,0,1449),new DictWord(146,11,149),new DictWord(135,0,832),new DictWord(135,10,663),new DictWord(133,0,351),new DictWord(5,0,40),new DictWord(7,
					0,598),new DictWord(7,0,1638),new DictWord(8,0,78),new DictWord(9,0,166),new DictWord(9,0,640),new DictWord(9,0,685),new DictWord(9,0,773),new DictWord(11,0,215),new DictWord(
					13,0,65),new DictWord(14,0,172),new DictWord(14,0,317),new DictWord(145,0,6),new DictWord(8,0,60),new DictWord(9,0,343),new DictWord(139,0,769),new DictWord(134,0,
					1354),new DictWord(132,0,724),new DictWord(137,0,745),new DictWord(132,11,474),new DictWord(7,0,1951),new DictWord(8,0,765),new DictWord(8,0,772),new DictWord(140,0
					,671),new DictWord(7,0,108),new DictWord(8,0,219),new DictWord(8,0,388),new DictWord(9,0,775),new DictWord(11,0,275),new DictWord(140,0,464),new DictWord(137,0,639)
				,new DictWord(135,10,503),new DictWord(133,11,366),new DictWord(5,0,15),new DictWord(6,0,56),new DictWord(7,0,1758),new DictWord(8,0,500),new DictWord(9,0,730),new DictWord(11,
					0,331),new DictWord(13,0,150),new DictWord(14,0,282),new DictWord(5,11,305),new DictWord(9,11,560),new DictWord(141,11,208),new DictWord(4,10,113),new DictWord(5,10
					,163),new DictWord(5,10,735),new DictWord(7,10,1009),new DictWord(9,10,9),new DictWord(9,10,771),new DictWord(12,10,90),new DictWord(13,10,138),new DictWord(13,10,
					410),new DictWord(143,10,128),new DictWord(4,10,324),new DictWord(138,10,104),new DictWord(135,11,466),new DictWord(142,11,27),new DictWord(134,0,1886),
				new DictWord(5,0,205),new DictWord(6,0,438),new DictWord(9,0,711),new DictWord(4,11,480),new DictWord(6,11,167),new DictWord(6,11,302),new DictWord(6,11,1642),new DictWord(7,11
					,130),new DictWord(7,11,656),new DictWord(7,11,837),new DictWord(7,11,1547),new DictWord(7,11,1657),new DictWord(8,11,429),new DictWord(9,11,228),new DictWord(10,11
					,643),new DictWord(13,11,289),new DictWord(13,11,343),new DictWord(147,11,101),new DictWord(134,0,865),new DictWord(6,0,2025),new DictWord(136,0,965),new DictWord(7
					,11,278),new DictWord(10,11,739),new DictWord(11,11,708),new DictWord(141,11,348),new DictWord(133,0,534),new DictWord(135,11,1922),new DictWord(137,0,
					691),new DictWord(4,10,935),new DictWord(133,10,823),new DictWord(6,0,443),new DictWord(9,0,237),new DictWord(9,0,571),new DictWord(9,0,695),new DictWord(10,0,139),
				new DictWord(11,0,715),new DictWord(12,0,417),new DictWord(141,0,421),new DictWord(5,10,269),new DictWord(7,10,434),new DictWord(7,10,891),new DictWord(8,10,339),new DictWord(9
					,10,702),new DictWord(11,10,594),new DictWord(11,10,718),new DictWord(145,10,100),new DictWord(6,0,1555),new DictWord(7,0,878),new DictWord(9,10,485),new DictWord(
					141,10,264),new DictWord(134,10,1713),new DictWord(7,10,1810),new DictWord(11,10,866),new DictWord(12,10,103),new DictWord(141,10,495),new DictWord(135,
					10,900),new DictWord(6,0,1410),new DictWord(9,11,316),new DictWord(139,11,256),new DictWord(4,0,995),new DictWord(135,0,1033),new DictWord(132,0,578),new DictWord(
					10,0,881),new DictWord(12,0,740),new DictWord(12,0,743),new DictWord(140,0,759),new DictWord(132,0,822),new DictWord(133,0,923),new DictWord(142,10,143)
				,new DictWord(135,11,1696),new DictWord(6,11,363),new DictWord(7,11,1955),new DictWord(136,11,725),new DictWord(132,0,924),new DictWord(133,0,665),new DictWord(135,
					10,2029),new DictWord(135,0,1901),new DictWord(4,0,265),new DictWord(6,0,1092),new DictWord(6,0,1417),new DictWord(7,0,807),new DictWord(135,0,950),new DictWord(5,0
					,93),new DictWord(12,0,267),new DictWord(141,0,498),new DictWord(135,0,1451),new DictWord(5,11,813),new DictWord(135,11,2046),new DictWord(5,10,625),new DictWord(
					135,10,1617),new DictWord(135,0,747),new DictWord(6,0,788),new DictWord(137,0,828),new DictWord(7,0,184),new DictWord(11,0,307),new DictWord(11,0,400),new DictWord(
					15,0,130),new DictWord(5,11,712),new DictWord(7,11,1855),new DictWord(8,10,425),new DictWord(8,10,693),new DictWord(9,10,720),new DictWord(10,10,380),new DictWord(
					10,10,638),new DictWord(11,11,17),new DictWord(11,10,473),new DictWord(12,10,61),new DictWord(13,11,321),new DictWord(144,11,67),new DictWord(135,0,198)
				,new DictWord(6,11,320),new DictWord(7,11,781),new DictWord(7,11,1921),new DictWord(9,11,55),new DictWord(10,11,186),new DictWord(10,11,273),new DictWord(10,11,664)
				,new DictWord(10,11,801),new DictWord(11,11,996),new DictWord(11,11,997),new DictWord(13,11,157),new DictWord(142,11,170),new DictWord(136,11,271),new DictWord(135,
					0,994),new DictWord(7,11,103),new DictWord(7,11,863),new DictWord(11,11,184),new DictWord(14,11,299),new DictWord(145,11,62),new DictWord(11,10,551),new DictWord(
					142,10,159),new DictWord(5,0,233),new DictWord(5,0,320),new DictWord(6,0,140),new DictWord(8,0,295),new DictWord(8,0,615),new DictWord(136,11,615),new DictWord(133,
					0,978),new DictWord(4,0,905),new DictWord(6,0,1701),new DictWord(137,0,843),new DictWord(132,10,168),new DictWord(4,0,974),new DictWord(8,0,850),new DictWord(12,0,
					709),new DictWord(12,0,768),new DictWord(140,0,786),new DictWord(135,10,91),new DictWord(152,0,6),new DictWord(138,10,532),new DictWord(135,10,1884),new DictWord(
					132,0,509),new DictWord(6,0,1307),new DictWord(135,0,273),new DictWord(5,11,77),new DictWord(7,11,1455),new DictWord(10,11,843),new DictWord(19,11,73),new DictWord(
					150,11,5),new DictWord(132,11,458),new DictWord(135,11,1420),new DictWord(6,11,109),new DictWord(138,11,382),new DictWord(6,0,201),new DictWord(6,11,330
				),new DictWord(7,10,70),new DictWord(7,11,1084),new DictWord(10,10,240),new DictWord(11,11,142),new DictWord(147,10,93),new DictWord(7,0,1041),new DictWord(140,11,
					328),new DictWord(133,11,354),new DictWord(134,0,1040),new DictWord(133,0,693),new DictWord(134,0,774),new DictWord(139,0,234),new DictWord(132,0,336),new DictWord(
					7,0,1399),new DictWord(139,10,392),new DictWord(20,0,22),new DictWord(148,11,22),new DictWord(5,0,802),new DictWord(7,0,2021),new DictWord(136,0,805),new DictWord(5
					,0,167),new DictWord(5,0,899),new DictWord(6,0,410),new DictWord(137,0,777),new DictWord(137,0,789),new DictWord(134,0,1705),new DictWord(7,10,655),new DictWord(135
					,10,1844),new DictWord(4,10,145),new DictWord(6,10,176),new DictWord(7,10,395),new DictWord(137,10,562),new DictWord(132,10,501),new DictWord(135,0,10),
				new DictWord(5,0,11),new DictWord(6,0,117),new DictWord(6,0,485),new DictWord(7,0,1133),new DictWord(9,0,582),new DictWord(9,0,594),new DictWord(10,0,82),new DictWord(11,0,21),
				new DictWord(11,0,818),new DictWord(12,0,535),new DictWord(13,0,86),new DictWord(20,0,91),new DictWord(23,0,13),new DictWord(134,10,509),new DictWord(4,0,264),new DictWord(7,0,
					1067),new DictWord(8,0,204),new DictWord(8,0,385),new DictWord(139,0,953),new DictWord(139,11,737),new DictWord(138,0,56),new DictWord(134,0,1917),new DictWord(133,
					0,470),new DictWord(10,11,657),new DictWord(14,11,297),new DictWord(142,11,361),new DictWord(135,11,412),new DictWord(7,0,1198),new DictWord(7,11,1198),
				new DictWord(8,11,556),new DictWord(14,11,123),new DictWord(14,11,192),new DictWord(143,11,27),new DictWord(7,11,1985),new DictWord(14,11,146),new DictWord(15,11,42
				),new DictWord(16,11,23),new DictWord(17,11,86),new DictWord(146,11,17),new DictWord(11,0,1015),new DictWord(136,11,122),new DictWord(4,10,114),new DictWord(9,10,
					492),new DictWord(13,10,462),new DictWord(142,10,215),new DictWord(4,10,77),new DictWord(5,10,361),new DictWord(6,10,139),new DictWord(6,10,401),new DictWord(6,10,
					404),new DictWord(7,10,413),new DictWord(7,10,715),new DictWord(7,10,1716),new DictWord(11,10,279),new DictWord(12,10,179),new DictWord(12,10,258),new DictWord(13,
					10,244),new DictWord(142,10,358),new DictWord(134,10,1717),new DictWord(7,10,1061),new DictWord(8,10,82),new DictWord(11,10,250),new DictWord(12,10,420)
				,new DictWord(141,10,184),new DictWord(133,0,715),new DictWord(135,10,724),new DictWord(9,0,919),new DictWord(9,0,922),new DictWord(9,0,927),new DictWord(9,0,933),new DictWord(
					9,0,962),new DictWord(9,0,1000),new DictWord(9,0,1002),new DictWord(9,0,1021),new DictWord(12,0,890),new DictWord(12,0,907),new DictWord(12,0,930),new DictWord(15,0
					,207),new DictWord(15,0,228),new DictWord(15,0,238),new DictWord(149,0,61),new DictWord(8,0,794),new DictWord(9,0,400),new DictWord(10,0,298),new DictWord(142,0,228
				),new DictWord(5,11,430),new DictWord(5,11,932),new DictWord(6,11,131),new DictWord(7,11,417),new DictWord(9,11,522),new DictWord(11,11,314),new DictWord(141,11,390
				),new DictWord(132,0,867),new DictWord(8,0,724),new DictWord(132,11,507),new DictWord(137,11,261),new DictWord(4,11,343),new DictWord(133,11,511),new DictWord(6,0,
					190),new DictWord(7,0,768),new DictWord(135,0,1170),new DictWord(6,10,513),new DictWord(135,10,1052),new DictWord(7,11,455),new DictWord(138,11,591),new DictWord(
					134,0,1066),new DictWord(137,10,899),new DictWord(14,0,67),new DictWord(147,0,60),new DictWord(4,0,948),new DictWord(18,0,174),new DictWord(146,0,176),new DictWord(
					135,0,1023),new DictWord(7,10,1417),new DictWord(12,10,382),new DictWord(17,10,48),new DictWord(152,10,12),new DictWord(134,11,575),new DictWord(132,0,
					764),new DictWord(6,10,545),new DictWord(7,10,565),new DictWord(7,10,1669),new DictWord(10,10,114),new DictWord(11,10,642),new DictWord(140,10,618),new DictWord(6,0
					,137),new DictWord(9,0,75),new DictWord(9,0,253),new DictWord(10,0,194),new DictWord(138,0,444),new DictWord(4,0,756),new DictWord(133,10,5),new DictWord(8,0,1008),
				new DictWord(135,10,192),new DictWord(132,0,842),new DictWord(11,0,643),new DictWord(12,0,115),new DictWord(136,10,763),new DictWord(139,0,67),new DictWord(133,10,
					759),new DictWord(4,0,821),new DictWord(5,0,760),new DictWord(7,0,542),new DictWord(8,0,135),new DictWord(8,0,496),new DictWord(135,11,580),new DictWord(7,10,370),new DictWord(
					7,10,1007),new DictWord(7,10,1177),new DictWord(135,10,1565),new DictWord(135,10,1237),new DictWord(140,0,736),new DictWord(7,0,319),new DictWord(7,0,
					355),new DictWord(7,0,763),new DictWord(10,0,389),new DictWord(145,0,43),new DictWord(8,11,333),new DictWord(138,11,182),new DictWord(4,10,87),new DictWord(5,10,250
				),new DictWord(141,10,298),new DictWord(138,0,786),new DictWord(134,0,2044),new DictWord(8,11,330),new DictWord(140,11,477),new DictWord(135,11,1338),new DictWord(
					132,11,125),new DictWord(134,0,1030),new DictWord(134,0,1083),new DictWord(132,11,721),new DictWord(135,10,814),new DictWord(7,11,776),new DictWord(8,11
					,145),new DictWord(147,11,56),new DictWord(134,0,1226),new DictWord(4,10,57),new DictWord(7,10,1195),new DictWord(7,10,1438),new DictWord(7,10,1548),new DictWord(7,
					10,1835),new DictWord(7,10,1904),new DictWord(9,10,757),new DictWord(10,10,604),new DictWord(139,10,519),new DictWord(7,11,792),new DictWord(8,11,147),new DictWord(
					10,11,821),new DictWord(139,11,1021),new DictWord(137,11,797),new DictWord(4,0,58),new DictWord(5,0,286),new DictWord(6,0,319),new DictWord(7,0,402),new DictWord(7,
					0,1254),new DictWord(7,0,1903),new DictWord(8,0,356),new DictWord(140,0,408),new DictWord(4,0,389),new DictWord(4,0,815),new DictWord(9,0,181),new DictWord(9,0,255)
				,new DictWord(10,0,8),new DictWord(10,0,29),new DictWord(10,0,816),new DictWord(11,0,311),new DictWord(11,0,561),new DictWord(12,0,67),new DictWord(141,0,181),new DictWord(7,11
					,1472),new DictWord(135,11,1554),new DictWord(7,11,1071),new DictWord(7,11,1541),new DictWord(7,11,1767),new DictWord(7,11,1806),new DictWord(7,11,1999)
				,new DictWord(9,11,248),new DictWord(10,11,400),new DictWord(11,11,162),new DictWord(11,11,178),new DictWord(11,11,242),new DictWord(12,11,605),new DictWord(15,11,
					26),new DictWord(144,11,44),new DictWord(5,11,168),new DictWord(5,11,930),new DictWord(8,11,74),new DictWord(9,11,623),new DictWord(12,11,500),new DictWord(12,11,
					579),new DictWord(13,11,41),new DictWord(143,11,93),new DictWord(6,11,220),new DictWord(7,11,1101),new DictWord(141,11,105),new DictWord(5,0,474),new DictWord(7,0,
					507),new DictWord(4,10,209),new DictWord(7,11,507),new DictWord(135,10,902),new DictWord(132,0,427),new DictWord(6,0,413),new DictWord(7,10,335),new DictWord(7,10,
					1437),new DictWord(7,10,1668),new DictWord(8,10,553),new DictWord(8,10,652),new DictWord(8,10,656),new DictWord(9,10,558),new DictWord(11,10,743),new DictWord(149,
					10,18),new DictWord(132,0,730),new DictWord(6,11,19),new DictWord(7,11,1413),new DictWord(139,11,428),new DictWord(133,0,373),new DictWord(132,10,559),new DictWord(
					7,11,96),new DictWord(8,11,401),new DictWord(137,11,896),new DictWord(7,0,799),new DictWord(7,0,1972),new DictWord(5,10,1017),new DictWord(138,10,511),new DictWord(
					135,0,1793),new DictWord(7,11,1961),new DictWord(7,11,1965),new DictWord(8,11,702),new DictWord(136,11,750),new DictWord(8,11,150),new DictWord(8,11,737
				),new DictWord(140,11,366),new DictWord(132,0,322),new DictWord(133,10,709),new DictWord(8,11,800),new DictWord(9,11,148),new DictWord(9,11,872),new DictWord(9,11,
					890),new DictWord(11,11,309),new DictWord(11,11,1001),new DictWord(13,11,267),new DictWord(141,11,323),new DictWord(134,10,1745),new DictWord(7,0,290),new DictWord(
					136,10,206),new DictWord(7,0,1651),new DictWord(145,0,89),new DictWord(139,0,2),new DictWord(132,0,672),new DictWord(6,0,1860),new DictWord(8,0,905),new DictWord(10
					,0,844),new DictWord(10,0,846),new DictWord(10,0,858),new DictWord(12,0,699),new DictWord(12,0,746),new DictWord(140,0,772),new DictWord(135,11,424),new DictWord(
					133,11,547),new DictWord(133,0,737),new DictWord(5,11,490),new DictWord(6,11,615),new DictWord(6,11,620),new DictWord(135,11,683),new DictWord(6,0,746),
				new DictWord(134,0,1612),new DictWord(132,10,776),new DictWord(9,11,385),new DictWord(149,11,17),new DictWord(133,0,145),new DictWord(135,10,1272),new DictWord(7,0,
					884),new DictWord(140,0,124),new DictWord(4,0,387),new DictWord(135,0,1288),new DictWord(5,11,133),new DictWord(136,10,406),new DictWord(136,11,187),new DictWord(6,
					0,679),new DictWord(8,11,8),new DictWord(138,11,0),new DictWord(135,0,550),new DictWord(135,11,798),new DictWord(136,11,685),new DictWord(7,11,1086),new DictWord(
					145,11,46),new DictWord(8,10,175),new DictWord(10,10,168),new DictWord(138,10,573),new DictWord(135,0,1305),new DictWord(4,0,576),new DictWord(135,0,
					1263),new DictWord(6,0,686),new DictWord(134,0,1563),new DictWord(134,0,607),new DictWord(5,0,919),new DictWord(134,0,1673),new DictWord(148,0,37),new DictWord(8,11
					,774),new DictWord(10,11,670),new DictWord(140,11,51),new DictWord(133,10,784),new DictWord(139,10,882),new DictWord(4,0,82),new DictWord(5,0,333),new DictWord(5,0,
					904),new DictWord(6,0,207),new DictWord(7,0,325),new DictWord(7,0,1726),new DictWord(8,0,101),new DictWord(10,0,778),new DictWord(139,0,220),new DictWord(135,11,371
				),new DictWord(132,0,958),new DictWord(133,0,903),new DictWord(4,11,127),new DictWord(5,11,350),new DictWord(6,11,356),new DictWord(8,11,426),new DictWord(9,11,572)
				,new DictWord(10,11,247),new DictWord(139,11,312),new DictWord(140,0,147),new DictWord(6,11,59),new DictWord(7,11,885),new DictWord(9,11,603),new DictWord(141,11,
					397),new DictWord(10,0,367),new DictWord(9,10,14),new DictWord(9,10,441),new DictWord(139,10,9),new DictWord(11,10,966),new DictWord(12,10,287),new DictWord(13,10,
					342),new DictWord(13,10,402),new DictWord(15,10,110),new DictWord(143,10,163),new DictWord(134,0,690),new DictWord(132,0,705),new DictWord(9,0,651),new DictWord(11,
					0,971),new DictWord(13,0,273),new DictWord(7,10,1428),new DictWord(7,10,1640),new DictWord(7,10,1867),new DictWord(9,10,169),new DictWord(9,10,182),new DictWord(9,
					10,367),new DictWord(9,10,478),new DictWord(9,10,506),new DictWord(9,10,551),new DictWord(9,10,557),new DictWord(9,10,648),new DictWord(9,10,697),new DictWord(9,10,
					705),new DictWord(9,10,725),new DictWord(9,10,787),new DictWord(9,10,794),new DictWord(10,10,198),new DictWord(10,10,214),new DictWord(10,10,267),new DictWord(10,10
					,275),new DictWord(10,10,456),new DictWord(10,10,551),new DictWord(10,10,561),new DictWord(10,10,613),new DictWord(10,10,627),new DictWord(10,10,668),new DictWord(
					10,10,675),new DictWord(10,10,691),new DictWord(10,10,695),new DictWord(10,10,707),new DictWord(10,10,715),new DictWord(11,10,183),new DictWord(11,10,
					201),new DictWord(11,10,262),new DictWord(11,10,352),new DictWord(11,10,439),new DictWord(11,10,493),new DictWord(11,10,572),new DictWord(11,10,591),new DictWord(11
					,10,608),new DictWord(11,10,611),new DictWord(11,10,646),new DictWord(11,10,674),new DictWord(11,10,711),new DictWord(11,10,751),new DictWord(11,10,761)
				,new DictWord(11,10,776),new DictWord(11,10,785),new DictWord(11,10,850),new DictWord(11,10,853),new DictWord(11,10,862),new DictWord(11,10,865),new DictWord(11,10,
					868),new DictWord(11,10,875),new DictWord(11,10,898),new DictWord(11,10,902),new DictWord(11,10,903),new DictWord(11,10,910),new DictWord(11,10,932),new DictWord(11
					,10,942),new DictWord(11,10,957),new DictWord(11,10,967),new DictWord(11,10,972),new DictWord(12,10,148),new DictWord(12,10,195),new DictWord(12,10,220)
				,new DictWord(12,10,237),new DictWord(12,10,318),new DictWord(12,10,339),new DictWord(12,10,393),new DictWord(12,10,445),new DictWord(12,10,450),new DictWord(12,10,
					474),new DictWord(12,10,505),new DictWord(12,10,509),new DictWord(12,10,533),new DictWord(12,10,591),new DictWord(12,10,594),new DictWord(12,10,597),new DictWord(12
					,10,621),new DictWord(12,10,633),new DictWord(12,10,642),new DictWord(13,10,59),new DictWord(13,10,60),new DictWord(13,10,145),new DictWord(13,10,239),new DictWord(
					13,10,250),new DictWord(13,10,329),new DictWord(13,10,344),new DictWord(13,10,365),new DictWord(13,10,372),new DictWord(13,10,387),new DictWord(13,10,
					403),new DictWord(13,10,414),new DictWord(13,10,456),new DictWord(13,10,470),new DictWord(13,10,478),new DictWord(13,10,483),new DictWord(13,10,489),new DictWord(14
					,10,55),new DictWord(14,10,57),new DictWord(14,10,81),new DictWord(14,10,90),new DictWord(14,10,148),new DictWord(14,10,239),new DictWord(14,10,266),new DictWord(14
					,10,321),new DictWord(14,10,326),new DictWord(14,10,327),new DictWord(14,10,330),new DictWord(14,10,347),new DictWord(14,10,355),new DictWord(14,10,401)
				,new DictWord(14,10,404),new DictWord(14,10,411),new DictWord(14,10,414),new DictWord(14,10,416),new DictWord(14,10,420),new DictWord(15,10,61),new DictWord(15,10,
					74),new DictWord(15,10,87),new DictWord(15,10,88),new DictWord(15,10,94),new DictWord(15,10,96),new DictWord(15,10,116),new DictWord(15,10,149),new DictWord(15,10,
					154),new DictWord(16,10,50),new DictWord(16,10,63),new DictWord(16,10,73),new DictWord(17,10,2),new DictWord(17,10,66),new DictWord(17,10,92),new DictWord(17,10,103
				),new DictWord(17,10,112),new DictWord(17,10,120),new DictWord(18,10,50),new DictWord(18,10,54),new DictWord(18,10,82),new DictWord(18,10,86),new DictWord(18,10,90)
				,new DictWord(18,10,111),new DictWord(18,10,115),new DictWord(18,10,156),new DictWord(19,10,40),new DictWord(19,10,79),new DictWord(20,10,78),new DictWord(149,10,22
				),new DictWord(7,0,887),new DictWord(5,10,161),new DictWord(135,10,839),new DictWord(142,11,98),new DictWord(134,0,90),new DictWord(138,11,356),new DictWord(135,11,
					441),new DictWord(6,11,111),new DictWord(7,11,4),new DictWord(8,11,163),new DictWord(8,11,776),new DictWord(138,11,566),new DictWord(134,0,908),new DictWord(134,0,
					1261),new DictWord(7,0,813),new DictWord(12,0,497),new DictWord(141,0,56),new DictWord(134,0,1235),new DictWord(135,0,429),new DictWord(135,11,1994),new DictWord(
					138,0,904),new DictWord(6,0,125),new DictWord(7,0,1277),new DictWord(137,0,772),new DictWord(151,0,12),new DictWord(4,0,841),new DictWord(5,0,386),new DictWord(133,
					11,386),new DictWord(5,11,297),new DictWord(135,11,1038),new DictWord(6,0,860),new DictWord(6,0,1069),new DictWord(135,11,309),new DictWord(136,0,946),new DictWord(
					135,10,1814),new DictWord(141,11,418),new DictWord(136,11,363),new DictWord(10,0,768),new DictWord(139,0,787),new DictWord(22,11,30),new DictWord(150,11
					,33),new DictWord(6,0,160),new DictWord(7,0,1106),new DictWord(9,0,770),new DictWord(11,0,112),new DictWord(140,0,413),new DictWord(11,11,216),new DictWord(139,11,
					340),new DictWord(136,10,139),new DictWord(135,11,1390),new DictWord(135,11,808),new DictWord(132,11,280),new DictWord(12,0,271),new DictWord(17,0,109),
				new DictWord(7,10,643),new DictWord(136,10,236),new DictWord(140,11,54),new DictWord(4,11,421),new DictWord(133,11,548),new DictWord(11,0,719),new DictWord(12,0,36)
				,new DictWord(141,0,337),new DictWord(7,0,581),new DictWord(9,0,644),new DictWord(137,0,699),new DictWord(11,11,511),new DictWord(13,11,394),new DictWord(14,11,298)
				,new DictWord(14,11,318),new DictWord(146,11,103),new DictWord(7,0,304),new DictWord(9,0,646),new DictWord(9,0,862),new DictWord(11,0,696),new DictWord(12,0,208),new DictWord(
					15,0,79),new DictWord(147,0,108),new DictWord(4,0,631),new DictWord(7,0,1126),new DictWord(135,0,1536),new DictWord(135,11,1527),new DictWord(8,0,880),new DictWord(
					10,0,869),new DictWord(138,0,913),new DictWord(7,0,1513),new DictWord(5,10,54),new DictWord(6,11,254),new DictWord(9,11,109),new DictWord(138,11,103),new DictWord(
					135,0,981),new DictWord(133,11,729),new DictWord(132,10,744),new DictWord(132,0,434),new DictWord(134,0,550),new DictWord(7,0,930),new DictWord(10,0,476
				),new DictWord(13,0,452),new DictWord(19,0,104),new DictWord(6,11,1630),new DictWord(10,10,402),new DictWord(146,10,55),new DictWord(5,0,553),new DictWord(138,0,824
				),new DictWord(136,0,452),new DictWord(8,0,151),new DictWord(137,10,624),new DictWord(132,10,572),new DictWord(132,0,772),new DictWord(133,11,671),new DictWord(133,
					0,292),new DictWord(138,0,135),new DictWord(132,11,889),new DictWord(140,11,207),new DictWord(9,0,504),new DictWord(6,10,43),new DictWord(7,10,38),new DictWord(8,10
					,248),new DictWord(138,10,513),new DictWord(6,0,1089),new DictWord(135,11,1910),new DictWord(4,11,627),new DictWord(133,11,775),new DictWord(135,0,783),
				new DictWord(133,10,766),new DictWord(133,10,363),new DictWord(7,0,387),new DictWord(135,11,387),new DictWord(7,0,393),new DictWord(10,0,603),new DictWord(11,0,206)
				,new DictWord(7,11,202),new DictWord(11,11,362),new DictWord(11,11,948),new DictWord(140,11,388),new DictWord(6,11,507),new DictWord(7,11,451),new DictWord(8,11,389
				),new DictWord(12,11,490),new DictWord(13,11,16),new DictWord(13,11,215),new DictWord(13,11,351),new DictWord(18,11,132),new DictWord(147,11,125),new DictWord(4,0,
					912),new DictWord(9,0,232),new DictWord(135,11,841),new DictWord(6,10,258),new DictWord(140,10,409),new DictWord(5,10,249),new DictWord(148,10,82),new DictWord(136,
					11,566),new DictWord(6,0,977),new DictWord(135,11,1214),new DictWord(7,0,1973),new DictWord(136,0,716),new DictWord(135,0,98),new DictWord(133,0,733),new DictWord(5
					,11,912),new DictWord(134,11,1695),new DictWord(5,10,393),new DictWord(6,10,378),new DictWord(7,10,1981),new DictWord(9,10,32),new DictWord(9,10,591),new DictWord(
					10,10,685),new DictWord(10,10,741),new DictWord(142,10,382),new DictWord(133,10,788),new DictWord(10,0,19),new DictWord(11,0,911),new DictWord(7,10,1968
				),new DictWord(141,10,509),new DictWord(5,0,668),new DictWord(5,11,236),new DictWord(6,11,572),new DictWord(8,11,492),new DictWord(11,11,618),new DictWord(144,11,56
				),new DictWord(135,11,1789),new DictWord(4,0,360),new DictWord(5,0,635),new DictWord(5,0,700),new DictWord(5,10,58),new DictWord(5,10,171),new DictWord(5,10,683),new DictWord(6
					,10,291),new DictWord(6,10,566),new DictWord(7,10,1650),new DictWord(11,10,523),new DictWord(12,10,273),new DictWord(12,10,303),new DictWord(15,10,39),new DictWord(
					143,10,111),new DictWord(133,0,901),new DictWord(134,10,589),new DictWord(5,11,190),new DictWord(136,11,318),new DictWord(140,0,656),new DictWord(7,0,
					726),new DictWord(152,0,9),new DictWord(4,10,917),new DictWord(133,10,1005),new DictWord(135,10,1598),new DictWord(134,11,491),new DictWord(4,10,919),new DictWord(
					133,11,434),new DictWord(137,0,72),new DictWord(6,0,1269),new DictWord(6,0,1566),new DictWord(134,0,1621),new DictWord(9,0,463),new DictWord(10,0,595),new DictWord(
					4,10,255),new DictWord(5,10,302),new DictWord(6,10,132),new DictWord(7,10,128),new DictWord(7,10,283),new DictWord(7,10,1299),new DictWord(10,10,52),new DictWord(10
					,10,514),new DictWord(11,10,925),new DictWord(13,10,92),new DictWord(142,10,309),new DictWord(135,0,1454),new DictWord(134,0,1287),new DictWord(11,0,600
				),new DictWord(13,0,245),new DictWord(137,10,173),new DictWord(136,0,989),new DictWord(7,0,164),new DictWord(7,0,1571),new DictWord(9,0,107),new DictWord(140,0,225)
				,new DictWord(6,0,1061),new DictWord(141,10,442),new DictWord(4,0,27),new DictWord(5,0,484),new DictWord(5,0,510),new DictWord(6,0,434),new DictWord(7,0,1000),new DictWord(7,0,
					1098),new DictWord(136,0,2),new DictWord(7,11,85),new DictWord(7,11,247),new DictWord(8,11,585),new DictWord(10,11,163),new DictWord(138,11,316),new DictWord(11,11,
					103),new DictWord(142,11,0),new DictWord(134,0,1127),new DictWord(4,0,460),new DictWord(134,0,852),new DictWord(134,10,210),new DictWord(4,0,932),new DictWord(133,0
					,891),new DictWord(6,0,588),new DictWord(147,11,83),new DictWord(8,0,625),new DictWord(4,10,284),new DictWord(134,10,223),new DictWord(134,0,76),new DictWord(8,0,92
				),new DictWord(137,0,221),new DictWord(4,11,124),new DictWord(10,11,457),new DictWord(11,11,121),new DictWord(11,11,169),new DictWord(11,11,422),new DictWord(11,11,
					870),new DictWord(12,11,214),new DictWord(13,11,389),new DictWord(14,11,187),new DictWord(143,11,77),new DictWord(9,11,618),new DictWord(138,11,482),new DictWord(4,
					10,218),new DictWord(7,10,526),new DictWord(143,10,137),new DictWord(13,0,9),new DictWord(14,0,104),new DictWord(14,0,311),new DictWord(4,10,270),new DictWord(5,10,
					192),new DictWord(6,10,332),new DictWord(135,10,1322),new DictWord(140,10,661),new DictWord(135,11,1193),new DictWord(6,11,107),new DictWord(7,11,638),new DictWord(
					7,11,1632),new DictWord(137,11,396),new DictWord(132,0,763),new DictWord(4,0,622),new DictWord(5,11,370),new DictWord(134,11,1756),new DictWord(133,0,
					253),new DictWord(135,0,546),new DictWord(9,0,73),new DictWord(10,0,110),new DictWord(14,0,185),new DictWord(17,0,119),new DictWord(133,11,204),new DictWord(7,0,624
				),new DictWord(7,0,916),new DictWord(10,0,256),new DictWord(139,0,87),new DictWord(7,10,379),new DictWord(8,10,481),new DictWord(137,10,377),new DictWord(5,0,212),new DictWord(
					12,0,35),new DictWord(13,0,382),new DictWord(5,11,970),new DictWord(134,11,1706),new DictWord(9,0,746),new DictWord(5,10,1003),new DictWord(134,10,149),
				new DictWord(10,0,150),new DictWord(11,0,849),new DictWord(13,0,330),new DictWord(8,10,262),new DictWord(9,10,627),new DictWord(11,10,214),new DictWord(11,10,404),new DictWord(
					11,10,457),new DictWord(11,10,780),new DictWord(11,10,913),new DictWord(13,10,401),new DictWord(142,10,200),new DictWord(134,0,1466),new DictWord(135,11
					,3),new DictWord(6,0,1299),new DictWord(4,11,35),new DictWord(5,11,121),new DictWord(5,11,483),new DictWord(5,11,685),new DictWord(6,11,489),new DictWord(7,11,1204)
				,new DictWord(136,11,394),new DictWord(135,10,742),new DictWord(4,10,142),new DictWord(136,10,304),new DictWord(4,11,921),new DictWord(133,11,1007),new DictWord(134
					,0,1518),new DictWord(6,0,1229),new DictWord(135,0,1175),new DictWord(133,0,816),new DictWord(12,0,159),new DictWord(4,10,471),new DictWord(4,11,712),new DictWord(5
					,10,51),new DictWord(6,10,602),new DictWord(7,10,925),new DictWord(8,10,484),new DictWord(138,10,195),new DictWord(134,11,1629),new DictWord(5,0,869),new DictWord(5
					,0,968),new DictWord(6,0,1626),new DictWord(8,0,734),new DictWord(136,0,784),new DictWord(4,0,542),new DictWord(6,0,1716),new DictWord(6,0,1727),new DictWord(7,0,
					1082),new DictWord(7,0,1545),new DictWord(8,0,56),new DictWord(8,0,118),new DictWord(8,0,412),new DictWord(8,0,564),new DictWord(9,0,888),new DictWord(9,0,908),new DictWord(10,
					0,50),new DictWord(10,0,423),new DictWord(11,0,685),new DictWord(11,0,697),new DictWord(11,0,933),new DictWord(12,0,299),new DictWord(13,0,126),new DictWord(13,0,
					136),new DictWord(13,0,170),new DictWord(13,0,190),new DictWord(136,10,688),new DictWord(132,10,697),new DictWord(4,0,232),new DictWord(9,0,202),new DictWord(10,0,
					474),new DictWord(140,0,433),new DictWord(136,0,212),new DictWord(6,0,108),new DictWord(7,0,1003),new DictWord(7,0,1181),new DictWord(8,0,111),new DictWord(136,0,
					343),new DictWord(5,10,221),new DictWord(135,11,1255),new DictWord(133,11,485),new DictWord(134,0,1712),new DictWord(142,0,216),new DictWord(5,0,643),new DictWord(6
					,0,516),new DictWord(4,11,285),new DictWord(5,11,317),new DictWord(6,11,301),new DictWord(7,11,7),new DictWord(8,11,153),new DictWord(10,11,766),new DictWord(11,11,
					468),new DictWord(12,11,467),new DictWord(141,11,143),new DictWord(4,0,133),new DictWord(7,0,711),new DictWord(7,0,1298),new DictWord(135,0,1585),new DictWord(134,0
					,650),new DictWord(135,11,512),new DictWord(6,0,99),new DictWord(7,0,1808),new DictWord(145,0,57),new DictWord(6,0,246),new DictWord(6,0,574),new DictWord(7,0,428),
				new DictWord(9,0,793),new DictWord(10,0,669),new DictWord(11,0,485),new DictWord(11,0,840),new DictWord(12,0,300),new DictWord(14,0,250),new DictWord(145,0,55),new DictWord(4,
					10,132),new DictWord(5,10,69),new DictWord(135,10,1242),new DictWord(136,0,1023),new DictWord(7,0,302),new DictWord(132,10,111),new DictWord(135,0,1871)
				,new DictWord(132,0,728),new DictWord(9,0,252),new DictWord(132,10,767),new DictWord(6,0,461),new DictWord(7,0,1590),new DictWord(7,10,1416),new DictWord(7,10,2005)
				,new DictWord(8,10,131),new DictWord(8,10,466),new DictWord(9,10,672),new DictWord(13,10,252),new DictWord(148,10,103),new DictWord(6,0,323),new DictWord(135,0,1564
				),new DictWord(7,0,461),new DictWord(136,0,775),new DictWord(6,10,44),new DictWord(136,10,368),new DictWord(139,0,172),new DictWord(132,0,464),new DictWord(4,10,570
				),new DictWord(133,10,120),new DictWord(137,11,269),new DictWord(6,10,227),new DictWord(135,10,1589),new DictWord(6,11,1719),new DictWord(6,11,1735),new DictWord(7,
					11,2016),new DictWord(7,11,2020),new DictWord(8,11,837),new DictWord(137,11,852),new DictWord(7,0,727),new DictWord(146,0,73),new DictWord(132,0,1023),new DictWord(
					135,11,852),new DictWord(135,10,1529),new DictWord(136,0,577),new DictWord(138,11,568),new DictWord(134,0,1037),new DictWord(8,11,67),new DictWord(138,
					11,419),new DictWord(4,0,413),new DictWord(5,0,677),new DictWord(8,0,432),new DictWord(140,0,280),new DictWord(10,0,600),new DictWord(6,10,1667),new DictWord(7,11,
					967),new DictWord(7,10,2036),new DictWord(141,11,11),new DictWord(6,10,511),new DictWord(140,10,132),new DictWord(6,0,799),new DictWord(5,10,568),new DictWord(6,10,
					138),new DictWord(135,10,1293),new DictWord(8,0,159),new DictWord(4,10,565),new DictWord(136,10,827),new DictWord(7,0,646),new DictWord(7,0,1730),new DictWord(11,0,
					446),new DictWord(141,0,178),new DictWord(4,10,922),new DictWord(133,10,1023),new DictWord(135,11,11),new DictWord(132,0,395),new DictWord(11,0,145),new DictWord(
					135,10,1002),new DictWord(9,0,174),new DictWord(10,0,164),new DictWord(11,0,440),new DictWord(11,0,514),new DictWord(11,0,841),new DictWord(15,0,98),new DictWord(
					149,0,20),new DictWord(134,0,426),new DictWord(10,0,608),new DictWord(139,0,1002),new DictWord(7,11,320),new DictWord(8,11,51),new DictWord(12,11,481),new DictWord(
					12,11,570),new DictWord(148,11,106),new DictWord(9,0,977),new DictWord(9,0,983),new DictWord(132,11,445),new DictWord(138,0,250),new DictWord(139,0,100)
				,new DictWord(6,0,1982),new DictWord(136,10,402),new DictWord(133,11,239),new DictWord(4,10,716),new DictWord(141,10,31),new DictWord(5,0,476),new DictWord(7,11,83)
				,new DictWord(7,11,1990),new DictWord(8,11,130),new DictWord(139,11,720),new DictWord(8,10,691),new DictWord(136,10,731),new DictWord(5,11,123),new DictWord(6,11,
					530),new DictWord(7,11,348),new DictWord(135,11,1419),new DictWord(5,0,76),new DictWord(6,0,458),new DictWord(6,0,497),new DictWord(7,0,868),new DictWord(9,0,658),new DictWord(
					10,0,594),new DictWord(11,0,173),new DictWord(11,0,566),new DictWord(12,0,20),new DictWord(12,0,338),new DictWord(141,0,200),new DictWord(9,11,139),new DictWord(10,
					11,399),new DictWord(11,11,469),new DictWord(12,11,634),new DictWord(141,11,223),new DictWord(9,10,840),new DictWord(138,10,803),new DictWord(133,10,847
				),new DictWord(11,11,223),new DictWord(140,11,168),new DictWord(132,11,210),new DictWord(8,0,447),new DictWord(9,10,53),new DictWord(9,10,268),new DictWord(9,10,901
				),new DictWord(10,10,518),new DictWord(10,10,829),new DictWord(11,10,188),new DictWord(13,10,74),new DictWord(14,10,46),new DictWord(15,10,17),new DictWord(15,10,33
				),new DictWord(17,10,40),new DictWord(18,10,36),new DictWord(19,10,20),new DictWord(22,10,1),new DictWord(152,10,2),new DictWord(4,0,526),new DictWord(7,0,1029),new DictWord(
					135,0,1054),new DictWord(19,11,59),new DictWord(150,11,2),new DictWord(4,0,636),new DictWord(6,0,1875),new DictWord(6,0,1920),new DictWord(9,0,999),new DictWord(12,
					0,807),new DictWord(12,0,825),new DictWord(15,0,179),new DictWord(15,0,190),new DictWord(18,0,182),new DictWord(136,10,532),new DictWord(6,0,1699),new DictWord(7,0,
					660),new DictWord(7,0,1124),new DictWord(17,0,31),new DictWord(19,0,22),new DictWord(151,0,14),new DictWord(135,10,681),new DictWord(132,11,430),new DictWord(140,10
					,677),new DictWord(4,10,684),new DictWord(136,10,384),new DictWord(132,11,756),new DictWord(133,11,213),new DictWord(7,0,188),new DictWord(7,10,110),new DictWord(8,
					10,290),new DictWord(8,10,591),new DictWord(9,10,382),new DictWord(9,10,649),new DictWord(11,10,71),new DictWord(11,10,155),new DictWord(11,10,313),new DictWord(12,
					10,5),new DictWord(13,10,325),new DictWord(142,10,287),new DictWord(7,10,360),new DictWord(7,10,425),new DictWord(9,10,66),new DictWord(9,10,278),new DictWord(138,
					10,644),new DictWord(142,11,164),new DictWord(4,0,279),new DictWord(7,0,301),new DictWord(137,0,362),new DictWord(134,11,586),new DictWord(135,0,1743),new DictWord(
					4,0,178),new DictWord(133,0,399),new DictWord(4,10,900),new DictWord(133,10,861),new DictWord(5,10,254),new DictWord(7,10,985),new DictWord(136,10,73),new DictWord(
					133,11,108),new DictWord(7,10,1959),new DictWord(136,10,683),new DictWord(133,11,219),new DictWord(4,11,193),new DictWord(5,11,916),new DictWord(7,11,
					364),new DictWord(10,11,398),new DictWord(10,11,726),new DictWord(11,11,317),new DictWord(11,11,626),new DictWord(12,11,142),new DictWord(12,11,288),new DictWord(12
					,11,678),new DictWord(13,11,313),new DictWord(15,11,113),new DictWord(18,11,114),new DictWord(21,11,30),new DictWord(150,11,53),new DictWord(6,11,241),new DictWord(
					7,11,907),new DictWord(8,11,832),new DictWord(9,11,342),new DictWord(10,11,729),new DictWord(11,11,284),new DictWord(11,11,445),new DictWord(11,11,651),
				new DictWord(11,11,863),new DictWord(13,11,398),new DictWord(146,11,99),new DictWord(132,0,872),new DictWord(134,0,831),new DictWord(134,0,1692),new DictWord(6,0,
					202),new DictWord(6,0,1006),new DictWord(9,0,832),new DictWord(10,0,636),new DictWord(11,0,208),new DictWord(12,0,360),new DictWord(17,0,118),new DictWord(18,0,27),
				new DictWord(20,0,67),new DictWord(137,11,734),new DictWord(132,10,725),new DictWord(7,11,993),new DictWord(138,11,666),new DictWord(134,0,1954),new DictWord(134,10
					,196),new DictWord(7,0,872),new DictWord(10,0,516),new DictWord(139,0,167),new DictWord(133,10,831),new DictWord(4,11,562),new DictWord(9,11,254),new DictWord(139,
					11,879),new DictWord(137,0,313),new DictWord(4,0,224),new DictWord(132,11,786),new DictWord(11,0,24),new DictWord(12,0,170),new DictWord(136,10,723),new DictWord(5,
					0,546),new DictWord(7,0,35),new DictWord(8,0,11),new DictWord(8,0,12),new DictWord(9,0,315),new DictWord(9,0,533),new DictWord(10,0,802),new DictWord(11,0,166),new DictWord(12,
					0,525),new DictWord(142,0,243),new DictWord(7,0,1937),new DictWord(13,10,80),new DictWord(13,10,437),new DictWord(145,10,74),new DictWord(5,0,241),new DictWord(8,0,
					242),new DictWord(9,0,451),new DictWord(10,0,667),new DictWord(11,0,598),new DictWord(140,0,429),new DictWord(150,0,46),new DictWord(6,0,1273),new DictWord(137,0,
					830),new DictWord(5,10,848),new DictWord(6,10,66),new DictWord(136,10,764),new DictWord(6,0,825),new DictWord(134,0,993),new DictWord(4,0,1006),new DictWord(10,0,
					327),new DictWord(13,0,271),new DictWord(4,10,36),new DictWord(7,10,1387),new DictWord(139,10,755),new DictWord(134,0,1023),new DictWord(135,0,1580),new DictWord(4,
					0,366),new DictWord(137,0,516),new DictWord(132,10,887),new DictWord(6,0,1736),new DictWord(135,0,1891),new DictWord(6,11,216),new DictWord(7,11,901),new DictWord(7
					,11,1343),new DictWord(136,11,493),new DictWord(6,10,165),new DictWord(138,10,388),new DictWord(7,11,341),new DictWord(139,11,219),new DictWord(4,10,719
				),new DictWord(135,10,155),new DictWord(134,0,1935),new DictWord(132,0,826),new DictWord(6,0,331),new DictWord(6,0,1605),new DictWord(8,0,623),new DictWord(11,0,139
				),new DictWord(139,0,171),new DictWord(135,11,1734),new DictWord(10,11,115),new DictWord(11,11,420),new DictWord(12,11,154),new DictWord(13,11,404),new DictWord(14,
					11,346),new DictWord(15,11,54),new DictWord(143,11,112),new DictWord(7,0,288),new DictWord(4,10,353),new DictWord(6,10,146),new DictWord(6,10,1789),new DictWord(7,
					10,990),new DictWord(7,10,1348),new DictWord(9,10,665),new DictWord(9,10,898),new DictWord(11,10,893),new DictWord(142,10,212),new DictWord(6,0,916),new DictWord(
					134,0,1592),new DictWord(7,0,1888),new DictWord(4,10,45),new DictWord(135,10,1257),new DictWord(5,11,1011),new DictWord(136,11,701),new DictWord(139,11,
					596),new DictWord(4,11,54),new DictWord(5,11,666),new DictWord(7,11,1039),new DictWord(7,11,1130),new DictWord(9,11,195),new DictWord(138,11,302),new DictWord(134,0
					,1471),new DictWord(134,0,1570),new DictWord(132,0,394),new DictWord(140,10,65),new DictWord(136,10,816),new DictWord(135,0,1931),new DictWord(7,0,574),
				new DictWord(135,0,1719),new DictWord(134,11,467),new DictWord(132,0,658),new DictWord(9,0,781),new DictWord(10,0,144),new DictWord(11,0,385),new DictWord(13,0,161)
				,new DictWord(13,0,228),new DictWord(13,0,268),new DictWord(20,0,107),new DictWord(134,11,1669),new DictWord(136,0,374),new DictWord(135,0,735),new DictWord(4,0,344
				),new DictWord(6,0,498),new DictWord(139,0,323),new DictWord(7,0,586),new DictWord(7,0,1063),new DictWord(6,10,559),new DictWord(134,10,1691),new DictWord(137,0,155
				),new DictWord(133,0,906),new DictWord(7,11,122),new DictWord(9,11,259),new DictWord(10,11,84),new DictWord(11,11,470),new DictWord(12,11,541),new DictWord(141,11,
					379),new DictWord(134,0,1139),new DictWord(10,0,108),new DictWord(139,0,116),new DictWord(134,10,456),new DictWord(133,10,925),new DictWord(5,11,82),new DictWord(5,
					11,131),new DictWord(7,11,1755),new DictWord(8,11,31),new DictWord(9,11,168),new DictWord(9,11,764),new DictWord(139,11,869),new DictWord(134,11,605),new DictWord(5
					,11,278),new DictWord(137,11,68),new DictWord(4,11,163),new DictWord(5,11,201),new DictWord(5,11,307),new DictWord(5,11,310),new DictWord(6,11,335),new DictWord(7,
					11,284),new DictWord(136,11,165),new DictWord(135,11,1660),new DictWord(6,11,33),new DictWord(135,11,1244),new DictWord(4,0,616),new DictWord(136,11,483
				),new DictWord(8,0,857),new DictWord(8,0,902),new DictWord(8,0,910),new DictWord(10,0,879),new DictWord(12,0,726),new DictWord(4,11,199),new DictWord(139,11,34),new DictWord(
					136,0,692),new DictWord(6,10,193),new DictWord(7,10,240),new DictWord(7,10,1682),new DictWord(10,10,51),new DictWord(10,10,640),new DictWord(11,10,410),
				new DictWord(13,10,82),new DictWord(14,10,247),new DictWord(14,10,331),new DictWord(142,10,377),new DictWord(6,0,823),new DictWord(134,0,983),new DictWord(139,10,
					411),new DictWord(132,0,305),new DictWord(136,10,633),new DictWord(138,11,203),new DictWord(134,0,681),new DictWord(6,11,326),new DictWord(7,11,677),new DictWord(
					137,11,425),new DictWord(5,0,214),new DictWord(7,0,603),new DictWord(8,0,611),new DictWord(9,0,686),new DictWord(10,0,88),new DictWord(11,0,459),new DictWord(11,0,
					496),new DictWord(12,0,463),new DictWord(12,0,590),new DictWord(141,0,0),new DictWord(136,0,1004),new DictWord(142,0,23),new DictWord(134,0,1703),new DictWord(147,
					11,8),new DictWord(145,11,56),new DictWord(135,0,1443),new DictWord(4,10,237),new DictWord(135,10,514),new DictWord(6,0,714),new DictWord(145,0,19),new DictWord(5,
					11,358),new DictWord(7,11,473),new DictWord(7,11,1184),new DictWord(10,11,662),new DictWord(13,11,212),new DictWord(13,11,304),new DictWord(13,11,333),new DictWord(
					145,11,98),new DictWord(4,0,737),new DictWord(10,0,98),new DictWord(11,0,294),new DictWord(12,0,60),new DictWord(12,0,437),new DictWord(13,0,64),new DictWord(13,0,
					380),new DictWord(142,0,430),new DictWord(6,10,392),new DictWord(7,10,65),new DictWord(135,10,2019),new DictWord(6,0,1758),new DictWord(8,0,520),new DictWord(9,0,
					345),new DictWord(9,0,403),new DictWord(142,0,350),new DictWord(5,0,47),new DictWord(10,0,242),new DictWord(138,0,579),new DictWord(5,0,139),new DictWord(7,0,1168),
				new DictWord(138,0,539),new DictWord(134,0,1459),new DictWord(13,0,388),new DictWord(141,11,388),new DictWord(134,0,253),new DictWord(7,10,1260),new DictWord(135,10
					,1790),new DictWord(10,0,252),new DictWord(9,10,222),new DictWord(139,10,900),new DictWord(140,0,745),new DictWord(133,11,946),new DictWord(4,0,107),new DictWord(7,
					0,613),new DictWord(8,0,439),new DictWord(8,0,504),new DictWord(9,0,501),new DictWord(10,0,383),new DictWord(139,0,477),new DictWord(135,11,1485),new DictWord(132,0
					,871),new DictWord(7,11,411),new DictWord(7,11,590),new DictWord(8,11,631),new DictWord(9,11,323),new DictWord(10,11,355),new DictWord(11,11,491),new DictWord(12,11
					,143),new DictWord(12,11,402),new DictWord(13,11,73),new DictWord(14,11,408),new DictWord(15,11,107),new DictWord(146,11,71),new DictWord(132,0,229),new DictWord(
					132,0,903),new DictWord(140,0,71),new DictWord(133,0,549),new DictWord(4,0,47),new DictWord(6,0,373),new DictWord(7,0,452),new DictWord(7,0,543),new DictWord(7,0,
					1828),new DictWord(7,0,1856),new DictWord(9,0,6),new DictWord(11,0,257),new DictWord(139,0,391),new DictWord(7,11,1467),new DictWord(8,11,328),new DictWord(10,11,
					544),new DictWord(11,11,955),new DictWord(13,11,320),new DictWord(145,11,83),new DictWord(5,0,980),new DictWord(134,0,1754),new DictWord(136,0,865),new DictWord(5,0
					,705),new DictWord(137,0,606),new DictWord(7,0,161),new DictWord(8,10,201),new DictWord(136,10,605),new DictWord(143,11,35),new DictWord(5,11,835),new DictWord(6,11
					,483),new DictWord(140,10,224),new DictWord(7,0,536),new DictWord(7,0,1331),new DictWord(136,0,143),new DictWord(134,0,1388),new DictWord(5,0,724),new DictWord(10,0
					,305),new DictWord(11,0,151),new DictWord(12,0,33),new DictWord(12,0,121),new DictWord(12,0,381),new DictWord(17,0,3),new DictWord(17,0,27),new DictWord(17,0,78),new DictWord(
					18,0,18),new DictWord(19,0,54),new DictWord(149,0,5),new DictWord(4,10,523),new DictWord(133,10,638),new DictWord(5,0,19),new DictWord(134,0,533),new DictWord(5,0,
					395),new DictWord(5,0,951),new DictWord(134,0,1776),new DictWord(135,0,1908),new DictWord(132,0,846),new DictWord(10,0,74),new DictWord(11,0,663),new DictWord(12,0,
					210),new DictWord(13,0,166),new DictWord(13,0,310),new DictWord(14,0,373),new DictWord(18,0,95),new DictWord(19,0,43),new DictWord(6,10,242),new DictWord(7,10,227),
				new DictWord(7,10,1581),new DictWord(8,10,104),new DictWord(9,10,113),new DictWord(9,10,220),new DictWord(9,10,427),new DictWord(10,10,239),new DictWord(11,10,579),
				new DictWord(11,10,1023),new DictWord(13,10,4),new DictWord(13,10,204),new DictWord(13,10,316),new DictWord(148,10,86),new DictWord(9,11,716),new DictWord(11,11,108
				),new DictWord(13,11,123),new DictWord(14,11,252),new DictWord(19,11,38),new DictWord(21,11,3),new DictWord(151,11,11),new DictWord(8,0,372),new DictWord(9,0,122),new DictWord(
					138,0,175),new DictWord(132,11,677),new DictWord(7,11,1374),new DictWord(136,11,540),new DictWord(135,10,861),new DictWord(132,0,695),new DictWord(7,0,
					497),new DictWord(9,0,387),new DictWord(147,0,81),new DictWord(136,0,937),new DictWord(134,0,718),new DictWord(7,0,1328),new DictWord(136,10,494),new DictWord(132,
					11,331),new DictWord(6,0,1581),new DictWord(133,11,747),new DictWord(5,0,284),new DictWord(6,0,49),new DictWord(6,0,350),new DictWord(7,0,1),new DictWord(7,0,377),new DictWord(
					7,0,1693),new DictWord(8,0,18),new DictWord(8,0,678),new DictWord(9,0,161),new DictWord(9,0,585),new DictWord(9,0,671),new DictWord(9,0,839),new DictWord(11,0,912),
				new DictWord(141,0,427),new DictWord(7,10,1306),new DictWord(8,10,505),new DictWord(9,10,482),new DictWord(10,10,126),new DictWord(11,10,225),new DictWord(12,10,347
				),new DictWord(12,10,449),new DictWord(13,10,19),new DictWord(14,10,218),new DictWord(142,10,435),new DictWord(10,10,764),new DictWord(12,10,120),new DictWord(13,10
					,39),new DictWord(145,10,127),new DictWord(4,0,597),new DictWord(133,10,268),new DictWord(134,0,1094),new DictWord(4,0,1008),new DictWord(134,0,1973),new DictWord(
					132,0,811),new DictWord(139,0,908),new DictWord(135,0,1471),new DictWord(133,11,326),new DictWord(4,10,384),new DictWord(135,10,1022),new DictWord(7,0,
					1935),new DictWord(8,0,324),new DictWord(12,0,42),new DictWord(4,11,691),new DictWord(7,11,1935),new DictWord(8,11,324),new DictWord(9,11,35),new DictWord(10,11,680
				),new DictWord(11,11,364),new DictWord(12,11,42),new DictWord(13,11,357),new DictWord(146,11,16),new DictWord(135,0,2014),new DictWord(7,0,2007),new DictWord(9,0,
					101),new DictWord(9,0,450),new DictWord(10,0,66),new DictWord(10,0,842),new DictWord(11,0,536),new DictWord(12,0,587),new DictWord(6,11,32),new DictWord(7,11,385),new DictWord(
					7,11,757),new DictWord(7,11,1916),new DictWord(8,11,37),new DictWord(8,11,94),new DictWord(8,11,711),new DictWord(9,11,541),new DictWord(10,11,162),new DictWord(10,
					11,795),new DictWord(11,11,989),new DictWord(11,11,1010),new DictWord(12,11,14),new DictWord(142,11,308),new DictWord(139,0,586),new DictWord(135,10,
					1703),new DictWord(7,0,1077),new DictWord(11,0,28),new DictWord(9,10,159),new DictWord(140,10,603),new DictWord(6,0,1221),new DictWord(136,10,583),new DictWord(6,11
					,152),new DictWord(6,11,349),new DictWord(6,11,1682),new DictWord(7,11,1252),new DictWord(8,11,112),new DictWord(9,11,435),new DictWord(9,11,668),new DictWord(10,11
					,290),new DictWord(10,11,319),new DictWord(10,11,815),new DictWord(11,11,180),new DictWord(11,11,837),new DictWord(12,11,240),new DictWord(13,11,152),new DictWord(
					13,11,219),new DictWord(142,11,158),new DictWord(139,0,62),new DictWord(132,10,515),new DictWord(8,10,632),new DictWord(8,10,697),new DictWord(137,10,
					854),new DictWord(134,0,1766),new DictWord(132,11,581),new DictWord(6,11,126),new DictWord(7,11,573),new DictWord(8,11,397),new DictWord(142,11,44),new DictWord(150
					,0,28),new DictWord(11,0,670),new DictWord(22,0,25),new DictWord(4,10,136),new DictWord(133,10,551),new DictWord(6,0,1665),new DictWord(7,0,256),new DictWord(7,0,
					1388),new DictWord(138,0,499),new DictWord(4,0,22),new DictWord(5,0,10),new DictWord(7,0,1576),new DictWord(136,0,97),new DictWord(134,10,1782),new DictWord(5,0,481
				),new DictWord(7,10,1287),new DictWord(9,10,44),new DictWord(10,10,552),new DictWord(10,10,642),new DictWord(11,10,839),new DictWord(12,10,274),new DictWord(12,10,
					275),new DictWord(12,10,372),new DictWord(13,10,91),new DictWord(142,10,125),new DictWord(133,11,926),new DictWord(7,11,1232),new DictWord(137,11,531),new DictWord(
					6,0,134),new DictWord(7,0,437),new DictWord(7,0,1824),new DictWord(9,0,37),new DictWord(14,0,285),new DictWord(142,0,371),new DictWord(7,0,486),new DictWord(8,0,155
				),new DictWord(11,0,93),new DictWord(140,0,164),new DictWord(6,0,1391),new DictWord(134,0,1442),new DictWord(133,11,670),new DictWord(133,0,591),new DictWord(6,10,
					147),new DictWord(7,10,886),new DictWord(7,11,1957),new DictWord(9,10,753),new DictWord(138,10,268),new DictWord(5,0,380),new DictWord(5,0,650),new DictWord(7,0,
					1173),new DictWord(136,0,310),new DictWord(4,0,364),new DictWord(7,0,1156),new DictWord(7,0,1187),new DictWord(137,0,409),new DictWord(135,11,1621),new DictWord(134
					,0,482),new DictWord(133,11,506),new DictWord(4,0,781),new DictWord(6,0,487),new DictWord(7,0,926),new DictWord(8,0,263),new DictWord(139,0,500),new DictWord(138,10
					,137),new DictWord(135,11,242),new DictWord(139,11,96),new DictWord(133,10,414),new DictWord(135,10,1762),new DictWord(134,0,804),new DictWord(5,11,834)
				,new DictWord(7,11,1202),new DictWord(8,11,14),new DictWord(9,11,481),new DictWord(137,11,880),new DictWord(134,10,599),new DictWord(4,0,94),new DictWord(135,0,1265
				),new DictWord(4,0,415),new DictWord(132,0,417),new DictWord(5,0,348),new DictWord(6,0,522),new DictWord(6,10,1749),new DictWord(7,11,1526),new DictWord(138,11,465)
				,new DictWord(134,10,1627),new DictWord(132,0,1012),new DictWord(132,10,488),new DictWord(4,11,357),new DictWord(6,11,172),new DictWord(7,11,143),new DictWord(137,
					11,413),new DictWord(4,10,83),new DictWord(4,11,590),new DictWord(146,11,76),new DictWord(140,10,676),new DictWord(7,11,287),new DictWord(8,11,355),new DictWord(9,
					11,293),new DictWord(137,11,743),new DictWord(134,10,278),new DictWord(6,0,1803),new DictWord(18,0,165),new DictWord(24,0,21),new DictWord(5,11,169),new DictWord(7,
					11,333),new DictWord(136,11,45),new DictWord(12,10,97),new DictWord(140,11,97),new DictWord(4,0,408),new DictWord(4,0,741),new DictWord(135,0,500),new DictWord(132,
					11,198),new DictWord(7,10,388),new DictWord(7,10,644),new DictWord(139,10,781),new DictWord(4,11,24),new DictWord(5,11,140),new DictWord(5,11,185),new DictWord(7,11
					,1500),new DictWord(11,11,565),new DictWord(139,11,838),new DictWord(6,0,1321),new DictWord(9,0,257),new DictWord(7,10,229),new DictWord(8,10,59),new DictWord(9,10,
					190),new DictWord(10,10,378),new DictWord(140,10,191),new DictWord(4,11,334),new DictWord(133,11,593),new DictWord(135,11,1885),new DictWord(134,0,1138)
				,new DictWord(4,0,249),new DictWord(6,0,73),new DictWord(135,0,177),new DictWord(133,0,576),new DictWord(142,0,231),new DictWord(137,0,288),new DictWord(132,10,660)
				,new DictWord(7,10,1035),new DictWord(138,10,737),new DictWord(135,0,1487),new DictWord(6,0,989),new DictWord(9,0,433),new DictWord(7,10,690),new DictWord(9,10,587)
				,new DictWord(140,10,521),new DictWord(7,0,1264),new DictWord(7,0,1678),new DictWord(11,0,945),new DictWord(12,0,341),new DictWord(12,0,471),new DictWord(140,0,569)
				,new DictWord(132,11,709),new DictWord(133,11,897),new DictWord(5,11,224),new DictWord(13,11,174),new DictWord(146,11,52),new DictWord(135,11,1840),new DictWord(134
					,10,1744),new DictWord(12,0,87),new DictWord(16,0,74),new DictWord(4,10,733),new DictWord(9,10,194),new DictWord(10,10,92),new DictWord(11,10,198),new DictWord(12,
					10,84),new DictWord(141,10,128),new DictWord(140,0,779),new DictWord(135,0,538),new DictWord(4,11,608),new DictWord(133,11,497),new DictWord(133,0,413),
				new DictWord(7,11,1375),new DictWord(7,11,1466),new DictWord(138,11,331),new DictWord(136,0,495),new DictWord(6,11,540),new DictWord(136,11,136),new DictWord(7,0,54
				),new DictWord(8,0,312),new DictWord(10,0,191),new DictWord(10,0,614),new DictWord(140,0,567),new DictWord(6,0,468),new DictWord(7,0,567),new DictWord(7,0,1478),new DictWord(8,
					0,530),new DictWord(14,0,290),new DictWord(133,11,999),new DictWord(4,11,299),new DictWord(7,10,306),new DictWord(135,11,1004),new DictWord(142,11,296),
				new DictWord(134,0,1484),new DictWord(133,10,979),new DictWord(6,0,609),new DictWord(9,0,815),new DictWord(12,11,137),new DictWord(14,11,9),new DictWord(14,11,24),new DictWord(
					142,11,64),new DictWord(133,11,456),new DictWord(6,0,484),new DictWord(135,0,822),new DictWord(133,10,178),new DictWord(136,11,180),new DictWord(132,11,
					755),new DictWord(137,0,900),new DictWord(135,0,1335),new DictWord(6,0,1724),new DictWord(135,0,2022),new DictWord(135,11,1139),new DictWord(5,0,640),new DictWord(
					132,10,390),new DictWord(6,0,1831),new DictWord(138,11,633),new DictWord(135,11,566),new DictWord(4,11,890),new DictWord(5,11,805),new DictWord(5,11,819
				),new DictWord(5,11,961),new DictWord(6,11,396),new DictWord(6,11,1631),new DictWord(6,11,1678),new DictWord(7,11,1967),new DictWord(7,11,2041),new DictWord(9,11,
					630),new DictWord(11,11,8),new DictWord(11,11,1019),new DictWord(12,11,176),new DictWord(13,11,225),new DictWord(14,11,292),new DictWord(149,11,24),new DictWord(132
					,0,474),new DictWord(134,0,1103),new DictWord(135,0,1504),new DictWord(134,0,1576),new DictWord(6,0,961),new DictWord(6,0,1034),new DictWord(140,0,655),
				new DictWord(11,11,514),new DictWord(149,11,20),new DictWord(5,0,305),new DictWord(135,11,1815),new DictWord(7,11,1505),new DictWord(10,11,190),new DictWord(10,11,
					634),new DictWord(11,11,792),new DictWord(12,11,358),new DictWord(140,11,447),new DictWord(5,11,0),new DictWord(6,11,536),new DictWord(7,11,604),new DictWord(13,11,
					445),new DictWord(145,11,126),new DictWord(7,0,1236),new DictWord(133,10,105),new DictWord(4,0,480),new DictWord(6,0,217),new DictWord(6,0,302),new DictWord(6,0,
					1642),new DictWord(7,0,130),new DictWord(7,0,837),new DictWord(7,0,1321),new DictWord(7,0,1547),new DictWord(7,0,1657),new DictWord(8,0,429),new DictWord(9,0,228),new DictWord(
					13,0,289),new DictWord(13,0,343),new DictWord(19,0,101),new DictWord(6,11,232),new DictWord(6,11,412),new DictWord(7,11,1074),new DictWord(8,11,9),new DictWord(8,11
					,157),new DictWord(8,11,786),new DictWord(9,11,196),new DictWord(9,11,352),new DictWord(9,11,457),new DictWord(10,11,337),new DictWord(11,11,232),new DictWord(11,11
					,877),new DictWord(12,11,480),new DictWord(140,11,546),new DictWord(5,10,438),new DictWord(7,11,958),new DictWord(9,10,694),new DictWord(12,10,627),new DictWord(13,
					11,38),new DictWord(141,10,210),new DictWord(4,11,382),new DictWord(136,11,579),new DictWord(7,0,278),new DictWord(10,0,739),new DictWord(11,0,708),new DictWord(141
					,0,348),new DictWord(4,11,212),new DictWord(135,11,1206),new DictWord(135,11,1898),new DictWord(6,0,708),new DictWord(6,0,1344),new DictWord(152,10,11),
				new DictWord(137,11,768),new DictWord(134,0,1840),new DictWord(140,0,233),new DictWord(8,10,25),new DictWord(138,10,826),new DictWord(6,0,2017),new DictWord(133,11,
					655),new DictWord(6,0,1488),new DictWord(139,11,290),new DictWord(132,10,308),new DictWord(134,0,1590),new DictWord(134,0,1800),new DictWord(134,0,1259)
				,new DictWord(16,0,28),new DictWord(6,11,231),new DictWord(7,11,95),new DictWord(136,11,423),new DictWord(133,11,300),new DictWord(135,10,150),new DictWord(136,10,
					649),new DictWord(7,11,1874),new DictWord(137,11,641),new DictWord(6,11,237),new DictWord(7,11,611),new DictWord(8,11,100),new DictWord(9,11,416),new DictWord(11,11
					,335),new DictWord(12,11,173),new DictWord(146,11,101),new DictWord(137,0,45),new DictWord(134,10,521),new DictWord(17,0,36),new DictWord(14,11,26),new DictWord(146
					,11,150),new DictWord(7,0,1442),new DictWord(14,0,22),new DictWord(5,10,339),new DictWord(15,10,41),new DictWord(15,10,166),new DictWord(147,10,66),new DictWord(8,0
					,378),new DictWord(6,11,581),new DictWord(135,11,1119),new DictWord(134,0,1507),new DictWord(147,11,117),new DictWord(139,0,39),new DictWord(134,0,1054)
				,new DictWord(6,0,363),new DictWord(7,0,1955),new DictWord(136,0,725),new DictWord(134,0,2036),new DictWord(133,11,199),new DictWord(6,0,1871),new DictWord(9,0,935)
				,new DictWord(9,0,961),new DictWord(9,0,1004),new DictWord(9,0,1016),new DictWord(12,0,805),new DictWord(12,0,852),new DictWord(12,0,853),new DictWord(12,0,869),new DictWord(12
					,0,882),new DictWord(12,0,896),new DictWord(12,0,906),new DictWord(12,0,917),new DictWord(12,0,940),new DictWord(15,0,170),new DictWord(15,0,176),new DictWord(15,0,
					188),new DictWord(15,0,201),new DictWord(15,0,205),new DictWord(15,0,212),new DictWord(15,0,234),new DictWord(15,0,244),new DictWord(18,0,181),new DictWord(18,0,193
				),new DictWord(18,0,196),new DictWord(18,0,201),new DictWord(18,0,202),new DictWord(18,0,210),new DictWord(18,0,217),new DictWord(18,0,235),new DictWord(18,0,236),new DictWord(
					18,0,237),new DictWord(21,0,54),new DictWord(21,0,55),new DictWord(21,0,58),new DictWord(21,0,59),new DictWord(152,0,22),new DictWord(134,10,1628),new DictWord(137,
					0,805),new DictWord(5,0,813),new DictWord(135,0,2046),new DictWord(142,11,42),new DictWord(5,0,712),new DictWord(6,0,1240),new DictWord(11,0,17),new DictWord(13,0,
					321),new DictWord(144,0,67),new DictWord(132,0,617),new DictWord(135,10,829),new DictWord(6,0,320),new DictWord(7,0,781),new DictWord(7,0,1921),new DictWord(9,0,55)
				,new DictWord(10,0,186),new DictWord(10,0,273),new DictWord(10,0,664),new DictWord(10,0,801),new DictWord(11,0,996),new DictWord(11,0,997),new DictWord(13,0,157),new DictWord(
					142,0,170),new DictWord(136,0,271),new DictWord(5,10,486),new DictWord(135,10,1349),new DictWord(18,11,91),new DictWord(147,11,70),new DictWord(10,0,445
				),new DictWord(7,10,1635),new DictWord(8,10,17),new DictWord(138,10,295),new DictWord(136,11,404),new DictWord(7,0,103),new DictWord(7,0,863),new DictWord(11,0,184)
				,new DictWord(145,0,62),new DictWord(138,10,558),new DictWord(137,0,659),new DictWord(6,11,312),new DictWord(6,11,1715),new DictWord(10,11,584),new DictWord(11,11,
					546),new DictWord(11,11,692),new DictWord(12,11,259),new DictWord(12,11,295),new DictWord(13,11,46),new DictWord(141,11,154),new DictWord(134,0,676),new DictWord(
					132,11,588),new DictWord(4,11,231),new DictWord(5,11,61),new DictWord(6,11,104),new DictWord(7,11,729),new DictWord(7,11,964),new DictWord(7,11,1658),new DictWord(
					140,11,414),new DictWord(6,11,263),new DictWord(138,11,757),new DictWord(11,0,337),new DictWord(142,0,303),new DictWord(135,11,1363),new DictWord(132,11
					,320),new DictWord(140,0,506),new DictWord(134,10,447),new DictWord(5,0,77),new DictWord(7,0,1455),new DictWord(10,0,843),new DictWord(147,0,73),new DictWord(7,10,
					577),new DictWord(7,10,1432),new DictWord(9,10,475),new DictWord(9,10,505),new DictWord(9,10,526),new DictWord(9,10,609),new DictWord(9,10,689),new DictWord(9,10,
					726),new DictWord(9,10,735),new DictWord(9,10,738),new DictWord(10,10,556),new DictWord(10,10,674),new DictWord(10,10,684),new DictWord(11,10,89),new DictWord(11,10
					,202),new DictWord(11,10,272),new DictWord(11,10,380),new DictWord(11,10,415),new DictWord(11,10,505),new DictWord(11,10,537),new DictWord(11,10,550),new DictWord(
					11,10,562),new DictWord(11,10,640),new DictWord(11,10,667),new DictWord(11,10,688),new DictWord(11,10,847),new DictWord(11,10,927),new DictWord(11,10,
					930),new DictWord(11,10,940),new DictWord(12,10,144),new DictWord(12,10,325),new DictWord(12,10,329),new DictWord(12,10,389),new DictWord(12,10,403),new DictWord(12
					,10,451),new DictWord(12,10,515),new DictWord(12,10,604),new DictWord(12,10,616),new DictWord(12,10,626),new DictWord(13,10,66),new DictWord(13,10,131),
				new DictWord(13,10,167),new DictWord(13,10,236),new DictWord(13,10,368),new DictWord(13,10,411),new DictWord(13,10,434),new DictWord(13,10,453),new DictWord(13,10,
					461),new DictWord(13,10,474),new DictWord(14,10,59),new DictWord(14,10,60),new DictWord(14,10,139),new DictWord(14,10,152),new DictWord(14,10,276),new DictWord(14,
					10,353),new DictWord(14,10,402),new DictWord(15,10,28),new DictWord(15,10,81),new DictWord(15,10,123),new DictWord(15,10,152),new DictWord(18,10,136),new DictWord(
					148,10,88),new DictWord(132,0,458),new DictWord(135,0,1420),new DictWord(6,0,109),new DictWord(10,0,382),new DictWord(4,11,405),new DictWord(4,10,609),new DictWord(
					7,10,756),new DictWord(7,11,817),new DictWord(9,10,544),new DictWord(11,10,413),new DictWord(14,11,58),new DictWord(14,10,307),new DictWord(16,10,25),new DictWord(
					17,11,37),new DictWord(146,11,124),new DictWord(6,0,330),new DictWord(7,0,1084),new DictWord(11,0,142),new DictWord(133,11,974),new DictWord(4,10,930),new DictWord(
					133,10,947),new DictWord(5,10,939),new DictWord(142,11,394),new DictWord(16,0,91),new DictWord(145,0,87),new DictWord(5,11,235),new DictWord(5,10,962),new DictWord(
					7,11,1239),new DictWord(11,11,131),new DictWord(140,11,370),new DictWord(11,0,492),new DictWord(5,10,651),new DictWord(8,10,170),new DictWord(9,10,61),new DictWord(
					9,10,63),new DictWord(10,10,23),new DictWord(10,10,37),new DictWord(10,10,834),new DictWord(11,10,4),new DictWord(11,10,281),new DictWord(11,10,503),new DictWord(11
					,10,677),new DictWord(12,10,96),new DictWord(12,10,130),new DictWord(12,10,244),new DictWord(14,10,5),new DictWord(14,10,40),new DictWord(14,10,162),new DictWord(14
					,10,202),new DictWord(146,10,133),new DictWord(4,10,406),new DictWord(5,10,579),new DictWord(12,10,492),new DictWord(150,10,15),new DictWord(9,11,137),new DictWord(
					138,11,221),new DictWord(134,0,1239),new DictWord(11,0,211),new DictWord(140,0,145),new DictWord(7,11,390),new DictWord(138,11,140),new DictWord(135,11,
					1418),new DictWord(135,11,1144),new DictWord(134,0,1049),new DictWord(7,0,321),new DictWord(6,10,17),new DictWord(7,10,1001),new DictWord(7,10,1982),new DictWord(9,
					10,886),new DictWord(10,10,489),new DictWord(10,10,800),new DictWord(11,10,782),new DictWord(12,10,320),new DictWord(13,10,467),new DictWord(14,10,145),
				new DictWord(14,10,387),new DictWord(143,10,119),new DictWord(145,10,17),new DictWord(5,11,407),new DictWord(11,11,489),new DictWord(19,11,37),new DictWord(20,11,73
				),new DictWord(150,11,38),new DictWord(133,10,458),new DictWord(135,0,1985),new DictWord(7,10,1983),new DictWord(8,10,0),new DictWord(8,10,171),new DictWord(9,10,
					120),new DictWord(9,10,732),new DictWord(10,10,473),new DictWord(11,10,656),new DictWord(11,10,998),new DictWord(18,10,0),new DictWord(18,10,2),new DictWord(147,10,
					21),new DictWord(5,11,325),new DictWord(7,11,1483),new DictWord(8,11,5),new DictWord(8,11,227),new DictWord(9,11,105),new DictWord(10,11,585),new DictWord(140,11,
					614),new DictWord(136,0,122),new DictWord(132,0,234),new DictWord(135,11,1196),new DictWord(6,0,976),new DictWord(6,0,1098),new DictWord(134,0,1441),new DictWord(7,
					0,253),new DictWord(136,0,549),new DictWord(6,11,621),new DictWord(13,11,504),new DictWord(144,11,19),new DictWord(132,10,519),new DictWord(5,0,430),new DictWord(5,
					0,932),new DictWord(6,0,131),new DictWord(7,0,417),new DictWord(9,0,522),new DictWord(11,0,314),new DictWord(141,0,390),new DictWord(14,0,149),new DictWord(14,0,399
				),new DictWord(143,0,57),new DictWord(5,10,907),new DictWord(6,10,31),new DictWord(6,11,218),new DictWord(7,10,491),new DictWord(7,10,530),new DictWord(8,10,592),new DictWord(
					11,10,53),new DictWord(11,10,779),new DictWord(12,10,167),new DictWord(12,10,411),new DictWord(14,10,14),new DictWord(14,10,136),new DictWord(15,10,72),
				new DictWord(16,10,17),new DictWord(144,10,72),new DictWord(140,11,330),new DictWord(7,11,454),new DictWord(7,11,782),new DictWord(136,11,768),new DictWord(132,0,
					507),new DictWord(10,11,676),new DictWord(140,11,462),new DictWord(6,0,630),new DictWord(9,0,811),new DictWord(4,10,208),new DictWord(5,10,106),new DictWord(6,10,
					531),new DictWord(8,10,408),new DictWord(9,10,188),new DictWord(138,10,572),new DictWord(4,0,343),new DictWord(5,0,511),new DictWord(134,10,1693),new DictWord(134,
					11,164),new DictWord(132,0,448),new DictWord(7,0,455),new DictWord(138,0,591),new DictWord(135,0,1381),new DictWord(12,10,441),new DictWord(150,11,50),new DictWord(
					9,10,449),new DictWord(10,10,192),new DictWord(138,10,740),new DictWord(6,0,575),new DictWord(132,10,241),new DictWord(134,0,1175),new DictWord(134,0,
					653),new DictWord(134,0,1761),new DictWord(134,0,1198),new DictWord(132,10,259),new DictWord(6,11,343),new DictWord(7,11,195),new DictWord(9,11,226),new DictWord(10
					,11,197),new DictWord(10,11,575),new DictWord(11,11,502),new DictWord(139,11,899),new DictWord(7,0,1127),new DictWord(7,0,1572),new DictWord(10,0,297),new DictWord(
					10,0,422),new DictWord(11,0,764),new DictWord(11,0,810),new DictWord(12,0,264),new DictWord(13,0,102),new DictWord(13,0,300),new DictWord(13,0,484),new DictWord(14,
					0,147),new DictWord(14,0,229),new DictWord(17,0,71),new DictWord(18,0,118),new DictWord(147,0,120),new DictWord(135,11,666),new DictWord(132,0,678),new DictWord(4,
					10,173),new DictWord(5,10,312),new DictWord(5,10,512),new DictWord(135,10,1285),new DictWord(7,10,1603),new DictWord(7,10,1691),new DictWord(9,10,464),new DictWord(
					11,10,195),new DictWord(12,10,279),new DictWord(12,10,448),new DictWord(14,10,11),new DictWord(147,10,102),new DictWord(16,0,99),new DictWord(146,0,164)
				,new DictWord(7,11,1125),new DictWord(9,11,143),new DictWord(11,11,61),new DictWord(14,11,405),new DictWord(150,11,21),new DictWord(137,11,260),new DictWord(4,10,
					452),new DictWord(5,10,583),new DictWord(5,10,817),new DictWord(6,10,433),new DictWord(7,10,593),new DictWord(7,10,720),new DictWord(7,10,1378),new DictWord(8,10,
					161),new DictWord(9,10,284),new DictWord(10,10,313),new DictWord(139,10,886),new DictWord(132,10,547),new DictWord(136,10,722),new DictWord(14,0,35),new DictWord(
					142,0,191),new DictWord(141,0,45),new DictWord(138,0,121),new DictWord(132,0,125),new DictWord(134,0,1622),new DictWord(133,11,959),new DictWord(8,10,
					420),new DictWord(139,10,193),new DictWord(132,0,721),new DictWord(135,10,409),new DictWord(136,0,145),new DictWord(7,0,792),new DictWord(8,0,147),new DictWord(10,0
					,821),new DictWord(11,0,970),new DictWord(11,0,1021),new DictWord(136,11,173),new DictWord(134,11,266),new DictWord(132,0,715),new DictWord(7,0,1999),new DictWord(
					138,10,308),new DictWord(133,0,531),new DictWord(5,0,168),new DictWord(5,0,930),new DictWord(8,0,74),new DictWord(9,0,623),new DictWord(12,0,500),new DictWord(140,0
					,579),new DictWord(144,0,65),new DictWord(138,11,246),new DictWord(6,0,220),new DictWord(7,0,1101),new DictWord(13,0,105),new DictWord(142,11,314),new DictWord(5,10
					,1002),new DictWord(136,10,745),new DictWord(134,0,960),new DictWord(20,0,0),new DictWord(148,11,0),new DictWord(4,0,1005),new DictWord(4,10,239),new DictWord(6,10,
					477),new DictWord(7,10,1607),new DictWord(11,10,68),new DictWord(139,10,617),new DictWord(6,0,19),new DictWord(7,0,1413),new DictWord(139,0,428),new DictWord(149,10
					,13),new DictWord(7,0,96),new DictWord(8,0,401),new DictWord(8,0,703),new DictWord(9,0,896),new DictWord(136,11,300),new DictWord(134,0,1595),new DictWord(145,0,116
				),new DictWord(136,0,1021),new DictWord(7,0,1961),new DictWord(7,0,1965),new DictWord(7,0,2030),new DictWord(8,0,150),new DictWord(8,0,702),new DictWord(8,0,737),new DictWord(8
					,0,750),new DictWord(140,0,366),new DictWord(11,11,75),new DictWord(142,11,267),new DictWord(132,10,367),new DictWord(8,0,800),new DictWord(9,0,148),new DictWord(9,
					0,872),new DictWord(9,0,890),new DictWord(11,0,309),new DictWord(11,0,1001),new DictWord(13,0,267),new DictWord(13,0,323),new DictWord(5,11,427),new DictWord(5,11,
					734),new DictWord(7,11,478),new DictWord(136,11,52),new DictWord(7,11,239),new DictWord(11,11,217),new DictWord(142,11,165),new DictWord(132,11,323),new DictWord(
					140,11,419),new DictWord(13,0,299),new DictWord(142,0,75),new DictWord(6,11,87),new DictWord(6,11,1734),new DictWord(7,11,20),new DictWord(7,11,1056),new DictWord(8
					,11,732),new DictWord(9,11,406),new DictWord(9,11,911),new DictWord(138,11,694),new DictWord(134,0,1383),new DictWord(132,10,694),new DictWord(133,11,
					613),new DictWord(137,0,779),new DictWord(4,0,598),new DictWord(140,10,687),new DictWord(6,0,970),new DictWord(135,0,424),new DictWord(133,0,547),new DictWord(7,11,
					32),new DictWord(7,11,984),new DictWord(8,11,85),new DictWord(8,11,709),new DictWord(9,11,579),new DictWord(9,11,847),new DictWord(9,11,856),new DictWord(10,11,799)
				,new DictWord(11,11,258),new DictWord(11,11,1007),new DictWord(12,11,331),new DictWord(12,11,615),new DictWord(13,11,188),new DictWord(13,11,435),new DictWord(14,11
					,8),new DictWord(15,11,165),new DictWord(16,11,27),new DictWord(148,11,40),new DictWord(6,0,1222),new DictWord(134,0,1385),new DictWord(132,0,876),new DictWord(138,
					11,151),new DictWord(135,10,213),new DictWord(4,11,167),new DictWord(135,11,82),new DictWord(133,0,133),new DictWord(6,11,24),new DictWord(7,11,74),new DictWord(7,
					11,678),new DictWord(137,11,258),new DictWord(5,11,62),new DictWord(6,11,534),new DictWord(7,11,684),new DictWord(7,11,1043),new DictWord(7,11,1072),new DictWord(8,
					11,280),new DictWord(8,11,541),new DictWord(8,11,686),new DictWord(10,11,519),new DictWord(11,11,252),new DictWord(140,11,282),new DictWord(136,0,187),new DictWord(
					8,0,8),new DictWord(10,0,0),new DictWord(10,0,818),new DictWord(139,0,988),new DictWord(132,11,359),new DictWord(11,0,429),new DictWord(15,0,51),new DictWord(135,10
					,1672),new DictWord(136,0,685),new DictWord(5,11,211),new DictWord(7,11,88),new DictWord(136,11,627),new DictWord(134,0,472),new DictWord(136,0,132),new DictWord(6,
					11,145),new DictWord(141,11,336),new DictWord(4,10,751),new DictWord(11,10,390),new DictWord(140,10,32),new DictWord(6,0,938),new DictWord(6,0,1060),new DictWord(4,
					11,263),new DictWord(4,10,409),new DictWord(133,10,78),new DictWord(137,0,874),new DictWord(8,0,774),new DictWord(10,0,670),new DictWord(12,0,51),new DictWord(4,11,
					916),new DictWord(6,10,473),new DictWord(7,10,1602),new DictWord(10,10,698),new DictWord(12,10,212),new DictWord(13,10,307),new DictWord(145,10,105),new DictWord(
					146,0,92),new DictWord(143,10,156),new DictWord(132,0,830),new DictWord(137,0,701),new DictWord(4,11,599),new DictWord(6,11,1634),new DictWord(7,11,5),new DictWord(
					7,11,55),new DictWord(7,11,67),new DictWord(7,11,97),new DictWord(7,11,691),new DictWord(7,11,979),new DictWord(7,11,1697),new DictWord(8,11,207),new DictWord(8,11,
					214),new DictWord(8,11,231),new DictWord(8,11,294),new DictWord(8,11,336),new DictWord(8,11,428),new DictWord(8,11,451),new DictWord(8,11,460),new DictWord(8,11,471
				),new DictWord(8,11,622),new DictWord(8,11,626),new DictWord(8,11,679),new DictWord(8,11,759),new DictWord(8,11,829),new DictWord(9,11,11),new DictWord(9,11,246),new DictWord(9
					,11,484),new DictWord(9,11,573),new DictWord(9,11,706),new DictWord(9,11,762),new DictWord(9,11,798),new DictWord(9,11,855),new DictWord(9,11,870),new DictWord(9,11
					,912),new DictWord(10,11,303),new DictWord(10,11,335),new DictWord(10,11,424),new DictWord(10,11,461),new DictWord(10,11,543),new DictWord(10,11,759),new DictWord(
					10,11,814),new DictWord(11,11,59),new DictWord(11,11,199),new DictWord(11,11,235),new DictWord(11,11,475),new DictWord(11,11,590),new DictWord(11,11,929
				),new DictWord(11,11,963),new DictWord(12,11,114),new DictWord(12,11,182),new DictWord(12,11,226),new DictWord(12,11,332),new DictWord(12,11,439),new DictWord(12,11
					,575),new DictWord(12,11,598),new DictWord(13,11,8),new DictWord(13,11,125),new DictWord(13,11,194),new DictWord(13,11,287),new DictWord(14,11,197),new DictWord(14,
					11,383),new DictWord(15,11,53),new DictWord(17,11,63),new DictWord(19,11,46),new DictWord(19,11,98),new DictWord(19,11,106),new DictWord(148,11,85),new DictWord(4,0
					,127),new DictWord(5,0,350),new DictWord(6,0,356),new DictWord(8,0,426),new DictWord(9,0,572),new DictWord(10,0,247),new DictWord(139,0,312),new DictWord(134,0,1215
				),new DictWord(6,0,59),new DictWord(9,0,603),new DictWord(13,0,397),new DictWord(7,11,1853),new DictWord(138,11,437),new DictWord(134,0,1762),new DictWord(147,11,
					126),new DictWord(135,10,883),new DictWord(13,0,293),new DictWord(142,0,56),new DictWord(133,10,617),new DictWord(139,10,50),new DictWord(5,11,187),new DictWord(7,
					10,1518),new DictWord(139,10,694),new DictWord(135,0,441),new DictWord(6,0,111),new DictWord(7,0,4),new DictWord(8,0,163),new DictWord(8,0,776),new DictWord(138,0,
					566),new DictWord(132,0,806),new DictWord(4,11,215),new DictWord(9,11,38),new DictWord(10,11,3),new DictWord(11,11,23),new DictWord(11,11,127),new DictWord(139,11,
					796),new DictWord(14,0,233),new DictWord(4,10,546),new DictWord(135,10,2042),new DictWord(135,0,1994),new DictWord(134,0,1739),new DictWord(135,11,1530)
				,new DictWord(136,0,393),new DictWord(5,0,297),new DictWord(7,0,1038),new DictWord(14,0,359),new DictWord(19,0,52),new DictWord(148,0,47),new DictWord(135,0,309),new DictWord(4
					,10,313),new DictWord(133,10,577),new DictWord(8,10,184),new DictWord(141,10,433),new DictWord(135,10,935),new DictWord(12,10,186),new DictWord(12,10,
					292),new DictWord(14,10,100),new DictWord(146,10,70),new DictWord(136,0,363),new DictWord(14,0,175),new DictWord(11,10,402),new DictWord(12,10,109),new DictWord(12,
					10,431),new DictWord(13,10,179),new DictWord(13,10,206),new DictWord(14,10,217),new DictWord(16,10,3),new DictWord(148,10,53),new DictWord(5,10,886),new DictWord(6,
					10,46),new DictWord(6,10,1790),new DictWord(7,10,14),new DictWord(7,10,732),new DictWord(7,10,1654),new DictWord(8,10,95),new DictWord(8,10,327),new DictWord(8,10,
					616),new DictWord(9,10,892),new DictWord(10,10,598),new DictWord(10,10,769),new DictWord(11,10,134),new DictWord(11,10,747),new DictWord(12,10,378),new DictWord(142
					,10,97),new DictWord(136,0,666),new DictWord(135,0,1675),new DictWord(6,0,655),new DictWord(134,0,1600),new DictWord(135,0,808),new DictWord(133,10,1021
				),new DictWord(4,11,28),new DictWord(5,11,440),new DictWord(7,11,248),new DictWord(11,11,833),new DictWord(140,11,344),new DictWord(134,11,1654),new DictWord(132,0,
					280),new DictWord(140,0,54),new DictWord(4,0,421),new DictWord(133,0,548),new DictWord(132,10,153),new DictWord(6,11,339),new DictWord(135,11,923),new DictWord(133,
					11,853),new DictWord(133,10,798),new DictWord(132,10,587),new DictWord(6,11,249),new DictWord(7,11,1234),new DictWord(139,11,573),new DictWord(6,10,598)
				,new DictWord(7,10,42),new DictWord(8,10,695),new DictWord(10,10,212),new DictWord(11,10,158),new DictWord(14,10,196),new DictWord(145,10,85),new DictWord(7,0,249),
				new DictWord(5,10,957),new DictWord(133,10,1008),new DictWord(4,10,129),new DictWord(135,10,465),new DictWord(6,0,254),new DictWord(7,0,842),new DictWord(7,0,1659),
				new DictWord(9,0,109),new DictWord(10,0,103),new DictWord(7,10,908),new DictWord(7,10,1201),new DictWord(9,10,755),new DictWord(11,10,906),new DictWord(12,10,527),new DictWord(
					146,10,7),new DictWord(5,0,262),new DictWord(136,10,450),new DictWord(144,0,1),new DictWord(10,11,201),new DictWord(142,11,319),new DictWord(7,11,49),new DictWord(7
					,11,392),new DictWord(8,11,20),new DictWord(8,11,172),new DictWord(8,11,690),new DictWord(9,11,383),new DictWord(9,11,845),new DictWord(10,11,48),new DictWord(11,11
					,293),new DictWord(11,11,832),new DictWord(11,11,920),new DictWord(141,11,221),new DictWord(5,11,858),new DictWord(133,11,992),new DictWord(134,0,805),new DictWord(
					139,10,1003),new DictWord(6,0,1630),new DictWord(134,11,307),new DictWord(7,11,1512),new DictWord(135,11,1794),new DictWord(6,11,268),new DictWord(137,
					11,62),new DictWord(135,10,1868),new DictWord(133,0,671),new DictWord(4,0,989),new DictWord(8,0,972),new DictWord(136,0,998),new DictWord(132,11,423),new DictWord(
					132,0,889),new DictWord(135,0,1382),new DictWord(135,0,1910),new DictWord(7,10,965),new DictWord(7,10,1460),new DictWord(135,10,1604),new DictWord(4,0,
					627),new DictWord(5,0,775),new DictWord(138,11,106),new DictWord(134,11,348),new DictWord(7,0,202),new DictWord(11,0,362),new DictWord(11,0,948),new DictWord(140,0,
					388),new DictWord(138,11,771),new DictWord(6,11,613),new DictWord(136,11,223),new DictWord(6,0,560),new DictWord(7,0,451),new DictWord(8,0,389),new DictWord(12,0,
					490),new DictWord(13,0,16),new DictWord(13,0,215),new DictWord(13,0,351),new DictWord(18,0,132),new DictWord(147,0,125),new DictWord(135,0,841),new DictWord(136,0,
					566),new DictWord(136,0,938),new DictWord(132,11,670),new DictWord(5,0,912),new DictWord(6,0,1695),new DictWord(140,11,55),new DictWord(9,11,40),new DictWord(139,11
					,136),new DictWord(7,0,1361),new DictWord(7,10,982),new DictWord(10,10,32),new DictWord(143,10,56),new DictWord(11,11,259),new DictWord(140,11,270),new DictWord(5,0
					,236),new DictWord(6,0,572),new DictWord(8,0,492),new DictWord(11,0,618),new DictWord(144,0,56),new DictWord(8,11,572),new DictWord(9,11,310),new DictWord(9,11,682)
				,new DictWord(137,11,698),new DictWord(134,0,1854),new DictWord(5,0,190),new DictWord(136,0,318),new DictWord(133,10,435),new DictWord(135,0,1376),new DictWord(4,11
					,296),new DictWord(6,11,352),new DictWord(7,11,401),new DictWord(7,11,1410),new DictWord(7,11,1594),new DictWord(7,11,1674),new DictWord(8,11,63),new DictWord(8,11,
					660),new DictWord(137,11,74),new DictWord(7,0,349),new DictWord(5,10,85),new DictWord(6,10,419),new DictWord(7,10,305),new DictWord(7,10,361),new DictWord(7,10,1337
				),new DictWord(8,10,71),new DictWord(140,10,519),new DictWord(4,11,139),new DictWord(4,11,388),new DictWord(140,11,188),new DictWord(6,0,1972),new DictWord(6,0,2013
				),new DictWord(8,0,951),new DictWord(10,0,947),new DictWord(10,0,974),new DictWord(10,0,1018),new DictWord(142,0,476),new DictWord(140,10,688),new DictWord(135,10,
					740),new DictWord(5,10,691),new DictWord(7,10,345),new DictWord(9,10,94),new DictWord(140,10,169),new DictWord(9,0,344),new DictWord(5,10,183),new DictWord(6,10,582
				),new DictWord(10,10,679),new DictWord(140,10,435),new DictWord(135,10,511),new DictWord(132,0,850),new DictWord(8,11,441),new DictWord(10,11,314),new DictWord(143,
					11,3),new DictWord(7,10,1993),new DictWord(136,10,684),new DictWord(4,11,747),new DictWord(6,11,290),new DictWord(6,10,583),new DictWord(7,11,649),new DictWord(7,11
					,1479),new DictWord(135,11,1583),new DictWord(133,11,232),new DictWord(133,10,704),new DictWord(134,0,910),new DictWord(4,10,179),new DictWord(5,10,198)
				,new DictWord(133,10,697),new DictWord(7,10,347),new DictWord(7,10,971),new DictWord(8,10,181),new DictWord(138,10,711),new DictWord(136,11,525),new DictWord(14,0,
					19),new DictWord(14,0,28),new DictWord(144,0,29),new DictWord(7,0,85),new DictWord(7,0,247),new DictWord(8,0,585),new DictWord(138,0,163),new DictWord(4,0,487),new DictWord(7,
					11,472),new DictWord(7,11,1801),new DictWord(10,11,748),new DictWord(141,11,458),new DictWord(4,10,243),new DictWord(5,10,203),new DictWord(7,10,19),new DictWord(7,
					10,71),new DictWord(7,10,113),new DictWord(10,10,405),new DictWord(11,10,357),new DictWord(142,10,240),new DictWord(7,10,1450),new DictWord(139,10,99),new DictWord(
					132,11,425),new DictWord(138,0,145),new DictWord(147,0,83),new DictWord(6,10,492),new DictWord(137,11,247),new DictWord(4,0,1013),new DictWord(134,0,
					2033),new DictWord(5,10,134),new DictWord(6,10,408),new DictWord(6,10,495),new DictWord(135,10,1593),new DictWord(135,0,1922),new DictWord(134,11,1768),
				new DictWord(4,0,124),new DictWord(10,0,457),new DictWord(11,0,121),new DictWord(11,0,169),new DictWord(11,0,870),new DictWord(11,0,874),new DictWord(12,0,214),new DictWord(14,
					0,187),new DictWord(143,0,77),new DictWord(5,0,557),new DictWord(135,0,1457),new DictWord(139,0,66),new DictWord(5,11,943),new DictWord(6,11,1779),new DictWord(142,
					10,4),new DictWord(4,10,248),new DictWord(4,10,665),new DictWord(7,10,137),new DictWord(137,10,349),new DictWord(7,0,1193),new DictWord(5,11,245),new DictWord(6,11,
					576),new DictWord(7,11,582),new DictWord(136,11,225),new DictWord(144,0,82),new DictWord(7,10,1270),new DictWord(139,10,612),new DictWord(5,0,454),new DictWord(10,0
					,352),new DictWord(138,11,352),new DictWord(18,0,57),new DictWord(5,10,371),new DictWord(135,10,563),new DictWord(135,0,1333),new DictWord(6,0,107),new DictWord(7,0
					,638),new DictWord(7,0,1632),new DictWord(9,0,396),new DictWord(134,11,610),new DictWord(5,0,370),new DictWord(134,0,1756),new DictWord(4,10,374),new DictWord(7,10,
					547),new DictWord(7,10,1700),new DictWord(7,10,1833),new DictWord(139,10,858),new DictWord(133,0,204),new DictWord(6,0,1305),new DictWord(9,10,311),new DictWord(141
					,10,42),new DictWord(5,0,970),new DictWord(134,0,1706),new DictWord(6,10,1647),new DictWord(7,10,1552),new DictWord(7,10,2010),new DictWord(9,10,494),new DictWord(
					137,10,509),new DictWord(13,11,455),new DictWord(15,11,99),new DictWord(15,11,129),new DictWord(144,11,68),new DictWord(135,0,3),new DictWord(4,0,35),new DictWord(5
					,0,121),new DictWord(5,0,483),new DictWord(5,0,685),new DictWord(6,0,489),new DictWord(6,0,782),new DictWord(6,0,1032),new DictWord(7,0,1204),new DictWord(136,0,394
				),new DictWord(4,0,921),new DictWord(133,0,1007),new DictWord(8,11,360),new DictWord(138,11,63),new DictWord(135,0,1696),new DictWord(134,0,1519),new DictWord(132,
					11,443),new DictWord(135,11,944),new DictWord(6,10,123),new DictWord(7,10,214),new DictWord(9,10,728),new DictWord(10,10,157),new DictWord(11,10,346),new DictWord(
					11,10,662),new DictWord(143,10,106),new DictWord(137,0,981),new DictWord(135,10,1435),new DictWord(134,0,1072),new DictWord(132,0,712),new DictWord(134,
					0,1629),new DictWord(134,0,728),new DictWord(4,11,298),new DictWord(137,11,483),new DictWord(6,0,1177),new DictWord(6,0,1271),new DictWord(5,11,164),new DictWord(7,
					11,121),new DictWord(142,11,189),new DictWord(7,0,1608),new DictWord(4,10,707),new DictWord(5,10,588),new DictWord(6,10,393),new DictWord(13,10,106),new DictWord(18
					,10,49),new DictWord(147,10,41),new DictWord(23,0,16),new DictWord(151,11,16),new DictWord(6,10,211),new DictWord(7,10,1690),new DictWord(11,10,486),new DictWord(
					140,10,369),new DictWord(133,0,485),new DictWord(19,11,15),new DictWord(149,11,27),new DictWord(4,11,172),new DictWord(9,11,611),new DictWord(10,11,436)
				,new DictWord(12,11,673),new DictWord(141,11,255),new DictWord(5,11,844),new DictWord(10,11,484),new DictWord(11,11,754),new DictWord(12,11,457),new DictWord(14,11,
					171),new DictWord(14,11,389),new DictWord(146,11,153),new DictWord(4,0,285),new DictWord(5,0,27),new DictWord(5,0,317),new DictWord(6,0,301),new DictWord(7,0,7),new DictWord(8,
					0,153),new DictWord(10,0,766),new DictWord(11,0,468),new DictWord(12,0,467),new DictWord(141,0,143),new DictWord(134,0,1462),new DictWord(9,11,263),new DictWord(10,
					11,147),new DictWord(138,11,492),new DictWord(133,11,537),new DictWord(6,0,1945),new DictWord(6,0,1986),new DictWord(6,0,1991),new DictWord(134,0,2038),
				new DictWord(134,10,219),new DictWord(137,11,842),new DictWord(14,0,52),new DictWord(17,0,50),new DictWord(5,10,582),new DictWord(6,10,1646),new DictWord(7,10,99),new DictWord(
					7,10,1962),new DictWord(7,10,1986),new DictWord(8,10,515),new DictWord(8,10,773),new DictWord(9,10,23),new DictWord(9,10,491),new DictWord(12,10,620),new DictWord(
					142,10,93),new DictWord(138,11,97),new DictWord(20,0,21),new DictWord(20,0,44),new DictWord(133,10,851),new DictWord(136,0,819),new DictWord(139,0,917),
				new DictWord(5,11,230),new DictWord(5,11,392),new DictWord(6,11,420),new DictWord(8,10,762),new DictWord(8,10,812),new DictWord(9,11,568),new DictWord(9,10,910),new DictWord(
					140,11,612),new DictWord(135,0,784),new DictWord(15,0,135),new DictWord(143,11,135),new DictWord(10,0,454),new DictWord(140,0,324),new DictWord(4,11,0),
				new DictWord(5,11,41),new DictWord(7,11,1459),new DictWord(7,11,1469),new DictWord(7,11,1618),new DictWord(7,11,1859),new DictWord(9,11,549),new DictWord(139,11,905
				),new DictWord(4,10,98),new DictWord(7,10,1365),new DictWord(9,10,422),new DictWord(9,10,670),new DictWord(10,10,775),new DictWord(11,10,210),new DictWord(13,10,26)
				,new DictWord(13,10,457),new DictWord(141,10,476),new DictWord(6,0,1719),new DictWord(6,0,1735),new DictWord(7,0,2016),new DictWord(7,0,2020),new DictWord(8,0,837),
				new DictWord(137,0,852),new DictWord(133,11,696),new DictWord(135,0,852),new DictWord(132,0,952),new DictWord(134,10,1730),new DictWord(132,11,771),new DictWord(138
					,0,568),new DictWord(137,0,448),new DictWord(139,0,146),new DictWord(8,0,67),new DictWord(138,0,419),new DictWord(133,11,921),new DictWord(137,10,147),new DictWord(
					134,0,1826),new DictWord(10,0,657),new DictWord(14,0,297),new DictWord(142,0,361),new DictWord(6,0,666),new DictWord(6,0,767),new DictWord(134,0,1542),new DictWord(
					139,0,729),new DictWord(6,11,180),new DictWord(7,11,1137),new DictWord(8,11,751),new DictWord(139,11,805),new DictWord(4,11,183),new DictWord(7,11,271),
				new DictWord(11,11,824),new DictWord(11,11,952),new DictWord(13,11,278),new DictWord(13,11,339),new DictWord(13,11,482),new DictWord(14,11,424),new DictWord(148,11,
					99),new DictWord(4,0,669),new DictWord(5,11,477),new DictWord(5,11,596),new DictWord(6,11,505),new DictWord(7,11,1221),new DictWord(11,11,907),new DictWord(12,11,
					209),new DictWord(141,11,214),new DictWord(135,11,1215),new DictWord(5,0,402),new DictWord(6,10,30),new DictWord(11,10,56),new DictWord(139,10,305),new DictWord(7,
					11,564),new DictWord(142,11,168),new DictWord(139,0,152),new DictWord(7,0,912),new DictWord(135,10,1614),new DictWord(4,10,150),new DictWord(5,10,303),new DictWord(
					134,10,327),new DictWord(7,0,320),new DictWord(8,0,51),new DictWord(9,0,868),new DictWord(10,0,833),new DictWord(12,0,481),new DictWord(12,0,570),new DictWord(148,0
					,106),new DictWord(132,0,445),new DictWord(7,11,274),new DictWord(11,11,263),new DictWord(11,11,479),new DictWord(11,11,507),new DictWord(140,11,277),new DictWord(
					10,0,555),new DictWord(11,0,308),new DictWord(19,0,95),new DictWord(6,11,1645),new DictWord(8,10,192),new DictWord(10,10,78),new DictWord(141,10,359),new DictWord(
					135,10,786),new DictWord(6,11,92),new DictWord(6,11,188),new DictWord(7,11,1269),new DictWord(7,11,1524),new DictWord(7,11,1876),new DictWord(10,11,228)
				,new DictWord(139,11,1020),new DictWord(4,11,459),new DictWord(133,11,966),new DictWord(11,0,386),new DictWord(6,10,1638),new DictWord(7,10,79),new DictWord(7,10,
					496),new DictWord(9,10,138),new DictWord(10,10,336),new DictWord(12,10,412),new DictWord(12,10,440),new DictWord(142,10,305),new DictWord(133,0,239),new DictWord(7,
					0,83),new DictWord(7,0,1990),new DictWord(8,0,130),new DictWord(139,0,720),new DictWord(138,11,709),new DictWord(4,0,143),new DictWord(5,0,550),new DictWord(133,0,
					752),new DictWord(5,0,123),new DictWord(6,0,530),new DictWord(7,0,348),new DictWord(135,0,1419),new DictWord(135,0,2024),new DictWord(6,11,18),new DictWord(7,11,179
				),new DictWord(7,11,721),new DictWord(7,11,932),new DictWord(8,11,548),new DictWord(8,11,757),new DictWord(9,11,54),new DictWord(9,11,65),new DictWord(9,11,532),new DictWord(9,
					11,844),new DictWord(10,11,113),new DictWord(10,11,117),new DictWord(10,11,236),new DictWord(10,11,315),new DictWord(10,11,430),new DictWord(10,11,798),
				new DictWord(11,11,153),new DictWord(11,11,351),new DictWord(11,11,375),new DictWord(12,11,78),new DictWord(12,11,151),new DictWord(12,11,392),new DictWord(14,11,
					248),new DictWord(143,11,23),new DictWord(7,10,204),new DictWord(7,10,415),new DictWord(8,10,42),new DictWord(10,10,85),new DictWord(139,10,564),new DictWord(134,0,
					958),new DictWord(133,11,965),new DictWord(132,0,210),new DictWord(135,11,1429),new DictWord(138,11,480),new DictWord(134,11,182),new DictWord(139,11,
					345),new DictWord(10,11,65),new DictWord(10,11,488),new DictWord(138,11,497),new DictWord(4,10,3),new DictWord(5,10,247),new DictWord(5,10,644),new DictWord(7,10,
					744),new DictWord(7,10,1207),new DictWord(7,10,1225),new DictWord(7,10,1909),new DictWord(146,10,147),new DictWord(132,0,430),new DictWord(5,10,285),new DictWord(9,
					10,67),new DictWord(13,10,473),new DictWord(143,10,82),new DictWord(144,11,16),new DictWord(7,11,1162),new DictWord(9,11,588),new DictWord(10,11,260),new DictWord(
					151,10,8),new DictWord(133,0,213),new DictWord(138,0,7),new DictWord(135,0,801),new DictWord(134,11,1786),new DictWord(135,11,308),new DictWord(6,0,936)
				,new DictWord(134,0,1289),new DictWord(133,0,108),new DictWord(132,0,885),new DictWord(133,0,219),new DictWord(139,0,587),new DictWord(4,0,193),new DictWord(5,0,916
				),new DictWord(6,0,1041),new DictWord(7,0,364),new DictWord(10,0,398),new DictWord(10,0,726),new DictWord(11,0,317),new DictWord(11,0,626),new DictWord(12,0,142),new DictWord(
					12,0,288),new DictWord(12,0,678),new DictWord(13,0,313),new DictWord(15,0,113),new DictWord(146,0,114),new DictWord(135,0,1165),new DictWord(6,0,241),new DictWord(9
					,0,342),new DictWord(10,0,729),new DictWord(11,0,284),new DictWord(11,0,445),new DictWord(11,0,651),new DictWord(11,0,863),new DictWord(13,0,398),new DictWord(146,0
					,99),new DictWord(7,0,907),new DictWord(136,0,832),new DictWord(9,0,303),new DictWord(4,10,29),new DictWord(6,10,532),new DictWord(7,10,1628),new DictWord(7,10,1648
				),new DictWord(9,10,350),new DictWord(10,10,433),new DictWord(11,10,97),new DictWord(11,10,557),new DictWord(11,10,745),new DictWord(12,10,289),new DictWord(12,10,
					335),new DictWord(12,10,348),new DictWord(12,10,606),new DictWord(13,10,116),new DictWord(13,10,233),new DictWord(13,10,466),new DictWord(14,10,181),new DictWord(14
					,10,209),new DictWord(14,10,232),new DictWord(14,10,236),new DictWord(14,10,300),new DictWord(16,10,41),new DictWord(148,10,97),new DictWord(7,11,423),new DictWord(
					7,10,1692),new DictWord(136,11,588),new DictWord(6,0,931),new DictWord(134,0,1454),new DictWord(5,10,501),new DictWord(7,10,1704),new DictWord(9,10,553)
				,new DictWord(11,10,520),new DictWord(12,10,557),new DictWord(141,10,249),new DictWord(136,11,287),new DictWord(4,0,562),new DictWord(9,0,254),new DictWord(139,0,
					879),new DictWord(132,0,786),new DictWord(14,11,32),new DictWord(18,11,85),new DictWord(20,11,2),new DictWord(152,11,16),new DictWord(135,0,1294),new DictWord(7,11,
					723),new DictWord(135,11,1135),new DictWord(6,0,216),new DictWord(7,0,901),new DictWord(7,0,1343),new DictWord(8,0,493),new DictWord(134,11,403),new DictWord(7,11,
					719),new DictWord(8,11,809),new DictWord(136,11,834),new DictWord(5,11,210),new DictWord(6,11,213),new DictWord(7,11,60),new DictWord(10,11,364),new DictWord(139,11
					,135),new DictWord(7,0,341),new DictWord(11,0,219),new DictWord(5,11,607),new DictWord(8,11,326),new DictWord(136,11,490),new DictWord(4,11,701),new DictWord(5,11,
					472),new DictWord(5,11,639),new DictWord(7,11,1249),new DictWord(9,11,758),new DictWord(139,11,896),new DictWord(135,11,380),new DictWord(135,11,1947),new DictWord(
					139,0,130),new DictWord(135,0,1734),new DictWord(10,0,115),new DictWord(11,0,420),new DictWord(12,0,154),new DictWord(13,0,404),new DictWord(14,0,346),new DictWord(
					143,0,54),new DictWord(134,10,129),new DictWord(4,11,386),new DictWord(7,11,41),new DictWord(8,11,405),new DictWord(9,11,497),new DictWord(11,11,110),new DictWord(
					11,11,360),new DictWord(15,11,37),new DictWord(144,11,84),new DictWord(141,11,282),new DictWord(5,11,46),new DictWord(7,11,1452),new DictWord(7,11,1480)
				,new DictWord(8,11,634),new DictWord(140,11,472),new DictWord(4,11,524),new DictWord(136,11,810),new DictWord(10,11,238),new DictWord(141,11,33),new DictWord(133,0,
					604),new DictWord(5,0,1011),new DictWord(136,0,701),new DictWord(8,0,856),new DictWord(8,0,858),new DictWord(8,0,879),new DictWord(12,0,702),new DictWord(142,0,447)
				,new DictWord(4,0,54),new DictWord(5,0,666),new DictWord(7,0,1039),new DictWord(7,0,1130),new DictWord(9,0,195),new DictWord(138,0,302),new DictWord(4,10,25),new DictWord(5,10,
					60),new DictWord(6,10,504),new DictWord(7,10,614),new DictWord(7,10,1155),new DictWord(140,10,0),new DictWord(7,10,1248),new DictWord(11,10,621),new DictWord(139,10
					,702),new DictWord(133,11,997),new DictWord(137,10,321),new DictWord(134,0,1669),new DictWord(134,0,1791),new DictWord(4,10,379),new DictWord(135,10,
					1397),new DictWord(138,11,372),new DictWord(5,11,782),new DictWord(5,11,829),new DictWord(134,11,1738),new DictWord(135,0,1228),new DictWord(4,10,118),new DictWord(
					6,10,274),new DictWord(6,10,361),new DictWord(7,10,75),new DictWord(141,10,441),new DictWord(132,0,623),new DictWord(9,11,279),new DictWord(10,11,407),new DictWord(
					14,11,84),new DictWord(150,11,18),new DictWord(137,10,841),new DictWord(135,0,798),new DictWord(140,10,693),new DictWord(5,10,314),new DictWord(6,10,221
				),new DictWord(7,10,419),new DictWord(10,10,650),new DictWord(11,10,396),new DictWord(12,10,156),new DictWord(13,10,369),new DictWord(14,10,333),new DictWord(145,10
					,47),new DictWord(135,11,1372),new DictWord(7,0,122),new DictWord(9,0,259),new DictWord(10,0,84),new DictWord(11,0,470),new DictWord(12,0,541),new DictWord(141,0,
					379),new DictWord(134,0,837),new DictWord(8,0,1013),new DictWord(4,11,78),new DictWord(5,11,96),new DictWord(5,11,182),new DictWord(7,11,1724),new DictWord(7,11,
					1825),new DictWord(10,11,394),new DictWord(10,11,471),new DictWord(11,11,532),new DictWord(14,11,340),new DictWord(145,11,88),new DictWord(134,0,577),new DictWord(
					135,11,1964),new DictWord(132,10,913),new DictWord(134,0,460),new DictWord(8,0,891),new DictWord(10,0,901),new DictWord(10,0,919),new DictWord(10,0,932)
				,new DictWord(12,0,715),new DictWord(12,0,728),new DictWord(12,0,777),new DictWord(14,0,457),new DictWord(144,0,103),new DictWord(5,0,82),new DictWord(5,0,131),new DictWord(7,0
					,1755),new DictWord(8,0,31),new DictWord(9,0,168),new DictWord(9,0,764),new DictWord(139,0,869),new DictWord(136,10,475),new DictWord(6,0,605),new DictWord(5,10,
					1016),new DictWord(9,11,601),new DictWord(9,11,619),new DictWord(10,11,505),new DictWord(10,11,732),new DictWord(11,11,355),new DictWord(140,11,139),new DictWord(7,
					10,602),new DictWord(8,10,179),new DictWord(10,10,781),new DictWord(140,10,126),new DictWord(134,0,1246),new DictWord(6,10,329),new DictWord(138,10,111)
				,new DictWord(6,11,215),new DictWord(7,11,1028),new DictWord(7,11,1473),new DictWord(7,11,1721),new DictWord(9,11,424),new DictWord(138,11,779),new DictWord(5,0,278
				),new DictWord(137,0,68),new DictWord(6,0,932),new DictWord(6,0,1084),new DictWord(144,0,86),new DictWord(4,0,163),new DictWord(5,0,201),new DictWord(5,0,307),new DictWord(5,0,
					310),new DictWord(6,0,335),new DictWord(7,0,284),new DictWord(7,0,1660),new DictWord(136,0,165),new DictWord(136,0,781),new DictWord(134,0,707),new DictWord(6,0,33)
				,new DictWord(135,0,1244),new DictWord(5,10,821),new DictWord(6,11,67),new DictWord(6,10,1687),new DictWord(7,11,258),new DictWord(7,11,1630),new DictWord(9,11,354)
				,new DictWord(9,11,675),new DictWord(10,11,830),new DictWord(14,11,80),new DictWord(145,11,80),new DictWord(6,11,141),new DictWord(7,11,225),new DictWord(9,11,59),new DictWord(
					9,11,607),new DictWord(10,11,312),new DictWord(11,11,687),new DictWord(12,11,555),new DictWord(13,11,373),new DictWord(13,11,494),new DictWord(148,11,58
				),new DictWord(134,0,1113),new DictWord(9,0,388),new DictWord(5,10,71),new DictWord(7,10,1407),new DictWord(9,10,704),new DictWord(10,10,261),new DictWord(10,10,619
				),new DictWord(11,10,547),new DictWord(11,10,619),new DictWord(143,10,157),new DictWord(7,0,1953),new DictWord(136,0,720),new DictWord(138,0,203),new DictWord(7,10,
					2008),new DictWord(9,10,337),new DictWord(138,10,517),new DictWord(6,0,326),new DictWord(7,0,677),new DictWord(137,0,425),new DictWord(139,11,81),new DictWord(7,0,
					1316),new DictWord(7,0,1412),new DictWord(7,0,1839),new DictWord(9,0,589),new DictWord(11,0,241),new DictWord(11,0,676),new DictWord(11,0,811),new DictWord(11,0,891
				),new DictWord(12,0,140),new DictWord(12,0,346),new DictWord(12,0,479),new DictWord(13,0,140),new DictWord(13,0,381),new DictWord(14,0,188),new DictWord(18,0,30),new DictWord(
					148,0,108),new DictWord(5,0,416),new DictWord(6,10,86),new DictWord(6,10,603),new DictWord(7,10,292),new DictWord(7,10,561),new DictWord(8,10,257),new DictWord(8,10
					,382),new DictWord(9,10,721),new DictWord(9,10,778),new DictWord(11,10,581),new DictWord(140,10,466),new DictWord(4,10,486),new DictWord(133,10,491),new DictWord(
					134,0,1300),new DictWord(132,10,72),new DictWord(7,0,847),new DictWord(6,10,265),new DictWord(7,11,430),new DictWord(139,11,46),new DictWord(5,11,602),new DictWord(
					6,11,106),new DictWord(7,11,1786),new DictWord(7,11,1821),new DictWord(7,11,2018),new DictWord(9,11,418),new DictWord(137,11,763),new DictWord(5,0,358),
				new DictWord(7,0,535),new DictWord(7,0,1184),new DictWord(10,0,662),new DictWord(13,0,212),new DictWord(13,0,304),new DictWord(13,0,333),new DictWord(145,0,98),new DictWord(5,
					11,65),new DictWord(6,11,416),new DictWord(7,11,1720),new DictWord(7,11,1924),new DictWord(8,11,677),new DictWord(10,11,109),new DictWord(11,11,14),new DictWord(11,
					11,70),new DictWord(11,11,569),new DictWord(11,11,735),new DictWord(15,11,153),new DictWord(148,11,80),new DictWord(6,0,1823),new DictWord(8,0,839),new DictWord(8,0
					,852),new DictWord(8,0,903),new DictWord(10,0,940),new DictWord(12,0,707),new DictWord(140,0,775),new DictWord(135,11,1229),new DictWord(6,0,1522),new DictWord(140,
					0,654),new DictWord(136,11,595),new DictWord(139,0,163),new DictWord(141,0,314),new DictWord(132,0,978),new DictWord(4,0,601),new DictWord(6,0,2035),new DictWord(
					137,10,234),new DictWord(5,10,815),new DictWord(6,10,1688),new DictWord(134,10,1755),new DictWord(133,0,946),new DictWord(136,0,434),new DictWord(6,10,
					197),new DictWord(136,10,205),new DictWord(7,0,411),new DictWord(7,0,590),new DictWord(8,0,631),new DictWord(9,0,323),new DictWord(10,0,355),new DictWord(11,0,491),
				new DictWord(12,0,143),new DictWord(12,0,402),new DictWord(13,0,73),new DictWord(14,0,408),new DictWord(15,0,107),new DictWord(146,0,71),new DictWord(7,0,1467),new DictWord(8,0
					,328),new DictWord(10,0,544),new DictWord(11,0,955),new DictWord(12,0,13),new DictWord(13,0,320),new DictWord(145,0,83),new DictWord(142,0,410),new DictWord(11,0,
					511),new DictWord(13,0,394),new DictWord(14,0,298),new DictWord(14,0,318),new DictWord(146,0,103),new DictWord(6,10,452),new DictWord(7,10,312),new DictWord(138,10,
					219),new DictWord(138,10,589),new DictWord(4,10,333),new DictWord(9,10,176),new DictWord(12,10,353),new DictWord(141,10,187),new DictWord(135,11,329),new DictWord(
					132,11,469),new DictWord(5,0,835),new DictWord(134,0,483),new DictWord(134,11,1743),new DictWord(5,11,929),new DictWord(6,11,340),new DictWord(8,11,376)
				,new DictWord(136,11,807),new DictWord(134,10,1685),new DictWord(132,0,677),new DictWord(5,11,218),new DictWord(7,11,1610),new DictWord(138,11,83),new DictWord(5,11
					,571),new DictWord(135,11,1842),new DictWord(132,11,455),new DictWord(137,0,70),new DictWord(135,0,1405),new DictWord(7,10,135),new DictWord(8,10,7),new DictWord(8,
					10,62),new DictWord(9,10,243),new DictWord(10,10,658),new DictWord(10,10,697),new DictWord(11,10,456),new DictWord(139,10,756),new DictWord(9,10,395),new DictWord(
					138,10,79),new DictWord(137,0,108),new DictWord(6,11,161),new DictWord(7,11,372),new DictWord(137,11,597),new DictWord(132,11,349),new DictWord(132,0,
					777),new DictWord(132,0,331),new DictWord(135,10,631),new DictWord(133,0,747),new DictWord(6,11,432),new DictWord(6,11,608),new DictWord(139,11,322),new DictWord(
					138,10,835),new DictWord(5,11,468),new DictWord(7,11,1809),new DictWord(10,11,325),new DictWord(11,11,856),new DictWord(12,11,345),new DictWord(143,11,
					104),new DictWord(133,11,223),new DictWord(7,10,406),new DictWord(7,10,459),new DictWord(8,10,606),new DictWord(139,10,726),new DictWord(132,11,566),new DictWord(
					142,0,68),new DictWord(4,11,59),new DictWord(135,11,1394),new DictWord(6,11,436),new DictWord(139,11,481),new DictWord(4,11,48),new DictWord(5,11,271),new DictWord(
					135,11,953),new DictWord(139,11,170),new DictWord(5,11,610),new DictWord(136,11,457),new DictWord(133,11,755),new DictWord(135,11,1217),new DictWord(133
					,10,612),new DictWord(132,11,197),new DictWord(132,0,505),new DictWord(4,10,372),new DictWord(7,10,482),new DictWord(8,10,158),new DictWord(9,10,602),new DictWord(9
					,10,615),new DictWord(10,10,245),new DictWord(10,10,678),new DictWord(10,10,744),new DictWord(11,10,248),new DictWord(139,10,806),new DictWord(133,0,326
				),new DictWord(5,10,854),new DictWord(135,10,1991),new DictWord(4,0,691),new DictWord(146,0,16),new DictWord(6,0,628),new DictWord(9,0,35),new DictWord(10,0,680),new DictWord(
					10,0,793),new DictWord(11,0,364),new DictWord(13,0,357),new DictWord(143,0,164),new DictWord(138,0,654),new DictWord(6,0,32),new DictWord(7,0,385),new DictWord(7,0,
					757),new DictWord(7,0,1916),new DictWord(8,0,37),new DictWord(8,0,94),new DictWord(8,0,711),new DictWord(9,0,541),new DictWord(10,0,162),new DictWord(10,0,795),new DictWord(11,
					0,989),new DictWord(11,0,1010),new DictWord(12,0,14),new DictWord(142,0,308),new DictWord(133,11,217),new DictWord(6,0,152),new DictWord(6,0,349),new DictWord(6,0,
					1682),new DictWord(7,0,1252),new DictWord(8,0,112),new DictWord(9,0,435),new DictWord(9,0,668),new DictWord(10,0,290),new DictWord(10,0,319),new DictWord(10,0,815),
				new DictWord(11,0,180),new DictWord(11,0,837),new DictWord(12,0,240),new DictWord(13,0,152),new DictWord(13,0,219),new DictWord(142,0,158),new DictWord(4,0,581),new DictWord(
					134,0,726),new DictWord(5,10,195),new DictWord(135,10,1685),new DictWord(6,0,126),new DictWord(7,0,573),new DictWord(8,0,397),new DictWord(142,0,44),new DictWord(
					138,0,89),new DictWord(7,10,1997),new DictWord(8,10,730),new DictWord(139,10,1006),new DictWord(134,0,1531),new DictWord(134,0,1167),new DictWord(5,0,
					926),new DictWord(12,0,203),new DictWord(133,10,751),new DictWord(4,11,165),new DictWord(7,11,1398),new DictWord(135,11,1829),new DictWord(7,0,1232),new DictWord(
					137,0,531),new DictWord(135,10,821),new DictWord(134,0,943),new DictWord(133,0,670),new DictWord(4,0,880),new DictWord(139,0,231),new DictWord(134,0,
					1617),new DictWord(135,0,1957),new DictWord(5,11,9),new DictWord(7,11,297),new DictWord(7,11,966),new DictWord(140,11,306),new DictWord(6,0,975),new DictWord(134,0,
					985),new DictWord(5,10,950),new DictWord(5,10,994),new DictWord(134,10,351),new DictWord(12,11,21),new DictWord(151,11,7),new DictWord(5,11,146),new DictWord(6,11,
					411),new DictWord(138,11,721),new DictWord(7,0,242),new DictWord(135,0,1942),new DictWord(6,11,177),new DictWord(135,11,467),new DictWord(5,0,421),new DictWord(7,10
					,47),new DictWord(137,10,684),new DictWord(5,0,834),new DictWord(7,0,1202),new DictWord(8,0,14),new DictWord(9,0,481),new DictWord(137,0,880),new DictWord(138,0,465
				),new DictWord(6,0,688),new DictWord(9,0,834),new DictWord(132,10,350),new DictWord(132,0,855),new DictWord(4,0,357),new DictWord(6,0,172),new DictWord(7,0,143),new DictWord(
					137,0,413),new DictWord(133,11,200),new DictWord(132,0,590),new DictWord(7,10,1812),new DictWord(13,10,259),new DictWord(13,10,356),new DictWord(14,10,
					242),new DictWord(147,10,114),new DictWord(133,10,967),new DictWord(11,0,114),new DictWord(4,10,473),new DictWord(7,10,623),new DictWord(8,10,808),new DictWord(9,10
					,871),new DictWord(9,10,893),new DictWord(11,10,431),new DictWord(12,10,112),new DictWord(12,10,217),new DictWord(12,10,243),new DictWord(12,10,562),new DictWord(12
					,10,663),new DictWord(12,10,683),new DictWord(13,10,141),new DictWord(13,10,197),new DictWord(13,10,227),new DictWord(13,10,406),new DictWord(13,10,487)
				,new DictWord(14,10,156),new DictWord(14,10,203),new DictWord(14,10,224),new DictWord(14,10,256),new DictWord(18,10,58),new DictWord(150,10,0),new DictWord(138,10,
					286),new DictWord(4,10,222),new DictWord(7,10,286),new DictWord(136,10,629),new DictWord(5,0,169),new DictWord(7,0,333),new DictWord(136,0,45),new DictWord(134,11,
					481),new DictWord(132,0,198),new DictWord(4,0,24),new DictWord(5,0,140),new DictWord(5,0,185),new DictWord(7,0,1500),new DictWord(11,0,565),new DictWord(11,0,838),new DictWord(
					4,11,84),new DictWord(7,11,1482),new DictWord(10,11,76),new DictWord(138,11,142),new DictWord(133,0,585),new DictWord(141,10,306),new DictWord(133,11,
					1015),new DictWord(4,11,315),new DictWord(5,11,507),new DictWord(135,11,1370),new DictWord(136,10,146),new DictWord(6,0,691),new DictWord(134,0,1503),new DictWord(4
					,0,334),new DictWord(133,0,593),new DictWord(4,10,465),new DictWord(135,10,1663),new DictWord(142,11,173),new DictWord(135,0,913),new DictWord(12,0,116)
				,new DictWord(134,11,1722),new DictWord(134,0,1360),new DictWord(132,0,802),new DictWord(8,11,222),new DictWord(8,11,476),new DictWord(9,11,238),new DictWord(11,11,
					516),new DictWord(11,11,575),new DictWord(15,11,109),new DictWord(146,11,100),new DictWord(6,0,308),new DictWord(9,0,673),new DictWord(7,10,138),new DictWord(7,10,
					517),new DictWord(139,10,238),new DictWord(132,0,709),new DictWord(6,0,1876),new DictWord(6,0,1895),new DictWord(9,0,994),new DictWord(9,0,1006),new DictWord(12,0,
					829),new DictWord(12,0,888),new DictWord(12,0,891),new DictWord(146,0,185),new DictWord(148,10,94),new DictWord(4,0,228),new DictWord(133,0,897),new DictWord(7,0,
					1840),new DictWord(5,10,495),new DictWord(7,10,834),new DictWord(9,10,733),new DictWord(139,10,378),new DictWord(133,10,559),new DictWord(6,10,21),new DictWord(6,10
					,1737),new DictWord(7,10,1444),new DictWord(136,10,224),new DictWord(4,0,608),new DictWord(133,0,497),new DictWord(6,11,40),new DictWord(135,11,1781),new DictWord(
					134,0,1573),new DictWord(135,0,2039),new DictWord(6,0,540),new DictWord(136,0,136),new DictWord(4,0,897),new DictWord(5,0,786),new DictWord(133,10,519),
				new DictWord(6,0,1878),new DictWord(6,0,1884),new DictWord(9,0,938),new DictWord(9,0,948),new DictWord(9,0,955),new DictWord(9,0,973),new DictWord(9,0,1012),new DictWord(12,0,
					895),new DictWord(12,0,927),new DictWord(143,0,254),new DictWord(134,0,1469),new DictWord(133,0,999),new DictWord(4,0,299),new DictWord(135,0,1004),new DictWord(4,0
					,745),new DictWord(133,0,578),new DictWord(136,11,574),new DictWord(133,0,456),new DictWord(134,0,1457),new DictWord(7,0,1679),new DictWord(132,10,402),
				new DictWord(7,0,693),new DictWord(8,0,180),new DictWord(12,0,163),new DictWord(8,10,323),new DictWord(136,10,479),new DictWord(11,10,580),new DictWord(142,10,201),
				new DictWord(5,10,59),new DictWord(135,10,672),new DictWord(132,11,354),new DictWord(146,10,34),new DictWord(4,0,755),new DictWord(135,11,1558),new DictWord(7,0,
					1740),new DictWord(146,0,48),new DictWord(4,10,85),new DictWord(135,10,549),new DictWord(139,0,338),new DictWord(133,10,94),new DictWord(134,0,1091),new DictWord(
					135,11,469),new DictWord(12,0,695),new DictWord(12,0,704),new DictWord(20,0,113),new DictWord(5,11,830),new DictWord(14,11,338),new DictWord(148,11,81),
				new DictWord(135,0,1464),new DictWord(6,10,11),new DictWord(135,10,187),new DictWord(135,0,975),new DictWord(13,0,335),new DictWord(132,10,522),new DictWord(134,0,
					1979),new DictWord(5,11,496),new DictWord(135,11,203),new DictWord(4,10,52),new DictWord(135,10,661),new DictWord(7,0,1566),new DictWord(8,0,269),new DictWord(9,0,
					212),new DictWord(9,0,718),new DictWord(14,0,15),new DictWord(14,0,132),new DictWord(142,0,227),new DictWord(4,0,890),new DictWord(5,0,805),new DictWord(5,0,819),new DictWord(5
					,0,961),new DictWord(6,0,396),new DictWord(6,0,1631),new DictWord(6,0,1678),new DictWord(7,0,1967),new DictWord(7,0,2041),new DictWord(9,0,630),new DictWord(11,0,8)
				,new DictWord(11,0,1019),new DictWord(12,0,176),new DictWord(13,0,225),new DictWord(14,0,292),new DictWord(21,0,24),new DictWord(4,10,383),new DictWord(133,10,520),
				new DictWord(134,11,547),new DictWord(135,11,1748),new DictWord(5,11,88),new DictWord(137,11,239),new DictWord(146,11,128),new DictWord(7,11,650),new DictWord(135,
					11,1310),new DictWord(4,10,281),new DictWord(5,10,38),new DictWord(7,10,194),new DictWord(7,10,668),new DictWord(7,10,1893),new DictWord(137,10,397),new DictWord(
					135,0,1815),new DictWord(9,10,635),new DictWord(139,10,559),new DictWord(7,0,1505),new DictWord(10,0,190),new DictWord(10,0,634),new DictWord(11,0,792),
				new DictWord(12,0,358),new DictWord(140,0,447),new DictWord(5,0,0),new DictWord(6,0,536),new DictWord(7,0,604),new DictWord(13,0,445),new DictWord(145,0,126),new DictWord(7,11,
					1076),new DictWord(9,11,80),new DictWord(11,11,78),new DictWord(11,11,421),new DictWord(11,11,534),new DictWord(140,11,545),new DictWord(8,0,966),new DictWord(10,0,
					1023),new DictWord(14,11,369),new DictWord(146,11,72),new DictWord(135,11,1641),new DictWord(6,0,232),new DictWord(6,0,412),new DictWord(7,0,1074),new DictWord(8,0,
					9),new DictWord(8,0,157),new DictWord(8,0,786),new DictWord(9,0,196),new DictWord(9,0,352),new DictWord(9,0,457),new DictWord(10,0,337),new DictWord(11,0,232),new DictWord(11,0
					,877),new DictWord(12,0,480),new DictWord(140,0,546),new DictWord(135,0,958),new DictWord(4,0,382),new DictWord(136,0,579),new DictWord(4,0,212),new DictWord(135,0,
					1206),new DictWord(4,11,497),new DictWord(5,11,657),new DictWord(135,11,1584),new DictWord(132,0,681),new DictWord(8,0,971),new DictWord(138,0,965),new DictWord(5,
					10,448),new DictWord(136,10,535),new DictWord(14,0,16),new DictWord(146,0,44),new DictWord(11,0,584),new DictWord(11,0,616),new DictWord(14,0,275),new DictWord(11,
					11,584),new DictWord(11,11,616),new DictWord(142,11,275),new DictWord(136,11,13),new DictWord(7,10,610),new DictWord(135,10,1501),new DictWord(7,11,642)
				,new DictWord(8,11,250),new DictWord(11,11,123),new DictWord(11,11,137),new DictWord(13,11,48),new DictWord(142,11,95),new DictWord(133,0,655),new DictWord(17,0,67)
				,new DictWord(147,0,74),new DictWord(134,0,751),new DictWord(134,0,1967),new DictWord(6,0,231),new DictWord(136,0,423),new DictWord(5,0,300),new DictWord(138,0,1016
				),new DictWord(4,10,319),new DictWord(5,10,699),new DictWord(138,10,673),new DictWord(6,0,237),new DictWord(7,0,611),new DictWord(8,0,100),new DictWord(9,0,416),new DictWord(11
					,0,335),new DictWord(12,0,173),new DictWord(18,0,101),new DictWord(6,10,336),new DictWord(8,10,552),new DictWord(9,10,285),new DictWord(10,10,99),new DictWord(139,
					10,568),new DictWord(134,0,1370),new DictWord(7,10,1406),new DictWord(9,10,218),new DictWord(141,10,222),new DictWord(133,10,256),new DictWord(135,0,
					1208),new DictWord(14,11,213),new DictWord(148,11,38),new DictWord(6,0,1219),new DictWord(135,11,1642),new DictWord(13,0,417),new DictWord(14,0,129),new DictWord(
					143,0,15),new DictWord(10,11,545),new DictWord(140,11,301),new DictWord(17,10,39),new DictWord(148,10,36),new DictWord(133,0,199),new DictWord(4,11,904)
				,new DictWord(133,11,794),new DictWord(12,0,427),new DictWord(146,0,38),new DictWord(134,0,949),new DictWord(8,0,665),new DictWord(135,10,634),new DictWord(132,10,
					618),new DictWord(135,10,259),new DictWord(132,10,339),new DictWord(133,11,761),new DictWord(141,10,169),new DictWord(132,10,759),new DictWord(5,0,688),
				new DictWord(7,0,539),new DictWord(135,0,712),new DictWord(7,11,386),new DictWord(138,11,713),new DictWord(134,0,1186),new DictWord(6,11,7),new DictWord(6,11,35),new DictWord(7
					,11,147),new DictWord(7,11,1069),new DictWord(7,11,1568),new DictWord(7,11,1575),new DictWord(7,11,1917),new DictWord(8,11,43),new DictWord(8,11,208),new DictWord(9
					,11,128),new DictWord(9,11,866),new DictWord(10,11,20),new DictWord(11,11,981),new DictWord(147,11,33),new DictWord(7,11,893),new DictWord(8,10,482),new DictWord(
					141,11,424),new DictWord(6,0,312),new DictWord(6,0,1715),new DictWord(10,0,584),new DictWord(11,0,546),new DictWord(11,0,692),new DictWord(12,0,259),new DictWord(12
					,0,295),new DictWord(13,0,46),new DictWord(141,0,154),new DictWord(5,10,336),new DictWord(6,10,341),new DictWord(6,10,478),new DictWord(6,10,1763),new DictWord(136,
					10,386),new DictWord(137,0,151),new DictWord(132,0,588),new DictWord(152,0,4),new DictWord(6,11,322),new DictWord(9,11,552),new DictWord(11,11,274),new DictWord(13,
					11,209),new DictWord(13,11,499),new DictWord(14,11,85),new DictWord(15,11,126),new DictWord(145,11,70),new DictWord(135,10,73),new DictWord(4,0,231),new DictWord(5,
					0,61),new DictWord(6,0,104),new DictWord(7,0,729),new DictWord(7,0,964),new DictWord(7,0,1658),new DictWord(140,0,414),new DictWord(6,0,263),new DictWord(138,0,757)
				,new DictWord(135,10,1971),new DictWord(4,0,612),new DictWord(133,0,561),new DictWord(132,0,320),new DictWord(135,10,1344),new DictWord(8,11,83),new DictWord(8,11,
					817),new DictWord(9,11,28),new DictWord(9,11,29),new DictWord(9,11,885),new DictWord(10,11,387),new DictWord(11,11,633),new DictWord(11,11,740),new DictWord(13,11,
					235),new DictWord(13,11,254),new DictWord(15,11,143),new DictWord(143,11,146),new DictWord(5,10,396),new DictWord(134,10,501),new DictWord(140,11,49),new DictWord(
					132,0,225),new DictWord(4,10,929),new DictWord(5,10,799),new DictWord(8,10,46),new DictWord(136,10,740),new DictWord(4,0,405),new DictWord(7,0,817),new DictWord(14,
					0,58),new DictWord(17,0,37),new DictWord(146,0,124),new DictWord(133,0,974),new DictWord(4,11,412),new DictWord(133,11,581),new DictWord(4,10,892),new DictWord(133,
					10,770),new DictWord(4,0,996),new DictWord(134,0,2026),new DictWord(4,0,527),new DictWord(5,0,235),new DictWord(7,0,1239),new DictWord(11,0,131),new DictWord(140,0,
					370),new DictWord(9,0,16),new DictWord(13,0,386),new DictWord(135,11,421),new DictWord(7,0,956),new DictWord(7,0,1157),new DictWord(7,0,1506),new DictWord(7,0,1606)
				,new DictWord(7,0,1615),new DictWord(7,0,1619),new DictWord(7,0,1736),new DictWord(7,0,1775),new DictWord(8,0,590),new DictWord(9,0,324),new DictWord(9,0,736),new DictWord(9,0,
					774),new DictWord(9,0,776),new DictWord(9,0,784),new DictWord(10,0,567),new DictWord(10,0,708),new DictWord(11,0,518),new DictWord(11,0,613),new DictWord(11,0,695),
				new DictWord(11,0,716),new DictWord(11,0,739),new DictWord(11,0,770),new DictWord(11,0,771),new DictWord(11,0,848),new DictWord(11,0,857),new DictWord(11,0,931),new DictWord(11
					,0,947),new DictWord(12,0,326),new DictWord(12,0,387),new DictWord(12,0,484),new DictWord(12,0,528),new DictWord(12,0,552),new DictWord(12,0,613),new DictWord(13,0,
					189),new DictWord(13,0,256),new DictWord(13,0,340),new DictWord(13,0,432),new DictWord(13,0,436),new DictWord(13,0,440),new DictWord(13,0,454),new DictWord(14,0,174
				),new DictWord(14,0,220),new DictWord(14,0,284),new DictWord(14,0,390),new DictWord(145,0,121),new DictWord(135,10,158),new DictWord(9,0,137),new DictWord(138,0,221
				),new DictWord(4,11,110),new DictWord(10,11,415),new DictWord(10,11,597),new DictWord(142,11,206),new DictWord(141,11,496),new DictWord(135,11,205),new DictWord(151
					,10,25),new DictWord(135,11,778),new DictWord(7,11,1656),new DictWord(7,10,2001),new DictWord(9,11,369),new DictWord(10,11,338),new DictWord(10,11,490),
				new DictWord(11,11,154),new DictWord(11,11,545),new DictWord(11,11,775),new DictWord(13,11,77),new DictWord(141,11,274),new DictWord(4,11,444),new DictWord(10,11,
					146),new DictWord(140,11,9),new DictWord(7,0,390),new DictWord(138,0,140),new DictWord(135,0,1144),new DictWord(134,0,464),new DictWord(7,10,1461),new DictWord(140,
					10,91),new DictWord(132,10,602),new DictWord(4,11,283),new DictWord(135,11,1194),new DictWord(5,0,407),new DictWord(11,0,204),new DictWord(11,0,243),new DictWord(11
					,0,489),new DictWord(12,0,293),new DictWord(19,0,37),new DictWord(20,0,73),new DictWord(150,0,38),new DictWord(7,0,1218),new DictWord(136,0,303),new DictWord(5,0,
					325),new DictWord(8,0,5),new DictWord(8,0,227),new DictWord(9,0,105),new DictWord(10,0,585),new DictWord(12,0,614),new DictWord(4,10,13),new DictWord(5,10,567),new DictWord(7,
					10,1498),new DictWord(9,10,124),new DictWord(11,10,521),new DictWord(140,10,405),new DictWord(135,10,1006),new DictWord(7,0,800),new DictWord(10,0,12),new DictWord(
					134,11,1720),new DictWord(135,0,1783),new DictWord(132,10,735),new DictWord(138,10,812),new DictWord(4,10,170),new DictWord(135,10,323),new DictWord(6,0
					,621),new DictWord(13,0,504),new DictWord(144,0,89),new DictWord(5,10,304),new DictWord(135,10,1403),new DictWord(137,11,216),new DictWord(6,0,920),new DictWord(6,0
					,1104),new DictWord(9,11,183),new DictWord(139,11,286),new DictWord(4,0,376),new DictWord(133,10,742),new DictWord(134,0,218),new DictWord(8,0,641),new DictWord(11,
					0,388),new DictWord(140,0,580),new DictWord(7,0,454),new DictWord(7,0,782),new DictWord(8,0,768),new DictWord(140,0,686),new DictWord(137,11,33),new DictWord(133,10
					,111),new DictWord(144,0,0),new DictWord(10,0,676),new DictWord(140,0,462),new DictWord(6,0,164),new DictWord(136,11,735),new DictWord(133,10,444),new DictWord(150,
					0,50),new DictWord(7,11,1862),new DictWord(12,11,491),new DictWord(12,11,520),new DictWord(13,11,383),new DictWord(14,11,244),new DictWord(146,11,12),new DictWord(5
					,11,132),new DictWord(9,11,486),new DictWord(9,11,715),new DictWord(10,11,458),new DictWord(11,11,373),new DictWord(11,11,668),new DictWord(11,11,795),new DictWord(
					11,11,897),new DictWord(12,11,272),new DictWord(12,11,424),new DictWord(12,11,539),new DictWord(12,11,558),new DictWord(14,11,245),new DictWord(14,11,
					263),new DictWord(14,11,264),new DictWord(14,11,393),new DictWord(142,11,403),new DictWord(8,10,123),new DictWord(15,10,6),new DictWord(144,10,7),new DictWord(6,0,
					285),new DictWord(8,0,654),new DictWord(11,0,749),new DictWord(12,0,190),new DictWord(12,0,327),new DictWord(13,0,120),new DictWord(13,0,121),new DictWord(13,0,327)
				,new DictWord(15,0,47),new DictWord(146,0,40),new DictWord(5,11,8),new DictWord(6,11,89),new DictWord(6,11,400),new DictWord(7,11,1569),new DictWord(7,11,1623),new DictWord(7,
					11,1850),new DictWord(8,11,218),new DictWord(8,11,422),new DictWord(9,11,570),new DictWord(138,11,626),new DictWord(6,11,387),new DictWord(7,11,882),new DictWord(
					141,11,111),new DictWord(6,0,343),new DictWord(7,0,195),new DictWord(9,0,226),new DictWord(10,0,197),new DictWord(10,0,575),new DictWord(11,0,502),new DictWord(11,0
					,899),new DictWord(6,11,224),new DictWord(7,11,877),new DictWord(137,11,647),new DictWord(5,10,937),new DictWord(135,10,100),new DictWord(135,11,790),new DictWord(
					150,0,29),new DictWord(147,0,8),new DictWord(134,0,1812),new DictWord(149,0,8),new DictWord(135,11,394),new DictWord(7,0,1125),new DictWord(9,0,143),new DictWord(11
					,0,61),new DictWord(14,0,405),new DictWord(150,0,21),new DictWord(10,11,755),new DictWord(147,11,29),new DictWord(9,11,378),new DictWord(141,11,162),new DictWord(
					135,10,922),new DictWord(5,10,619),new DictWord(133,10,698),new DictWord(134,0,1327),new DictWord(6,0,1598),new DictWord(137,0,575),new DictWord(9,11,
					569),new DictWord(12,11,12),new DictWord(12,11,81),new DictWord(12,11,319),new DictWord(13,11,69),new DictWord(14,11,259),new DictWord(16,11,87),new DictWord(17,11,
					1),new DictWord(17,11,21),new DictWord(17,11,24),new DictWord(18,11,15),new DictWord(18,11,56),new DictWord(18,11,59),new DictWord(18,11,127),new DictWord(18,11,154
				),new DictWord(19,11,19),new DictWord(148,11,31),new DictWord(6,0,895),new DictWord(135,11,1231),new DictWord(5,0,959),new DictWord(7,11,124),new DictWord(136,11,38
				),new DictWord(5,11,261),new DictWord(7,11,78),new DictWord(7,11,199),new DictWord(8,11,815),new DictWord(9,11,126),new DictWord(138,11,342),new DictWord(5,10,917),
				new DictWord(134,10,1659),new DictWord(7,0,1759),new DictWord(5,11,595),new DictWord(135,11,1863),new DictWord(136,0,173),new DictWord(134,0,266),new DictWord(142,0
					,261),new DictWord(132,11,628),new DictWord(5,10,251),new DictWord(5,10,956),new DictWord(8,10,268),new DictWord(9,10,214),new DictWord(146,10,142),new DictWord(7,
					11,266),new DictWord(136,11,804),new DictWord(135,11,208),new DictWord(6,11,79),new DictWord(7,11,1021),new DictWord(135,11,1519),new DictWord(11,11,704
				),new DictWord(141,11,396),new DictWord(5,10,346),new DictWord(5,10,711),new DictWord(136,10,390),new DictWord(136,11,741),new DictWord(134,11,376),new DictWord(134
					,0,1427),new DictWord(6,0,1033),new DictWord(6,0,1217),new DictWord(136,0,300),new DictWord(133,10,624),new DictWord(6,11,100),new DictWord(7,11,244),new DictWord(7
					,11,632),new DictWord(7,11,1609),new DictWord(8,11,178),new DictWord(8,11,638),new DictWord(141,11,58),new DictWord(6,0,584),new DictWord(5,10,783),new DictWord(7,
					10,1998),new DictWord(135,10,2047),new DictWord(5,0,427),new DictWord(5,0,734),new DictWord(7,0,478),new DictWord(136,0,52),new DictWord(7,0,239),new DictWord(11,0,
					217),new DictWord(142,0,165),new DictWord(134,0,1129),new DictWord(6,0,168),new DictWord(6,0,1734),new DictWord(7,0,20),new DictWord(7,0,1056),new DictWord(8,0,732)
				,new DictWord(9,0,406),new DictWord(9,0,911),new DictWord(138,0,694),new DictWord(132,10,594),new DictWord(133,11,791),new DictWord(7,11,686),new DictWord(8,11,33),
				new DictWord(8,11,238),new DictWord(10,11,616),new DictWord(11,11,467),new DictWord(11,11,881),new DictWord(13,11,217),new DictWord(13,11,253),new DictWord(142,11,
					268),new DictWord(137,11,476),new DictWord(134,0,418),new DictWord(133,0,613),new DictWord(132,0,632),new DictWord(132,11,447),new DictWord(7,0,32),new DictWord(7,0
					,984),new DictWord(8,0,85),new DictWord(8,0,709),new DictWord(9,0,579),new DictWord(9,0,847),new DictWord(9,0,856),new DictWord(10,0,799),new DictWord(11,0,258),new DictWord(11
					,0,1007),new DictWord(12,0,331),new DictWord(12,0,615),new DictWord(13,0,188),new DictWord(13,0,435),new DictWord(14,0,8),new DictWord(15,0,165),new DictWord(16,0,
					27),new DictWord(20,0,40),new DictWord(144,11,35),new DictWord(4,11,128),new DictWord(5,11,415),new DictWord(6,11,462),new DictWord(7,11,294),new DictWord(7,11,578)
				,new DictWord(10,11,710),new DictWord(139,11,86),new DictWord(5,0,694),new DictWord(136,0,909),new DictWord(7,0,1109),new DictWord(11,0,7),new DictWord(5,10,37),new DictWord(6,
					10,39),new DictWord(6,10,451),new DictWord(7,10,218),new DictWord(7,10,1166),new DictWord(7,10,1687),new DictWord(8,10,662),new DictWord(144,10,2),new DictWord(136,
					11,587),new DictWord(6,11,427),new DictWord(7,11,1018),new DictWord(138,11,692),new DictWord(4,11,195),new DictWord(6,10,508),new DictWord(135,11,802),new DictWord(
					4,0,167),new DictWord(135,0,82),new DictWord(5,0,62),new DictWord(6,0,24),new DictWord(6,0,534),new DictWord(7,0,74),new DictWord(7,0,678),new DictWord(7,0,684),new DictWord(7,
					0,1043),new DictWord(7,0,1072),new DictWord(8,0,280),new DictWord(8,0,541),new DictWord(8,0,686),new DictWord(9,0,258),new DictWord(10,0,519),new DictWord(11,0,252)
				,new DictWord(140,0,282),new DictWord(138,0,33),new DictWord(4,0,359),new DictWord(133,11,738),new DictWord(7,0,980),new DictWord(9,0,328),new DictWord(13,0,186),new DictWord(
					13,0,364),new DictWord(7,10,635),new DictWord(7,10,796),new DictWord(8,10,331),new DictWord(9,10,330),new DictWord(9,10,865),new DictWord(10,10,119),new DictWord(10
					,10,235),new DictWord(11,10,111),new DictWord(11,10,129),new DictWord(11,10,240),new DictWord(12,10,31),new DictWord(12,10,66),new DictWord(12,10,222),new DictWord(
					12,10,269),new DictWord(12,10,599),new DictWord(12,10,684),new DictWord(12,10,689),new DictWord(12,10,691),new DictWord(142,10,345),new DictWord(137,10,
					527),new DictWord(6,0,596),new DictWord(7,0,585),new DictWord(135,10,702),new DictWord(134,11,1683),new DictWord(133,0,211),new DictWord(6,0,145),new DictWord(141,0
					,336),new DictWord(134,0,1130),new DictWord(7,0,873),new DictWord(6,10,37),new DictWord(7,10,1666),new DictWord(8,10,195),new DictWord(8,10,316),new DictWord(9,10,
					178),new DictWord(9,10,276),new DictWord(9,10,339),new DictWord(9,10,536),new DictWord(10,10,102),new DictWord(10,10,362),new DictWord(10,10,785),new DictWord(11,10
					,55),new DictWord(11,10,149),new DictWord(11,10,773),new DictWord(13,10,416),new DictWord(13,10,419),new DictWord(14,10,38),new DictWord(14,10,41),new DictWord(142,
					10,210),new DictWord(8,0,840),new DictWord(136,0,841),new DictWord(132,0,263),new DictWord(5,11,3),new DictWord(8,11,578),new DictWord(9,11,118),new DictWord(10,11,
					705),new DictWord(12,11,383),new DictWord(141,11,279),new DictWord(132,0,916),new DictWord(133,11,229),new DictWord(133,10,645),new DictWord(15,0,155),new DictWord(
					16,0,79),new DictWord(8,11,102),new DictWord(10,11,578),new DictWord(10,11,672),new DictWord(12,11,496),new DictWord(13,11,408),new DictWord(14,11,121),
				new DictWord(145,11,106),new DictWord(4,0,599),new DictWord(5,0,592),new DictWord(6,0,1634),new DictWord(7,0,5),new DictWord(7,0,55),new DictWord(7,0,67),new DictWord(7,0,97),new DictWord(
					7,0,691),new DictWord(7,0,979),new DictWord(7,0,1600),new DictWord(7,0,1697),new DictWord(8,0,207),new DictWord(8,0,214),new DictWord(8,0,231),new DictWord(8,0,294)
				,new DictWord(8,0,336),new DictWord(8,0,428),new DictWord(8,0,471),new DictWord(8,0,622),new DictWord(8,0,626),new DictWord(8,0,679),new DictWord(8,0,759),new DictWord(8,0,829)
				,new DictWord(9,0,11),new DictWord(9,0,246),new DictWord(9,0,484),new DictWord(9,0,573),new DictWord(9,0,706),new DictWord(9,0,762),new DictWord(9,0,798),new DictWord(9,0,855),
				new DictWord(9,0,870),new DictWord(9,0,912),new DictWord(10,0,303),new DictWord(10,0,335),new DictWord(10,0,424),new DictWord(10,0,461),new DictWord(10,0,543),new DictWord(10,0
					,759),new DictWord(10,0,814),new DictWord(11,0,59),new DictWord(11,0,199),new DictWord(11,0,235),new DictWord(11,0,590),new DictWord(11,0,631),new DictWord(11,0,929
				),new DictWord(11,0,963),new DictWord(11,0,987),new DictWord(12,0,114),new DictWord(12,0,182),new DictWord(12,0,226),new DictWord(12,0,332),new DictWord(12,0,439),new DictWord(
					12,0,575),new DictWord(12,0,598),new DictWord(12,0,675),new DictWord(13,0,8),new DictWord(13,0,125),new DictWord(13,0,194),new DictWord(13,0,287),new DictWord(14,0,
					197),new DictWord(14,0,383),new DictWord(15,0,53),new DictWord(17,0,63),new DictWord(19,0,46),new DictWord(19,0,98),new DictWord(19,0,106),new DictWord(148,0,85),new DictWord(7
					,0,1356),new DictWord(132,10,290),new DictWord(6,10,70),new DictWord(7,10,1292),new DictWord(10,10,762),new DictWord(139,10,288),new DictWord(150,11,55)
				,new DictWord(4,0,593),new DictWord(8,11,115),new DictWord(8,11,350),new DictWord(9,11,489),new DictWord(10,11,128),new DictWord(11,11,306),new DictWord(12,11,373),
				new DictWord(14,11,30),new DictWord(17,11,79),new DictWord(147,11,80),new DictWord(135,11,1235),new DictWord(134,0,1392),new DictWord(4,11,230),new DictWord(133,11,
					702),new DictWord(147,0,126),new DictWord(7,10,131),new DictWord(7,10,422),new DictWord(8,10,210),new DictWord(140,10,573),new DictWord(134,0,1179),new DictWord(139
					,11,435),new DictWord(139,10,797),new DictWord(134,11,1728),new DictWord(4,0,162),new DictWord(18,11,26),new DictWord(19,11,42),new DictWord(20,11,43),new DictWord(
					21,11,0),new DictWord(23,11,27),new DictWord(152,11,14),new DictWord(132,10,936),new DictWord(6,0,765),new DictWord(5,10,453),new DictWord(134,10,441),new DictWord(
					133,0,187),new DictWord(135,0,1286),new DictWord(6,0,635),new DictWord(6,0,904),new DictWord(6,0,1210),new DictWord(134,0,1489),new DictWord(4,0,215),new DictWord(8
					,0,890),new DictWord(9,0,38),new DictWord(10,0,923),new DictWord(11,0,23),new DictWord(11,0,127),new DictWord(139,0,796),new DictWord(6,0,1165),new DictWord(134,0,
					1306),new DictWord(7,0,716),new DictWord(13,0,97),new DictWord(141,0,251),new DictWord(132,10,653),new DictWord(136,0,657),new DictWord(146,10,80),new DictWord(5,11
					,622),new DictWord(7,11,1032),new DictWord(11,11,26),new DictWord(11,11,213),new DictWord(11,11,707),new DictWord(12,11,380),new DictWord(13,11,226),new DictWord(
					141,11,355),new DictWord(6,0,299),new DictWord(5,11,70),new DictWord(6,11,334),new DictWord(9,11,171),new DictWord(11,11,637),new DictWord(12,11,202),new DictWord(
					14,11,222),new DictWord(145,11,42),new DictWord(142,0,134),new DictWord(4,11,23),new DictWord(5,11,313),new DictWord(5,11,1014),new DictWord(6,11,50),new DictWord(6
					,11,51),new DictWord(7,11,142),new DictWord(7,11,384),new DictWord(9,11,783),new DictWord(139,11,741),new DictWord(4,11,141),new DictWord(7,11,559),new DictWord(8,
					11,640),new DictWord(9,11,460),new DictWord(12,11,183),new DictWord(141,11,488),new DictWord(136,11,614),new DictWord(7,10,1368),new DictWord(8,10,232),
				new DictWord(8,10,361),new DictWord(10,10,682),new DictWord(138,10,742),new DictWord(137,10,534),new DictWord(6,0,1082),new DictWord(140,0,658),new DictWord(137,10,
					27),new DictWord(135,0,2002),new DictWord(142,10,12),new DictWord(4,0,28),new DictWord(5,0,440),new DictWord(7,0,248),new DictWord(11,0,833),new DictWord(140,0,344)
				,new DictWord(7,10,736),new DictWord(139,10,264),new DictWord(134,10,1657),new DictWord(134,0,1654),new DictWord(138,0,531),new DictWord(5,11,222),new DictWord(9,11
					,140),new DictWord(138,11,534),new DictWord(6,0,634),new DictWord(6,0,798),new DictWord(134,0,840),new DictWord(138,11,503),new DictWord(135,10,127),new DictWord(
					133,0,853),new DictWord(5,11,154),new DictWord(7,11,1491),new DictWord(10,11,379),new DictWord(138,11,485),new DictWord(6,0,249),new DictWord(7,0,1234),
				new DictWord(139,0,573),new DictWord(133,11,716),new DictWord(7,11,1570),new DictWord(140,11,542),new DictWord(136,10,364),new DictWord(138,0,527),new DictWord(4,11
					,91),new DictWord(5,11,388),new DictWord(5,11,845),new DictWord(6,11,206),new DictWord(6,11,252),new DictWord(6,11,365),new DictWord(7,11,136),new DictWord(7,11,531
				),new DictWord(8,11,264),new DictWord(136,11,621),new DictWord(134,0,1419),new DictWord(135,11,1441),new DictWord(7,0,49),new DictWord(7,0,392),new DictWord(8,0,20)
				,new DictWord(8,0,172),new DictWord(8,0,690),new DictWord(9,0,383),new DictWord(9,0,845),new DictWord(10,0,48),new DictWord(11,0,293),new DictWord(11,0,832),new DictWord(11,0,
					920),new DictWord(11,0,984),new DictWord(141,0,221),new DictWord(5,0,858),new DictWord(133,0,992),new DictWord(5,0,728),new DictWord(137,10,792),new DictWord(5,10,
					909),new DictWord(9,10,849),new DictWord(138,10,805),new DictWord(7,0,525),new DictWord(7,0,1579),new DictWord(8,0,497),new DictWord(136,0,573),new DictWord(6,0,268
				),new DictWord(137,0,62),new DictWord(135,11,576),new DictWord(134,0,1201),new DictWord(5,11,771),new DictWord(5,11,863),new DictWord(5,11,898),new DictWord(6,11,
					1632),new DictWord(6,11,1644),new DictWord(134,11,1780),new DictWord(133,11,331),new DictWord(7,0,193),new DictWord(7,0,1105),new DictWord(10,0,495),new DictWord(7,
					10,397),new DictWord(8,10,124),new DictWord(8,10,619),new DictWord(9,10,305),new DictWord(11,10,40),new DictWord(12,10,349),new DictWord(13,10,134),new DictWord(13,
					10,295),new DictWord(14,10,155),new DictWord(15,10,120),new DictWord(146,10,105),new DictWord(138,0,106),new DictWord(6,0,859),new DictWord(5,11,107),new DictWord(7
					,11,201),new DictWord(136,11,518),new DictWord(6,11,446),new DictWord(135,11,1817),new DictWord(13,0,23),new DictWord(4,10,262),new DictWord(135,10,342)
				,new DictWord(133,10,641),new DictWord(137,11,851),new DictWord(6,0,925),new DictWord(137,0,813),new DictWord(132,11,504),new DictWord(6,0,613),new DictWord(136,0,
					223),new DictWord(4,10,99),new DictWord(6,10,250),new DictWord(6,10,346),new DictWord(8,10,127),new DictWord(138,10,81),new DictWord(136,0,953),new DictWord(132,10,
					915),new DictWord(139,11,892),new DictWord(5,10,75),new DictWord(9,10,517),new DictWord(10,10,470),new DictWord(12,10,155),new DictWord(141,10,224),new DictWord(4,0
					,666),new DictWord(7,0,1017),new DictWord(7,11,996),new DictWord(138,11,390),new DictWord(5,11,883),new DictWord(133,11,975),new DictWord(14,10,83),new DictWord(142
					,11,83),new DictWord(4,0,670),new DictWord(5,11,922),new DictWord(134,11,1707),new DictWord(135,0,216),new DictWord(9,0,40),new DictWord(11,0,136),new DictWord(135,
					11,787),new DictWord(5,10,954),new DictWord(5,11,993),new DictWord(7,11,515),new DictWord(137,11,91),new DictWord(139,0,259),new DictWord(7,0,1114),new DictWord(9,0
					,310),new DictWord(9,0,682),new DictWord(10,0,440),new DictWord(13,0,40),new DictWord(6,10,304),new DictWord(8,10,418),new DictWord(11,10,341),new DictWord(139,10,
					675),new DictWord(14,0,296),new DictWord(9,10,410),new DictWord(139,10,425),new DictWord(10,11,377),new DictWord(12,11,363),new DictWord(13,11,68),new DictWord(13,
					11,94),new DictWord(14,11,108),new DictWord(142,11,306),new DictWord(7,0,1401),new DictWord(135,0,1476),new DictWord(4,0,296),new DictWord(6,0,475),new DictWord(7,0
					,401),new DictWord(7,0,1410),new DictWord(7,0,1594),new DictWord(7,0,1674),new DictWord(8,0,63),new DictWord(8,0,660),new DictWord(137,0,74),new DictWord(4,0,139),new DictWord(
					4,0,388),new DictWord(140,0,188),new DictWord(132,0,797),new DictWord(132,11,766),new DictWord(5,11,103),new DictWord(7,11,921),new DictWord(8,11,580),new DictWord(
					8,11,593),new DictWord(8,11,630),new DictWord(138,11,28),new DictWord(4,11,911),new DictWord(5,11,867),new DictWord(133,11,1013),new DictWord(134,10,14)
				,new DictWord(134,0,1572),new DictWord(134,10,1708),new DictWord(21,0,39),new DictWord(5,10,113),new DictWord(6,10,243),new DictWord(7,10,1865),new DictWord(11,10,
					161),new DictWord(16,10,37),new DictWord(145,10,99),new DictWord(7,11,1563),new DictWord(141,11,182),new DictWord(5,11,135),new DictWord(6,11,519),new DictWord(7,11
					,1722),new DictWord(10,11,271),new DictWord(11,11,261),new DictWord(145,11,54),new DictWord(132,10,274),new DictWord(134,0,1594),new DictWord(4,11,300),
				new DictWord(5,11,436),new DictWord(135,11,484),new DictWord(4,0,747),new DictWord(6,0,290),new DictWord(7,0,649),new DictWord(7,0,1479),new DictWord(135,0,1583),new DictWord(
					133,11,535),new DictWord(147,11,82),new DictWord(133,0,232),new DictWord(137,0,887),new DictWord(135,10,166),new DictWord(136,0,521),new DictWord(4,0,14
				),new DictWord(7,0,472),new DictWord(7,0,1801),new DictWord(10,0,748),new DictWord(141,0,458),new DictWord(134,0,741),new DictWord(134,0,992),new DictWord(16,0,111)
				,new DictWord(137,10,304),new DictWord(4,0,425),new DictWord(5,11,387),new DictWord(7,11,557),new DictWord(12,11,547),new DictWord(142,11,86),new DictWord(135,11,
					1747),new DictWord(5,10,654),new DictWord(135,11,1489),new DictWord(7,0,789),new DictWord(4,11,6),new DictWord(5,11,708),new DictWord(136,11,75),new DictWord(6,10,
					273),new DictWord(10,10,188),new DictWord(13,10,377),new DictWord(146,10,77),new DictWord(6,0,1593),new DictWord(4,11,303),new DictWord(7,11,619),new DictWord(10,11
					,547),new DictWord(10,11,687),new DictWord(11,11,122),new DictWord(140,11,601),new DictWord(134,0,1768),new DictWord(135,10,410),new DictWord(138,11,772
				),new DictWord(11,0,233),new DictWord(139,10,524),new DictWord(5,0,943),new DictWord(134,0,1779),new DictWord(134,10,1785),new DictWord(136,11,529),new DictWord(132
					,0,955),new DictWord(5,0,245),new DictWord(6,0,576),new DictWord(7,0,582),new DictWord(136,0,225),new DictWord(132,10,780),new DictWord(142,0,241),new DictWord(134,
					0,1943),new DictWord(4,11,106),new DictWord(7,11,310),new DictWord(7,11,1785),new DictWord(10,11,690),new DictWord(139,11,717),new DictWord(134,0,1284),
				new DictWord(5,11,890),new DictWord(133,11,988),new DictWord(6,11,626),new DictWord(142,11,431),new DictWord(10,11,706),new DictWord(145,11,32),new DictWord(137,11,
					332),new DictWord(132,11,698),new DictWord(135,0,709),new DictWord(5,10,948),new DictWord(138,11,17),new DictWord(136,0,554),new DictWord(134,0,1564),new DictWord(
					139,10,941),new DictWord(132,0,443),new DictWord(134,0,909),new DictWord(134,11,84),new DictWord(142,0,280),new DictWord(4,10,532),new DictWord(5,10,706
				),new DictWord(135,10,662),new DictWord(132,0,729),new DictWord(5,10,837),new DictWord(6,10,1651),new DictWord(139,10,985),new DictWord(135,10,1861),new DictWord(4,
					0,348),new DictWord(152,11,3),new DictWord(5,11,986),new DictWord(6,11,130),new DictWord(7,11,1582),new DictWord(8,11,458),new DictWord(10,11,101),new DictWord(10,
					11,318),new DictWord(138,11,823),new DictWord(134,0,758),new DictWord(4,0,298),new DictWord(137,0,848),new DictWord(4,10,330),new DictWord(7,10,933),new DictWord(7,
					10,2012),new DictWord(136,10,292),new DictWord(7,11,1644),new DictWord(137,11,129),new DictWord(6,0,1422),new DictWord(9,0,829),new DictWord(135,10,767)
				,new DictWord(5,0,164),new DictWord(7,0,121),new DictWord(142,0,189),new DictWord(7,0,812),new DictWord(7,0,1261),new DictWord(7,0,1360),new DictWord(9,0,632),new DictWord(140,
					0,352),new DictWord(135,11,1788),new DictWord(139,0,556),new DictWord(135,11,997),new DictWord(145,10,114),new DictWord(4,0,172),new DictWord(9,0,611),new DictWord(
					10,0,436),new DictWord(12,0,673),new DictWord(13,0,255),new DictWord(137,10,883),new DictWord(11,0,530),new DictWord(138,10,274),new DictWord(133,0,844)
				,new DictWord(134,0,984),new DictWord(13,0,232),new DictWord(18,0,35),new DictWord(4,10,703),new DictWord(135,10,207),new DictWord(132,10,571),new DictWord(9,0,263)
				,new DictWord(10,0,147),new DictWord(138,0,492),new DictWord(7,11,1756),new DictWord(137,11,98),new DictWord(5,10,873),new DictWord(5,10,960),new DictWord(8,10,823)
				,new DictWord(137,10,881),new DictWord(133,0,537),new DictWord(132,0,859),new DictWord(7,11,1046),new DictWord(139,11,160),new DictWord(137,0,842),new DictWord(139,
					10,283),new DictWord(5,10,33),new DictWord(6,10,470),new DictWord(139,10,424),new DictWord(6,11,45),new DictWord(7,11,433),new DictWord(8,11,129),new DictWord(9,11,
					21),new DictWord(10,11,392),new DictWord(11,11,79),new DictWord(12,11,499),new DictWord(13,11,199),new DictWord(141,11,451),new DictWord(135,0,1291),new DictWord(
					135,10,1882),new DictWord(7,11,558),new DictWord(136,11,353),new DictWord(134,0,1482),new DictWord(5,0,230),new DictWord(5,0,392),new DictWord(6,0,420),
				new DictWord(9,0,568),new DictWord(140,0,612),new DictWord(6,0,262),new DictWord(7,10,90),new DictWord(7,10,664),new DictWord(7,10,830),new DictWord(7,10,1380),new DictWord(7,
					10,2025),new DictWord(8,11,81),new DictWord(8,10,448),new DictWord(8,10,828),new DictWord(9,11,189),new DictWord(9,11,201),new DictWord(11,11,478),new DictWord(11,
					11,712),new DictWord(141,11,338),new DictWord(142,0,31),new DictWord(5,11,353),new DictWord(151,11,26),new DictWord(132,0,753),new DictWord(4,0,0),new DictWord(5,0,
					41),new DictWord(7,0,1459),new DictWord(7,0,1469),new DictWord(7,0,1859),new DictWord(9,0,549),new DictWord(139,0,905),new DictWord(9,10,417),new DictWord(137,10,
					493),new DictWord(135,11,1113),new DictWord(133,0,696),new DictWord(141,11,448),new DictWord(134,10,295),new DictWord(132,0,834),new DictWord(4,0,771),new DictWord(
					5,10,1019),new DictWord(6,11,25),new DictWord(7,11,855),new DictWord(7,11,1258),new DictWord(144,11,32),new DictWord(134,0,1076),new DictWord(133,0,921)
				,new DictWord(133,0,674),new DictWord(4,11,4),new DictWord(7,11,1118),new DictWord(7,11,1320),new DictWord(7,11,1706),new DictWord(8,11,277),new DictWord(9,11,622),
				new DictWord(10,11,9),new DictWord(11,11,724),new DictWord(12,11,350),new DictWord(12,11,397),new DictWord(13,11,28),new DictWord(13,11,159),new DictWord(15,11,89),
				new DictWord(18,11,5),new DictWord(19,11,9),new DictWord(20,11,34),new DictWord(150,11,47),new DictWord(134,10,208),new DictWord(6,0,444),new DictWord(136,0,308),new DictWord(6
					,0,180),new DictWord(7,0,1137),new DictWord(8,0,751),new DictWord(139,0,805),new DictWord(4,0,183),new DictWord(7,0,271),new DictWord(11,0,824),new DictWord(11,0,
					952),new DictWord(13,0,278),new DictWord(13,0,339),new DictWord(13,0,482),new DictWord(14,0,424),new DictWord(148,0,99),new DictWord(7,11,317),new DictWord(135,11,
					569),new DictWord(4,0,19),new DictWord(5,0,477),new DictWord(5,0,596),new DictWord(6,0,505),new DictWord(7,0,1221),new DictWord(11,0,907),new DictWord(12,0,209),new DictWord(
					141,0,214),new DictWord(135,0,1215),new DictWord(6,0,271),new DictWord(7,0,398),new DictWord(8,0,387),new DictWord(10,0,344),new DictWord(7,10,448),new DictWord(7,
					10,1629),new DictWord(7,10,1813),new DictWord(8,10,442),new DictWord(9,10,710),new DictWord(10,10,282),new DictWord(138,10,722),new DictWord(11,10,844),
				new DictWord(12,10,104),new DictWord(140,10,625),new DictWord(134,11,255),new DictWord(133,10,787),new DictWord(134,0,1645),new DictWord(11,11,956),new DictWord(151
					,11,3),new DictWord(6,0,92),new DictWord(6,0,188),new DictWord(7,0,209),new DictWord(7,0,1269),new DictWord(7,0,1524),new DictWord(7,0,1876),new DictWord(8,0,661),new DictWord(
					10,0,42),new DictWord(10,0,228),new DictWord(11,0,58),new DictWord(11,0,1020),new DictWord(12,0,58),new DictWord(12,0,118),new DictWord(141,0,32),new DictWord(4,0,
					459),new DictWord(133,0,966),new DictWord(4,11,536),new DictWord(7,11,1141),new DictWord(10,11,723),new DictWord(139,11,371),new DictWord(140,0,330),new DictWord(
					134,0,1557),new DictWord(7,11,285),new DictWord(135,11,876),new DictWord(136,10,491),new DictWord(135,11,560),new DictWord(6,0,18),new DictWord(7,0,179)
				,new DictWord(7,0,932),new DictWord(8,0,548),new DictWord(8,0,757),new DictWord(9,0,54),new DictWord(9,0,65),new DictWord(9,0,532),new DictWord(9,0,844),new DictWord(10,0,113),
				new DictWord(10,0,117),new DictWord(10,0,315),new DictWord(10,0,560),new DictWord(10,0,622),new DictWord(10,0,798),new DictWord(11,0,153),new DictWord(11,0,351),new DictWord(11
					,0,375),new DictWord(12,0,78),new DictWord(12,0,151),new DictWord(12,0,392),new DictWord(12,0,666),new DictWord(14,0,248),new DictWord(143,0,23),new DictWord(6,0,
					1742),new DictWord(132,11,690),new DictWord(4,10,403),new DictWord(5,10,441),new DictWord(7,10,450),new DictWord(10,10,840),new DictWord(11,10,101),new DictWord(12,
					10,193),new DictWord(141,10,430),new DictWord(133,0,965),new DictWord(134,0,182),new DictWord(10,0,65),new DictWord(10,0,488),new DictWord(138,0,497),new DictWord(
					135,11,1346),new DictWord(6,0,973),new DictWord(6,0,1158),new DictWord(10,11,200),new DictWord(19,11,2),new DictWord(151,11,22),new DictWord(4,11,190),new DictWord(
					133,11,554),new DictWord(133,10,679),new DictWord(7,0,328),new DictWord(137,10,326),new DictWord(133,11,1001),new DictWord(9,0,588),new DictWord(138,0,
					260),new DictWord(133,11,446),new DictWord(135,10,1128),new DictWord(135,10,1796),new DictWord(147,11,119),new DictWord(134,0,1786),new DictWord(6,0,
					1328),new DictWord(6,0,1985),new DictWord(8,0,962),new DictWord(138,0,1017),new DictWord(135,0,308),new DictWord(11,0,508),new DictWord(4,10,574),new DictWord(7,10,
					350),new DictWord(7,10,1024),new DictWord(8,10,338),new DictWord(9,10,677),new DictWord(138,10,808),new DictWord(138,11,752),new DictWord(135,10,1081),new DictWord(
					137,11,96),new DictWord(7,10,1676),new DictWord(135,10,2037),new DictWord(136,0,588),new DictWord(132,11,304),new DictWord(133,0,614),new DictWord(140,0
					,793),new DictWord(136,0,287),new DictWord(137,10,297),new DictWord(141,10,37),new DictWord(6,11,53),new DictWord(6,11,199),new DictWord(7,11,1408),new DictWord(8,
					11,32),new DictWord(8,11,93),new DictWord(9,11,437),new DictWord(10,11,397),new DictWord(10,11,629),new DictWord(11,11,593),new DictWord(11,11,763),new DictWord(13,
					11,326),new DictWord(145,11,35),new DictWord(134,11,105),new DictWord(9,11,320),new DictWord(10,11,506),new DictWord(138,11,794),new DictWord(5,11,114),
				new DictWord(5,11,255),new DictWord(141,11,285),new DictWord(140,0,290),new DictWord(7,11,2035),new DictWord(8,11,19),new DictWord(9,11,89),new DictWord(138,11,831)
				,new DictWord(134,0,1136),new DictWord(7,0,719),new DictWord(8,0,796),new DictWord(8,0,809),new DictWord(8,0,834),new DictWord(6,10,306),new DictWord(7,10,1140),new DictWord(7,
					10,1340),new DictWord(8,10,133),new DictWord(138,10,449),new DictWord(139,10,1011),new DictWord(5,0,210),new DictWord(6,0,213),new DictWord(7,0,60),new DictWord(10,
					0,364),new DictWord(139,0,135),new DictWord(5,0,607),new DictWord(8,0,326),new DictWord(136,0,490),new DictWord(138,11,176),new DictWord(132,0,701),new DictWord(5,0
					,472),new DictWord(7,0,380),new DictWord(137,0,758),new DictWord(135,0,1947),new DictWord(6,0,1079),new DictWord(138,0,278),new DictWord(138,11,391),new DictWord(5,
					10,329),new DictWord(8,10,260),new DictWord(139,11,156),new DictWord(4,0,386),new DictWord(7,0,41),new DictWord(8,0,405),new DictWord(8,0,728),new DictWord(9,0,497)
				,new DictWord(11,0,110),new DictWord(11,0,360),new DictWord(15,0,37),new DictWord(144,0,84),new DictWord(5,0,46),new DictWord(7,0,1452),new DictWord(7,0,1480),new DictWord(8,0,
					634),new DictWord(140,0,472),new DictWord(136,0,961),new DictWord(4,0,524),new DictWord(136,0,810),new DictWord(10,0,238),new DictWord(141,0,33),new DictWord(132,10
					,657),new DictWord(152,10,7),new DictWord(133,0,532),new DictWord(5,0,997),new DictWord(135,10,1665),new DictWord(7,11,594),new DictWord(7,11,851),new DictWord(7,11
					,1858),new DictWord(9,11,411),new DictWord(9,11,574),new DictWord(9,11,666),new DictWord(9,11,737),new DictWord(10,11,346),new DictWord(10,11,712),new DictWord(11,
					11,246),new DictWord(11,11,432),new DictWord(11,11,517),new DictWord(11,11,647),new DictWord(11,11,679),new DictWord(11,11,727),new DictWord(12,11,304),
				new DictWord(12,11,305),new DictWord(12,11,323),new DictWord(12,11,483),new DictWord(12,11,572),new DictWord(12,11,593),new DictWord(12,11,602),new DictWord(13,11,
					95),new DictWord(13,11,101),new DictWord(13,11,171),new DictWord(13,11,315),new DictWord(13,11,378),new DictWord(13,11,425),new DictWord(13,11,475),new DictWord(14,
					11,63),new DictWord(14,11,380),new DictWord(14,11,384),new DictWord(15,11,133),new DictWord(18,11,112),new DictWord(148,11,72),new DictWord(5,11,955),new DictWord(
					136,11,814),new DictWord(134,0,1301),new DictWord(5,10,66),new DictWord(7,10,1896),new DictWord(136,10,288),new DictWord(133,11,56),new DictWord(134,10,
					1643),new DictWord(6,0,1298),new DictWord(148,11,100),new DictWord(5,0,782),new DictWord(5,0,829),new DictWord(6,0,671),new DictWord(6,0,1156),new DictWord(6,0,1738
				),new DictWord(137,11,621),new DictWord(4,0,306),new DictWord(5,0,570),new DictWord(7,0,1347),new DictWord(5,10,91),new DictWord(5,10,648),new DictWord(5,10,750),new DictWord(5
					,10,781),new DictWord(6,10,54),new DictWord(6,10,112),new DictWord(6,10,402),new DictWord(6,10,1732),new DictWord(7,10,315),new DictWord(7,10,749),new DictWord(7,10
					,1900),new DictWord(9,10,78),new DictWord(9,10,508),new DictWord(10,10,611),new DictWord(10,10,811),new DictWord(11,10,510),new DictWord(11,10,728),new DictWord(13,
					10,36),new DictWord(14,10,39),new DictWord(16,10,83),new DictWord(17,10,124),new DictWord(148,10,30),new DictWord(8,10,570),new DictWord(9,11,477),new DictWord(141,
					11,78),new DictWord(4,11,639),new DictWord(10,11,4),new DictWord(10,10,322),new DictWord(10,10,719),new DictWord(11,10,407),new DictWord(11,11,638),new DictWord(12,
					11,177),new DictWord(148,11,57),new DictWord(7,0,1823),new DictWord(139,0,693),new DictWord(7,0,759),new DictWord(5,11,758),new DictWord(8,10,125),new DictWord(8,10
					,369),new DictWord(8,10,524),new DictWord(10,10,486),new DictWord(11,10,13),new DictWord(11,10,381),new DictWord(11,10,736),new DictWord(11,10,766),new DictWord(11,
					10,845),new DictWord(13,10,114),new DictWord(13,10,292),new DictWord(142,10,47),new DictWord(7,0,1932),new DictWord(6,10,1684),new DictWord(6,10,1731),new DictWord(
					7,10,356),new DictWord(8,10,54),new DictWord(8,10,221),new DictWord(9,10,225),new DictWord(9,10,356),new DictWord(10,10,77),new DictWord(10,10,446),new DictWord(10,
					10,731),new DictWord(12,10,404),new DictWord(141,10,491),new DictWord(135,11,552),new DictWord(135,11,1112),new DictWord(4,0,78),new DictWord(5,0,96),new DictWord(5
					,0,182),new DictWord(6,0,1257),new DictWord(7,0,1724),new DictWord(7,0,1825),new DictWord(10,0,394),new DictWord(10,0,471),new DictWord(11,0,532),new DictWord(14,0,
					340),new DictWord(145,0,88),new DictWord(139,11,328),new DictWord(135,0,1964),new DictWord(132,10,411),new DictWord(4,10,80),new DictWord(5,10,44),new DictWord(137,
					11,133),new DictWord(5,11,110),new DictWord(6,11,169),new DictWord(6,11,1702),new DictWord(7,11,400),new DictWord(8,11,538),new DictWord(9,11,184),new DictWord(9,11
					,524),new DictWord(140,11,218),new DictWord(4,0,521),new DictWord(5,10,299),new DictWord(7,10,1083),new DictWord(140,11,554),new DictWord(6,11,133),new DictWord(9,
					11,353),new DictWord(12,11,628),new DictWord(146,11,79),new DictWord(6,0,215),new DictWord(7,0,584),new DictWord(7,0,1028),new DictWord(7,0,1473),new DictWord(7,0,
					1721),new DictWord(9,0,424),new DictWord(138,0,779),new DictWord(7,0,857),new DictWord(7,0,1209),new DictWord(7,10,1713),new DictWord(9,10,537),new DictWord(10,10,
					165),new DictWord(12,10,219),new DictWord(140,10,561),new DictWord(4,10,219),new DictWord(6,11,93),new DictWord(7,11,1422),new DictWord(7,10,1761),new DictWord(7,11
					,1851),new DictWord(8,11,673),new DictWord(9,10,86),new DictWord(9,11,529),new DictWord(140,11,43),new DictWord(137,11,371),new DictWord(136,0,671),new DictWord(5,0
					,328),new DictWord(135,0,918),new DictWord(132,0,529),new DictWord(9,11,25),new DictWord(10,11,467),new DictWord(138,11,559),new DictWord(4,11,335),new DictWord(135
					,11,942),new DictWord(134,0,716),new DictWord(134,0,1509),new DictWord(6,0,67),new DictWord(7,0,258),new DictWord(7,0,1630),new DictWord(9,0,354),new DictWord(9,0,
					675),new DictWord(10,0,830),new DictWord(14,0,80),new DictWord(17,0,80),new DictWord(140,10,428),new DictWord(134,0,1112),new DictWord(6,0,141),new DictWord(7,0,225
				),new DictWord(9,0,59),new DictWord(9,0,607),new DictWord(10,0,312),new DictWord(11,0,687),new DictWord(12,0,555),new DictWord(13,0,373),new DictWord(13,0,494),new DictWord(148
					,0,58),new DictWord(133,10,514),new DictWord(8,11,39),new DictWord(10,11,773),new DictWord(11,11,84),new DictWord(12,11,205),new DictWord(142,11,1),new DictWord(8,0
					,783),new DictWord(5,11,601),new DictWord(133,11,870),new DictWord(136,11,594),new DictWord(4,10,55),new DictWord(5,10,301),new DictWord(6,10,571),new DictWord(14,
					10,49),new DictWord(146,10,102),new DictWord(132,11,181),new DictWord(134,11,1652),new DictWord(133,10,364),new DictWord(4,11,97),new DictWord(5,11,147)
				,new DictWord(6,11,286),new DictWord(7,11,1362),new DictWord(141,11,176),new DictWord(4,10,76),new DictWord(7,10,1550),new DictWord(9,10,306),new DictWord(9,10,430)
				,new DictWord(9,10,663),new DictWord(10,10,683),new DictWord(11,10,427),new DictWord(11,10,753),new DictWord(12,10,334),new DictWord(12,10,442),new DictWord(14,10,
					258),new DictWord(14,10,366),new DictWord(143,10,131),new DictWord(137,10,52),new DictWord(6,0,955),new DictWord(134,0,1498),new DictWord(6,11,375),new DictWord(7,
					11,169),new DictWord(7,11,254),new DictWord(136,11,780),new DictWord(7,0,430),new DictWord(11,0,46),new DictWord(14,0,343),new DictWord(142,11,343),new DictWord(135
					,0,1183),new DictWord(5,0,602),new DictWord(7,0,2018),new DictWord(9,0,418),new DictWord(9,0,803),new DictWord(135,11,1447),new DictWord(8,0,677),new DictWord(135,
					11,1044),new DictWord(139,11,285),new DictWord(4,10,656),new DictWord(135,10,779),new DictWord(135,10,144),new DictWord(5,11,629),new DictWord(135,11,
					1549),new DictWord(135,10,1373),new DictWord(138,11,209),new DictWord(7,10,554),new DictWord(7,10,605),new DictWord(141,10,10),new DictWord(5,10,838),new DictWord(5
					,10,841),new DictWord(134,10,1649),new DictWord(133,10,1012),new DictWord(6,0,1357),new DictWord(134,0,1380),new DictWord(144,0,53),new DictWord(6,0,590
				),new DictWord(7,10,365),new DictWord(7,10,1357),new DictWord(7,10,1497),new DictWord(8,10,154),new DictWord(141,10,281),new DictWord(133,10,340),new DictWord(132,
					11,420),new DictWord(135,0,329),new DictWord(147,11,32),new DictWord(4,0,469),new DictWord(10,11,429),new DictWord(139,10,495),new DictWord(8,10,261),new DictWord(9
					,10,144),new DictWord(9,10,466),new DictWord(10,10,370),new DictWord(12,10,470),new DictWord(13,10,144),new DictWord(142,10,348),new DictWord(142,0,460)
				,new DictWord(4,11,325),new DictWord(9,10,897),new DictWord(138,11,125),new DictWord(6,0,1743),new DictWord(6,10,248),new DictWord(9,10,546),new DictWord(10,10,535)
				,new DictWord(11,10,681),new DictWord(141,10,135),new DictWord(4,0,990),new DictWord(5,0,929),new DictWord(6,0,340),new DictWord(8,0,376),new DictWord(8,0,807),new DictWord(8,0
					,963),new DictWord(8,0,980),new DictWord(138,0,1007),new DictWord(134,0,1603),new DictWord(140,0,250),new DictWord(4,11,714),new DictWord(133,11,469),new DictWord(
					134,10,567),new DictWord(136,10,445),new DictWord(5,0,218),new DictWord(7,0,1610),new DictWord(8,0,646),new DictWord(10,0,83),new DictWord(11,11,138),new DictWord(
					140,11,40),new DictWord(7,0,1512),new DictWord(135,0,1794),new DictWord(135,11,1216),new DictWord(11,0,0),new DictWord(16,0,78),new DictWord(132,11,718)
				,new DictWord(133,0,571),new DictWord(132,0,455),new DictWord(134,0,1012),new DictWord(5,11,124),new DictWord(5,11,144),new DictWord(6,11,548),new DictWord(7,11,15)
				,new DictWord(7,11,153),new DictWord(137,11,629),new DictWord(142,11,10),new DictWord(6,11,75),new DictWord(7,11,1531),new DictWord(8,11,416),new DictWord(9,11,240)
				,new DictWord(9,11,275),new DictWord(10,11,100),new DictWord(11,11,658),new DictWord(11,11,979),new DictWord(12,11,86),new DictWord(13,11,468),new DictWord(14,11,66
				),new DictWord(14,11,207),new DictWord(15,11,20),new DictWord(15,11,25),new DictWord(144,11,58),new DictWord(132,10,577),new DictWord(5,11,141),new DictWord(5,11,
					915),new DictWord(6,11,1783),new DictWord(7,11,211),new DictWord(7,11,698),new DictWord(7,11,1353),new DictWord(9,11,83),new DictWord(9,11,281),new DictWord(10,11,
					376),new DictWord(10,11,431),new DictWord(11,11,543),new DictWord(12,11,664),new DictWord(13,11,280),new DictWord(13,11,428),new DictWord(14,11,61),new DictWord(14,
					11,128),new DictWord(17,11,52),new DictWord(145,11,81),new DictWord(6,0,161),new DictWord(7,0,372),new DictWord(137,0,597),new DictWord(132,0,349),new DictWord(10,
					11,702),new DictWord(139,11,245),new DictWord(134,0,524),new DictWord(134,10,174),new DictWord(6,0,432),new DictWord(9,0,751),new DictWord(139,0,322),new DictWord(
					147,11,94),new DictWord(4,11,338),new DictWord(133,11,400),new DictWord(5,0,468),new DictWord(10,0,325),new DictWord(11,0,856),new DictWord(12,0,345),new DictWord(
					143,0,104),new DictWord(133,0,223),new DictWord(132,0,566),new DictWord(4,11,221),new DictWord(5,11,659),new DictWord(5,11,989),new DictWord(7,11,697),new DictWord(
					7,11,1211),new DictWord(138,11,284),new DictWord(135,11,1070),new DictWord(4,0,59),new DictWord(135,0,1394),new DictWord(6,0,436),new DictWord(11,0,481)
				,new DictWord(5,10,878),new DictWord(133,10,972),new DictWord(4,0,48),new DictWord(5,0,271),new DictWord(135,0,953),new DictWord(5,0,610),new DictWord(136,0,457),new DictWord(4
					,0,773),new DictWord(5,0,618),new DictWord(137,0,756),new DictWord(133,0,755),new DictWord(135,0,1217),new DictWord(138,11,507),new DictWord(132,10,351)
				,new DictWord(132,0,197),new DictWord(143,11,78),new DictWord(4,11,188),new DictWord(7,11,805),new DictWord(11,11,276),new DictWord(142,11,293),new DictWord(5,11,
					884),new DictWord(139,11,991),new DictWord(132,10,286),new DictWord(10,0,259),new DictWord(10,0,428),new DictWord(7,10,438),new DictWord(7,10,627),new DictWord(7,10
					,1516),new DictWord(8,10,40),new DictWord(9,10,56),new DictWord(9,10,294),new DictWord(11,10,969),new DictWord(11,10,995),new DictWord(146,10,148),new DictWord(4,0,
					356),new DictWord(5,0,217),new DictWord(5,0,492),new DictWord(5,0,656),new DictWord(8,0,544),new DictWord(136,11,544),new DictWord(5,0,259),new DictWord(6,0,1230),new DictWord(
					7,0,414),new DictWord(7,0,854),new DictWord(142,0,107),new DictWord(132,0,1007),new DictWord(15,0,14),new DictWord(144,0,5),new DictWord(6,0,1580),new DictWord(132,
					10,738),new DictWord(132,11,596),new DictWord(132,0,673),new DictWord(133,10,866),new DictWord(6,0,1843),new DictWord(135,11,1847),new DictWord(4,0,165)
				,new DictWord(7,0,1398),new DictWord(135,0,1829),new DictWord(135,11,1634),new DictWord(147,11,65),new DictWord(6,0,885),new DictWord(6,0,1009),new DictWord(137,0,
					809),new DictWord(133,10,116),new DictWord(132,10,457),new DictWord(136,11,770),new DictWord(9,0,498),new DictWord(12,0,181),new DictWord(10,11,361),new DictWord(
					142,11,316),new DictWord(134,11,595),new DictWord(5,0,9),new DictWord(7,0,297),new DictWord(7,0,966),new DictWord(140,0,306),new DictWord(4,11,89),new DictWord(5,11
					,489),new DictWord(6,11,315),new DictWord(7,11,553),new DictWord(7,11,1745),new DictWord(138,11,243),new DictWord(134,0,1487),new DictWord(132,0,437),new DictWord(5
					,0,146),new DictWord(6,0,411),new DictWord(138,0,721),new DictWord(5,10,527),new DictWord(6,10,189),new DictWord(135,10,859),new DictWord(11,10,104),new DictWord(11
					,10,554),new DictWord(15,10,60),new DictWord(143,10,125),new DictWord(6,11,1658),new DictWord(9,11,3),new DictWord(10,11,154),new DictWord(11,11,641),new DictWord(
					13,11,85),new DictWord(13,11,201),new DictWord(141,11,346),new DictWord(6,0,177),new DictWord(135,0,467),new DictWord(134,0,1377),new DictWord(134,10,
					116),new DictWord(136,11,645),new DictWord(4,11,166),new DictWord(5,11,505),new DictWord(6,11,1670),new DictWord(137,11,110),new DictWord(133,10,487),new DictWord(4
					,10,86),new DictWord(5,10,667),new DictWord(5,10,753),new DictWord(6,10,316),new DictWord(6,10,455),new DictWord(135,10,946),new DictWord(133,0,200),new DictWord(
					132,0,959),new DictWord(6,0,1928),new DictWord(134,0,1957),new DictWord(139,11,203),new DictWord(150,10,45),new DictWord(4,10,79),new DictWord(7,10,1773
				),new DictWord(10,10,450),new DictWord(11,10,589),new DictWord(13,10,332),new DictWord(13,10,493),new DictWord(14,10,183),new DictWord(14,10,334),new DictWord(14,10
					,362),new DictWord(14,10,368),new DictWord(14,10,376),new DictWord(14,10,379),new DictWord(19,10,90),new DictWord(19,10,103),new DictWord(19,10,127),new DictWord(
					148,10,90),new DictWord(6,0,1435),new DictWord(135,11,1275),new DictWord(134,0,481),new DictWord(7,11,445),new DictWord(8,11,307),new DictWord(8,11,704)
				,new DictWord(10,11,41),new DictWord(10,11,439),new DictWord(11,11,237),new DictWord(11,11,622),new DictWord(140,11,201),new DictWord(135,11,869),new DictWord(4,0,
					84),new DictWord(7,0,1482),new DictWord(10,0,76),new DictWord(138,0,142),new DictWord(11,11,277),new DictWord(144,11,14),new DictWord(135,11,1977),new DictWord(4,11
					,189),new DictWord(5,11,713),new DictWord(136,11,57),new DictWord(133,0,1015),new DictWord(138,11,371),new DictWord(4,0,315),new DictWord(5,0,507),new DictWord(135,
					0,1370),new DictWord(4,11,552),new DictWord(142,10,381),new DictWord(9,0,759),new DictWord(16,0,31),new DictWord(16,0,39),new DictWord(16,0,75),new DictWord(18,0,24
				),new DictWord(20,0,42),new DictWord(152,0,1),new DictWord(134,0,712),new DictWord(134,0,1722),new DictWord(133,10,663),new DictWord(133,10,846),new DictWord(8,0,
					222),new DictWord(8,0,476),new DictWord(9,0,238),new DictWord(11,0,516),new DictWord(11,0,575),new DictWord(15,0,109),new DictWord(146,0,100),new DictWord(7,0,1402)
				,new DictWord(7,0,1414),new DictWord(12,0,456),new DictWord(5,10,378),new DictWord(8,10,465),new DictWord(9,10,286),new DictWord(10,10,185),new DictWord(10,10,562),
				new DictWord(10,10,635),new DictWord(11,10,31),new DictWord(11,10,393),new DictWord(13,10,312),new DictWord(18,10,65),new DictWord(18,10,96),new DictWord(147,10,89)
				,new DictWord(4,0,986),new DictWord(6,0,1958),new DictWord(6,0,2032),new DictWord(8,0,934),new DictWord(138,0,985),new DictWord(7,10,1880),new DictWord(9,10,680),new DictWord(
					139,10,798),new DictWord(134,10,1770),new DictWord(145,11,49),new DictWord(132,11,614),new DictWord(132,10,648),new DictWord(5,10,945),new DictWord(6,10
					,1656),new DictWord(6,10,1787),new DictWord(7,10,167),new DictWord(8,10,824),new DictWord(9,10,391),new DictWord(10,10,375),new DictWord(139,10,185),new DictWord(
					138,11,661),new DictWord(7,0,1273),new DictWord(135,11,1945),new DictWord(7,0,706),new DictWord(7,0,1058),new DictWord(138,0,538),new DictWord(7,10,1645
				),new DictWord(8,10,352),new DictWord(137,10,249),new DictWord(132,10,152),new DictWord(11,0,92),new DictWord(11,0,196),new DictWord(11,0,409),new DictWord(11,0,450
				),new DictWord(11,0,666),new DictWord(11,0,777),new DictWord(12,0,262),new DictWord(13,0,385),new DictWord(13,0,393),new DictWord(15,0,115),new DictWord(16,0,45),new DictWord(
					145,0,82),new DictWord(133,10,1006),new DictWord(6,0,40),new DictWord(135,0,1781),new DictWord(9,11,614),new DictWord(139,11,327),new DictWord(5,10,420)
				,new DictWord(135,10,1449),new DictWord(135,0,431),new DictWord(10,0,97),new DictWord(135,10,832),new DictWord(6,0,423),new DictWord(7,0,665),new DictWord(135,0,
					1210),new DictWord(7,0,237),new DictWord(8,0,664),new DictWord(9,0,42),new DictWord(9,0,266),new DictWord(9,0,380),new DictWord(9,0,645),new DictWord(10,0,177),new DictWord(138
					,0,276),new DictWord(7,0,264),new DictWord(133,10,351),new DictWord(8,0,213),new DictWord(5,10,40),new DictWord(7,10,598),new DictWord(7,10,1638),new DictWord(9,10,
					166),new DictWord(9,10,640),new DictWord(9,10,685),new DictWord(9,10,773),new DictWord(11,10,215),new DictWord(13,10,65),new DictWord(14,10,172),new DictWord(14,10,
					317),new DictWord(145,10,6),new DictWord(5,11,84),new DictWord(134,11,163),new DictWord(8,10,60),new DictWord(9,10,343),new DictWord(139,10,769),new DictWord(137,0,
					455),new DictWord(133,11,410),new DictWord(8,0,906),new DictWord(12,0,700),new DictWord(12,0,706),new DictWord(140,0,729),new DictWord(21,11,33),new DictWord(150,11
					,40),new DictWord(7,10,1951),new DictWord(8,10,765),new DictWord(8,10,772),new DictWord(140,10,671),new DictWord(7,10,108),new DictWord(8,10,219),new DictWord(8,10,
					388),new DictWord(9,10,639),new DictWord(9,10,775),new DictWord(11,10,275),new DictWord(140,10,464),new DictWord(5,11,322),new DictWord(7,11,1941),new DictWord(8,11
					,186),new DictWord(9,11,262),new DictWord(10,11,187),new DictWord(14,11,208),new DictWord(146,11,130),new DictWord(139,0,624),new DictWord(8,0,574),new DictWord(5,
					11,227),new DictWord(140,11,29),new DictWord(7,11,1546),new DictWord(11,11,299),new DictWord(142,11,407),new DictWord(5,10,15),new DictWord(6,10,56),new DictWord(7,
					10,1758),new DictWord(8,10,500),new DictWord(9,10,730),new DictWord(11,10,331),new DictWord(13,10,150),new DictWord(142,10,282),new DictWord(7,11,1395),
				new DictWord(8,11,486),new DictWord(9,11,236),new DictWord(9,11,878),new DictWord(10,11,218),new DictWord(11,11,95),new DictWord(19,11,17),new DictWord(147,11,31),new DictWord(
					135,11,2043),new DictWord(4,0,354),new DictWord(146,11,4),new DictWord(140,11,80),new DictWord(135,0,1558),new DictWord(134,10,1886),new DictWord(5,10,
					205),new DictWord(6,10,438),new DictWord(137,10,711),new DictWord(133,11,522),new DictWord(133,10,534),new DictWord(7,0,235),new DictWord(7,0,1475),new DictWord(15,
					0,68),new DictWord(146,0,120),new DictWord(137,10,691),new DictWord(4,0,942),new DictWord(6,0,1813),new DictWord(8,0,917),new DictWord(10,0,884),new DictWord(12,0,
					696),new DictWord(12,0,717),new DictWord(12,0,723),new DictWord(12,0,738),new DictWord(12,0,749),new DictWord(12,0,780),new DictWord(16,0,97),new DictWord(146,0,169
				),new DictWord(6,10,443),new DictWord(8,11,562),new DictWord(9,10,237),new DictWord(9,10,571),new DictWord(9,10,695),new DictWord(10,10,139),new DictWord(11,10,715)
				,new DictWord(12,10,417),new DictWord(141,10,421),new DictWord(135,0,957),new DictWord(133,0,830),new DictWord(134,11,1771),new DictWord(146,0,23),new DictWord(5,0,
					496),new DictWord(6,0,694),new DictWord(7,0,203),new DictWord(7,11,1190),new DictWord(137,11,620),new DictWord(137,11,132),new DictWord(6,0,547),new DictWord(134,0,
					1549),new DictWord(8,11,258),new DictWord(9,11,208),new DictWord(137,11,359),new DictWord(4,0,864),new DictWord(5,0,88),new DictWord(137,0,239),new DictWord(135,11,
					493),new DictWord(4,11,317),new DictWord(135,11,1279),new DictWord(132,11,477),new DictWord(4,10,578),new DictWord(5,11,63),new DictWord(133,11,509),new DictWord(7,
					0,650),new DictWord(135,0,1310),new DictWord(7,0,1076),new DictWord(9,0,80),new DictWord(11,0,78),new DictWord(11,0,421),new DictWord(11,0,534),new DictWord(140,0,
					545),new DictWord(132,11,288),new DictWord(12,0,553),new DictWord(14,0,118),new DictWord(133,10,923),new DictWord(7,0,274),new DictWord(11,0,479),new DictWord(139,0
					,507),new DictWord(8,11,89),new DictWord(8,11,620),new DictWord(9,11,49),new DictWord(10,11,774),new DictWord(11,11,628),new DictWord(12,11,322),new DictWord(143,11
					,124),new DictWord(4,0,497),new DictWord(135,0,1584),new DictWord(7,0,261),new DictWord(7,0,1115),new DictWord(7,0,1354),new DictWord(7,0,1404),new DictWord(7,0,
					1588),new DictWord(7,0,1705),new DictWord(7,0,1902),new DictWord(9,0,465),new DictWord(10,0,248),new DictWord(10,0,349),new DictWord(10,0,647),new DictWord(11,0,527
				),new DictWord(11,0,660),new DictWord(11,0,669),new DictWord(12,0,529),new DictWord(13,0,305),new DictWord(132,10,924),new DictWord(133,10,665),new DictWord(136,0,
					13),new DictWord(6,0,791),new DictWord(138,11,120),new DictWord(7,0,642),new DictWord(8,0,250),new DictWord(11,0,123),new DictWord(11,0,137),new DictWord(13,0,48),new DictWord(
					142,0,95),new DictWord(4,10,265),new DictWord(7,10,807),new DictWord(135,10,950),new DictWord(5,10,93),new DictWord(140,10,267),new DictWord(135,0,1429)
				,new DictWord(4,0,949),new DictWord(10,0,885),new DictWord(10,0,891),new DictWord(10,0,900),new DictWord(10,0,939),new DictWord(12,0,760),new DictWord(142,0,449),new DictWord(
					139,11,366),new DictWord(132,0,818),new DictWord(134,11,85),new DictWord(135,10,994),new DictWord(7,0,330),new DictWord(5,10,233),new DictWord(5,10,320)
				,new DictWord(6,10,140),new DictWord(136,10,295),new DictWord(4,0,1004),new DictWord(8,0,982),new DictWord(136,0,993),new DictWord(133,10,978),new DictWord(4,10,905
				),new DictWord(6,10,1701),new DictWord(137,10,843),new DictWord(10,0,545),new DictWord(140,0,301),new DictWord(6,0,947),new DictWord(134,0,1062),new DictWord(134,0,
					1188),new DictWord(4,0,904),new DictWord(5,0,794),new DictWord(152,10,6),new DictWord(134,0,1372),new DictWord(135,11,608),new DictWord(5,11,279),new DictWord(6,11,
					235),new DictWord(7,11,468),new DictWord(8,11,446),new DictWord(9,11,637),new DictWord(10,11,717),new DictWord(11,11,738),new DictWord(140,11,514),new DictWord(132,
					10,509),new DictWord(5,11,17),new DictWord(6,11,371),new DictWord(137,11,528),new DictWord(132,0,693),new DictWord(4,11,115),new DictWord(5,11,669),new DictWord(6,
					11,407),new DictWord(8,11,311),new DictWord(11,11,10),new DictWord(141,11,5),new DictWord(11,0,377),new DictWord(7,10,273),new DictWord(137,11,381),new DictWord(135
					,0,695),new DictWord(7,0,386),new DictWord(138,0,713),new DictWord(135,10,1041),new DictWord(134,0,1291),new DictWord(6,0,7),new DictWord(6,0,35),new DictWord(7,0,
					147),new DictWord(7,0,1069),new DictWord(7,0,1568),new DictWord(7,0,1575),new DictWord(7,0,1917),new DictWord(8,0,43),new DictWord(8,0,208),new DictWord(9,0,128),new DictWord(9
					,0,866),new DictWord(10,0,20),new DictWord(11,0,981),new DictWord(147,0,33),new DictWord(7,0,893),new DictWord(141,0,424),new DictWord(139,10,234),new DictWord(150,
					11,56),new DictWord(5,11,779),new DictWord(5,11,807),new DictWord(6,11,1655),new DictWord(134,11,1676),new DictWord(5,10,802),new DictWord(7,10,2021),new DictWord(
					136,10,805),new DictWord(4,11,196),new DictWord(5,10,167),new DictWord(5,11,558),new DictWord(5,10,899),new DictWord(5,11,949),new DictWord(6,10,410),new DictWord(
					137,10,777),new DictWord(137,10,789),new DictWord(134,10,1705),new DictWord(8,0,904),new DictWord(140,0,787),new DictWord(6,0,322),new DictWord(9,0,552)
				,new DictWord(11,0,274),new DictWord(13,0,209),new DictWord(13,0,499),new DictWord(14,0,85),new DictWord(15,0,126),new DictWord(145,0,70),new DictWord(135,10,10),new DictWord(5
					,10,11),new DictWord(6,10,117),new DictWord(6,10,485),new DictWord(7,10,1133),new DictWord(9,10,582),new DictWord(9,10,594),new DictWord(11,10,21),new DictWord(11,
					10,818),new DictWord(12,10,535),new DictWord(141,10,86),new DictWord(4,10,264),new DictWord(7,10,1067),new DictWord(8,10,204),new DictWord(8,10,385),new DictWord(
					139,10,953),new DictWord(132,11,752),new DictWord(138,10,56),new DictWord(133,10,470),new DictWord(6,0,1808),new DictWord(8,0,83),new DictWord(8,0,742),
				new DictWord(8,0,817),new DictWord(9,0,28),new DictWord(9,0,29),new DictWord(9,0,885),new DictWord(10,0,387),new DictWord(11,0,633),new DictWord(11,0,740),new DictWord(13,0,235
				),new DictWord(13,0,254),new DictWord(15,0,143),new DictWord(143,0,146),new DictWord(140,0,49),new DictWord(134,0,1832),new DictWord(4,11,227),new DictWord(5,11,159
				),new DictWord(5,11,409),new DictWord(7,11,80),new DictWord(10,11,294),new DictWord(10,11,479),new DictWord(12,11,418),new DictWord(14,11,50),new DictWord(14,11,249
				),new DictWord(142,11,295),new DictWord(7,11,1470),new DictWord(8,11,66),new DictWord(8,11,137),new DictWord(8,11,761),new DictWord(9,11,638),new DictWord(11,11,80)
				,new DictWord(11,11,212),new DictWord(11,11,368),new DictWord(11,11,418),new DictWord(12,11,8),new DictWord(13,11,15),new DictWord(16,11,61),new DictWord(17,11,59),
				new DictWord(19,11,28),new DictWord(148,11,84),new DictWord(139,10,1015),new DictWord(138,11,468),new DictWord(135,0,421),new DictWord(6,0,415),new DictWord(7,0,
					1049),new DictWord(137,0,442),new DictWord(6,11,38),new DictWord(7,11,1220),new DictWord(8,11,185),new DictWord(8,11,256),new DictWord(9,11,22),new DictWord(9,11,
					331),new DictWord(10,11,738),new DictWord(11,11,205),new DictWord(11,11,540),new DictWord(11,11,746),new DictWord(13,11,399),new DictWord(13,11,465),new DictWord(14
					,11,88),new DictWord(142,11,194),new DictWord(139,0,289),new DictWord(133,10,715),new DictWord(4,0,110),new DictWord(10,0,415),new DictWord(10,0,597),new DictWord(
					142,0,206),new DictWord(4,11,159),new DictWord(6,11,115),new DictWord(7,11,252),new DictWord(7,11,257),new DictWord(7,11,1928),new DictWord(8,11,69),new DictWord(9,
					11,384),new DictWord(10,11,91),new DictWord(10,11,615),new DictWord(12,11,375),new DictWord(14,11,235),new DictWord(18,11,117),new DictWord(147,11,123),
				new DictWord(5,11,911),new DictWord(136,11,278),new DictWord(7,0,205),new DictWord(7,0,2000),new DictWord(8,10,794),new DictWord(9,10,400),new DictWord(10,10,298),new DictWord(
					142,10,228),new DictWord(135,11,1774),new DictWord(4,11,151),new DictWord(7,11,1567),new DictWord(8,11,351),new DictWord(137,11,322),new DictWord(136,10
					,724),new DictWord(133,11,990),new DictWord(7,0,1539),new DictWord(11,0,512),new DictWord(13,0,205),new DictWord(19,0,30),new DictWord(22,0,36),new DictWord(23,0,19
				),new DictWord(135,11,1539),new DictWord(5,11,194),new DictWord(7,11,1662),new DictWord(9,11,90),new DictWord(140,11,180),new DictWord(6,10,190),new DictWord(7,10,
					768),new DictWord(135,10,1170),new DictWord(134,0,1340),new DictWord(4,0,283),new DictWord(135,0,1194),new DictWord(133,11,425),new DictWord(133,11,971)
				,new DictWord(12,0,549),new DictWord(14,10,67),new DictWord(147,10,60),new DictWord(135,10,1023),new DictWord(134,0,1720),new DictWord(138,11,587),new DictWord(5,11
					,72),new DictWord(6,11,264),new DictWord(7,11,21),new DictWord(7,11,46),new DictWord(7,11,2013),new DictWord(8,11,215),new DictWord(8,11,513),new DictWord(10,11,266
				),new DictWord(139,11,22),new DictWord(5,0,319),new DictWord(135,0,534),new DictWord(6,10,137),new DictWord(9,10,75),new DictWord(9,10,253),new DictWord(10,10,194),
				new DictWord(138,10,444),new DictWord(7,0,1180),new DictWord(20,0,112),new DictWord(6,11,239),new DictWord(7,11,118),new DictWord(10,11,95),new DictWord(11,11,603),
				new DictWord(13,11,443),new DictWord(14,11,160),new DictWord(143,11,4),new DictWord(134,11,431),new DictWord(5,11,874),new DictWord(6,11,1677),new DictWord(11,10,
					643),new DictWord(12,10,115),new DictWord(143,11,0),new DictWord(134,0,967),new DictWord(6,11,65),new DictWord(7,11,939),new DictWord(7,11,1172),new DictWord(7,11,
					1671),new DictWord(9,11,540),new DictWord(10,11,696),new DictWord(11,11,265),new DictWord(11,11,732),new DictWord(11,11,928),new DictWord(11,11,937),new DictWord(12
					,11,399),new DictWord(13,11,438),new DictWord(149,11,19),new DictWord(137,11,200),new DictWord(135,0,1940),new DictWord(5,10,760),new DictWord(7,10,542)
				,new DictWord(8,10,135),new DictWord(136,10,496),new DictWord(140,11,44),new DictWord(7,11,1655),new DictWord(136,11,305),new DictWord(7,10,319),new DictWord(7,10,
					355),new DictWord(7,10,763),new DictWord(10,10,389),new DictWord(145,10,43),new DictWord(136,0,735),new DictWord(138,10,786),new DictWord(137,11,19),new DictWord(
					132,11,696),new DictWord(5,0,132),new DictWord(9,0,486),new DictWord(9,0,715),new DictWord(10,0,458),new DictWord(11,0,373),new DictWord(11,0,668),new DictWord(11,0
					,795),new DictWord(11,0,897),new DictWord(12,0,272),new DictWord(12,0,424),new DictWord(12,0,539),new DictWord(12,0,558),new DictWord(14,0,245),new DictWord(14,0,
					263),new DictWord(14,0,264),new DictWord(14,0,393),new DictWord(142,0,403),new DictWord(10,0,38),new DictWord(139,0,784),new DictWord(132,0,838),new DictWord(4,11,
					302),new DictWord(135,11,1766),new DictWord(133,0,379),new DictWord(5,0,8),new DictWord(6,0,89),new DictWord(6,0,400),new DictWord(7,0,1569),new DictWord(7,0,1623),
				new DictWord(7,0,1850),new DictWord(8,0,218),new DictWord(8,0,422),new DictWord(9,0,570),new DictWord(10,0,626),new DictWord(4,11,726),new DictWord(133,11,630),new DictWord(4,0
					,1017),new DictWord(138,0,660),new DictWord(6,0,387),new DictWord(7,0,882),new DictWord(141,0,111),new DictWord(6,0,224),new DictWord(7,0,877),new DictWord(137,0,
					647),new DictWord(4,10,58),new DictWord(5,10,286),new DictWord(6,10,319),new DictWord(7,10,402),new DictWord(7,10,1254),new DictWord(7,10,1903),new DictWord(8,10,
					356),new DictWord(140,10,408),new DictWord(135,0,790),new DictWord(9,0,510),new DictWord(10,0,53),new DictWord(4,10,389),new DictWord(9,10,181),new DictWord(10,10,
					29),new DictWord(10,10,816),new DictWord(11,10,311),new DictWord(11,10,561),new DictWord(12,10,67),new DictWord(141,10,181),new DictWord(142,0,458),new DictWord(6,
					11,118),new DictWord(7,11,215),new DictWord(7,11,1521),new DictWord(140,11,11),new DictWord(134,0,954),new DictWord(135,0,394),new DictWord(134,0,1367),
				new DictWord(5,11,225),new DictWord(133,10,373),new DictWord(132,0,882),new DictWord(7,0,1409),new DictWord(135,10,1972),new DictWord(135,10,1793),new DictWord(4,11
					,370),new DictWord(5,11,756),new DictWord(135,11,1326),new DictWord(150,11,13),new DictWord(7,11,354),new DictWord(10,11,410),new DictWord(139,11,815),new DictWord(
					6,11,1662),new DictWord(7,11,48),new DictWord(8,11,771),new DictWord(10,11,116),new DictWord(13,11,104),new DictWord(14,11,105),new DictWord(14,11,184),
				new DictWord(15,11,168),new DictWord(19,11,92),new DictWord(148,11,68),new DictWord(7,0,124),new DictWord(136,0,38),new DictWord(5,0,261),new DictWord(7,0,78),new DictWord(7,0,
					199),new DictWord(8,0,815),new DictWord(9,0,126),new DictWord(10,0,342),new DictWord(140,0,647),new DictWord(4,0,628),new DictWord(140,0,724),new DictWord(7,0,266),
				new DictWord(8,0,804),new DictWord(7,10,1651),new DictWord(145,10,89),new DictWord(135,0,208),new DictWord(134,0,1178),new DictWord(6,0,79),new DictWord(135,0,1519)
				,new DictWord(132,10,672),new DictWord(133,10,737),new DictWord(136,0,741),new DictWord(132,11,120),new DictWord(4,0,710),new DictWord(6,0,376),new DictWord(134,0,
					606),new DictWord(134,0,1347),new DictWord(134,0,1494),new DictWord(6,0,850),new DictWord(6,0,1553),new DictWord(137,0,821),new DictWord(5,10,145),new DictWord(134,
					11,593),new DictWord(7,0,1311),new DictWord(140,0,135),new DictWord(4,0,467),new DictWord(5,0,405),new DictWord(134,0,544),new DictWord(5,11,820),new DictWord(135,
					11,931),new DictWord(6,0,100),new DictWord(7,0,244),new DictWord(7,0,632),new DictWord(7,0,1609),new DictWord(8,0,178),new DictWord(8,0,638),new DictWord(141,0,58),
				new DictWord(4,10,387),new DictWord(135,10,1288),new DictWord(6,11,151),new DictWord(6,11,1675),new DictWord(7,11,383),new DictWord(151,11,10),new DictWord(132,0,
					481),new DictWord(135,10,550),new DictWord(134,0,1378),new DictWord(6,11,1624),new DictWord(11,11,11),new DictWord(12,11,422),new DictWord(13,11,262),new DictWord(
					142,11,360),new DictWord(133,0,791),new DictWord(4,11,43),new DictWord(5,11,344),new DictWord(133,11,357),new DictWord(7,0,1227),new DictWord(140,0,978)
				,new DictWord(7,0,686),new DictWord(8,0,33),new DictWord(8,0,238),new DictWord(10,0,616),new DictWord(11,0,467),new DictWord(11,0,881),new DictWord(13,0,217),new DictWord(13,0,
					253),new DictWord(142,0,268),new DictWord(137,0,857),new DictWord(8,0,467),new DictWord(8,0,1006),new DictWord(7,11,148),new DictWord(8,11,284),new DictWord(141,11,
					63),new DictWord(4,10,576),new DictWord(135,10,1263),new DictWord(133,11,888),new DictWord(5,10,919),new DictWord(134,10,1673),new DictWord(20,10,37),new DictWord(
					148,11,37),new DictWord(132,0,447),new DictWord(132,11,711),new DictWord(4,0,128),new DictWord(5,0,415),new DictWord(6,0,462),new DictWord(7,0,294),new DictWord(7,0
					,578),new DictWord(10,0,710),new DictWord(139,0,86),new DictWord(4,10,82),new DictWord(5,10,333),new DictWord(5,10,904),new DictWord(6,10,207),new DictWord(7,10,325
				),new DictWord(7,10,1726),new DictWord(8,10,101),new DictWord(10,10,778),new DictWord(139,10,220),new DictWord(136,0,587),new DictWord(137,11,440),new DictWord(133,
					10,903),new DictWord(6,0,427),new DictWord(7,0,1018),new DictWord(138,0,692),new DictWord(4,0,195),new DictWord(135,0,802),new DictWord(140,10,147),new DictWord(134
					,0,1546),new DictWord(134,0,684),new DictWord(132,10,705),new DictWord(136,0,345),new DictWord(11,11,678),new DictWord(140,11,307),new DictWord(133,0,
					365),new DictWord(134,0,1683),new DictWord(4,11,65),new DictWord(5,11,479),new DictWord(5,11,1004),new DictWord(7,11,1913),new DictWord(8,11,317),new DictWord(9,11,
					302),new DictWord(10,11,612),new DictWord(141,11,22),new DictWord(138,0,472),new DictWord(4,11,261),new DictWord(135,11,510),new DictWord(134,10,90),new DictWord(
					142,0,433),new DictWord(151,0,28),new DictWord(4,11,291),new DictWord(7,11,101),new DictWord(9,11,515),new DictWord(12,11,152),new DictWord(12,11,443),new DictWord(
					13,11,392),new DictWord(142,11,357),new DictWord(140,0,997),new DictWord(5,0,3),new DictWord(8,0,578),new DictWord(9,0,118),new DictWord(10,0,705),new DictWord(141,
					0,279),new DictWord(135,11,1266),new DictWord(7,10,813),new DictWord(12,10,497),new DictWord(141,10,56),new DictWord(133,0,229),new DictWord(6,10,125),new DictWord(
					135,10,1277),new DictWord(8,0,102),new DictWord(10,0,578),new DictWord(10,0,672),new DictWord(12,0,496),new DictWord(13,0,408),new DictWord(14,0,121),new DictWord(
					17,0,106),new DictWord(151,10,12),new DictWord(6,0,866),new DictWord(134,0,1080),new DictWord(136,0,1022),new DictWord(4,11,130),new DictWord(135,11,843
				),new DictWord(5,11,42),new DictWord(5,11,879),new DictWord(7,11,245),new DictWord(7,11,324),new DictWord(7,11,1532),new DictWord(11,11,463),new DictWord(11,11,472)
				,new DictWord(13,11,363),new DictWord(144,11,52),new DictWord(150,0,55),new DictWord(8,0,115),new DictWord(8,0,350),new DictWord(9,0,489),new DictWord(10,0,128),new DictWord(11
					,0,306),new DictWord(12,0,373),new DictWord(14,0,30),new DictWord(17,0,79),new DictWord(19,0,80),new DictWord(4,11,134),new DictWord(133,11,372),new DictWord(134,0,
					657),new DictWord(134,0,933),new DictWord(135,11,1147),new DictWord(4,0,230),new DictWord(133,0,702),new DictWord(134,0,1728),new DictWord(4,0,484),new DictWord(18,
					0,26),new DictWord(19,0,42),new DictWord(20,0,43),new DictWord(21,0,0),new DictWord(23,0,27),new DictWord(152,0,14),new DictWord(7,0,185),new DictWord(135,0,703),new DictWord(6
					,0,417),new DictWord(10,0,618),new DictWord(7,10,1106),new DictWord(9,10,770),new DictWord(11,10,112),new DictWord(140,10,413),new DictWord(134,0,803),new DictWord(
					132,11,644),new DictWord(134,0,1262),new DictWord(7,11,540),new DictWord(12,10,271),new DictWord(145,10,109),new DictWord(135,11,123),new DictWord(132,0
					,633),new DictWord(134,11,623),new DictWord(4,11,908),new DictWord(5,11,359),new DictWord(5,11,508),new DictWord(6,11,1723),new DictWord(7,11,343),new DictWord(7,11
					,1996),new DictWord(135,11,2026),new DictWord(135,0,479),new DictWord(10,0,262),new DictWord(7,10,304),new DictWord(9,10,646),new DictWord(9,10,862),new DictWord(11
					,10,696),new DictWord(12,10,208),new DictWord(15,10,79),new DictWord(147,10,108),new DictWord(4,11,341),new DictWord(135,11,480),new DictWord(134,0,830)
				,new DictWord(5,0,70),new DictWord(5,0,622),new DictWord(6,0,334),new DictWord(7,0,1032),new DictWord(9,0,171),new DictWord(11,0,26),new DictWord(11,0,213),new DictWord(11,0,
					637),new DictWord(11,0,707),new DictWord(12,0,202),new DictWord(12,0,380),new DictWord(13,0,226),new DictWord(13,0,355),new DictWord(14,0,222),new DictWord(145,0,42
				),new DictWord(135,10,981),new DictWord(143,0,217),new DictWord(137,11,114),new DictWord(4,0,23),new DictWord(4,0,141),new DictWord(5,0,313),new DictWord(5,0,1014),
				new DictWord(6,0,50),new DictWord(6,0,51),new DictWord(7,0,142),new DictWord(7,0,384),new DictWord(7,0,559),new DictWord(8,0,640),new DictWord(9,0,460),new DictWord(9,0,783),new DictWord(
					11,0,741),new DictWord(12,0,183),new DictWord(141,0,488),new DictWord(141,0,360),new DictWord(7,0,1586),new DictWord(7,11,1995),new DictWord(8,11,299),new DictWord(
					11,11,890),new DictWord(140,11,674),new DictWord(132,10,434),new DictWord(7,0,652),new DictWord(134,10,550),new DictWord(7,0,766),new DictWord(5,10,553)
				,new DictWord(138,10,824),new DictWord(7,0,737),new DictWord(8,0,298),new DictWord(136,10,452),new DictWord(4,11,238),new DictWord(5,11,503),new DictWord(6,11,179),
				new DictWord(7,11,2003),new DictWord(8,11,381),new DictWord(8,11,473),new DictWord(9,11,149),new DictWord(10,11,183),new DictWord(15,11,45),new DictWord(143,11,86),
				new DictWord(133,10,292),new DictWord(5,0,222),new DictWord(9,0,655),new DictWord(138,0,534),new DictWord(138,10,135),new DictWord(4,11,121),new DictWord(5,11,156),
				new DictWord(5,11,349),new DictWord(9,11,136),new DictWord(10,11,605),new DictWord(14,11,342),new DictWord(147,11,107),new DictWord(137,0,906),new DictWord(6,0,1013
				),new DictWord(134,0,1250),new DictWord(6,0,1956),new DictWord(6,0,2009),new DictWord(8,0,991),new DictWord(144,0,120),new DictWord(135,11,1192),new DictWord(138,0,
					503),new DictWord(5,0,154),new DictWord(7,0,1491),new DictWord(10,0,379),new DictWord(138,0,485),new DictWord(6,0,1867),new DictWord(6,0,1914),new DictWord(6,0,1925
				),new DictWord(9,0,917),new DictWord(9,0,925),new DictWord(9,0,932),new DictWord(9,0,951),new DictWord(9,0,1007),new DictWord(9,0,1013),new DictWord(12,0,806),new DictWord(12,0
					,810),new DictWord(12,0,814),new DictWord(12,0,816),new DictWord(12,0,824),new DictWord(12,0,832),new DictWord(12,0,837),new DictWord(12,0,863),new DictWord(12,0,
					868),new DictWord(12,0,870),new DictWord(12,0,889),new DictWord(12,0,892),new DictWord(12,0,900),new DictWord(12,0,902),new DictWord(12,0,908),new DictWord(12,0,933
				),new DictWord(12,0,942),new DictWord(12,0,949),new DictWord(12,0,954),new DictWord(15,0,175),new DictWord(15,0,203),new DictWord(15,0,213),new DictWord(15,0,218),new DictWord(
					15,0,225),new DictWord(15,0,231),new DictWord(15,0,239),new DictWord(15,0,248),new DictWord(15,0,252),new DictWord(18,0,190),new DictWord(18,0,204),new DictWord(18,
					0,215),new DictWord(18,0,216),new DictWord(18,0,222),new DictWord(18,0,225),new DictWord(18,0,230),new DictWord(18,0,239),new DictWord(18,0,241),new DictWord(21,0,
					42),new DictWord(21,0,43),new DictWord(21,0,44),new DictWord(21,0,45),new DictWord(21,0,46),new DictWord(21,0,53),new DictWord(24,0,27),new DictWord(152,0,31),new DictWord(133,
					0,716),new DictWord(135,0,844),new DictWord(4,0,91),new DictWord(5,0,388),new DictWord(5,0,845),new DictWord(6,0,206),new DictWord(6,0,252),new DictWord(6,0,365),new DictWord(7
					,0,136),new DictWord(7,0,531),new DictWord(136,0,621),new DictWord(7,10,393),new DictWord(10,10,603),new DictWord(139,10,206),new DictWord(6,11,80),new DictWord(6,
					11,1694),new DictWord(7,11,173),new DictWord(7,11,1974),new DictWord(9,11,547),new DictWord(10,11,730),new DictWord(14,11,18),new DictWord(150,11,39),new DictWord(
					137,0,748),new DictWord(4,11,923),new DictWord(134,11,1711),new DictWord(4,10,912),new DictWord(137,10,232),new DictWord(7,10,98),new DictWord(7,10,1973
				),new DictWord(136,10,716),new DictWord(14,0,103),new DictWord(133,10,733),new DictWord(132,11,595),new DictWord(12,0,158),new DictWord(18,0,8),new DictWord(19,0,62
				),new DictWord(20,0,6),new DictWord(22,0,4),new DictWord(23,0,2),new DictWord(23,0,9),new DictWord(5,11,240),new DictWord(6,11,459),new DictWord(7,11,12),new DictWord(7,11,114)
				,new DictWord(7,11,502),new DictWord(7,11,1751),new DictWord(7,11,1753),new DictWord(7,11,1805),new DictWord(8,11,658),new DictWord(9,11,1),new DictWord(11,11,959),
				new DictWord(13,11,446),new DictWord(142,11,211),new DictWord(135,0,576),new DictWord(5,0,771),new DictWord(5,0,863),new DictWord(5,0,898),new DictWord(6,0,648),new DictWord(6,
					0,1632),new DictWord(6,0,1644),new DictWord(134,0,1780),new DictWord(133,0,331),new DictWord(7,11,633),new DictWord(7,11,905),new DictWord(7,11,909),new DictWord(7,
					11,1538),new DictWord(9,11,767),new DictWord(140,11,636),new DictWord(140,0,632),new DictWord(5,0,107),new DictWord(7,0,201),new DictWord(136,0,518),new DictWord(6,
					0,446),new DictWord(7,0,1817),new DictWord(134,11,490),new DictWord(9,0,851),new DictWord(141,0,510),new DictWord(7,11,250),new DictWord(8,11,506),new DictWord(136,
					11,507),new DictWord(4,0,504),new DictWord(137,10,72),new DictWord(132,11,158),new DictWord(4,11,140),new DictWord(7,11,362),new DictWord(8,11,209),new DictWord(9,
					11,10),new DictWord(9,11,160),new DictWord(9,11,503),new DictWord(10,11,689),new DictWord(11,11,350),new DictWord(11,11,553),new DictWord(11,11,725),new DictWord(12
					,11,252),new DictWord(12,11,583),new DictWord(13,11,192),new DictWord(13,11,352),new DictWord(14,11,269),new DictWord(14,11,356),new DictWord(148,11,50)
				,new DictWord(6,11,597),new DictWord(135,11,1318),new DictWord(135,10,1454),new DictWord(5,0,883),new DictWord(5,0,975),new DictWord(8,0,392),new DictWord(148,0,7),
				new DictWord(6,11,228),new DictWord(7,11,1341),new DictWord(9,11,408),new DictWord(138,11,343),new DictWord(11,11,348),new DictWord(11,10,600),new DictWord(12,11,99
				),new DictWord(13,10,245),new DictWord(18,11,1),new DictWord(18,11,11),new DictWord(147,11,4),new DictWord(134,11,296),new DictWord(5,0,922),new DictWord(134,0,1707
				),new DictWord(132,11,557),new DictWord(4,11,548),new DictWord(7,10,164),new DictWord(7,10,1571),new DictWord(9,10,107),new DictWord(140,10,225),new DictWord(7,11,
					197),new DictWord(8,11,142),new DictWord(8,11,325),new DictWord(9,11,150),new DictWord(9,11,596),new DictWord(10,11,350),new DictWord(10,11,353),new DictWord(11,11,
					74),new DictWord(11,11,315),new DictWord(14,11,423),new DictWord(143,11,141),new DictWord(5,0,993),new DictWord(7,0,515),new DictWord(137,0,91),new DictWord(4,0,131
				),new DictWord(8,0,200),new DictWord(5,10,484),new DictWord(5,10,510),new DictWord(6,10,434),new DictWord(7,10,1000),new DictWord(7,10,1098),new DictWord(136,10,2),
				new DictWord(152,0,10),new DictWord(4,11,62),new DictWord(5,11,83),new DictWord(6,11,399),new DictWord(6,11,579),new DictWord(7,11,692),new DictWord(7,11,846),new DictWord(7,11
					,1015),new DictWord(7,11,1799),new DictWord(8,11,403),new DictWord(9,11,394),new DictWord(10,11,133),new DictWord(12,11,4),new DictWord(12,11,297),new DictWord(12,
					11,452),new DictWord(16,11,81),new DictWord(18,11,19),new DictWord(18,11,25),new DictWord(21,11,14),new DictWord(22,11,12),new DictWord(151,11,18),new DictWord(140,
					11,459),new DictWord(132,11,177),new DictWord(7,0,1433),new DictWord(9,0,365),new DictWord(137,11,365),new DictWord(132,10,460),new DictWord(5,0,103),new DictWord(6
					,0,2004),new DictWord(7,0,921),new DictWord(8,0,580),new DictWord(8,0,593),new DictWord(8,0,630),new DictWord(10,0,28),new DictWord(5,11,411),new DictWord(135,11,
					653),new DictWord(4,10,932),new DictWord(133,10,891),new DictWord(4,0,911),new DictWord(5,0,867),new DictWord(5,0,1013),new DictWord(7,0,2034),new DictWord(8,0,798)
				,new DictWord(136,0,813),new DictWord(7,11,439),new DictWord(10,11,727),new DictWord(11,11,260),new DictWord(139,11,684),new DictWord(136,10,625),new DictWord(5,11,
					208),new DictWord(7,11,753),new DictWord(135,11,1528),new DictWord(5,0,461),new DictWord(7,0,1925),new DictWord(12,0,39),new DictWord(13,0,265),new DictWord(13,0,
					439),new DictWord(134,10,76),new DictWord(6,0,853),new DictWord(8,10,92),new DictWord(137,10,221),new DictWord(5,0,135),new DictWord(6,0,519),new DictWord(7,0,1722)
				,new DictWord(10,0,271),new DictWord(11,0,261),new DictWord(145,0,54),new DictWord(139,11,814),new DictWord(14,0,338),new DictWord(148,0,81),new DictWord(4,0,300),new DictWord(
					133,0,436),new DictWord(5,0,419),new DictWord(5,0,687),new DictWord(7,0,864),new DictWord(9,0,470),new DictWord(135,11,864),new DictWord(9,0,836),new DictWord(133,
					11,242),new DictWord(134,0,1937),new DictWord(4,10,763),new DictWord(133,11,953),new DictWord(132,10,622),new DictWord(132,0,393),new DictWord(133,10,
					253),new DictWord(8,0,357),new DictWord(10,0,745),new DictWord(14,0,426),new DictWord(17,0,94),new DictWord(19,0,57),new DictWord(135,10,546),new DictWord(5,11,615)
				,new DictWord(146,11,37),new DictWord(9,10,73),new DictWord(10,10,110),new DictWord(14,10,185),new DictWord(145,10,119),new DictWord(11,0,703),new DictWord(7,10,624
				),new DictWord(7,10,916),new DictWord(10,10,256),new DictWord(139,10,87),new DictWord(133,11,290),new DictWord(5,10,212),new DictWord(12,10,35),new DictWord(141,10,
					382),new DictWord(132,11,380),new DictWord(5,11,52),new DictWord(7,11,277),new DictWord(9,11,368),new DictWord(139,11,791),new DictWord(133,0,387),new DictWord(10,
					11,138),new DictWord(139,11,476),new DictWord(4,0,6),new DictWord(5,0,708),new DictWord(136,0,75),new DictWord(7,0,1351),new DictWord(9,0,581),new DictWord(10,0,639
				),new DictWord(11,0,453),new DictWord(140,0,584),new DictWord(132,0,303),new DictWord(138,0,772),new DictWord(135,10,1175),new DictWord(4,0,749),new DictWord(5,10,
					816),new DictWord(6,11,256),new DictWord(7,11,307),new DictWord(7,11,999),new DictWord(7,11,1481),new DictWord(7,11,1732),new DictWord(7,11,1738),new DictWord(8,11,
					265),new DictWord(9,11,414),new DictWord(11,11,316),new DictWord(12,11,52),new DictWord(13,11,420),new DictWord(147,11,100),new DictWord(135,11,1296),new DictWord(6
					,0,1065),new DictWord(5,10,869),new DictWord(5,10,968),new DictWord(6,10,1626),new DictWord(8,10,734),new DictWord(136,10,784),new DictWord(4,10,542),new DictWord(6
					,10,1716),new DictWord(6,10,1727),new DictWord(7,10,1082),new DictWord(7,10,1545),new DictWord(8,10,56),new DictWord(8,10,118),new DictWord(8,10,412),new DictWord(8
					,10,564),new DictWord(9,10,888),new DictWord(9,10,908),new DictWord(10,10,50),new DictWord(10,10,423),new DictWord(11,10,685),new DictWord(11,10,697),new DictWord(
					11,10,933),new DictWord(12,10,299),new DictWord(13,10,126),new DictWord(13,10,136),new DictWord(13,10,170),new DictWord(141,10,190),new DictWord(134,0,
					226),new DictWord(4,0,106),new DictWord(7,0,310),new DictWord(11,0,717),new DictWord(133,11,723),new DictWord(5,0,890),new DictWord(5,0,988),new DictWord(4,10,232),
				new DictWord(9,10,202),new DictWord(10,10,474),new DictWord(140,10,433),new DictWord(6,0,626),new DictWord(142,0,431),new DictWord(10,0,706),new DictWord(150,0,44),
				new DictWord(13,0,51),new DictWord(6,10,108),new DictWord(7,10,1003),new DictWord(7,10,1181),new DictWord(8,10,111),new DictWord(136,10,343),new DictWord(132,0,698)
				,new DictWord(5,11,109),new DictWord(6,11,1784),new DictWord(7,11,1895),new DictWord(12,11,296),new DictWord(140,11,302),new DictWord(134,0,828),new DictWord(134,10
					,1712),new DictWord(138,0,17),new DictWord(7,0,1929),new DictWord(4,10,133),new DictWord(5,11,216),new DictWord(7,10,711),new DictWord(7,10,1298),new DictWord(7,10,
					1585),new DictWord(7,11,1879),new DictWord(9,11,141),new DictWord(9,11,270),new DictWord(9,11,679),new DictWord(10,11,159),new DictWord(10,11,553),new DictWord(11,
					11,197),new DictWord(11,11,438),new DictWord(12,11,538),new DictWord(12,11,559),new DictWord(13,11,193),new DictWord(13,11,423),new DictWord(14,11,144),
				new DictWord(14,11,166),new DictWord(14,11,167),new DictWord(15,11,67),new DictWord(147,11,84),new DictWord(141,11,127),new DictWord(7,11,1872),new DictWord(137,11,
					81),new DictWord(6,10,99),new DictWord(7,10,1808),new DictWord(145,10,57),new DictWord(134,11,391),new DictWord(5,0,689),new DictWord(6,0,84),new DictWord(7,0,1250)
				,new DictWord(6,10,574),new DictWord(7,10,428),new DictWord(10,10,669),new DictWord(11,10,485),new DictWord(11,10,840),new DictWord(12,10,300),new DictWord(142,10,
					250),new DictWord(7,11,322),new DictWord(136,11,249),new DictWord(7,11,432),new DictWord(135,11,1649),new DictWord(135,10,1871),new DictWord(137,10,252)
				,new DictWord(6,11,155),new DictWord(140,11,234),new DictWord(7,0,871),new DictWord(19,0,27),new DictWord(147,11,27),new DictWord(140,0,498),new DictWord(5,0,986),new DictWord(
					6,0,130),new DictWord(138,0,823),new DictWord(6,0,1793),new DictWord(7,0,1582),new DictWord(8,0,458),new DictWord(10,0,101),new DictWord(10,0,318),new DictWord(10,0
					,945),new DictWord(12,0,734),new DictWord(16,0,104),new DictWord(18,0,177),new DictWord(6,10,323),new DictWord(135,10,1564),new DictWord(5,11,632),new DictWord(138,
					11,526),new DictWord(10,0,435),new DictWord(7,10,461),new DictWord(136,10,775),new DictWord(6,11,144),new DictWord(7,11,948),new DictWord(7,11,1042),new DictWord(7,
					11,1857),new DictWord(8,11,235),new DictWord(8,11,461),new DictWord(9,11,453),new DictWord(9,11,530),new DictWord(10,11,354),new DictWord(17,11,77),new DictWord(19,
					11,99),new DictWord(148,11,79),new DictWord(138,0,966),new DictWord(7,0,1644),new DictWord(137,0,129),new DictWord(135,0,997),new DictWord(136,0,502),new DictWord(5
					,11,196),new DictWord(6,11,486),new DictWord(7,11,212),new DictWord(8,11,309),new DictWord(136,11,346),new DictWord(7,10,727),new DictWord(146,10,73),new DictWord(
					132,0,823),new DictWord(132,11,686),new DictWord(135,0,1927),new DictWord(4,0,762),new DictWord(7,0,1756),new DictWord(137,0,98),new DictWord(136,10,577
				),new DictWord(24,0,8),new DictWord(4,11,30),new DictWord(5,11,43),new DictWord(152,11,8),new DictWord(7,0,1046),new DictWord(139,0,160),new DictWord(7,0,492),new DictWord(4,10
					,413),new DictWord(5,10,677),new DictWord(7,11,492),new DictWord(8,10,432),new DictWord(140,10,280),new DictWord(6,0,45),new DictWord(7,0,433),new DictWord(8,0,129)
				,new DictWord(9,0,21),new DictWord(10,0,392),new DictWord(11,0,79),new DictWord(12,0,499),new DictWord(13,0,199),new DictWord(141,0,451),new DictWord(7,0,558),new DictWord(136,
					0,353),new DictWord(4,11,220),new DictWord(7,11,1535),new DictWord(9,11,93),new DictWord(139,11,474),new DictWord(7,10,646),new DictWord(7,10,1730),new DictWord(11,
					10,446),new DictWord(141,10,178),new DictWord(133,0,785),new DictWord(134,0,1145),new DictWord(8,0,81),new DictWord(9,0,189),new DictWord(9,0,201),new DictWord(11,0
					,478),new DictWord(11,0,712),new DictWord(141,0,338),new DictWord(5,0,353),new DictWord(151,0,26),new DictWord(11,0,762),new DictWord(132,10,395),new DictWord(134,0
					,2024),new DictWord(4,0,611),new DictWord(133,0,606),new DictWord(9,10,174),new DictWord(10,10,164),new DictWord(11,10,440),new DictWord(11,10,841),new DictWord(143
					,10,98),new DictWord(134,10,426),new DictWord(10,10,608),new DictWord(139,10,1002),new DictWord(138,10,250),new DictWord(6,0,25),new DictWord(7,0,855),new DictWord(
					7,0,1258),new DictWord(144,0,32),new DictWord(7,11,1725),new DictWord(138,11,393),new DictWord(5,11,263),new DictWord(134,11,414),new DictWord(6,0,2011)
				,new DictWord(133,10,476),new DictWord(4,0,4),new DictWord(7,0,1118),new DictWord(7,0,1320),new DictWord(7,0,1706),new DictWord(8,0,277),new DictWord(9,0,622),new DictWord(10,0
					,9),new DictWord(11,0,724),new DictWord(12,0,350),new DictWord(12,0,397),new DictWord(13,0,28),new DictWord(13,0,159),new DictWord(15,0,89),new DictWord(18,0,5),new DictWord(19
					,0,9),new DictWord(20,0,34),new DictWord(22,0,47),new DictWord(6,11,178),new DictWord(6,11,1750),new DictWord(8,11,251),new DictWord(9,11,690),new DictWord(10,11,
					155),new DictWord(10,11,196),new DictWord(10,11,373),new DictWord(11,11,698),new DictWord(13,11,155),new DictWord(148,11,93),new DictWord(5,11,97),new DictWord(137,
					11,393),new DictWord(7,0,764),new DictWord(11,0,461),new DictWord(12,0,172),new DictWord(5,10,76),new DictWord(6,10,458),new DictWord(6,10,497),new DictWord(7,10,
					868),new DictWord(9,10,658),new DictWord(10,10,594),new DictWord(11,10,566),new DictWord(12,10,338),new DictWord(141,10,200),new DictWord(134,0,1449),new DictWord(
					138,11,40),new DictWord(134,11,1639),new DictWord(134,0,1445),new DictWord(6,0,1168),new DictWord(4,10,526),new DictWord(7,10,1029),new DictWord(135,10,
					1054),new DictWord(4,11,191),new DictWord(7,11,934),new DictWord(8,11,647),new DictWord(145,11,97),new DictWord(132,10,636),new DictWord(6,0,233),new DictWord(7,10,
					660),new DictWord(7,10,1124),new DictWord(17,10,31),new DictWord(19,10,22),new DictWord(151,10,14),new DictWord(6,10,1699),new DictWord(136,11,110),new DictWord(12,
					11,246),new DictWord(15,11,162),new DictWord(19,11,64),new DictWord(20,11,8),new DictWord(20,11,95),new DictWord(22,11,24),new DictWord(152,11,17),new DictWord(5,11
					,165),new DictWord(9,11,346),new DictWord(138,11,655),new DictWord(5,11,319),new DictWord(135,11,534),new DictWord(134,0,255),new DictWord(9,0,216),new DictWord(8,
					11,128),new DictWord(139,11,179),new DictWord(9,0,183),new DictWord(139,0,286),new DictWord(11,0,956),new DictWord(151,0,3),new DictWord(4,0,536),new DictWord(7,0,
					1141),new DictWord(10,0,723),new DictWord(139,0,371),new DictWord(4,10,279),new DictWord(7,10,301),new DictWord(137,10,362),new DictWord(7,0,285),new DictWord(5,11,
					57),new DictWord(6,11,101),new DictWord(6,11,1663),new DictWord(7,11,132),new DictWord(7,11,1048),new DictWord(7,11,1154),new DictWord(7,11,1415),new DictWord(7,11,
					1507),new DictWord(12,11,493),new DictWord(15,11,105),new DictWord(151,11,15),new DictWord(5,11,459),new DictWord(7,11,1073),new DictWord(7,10,1743),new DictWord(8,
					11,241),new DictWord(136,11,334),new DictWord(4,10,178),new DictWord(133,10,399),new DictWord(135,0,560),new DictWord(132,0,690),new DictWord(135,0,1246
				),new DictWord(18,0,157),new DictWord(147,0,63),new DictWord(10,0,599),new DictWord(11,0,33),new DictWord(12,0,571),new DictWord(149,0,1),new DictWord(6,11,324),new DictWord(6,
					11,520),new DictWord(7,11,338),new DictWord(7,11,1616),new DictWord(7,11,1729),new DictWord(8,11,228),new DictWord(9,11,69),new DictWord(139,11,750),new DictWord(7,
					0,1862),new DictWord(12,0,491),new DictWord(12,0,520),new DictWord(13,0,383),new DictWord(142,0,244),new DictWord(135,11,734),new DictWord(134,10,1692),
				new DictWord(10,0,448),new DictWord(11,0,630),new DictWord(17,0,117),new DictWord(6,10,202),new DictWord(7,11,705),new DictWord(12,10,360),new DictWord(17,10,118),new DictWord(
					18,10,27),new DictWord(148,10,67),new DictWord(4,11,73),new DictWord(6,11,612),new DictWord(7,11,927),new DictWord(7,11,1822),new DictWord(8,11,217),new DictWord(9,
					11,472),new DictWord(9,11,765),new DictWord(9,11,766),new DictWord(10,11,408),new DictWord(11,11,51),new DictWord(11,11,793),new DictWord(12,11,266),new DictWord(15
					,11,158),new DictWord(20,11,89),new DictWord(150,11,32),new DictWord(4,0,190),new DictWord(133,0,554),new DictWord(133,0,1001),new DictWord(5,11,389),new DictWord(8
					,11,636),new DictWord(137,11,229),new DictWord(5,0,446),new DictWord(7,10,872),new DictWord(10,10,516),new DictWord(139,10,167),new DictWord(137,10,313)
				,new DictWord(132,10,224),new DictWord(134,0,1313),new DictWord(5,10,546),new DictWord(7,10,35),new DictWord(8,10,11),new DictWord(8,10,12),new DictWord(9,10,315),new DictWord(
					9,10,533),new DictWord(10,10,802),new DictWord(11,10,166),new DictWord(12,10,525),new DictWord(142,10,243),new DictWord(6,0,636),new DictWord(137,0,837)
				,new DictWord(5,10,241),new DictWord(8,10,242),new DictWord(9,10,451),new DictWord(10,10,667),new DictWord(11,10,598),new DictWord(140,10,429),new DictWord(22,10,46
				),new DictWord(150,11,46),new DictWord(136,11,472),new DictWord(11,0,278),new DictWord(142,0,73),new DictWord(141,11,185),new DictWord(132,0,868),new DictWord(134,0
					,972),new DictWord(4,10,366),new DictWord(137,10,516),new DictWord(138,0,1010),new DictWord(5,11,189),new DictWord(6,10,1736),new DictWord(7,11,442),new DictWord(7,
					11,443),new DictWord(8,11,281),new DictWord(12,11,174),new DictWord(13,11,83),new DictWord(141,11,261),new DictWord(139,11,384),new DictWord(6,11,2),new DictWord(7,
					11,191),new DictWord(7,11,446),new DictWord(7,11,758),new DictWord(7,11,1262),new DictWord(7,11,1737),new DictWord(8,11,22),new DictWord(8,11,270),new DictWord(8,11
					,612),new DictWord(9,11,4),new DictWord(9,11,167),new DictWord(9,11,312),new DictWord(9,11,436),new DictWord(10,11,156),new DictWord(10,11,216),new DictWord(10,11,
					311),new DictWord(10,11,623),new DictWord(11,11,72),new DictWord(11,11,330),new DictWord(11,11,455),new DictWord(12,11,101),new DictWord(12,11,321),new DictWord(12,
					11,504),new DictWord(12,11,530),new DictWord(12,11,543),new DictWord(13,11,17),new DictWord(13,11,156),new DictWord(13,11,334),new DictWord(14,11,48),new DictWord(
					15,11,70),new DictWord(17,11,60),new DictWord(148,11,64),new DictWord(6,10,331),new DictWord(136,10,623),new DictWord(135,0,1231),new DictWord(132,0,304
				),new DictWord(6,11,60),new DictWord(7,11,670),new DictWord(7,11,1327),new DictWord(8,11,411),new DictWord(8,11,435),new DictWord(9,11,653),new DictWord(9,11,740),new DictWord(
					10,11,385),new DictWord(11,11,222),new DictWord(11,11,324),new DictWord(11,11,829),new DictWord(140,11,611),new DictWord(7,0,506),new DictWord(6,11,166)
				,new DictWord(7,11,374),new DictWord(135,11,1174),new DictWord(14,11,43),new DictWord(146,11,21),new DictWord(135,11,1694),new DictWord(135,10,1888),new DictWord(5,
					11,206),new DictWord(134,11,398),new DictWord(135,11,50),new DictWord(150,0,26),new DictWord(6,0,53),new DictWord(6,0,199),new DictWord(7,0,1408),new DictWord(8,0,
					32),new DictWord(8,0,93),new DictWord(10,0,397),new DictWord(10,0,629),new DictWord(11,0,593),new DictWord(11,0,763),new DictWord(13,0,326),new DictWord(145,0,35),new DictWord(
					134,0,105),new DictWord(132,10,394),new DictWord(4,0,843),new DictWord(138,0,794),new DictWord(11,0,704),new DictWord(141,0,396),new DictWord(5,0,114),new DictWord(
					5,0,255),new DictWord(141,0,285),new DictWord(6,0,619),new DictWord(7,0,898),new DictWord(7,0,1092),new DictWord(8,0,485),new DictWord(18,0,28),new DictWord(19,0,
					116),new DictWord(135,10,1931),new DictWord(9,0,145),new DictWord(7,10,574),new DictWord(135,10,1719),new DictWord(7,0,2035),new DictWord(8,0,19),new DictWord(9,0,
					89),new DictWord(138,0,831),new DictWord(132,10,658),new DictWord(6,11,517),new DictWord(7,11,1159),new DictWord(10,11,621),new DictWord(139,11,192),new DictWord(7,
					0,1933),new DictWord(7,11,1933),new DictWord(9,10,781),new DictWord(10,10,144),new DictWord(11,10,385),new DictWord(13,10,161),new DictWord(13,10,228),new DictWord(
					13,10,268),new DictWord(148,10,107),new DictWord(136,10,374),new DictWord(10,11,223),new DictWord(139,11,645),new DictWord(135,0,1728),new DictWord(7,11
					,64),new DictWord(7,11,289),new DictWord(136,11,245),new DictWord(4,10,344),new DictWord(6,10,498),new DictWord(139,10,323),new DictWord(136,0,746),new DictWord(135
					,10,1063),new DictWord(137,10,155),new DictWord(4,0,987),new DictWord(6,0,1964),new DictWord(6,0,1974),new DictWord(6,0,1990),new DictWord(136,0,995),new DictWord(
					133,11,609),new DictWord(133,10,906),new DictWord(134,0,1550),new DictWord(134,0,874),new DictWord(5,11,129),new DictWord(6,11,61),new DictWord(135,11,
					947),new DictWord(4,0,1018),new DictWord(6,0,1938),new DictWord(6,0,2021),new DictWord(134,0,2039),new DictWord(132,0,814),new DictWord(11,0,126),new DictWord(139,0
					,287),new DictWord(134,0,1264),new DictWord(5,0,955),new DictWord(136,0,814),new DictWord(141,11,506),new DictWord(132,11,314),new DictWord(6,0,981),new DictWord(
					139,11,1000),new DictWord(5,0,56),new DictWord(8,0,892),new DictWord(8,0,915),new DictWord(140,0,776),new DictWord(148,0,100),new DictWord(10,0,4),new DictWord(10,0
					,13),new DictWord(11,0,638),new DictWord(148,0,57),new DictWord(148,11,74),new DictWord(5,0,738),new DictWord(132,10,616),new DictWord(133,11,637),new DictWord(136,
					10,692),new DictWord(133,0,758),new DictWord(132,10,305),new DictWord(137,11,590),new DictWord(5,11,280),new DictWord(135,11,1226),new DictWord(134,11,
					494),new DictWord(135,0,1112),new DictWord(133,11,281),new DictWord(13,0,44),new DictWord(14,0,214),new DictWord(5,10,214),new DictWord(7,10,603),new DictWord(8,10,
					611),new DictWord(9,10,686),new DictWord(10,10,88),new DictWord(11,10,459),new DictWord(11,10,496),new DictWord(12,10,463),new DictWord(140,10,590),new DictWord(139
					,0,328),new DictWord(135,11,1064),new DictWord(137,0,133),new DictWord(7,0,168),new DictWord(13,0,196),new DictWord(141,0,237),new DictWord(134,10,1703)
				,new DictWord(134,0,1152),new DictWord(135,0,1245),new DictWord(5,0,110),new DictWord(6,0,169),new DictWord(6,0,1702),new DictWord(7,0,400),new DictWord(8,0,538),new DictWord(9
					,0,184),new DictWord(9,0,524),new DictWord(140,0,218),new DictWord(6,0,1816),new DictWord(10,0,871),new DictWord(12,0,769),new DictWord(140,0,785),new DictWord(132,
					11,630),new DictWord(7,11,33),new DictWord(7,11,120),new DictWord(8,11,489),new DictWord(9,11,319),new DictWord(10,11,820),new DictWord(11,11,1004),new DictWord(12,
					11,379),new DictWord(13,11,117),new DictWord(13,11,412),new DictWord(14,11,25),new DictWord(15,11,52),new DictWord(15,11,161),new DictWord(16,11,47),new DictWord(
					149,11,2),new DictWord(6,0,133),new DictWord(8,0,413),new DictWord(9,0,353),new DictWord(139,0,993),new DictWord(145,10,19),new DictWord(4,11,937),new DictWord(133,
					11,801),new DictWord(134,0,978),new DictWord(6,0,93),new DictWord(6,0,1508),new DictWord(7,0,1422),new DictWord(7,0,1851),new DictWord(8,0,673),new DictWord(9,0,529
				),new DictWord(140,0,43),new DictWord(6,0,317),new DictWord(10,0,512),new DictWord(4,10,737),new DictWord(11,10,294),new DictWord(12,10,60),new DictWord(12,10,437),
				new DictWord(13,10,64),new DictWord(13,10,380),new DictWord(142,10,430),new DictWord(9,0,371),new DictWord(7,11,1591),new DictWord(144,11,43),new DictWord(6,10,1758
				),new DictWord(8,10,520),new DictWord(9,10,345),new DictWord(9,10,403),new DictWord(142,10,350),new DictWord(5,0,526),new DictWord(10,10,242),new DictWord(138,10,
					579),new DictWord(9,0,25),new DictWord(10,0,467),new DictWord(138,0,559),new DictWord(5,10,139),new DictWord(7,10,1168),new DictWord(138,10,539),new DictWord(4,0,
					335),new DictWord(135,0,942),new DictWord(140,0,754),new DictWord(132,11,365),new DictWord(11,0,182),new DictWord(142,0,195),new DictWord(142,11,29),new DictWord(5,
					11,7),new DictWord(139,11,774),new DictWord(4,11,746),new DictWord(135,11,1090),new DictWord(8,0,39),new DictWord(10,0,773),new DictWord(11,0,84),new DictWord(12,0,
					205),new DictWord(142,0,1),new DictWord(5,0,601),new DictWord(5,0,870),new DictWord(5,11,360),new DictWord(136,11,237),new DictWord(132,0,181),new DictWord(136,0,
					370),new DictWord(134,0,1652),new DictWord(8,0,358),new DictWord(4,10,107),new DictWord(7,10,613),new DictWord(8,10,439),new DictWord(8,10,504),new DictWord(9,10,
					501),new DictWord(10,10,383),new DictWord(139,10,477),new DictWord(132,10,229),new DictWord(137,11,785),new DictWord(4,0,97),new DictWord(5,0,147),new DictWord(6,0,
					286),new DictWord(7,0,1362),new DictWord(141,0,176),new DictWord(6,0,537),new DictWord(7,0,788),new DictWord(7,0,1816),new DictWord(132,10,903),new DictWord(140,10,
					71),new DictWord(6,0,743),new DictWord(134,0,1223),new DictWord(6,0,375),new DictWord(7,0,169),new DictWord(7,0,254),new DictWord(8,0,780),new DictWord(135,11,1493)
				,new DictWord(7,0,1714),new DictWord(4,10,47),new DictWord(6,10,373),new DictWord(7,10,452),new DictWord(7,10,543),new DictWord(7,10,1856),new DictWord(9,10,6),new DictWord(11,
					10,257),new DictWord(139,10,391),new DictWord(6,0,896),new DictWord(136,0,1003),new DictWord(135,0,1447),new DictWord(137,11,341),new DictWord(5,10,980)
				,new DictWord(134,10,1754),new DictWord(145,11,22),new DictWord(4,11,277),new DictWord(5,11,608),new DictWord(6,11,493),new DictWord(7,11,457),new DictWord(140,11,
					384),new DictWord(7,10,536),new DictWord(7,10,1331),new DictWord(136,10,143),new DictWord(140,0,744),new DictWord(7,11,27),new DictWord(135,11,316),new DictWord(18,
					0,126),new DictWord(5,10,19),new DictWord(134,10,533),new DictWord(4,0,788),new DictWord(11,0,41),new DictWord(5,11,552),new DictWord(5,11,586),new DictWord(5,11,
					676),new DictWord(6,11,448),new DictWord(8,11,244),new DictWord(11,11,1),new DictWord(11,11,41),new DictWord(13,11,3),new DictWord(16,11,54),new DictWord(17,11,4),new DictWord(
					146,11,13),new DictWord(4,0,985),new DictWord(6,0,1801),new DictWord(4,11,401),new DictWord(137,11,264),new DictWord(5,10,395),new DictWord(5,10,951),new DictWord(
					134,10,1776),new DictWord(5,0,629),new DictWord(135,0,1549),new DictWord(11,10,663),new DictWord(12,10,210),new DictWord(13,10,166),new DictWord(13,10,
					310),new DictWord(14,10,373),new DictWord(147,10,43),new DictWord(9,11,543),new DictWord(10,11,524),new DictWord(11,11,30),new DictWord(12,11,524),new DictWord(14,
					11,315),new DictWord(16,11,18),new DictWord(20,11,26),new DictWord(148,11,65),new DictWord(4,11,205),new DictWord(5,11,623),new DictWord(7,11,104),new DictWord(136,
					11,519),new DictWord(5,0,293),new DictWord(134,0,601),new DictWord(7,11,579),new DictWord(9,11,41),new DictWord(9,11,244),new DictWord(9,11,669),new DictWord(10,11,
					5),new DictWord(11,11,861),new DictWord(11,11,951),new DictWord(139,11,980),new DictWord(132,11,717),new DictWord(132,10,695),new DictWord(7,10,497),new DictWord(9,
					10,387),new DictWord(147,10,81),new DictWord(132,0,420),new DictWord(142,0,37),new DictWord(6,0,1134),new DictWord(6,0,1900),new DictWord(12,0,830),new DictWord(12,
					0,878),new DictWord(12,0,894),new DictWord(15,0,221),new DictWord(143,0,245),new DictWord(132,11,489),new DictWord(7,0,1570),new DictWord(140,0,542),new DictWord(8,
					0,933),new DictWord(136,0,957),new DictWord(6,0,1371),new DictWord(7,0,31),new DictWord(8,0,373),new DictWord(5,10,284),new DictWord(6,10,49),new DictWord(6,10,350)
				,new DictWord(7,10,377),new DictWord(7,10,1693),new DictWord(8,10,678),new DictWord(9,10,161),new DictWord(9,10,585),new DictWord(9,10,671),new DictWord(9,10,839),new DictWord(
					11,10,912),new DictWord(141,10,427),new DictWord(135,11,892),new DictWord(4,0,325),new DictWord(138,0,125),new DictWord(139,11,47),new DictWord(132,10,
					597),new DictWord(138,0,323),new DictWord(6,0,1547),new DictWord(7,11,1605),new DictWord(9,11,473),new DictWord(11,11,962),new DictWord(146,11,139),new DictWord(139
					,10,908),new DictWord(7,11,819),new DictWord(9,11,26),new DictWord(9,11,392),new DictWord(10,11,152),new DictWord(10,11,226),new DictWord(11,11,19),new DictWord(12,
					11,276),new DictWord(12,11,426),new DictWord(12,11,589),new DictWord(13,11,460),new DictWord(15,11,97),new DictWord(19,11,48),new DictWord(148,11,104),new DictWord(
					135,11,51),new DictWord(4,0,718),new DictWord(135,0,1216),new DictWord(6,0,1896),new DictWord(6,0,1905),new DictWord(6,0,1912),new DictWord(9,0,947),new DictWord(9,
					0,974),new DictWord(12,0,809),new DictWord(12,0,850),new DictWord(12,0,858),new DictWord(12,0,874),new DictWord(12,0,887),new DictWord(12,0,904),new DictWord(12,0,
					929),new DictWord(12,0,948),new DictWord(12,0,952),new DictWord(15,0,198),new DictWord(15,0,206),new DictWord(15,0,220),new DictWord(15,0,227),new DictWord(15,0,247
				),new DictWord(18,0,188),new DictWord(21,0,48),new DictWord(21,0,50),new DictWord(24,0,25),new DictWord(24,0,29),new DictWord(7,11,761),new DictWord(7,11,1051),new DictWord(137
					,11,545),new DictWord(5,0,124),new DictWord(5,0,144),new DictWord(6,0,548),new DictWord(7,0,15),new DictWord(7,0,153),new DictWord(137,0,629),new DictWord(135,11,
					606),new DictWord(135,10,2014),new DictWord(7,10,2007),new DictWord(9,11,46),new DictWord(9,10,101),new DictWord(9,10,450),new DictWord(10,10,66),new DictWord(10,10
					,842),new DictWord(11,10,536),new DictWord(140,10,587),new DictWord(6,0,75),new DictWord(7,0,1531),new DictWord(8,0,416),new DictWord(9,0,240),new DictWord(9,0,275)
				,new DictWord(10,0,100),new DictWord(11,0,658),new DictWord(11,0,979),new DictWord(12,0,86),new DictWord(14,0,207),new DictWord(15,0,20),new DictWord(143,0,25),new DictWord(5,0
					,141),new DictWord(5,0,915),new DictWord(6,0,1783),new DictWord(7,0,211),new DictWord(7,0,698),new DictWord(7,0,1353),new DictWord(9,0,83),new DictWord(9,0,281),new DictWord(10
					,0,376),new DictWord(10,0,431),new DictWord(11,0,543),new DictWord(12,0,664),new DictWord(13,0,280),new DictWord(13,0,428),new DictWord(14,0,61),new DictWord(14,0,
					128),new DictWord(17,0,52),new DictWord(145,0,81),new DictWord(132,11,674),new DictWord(135,0,533),new DictWord(149,0,6),new DictWord(132,11,770),new DictWord(133,0
					,538),new DictWord(5,11,79),new DictWord(7,11,1027),new DictWord(7,11,1477),new DictWord(139,11,52),new DictWord(139,10,62),new DictWord(4,0,338),new DictWord(133,0
					,400),new DictWord(5,11,789),new DictWord(134,11,195),new DictWord(4,11,251),new DictWord(4,11,688),new DictWord(7,11,513),new DictWord(7,11,1284),new DictWord(9,11
					,87),new DictWord(138,11,365),new DictWord(134,10,1766),new DictWord(6,0,0),new DictWord(7,0,84),new DictWord(11,0,895),new DictWord(145,0,11),new DictWord(139,0,
					892),new DictWord(4,0,221),new DictWord(5,0,659),new DictWord(7,0,697),new DictWord(7,0,1211),new DictWord(138,0,284),new DictWord(133,0,989),new DictWord(133,11,
					889),new DictWord(4,11,160),new DictWord(5,11,330),new DictWord(7,11,1434),new DictWord(136,11,174),new DictWord(6,10,1665),new DictWord(7,10,256),new DictWord(7,10
					,1388),new DictWord(10,10,499),new DictWord(139,10,670),new DictWord(7,0,848),new DictWord(4,10,22),new DictWord(5,10,10),new DictWord(136,10,97),new DictWord(138,0
					,507),new DictWord(133,10,481),new DictWord(4,0,188),new DictWord(135,0,805),new DictWord(5,0,884),new DictWord(6,0,732),new DictWord(139,0,991),new DictWord(135,11
					,968),new DictWord(11,11,636),new DictWord(15,11,145),new DictWord(17,11,34),new DictWord(19,11,50),new DictWord(151,11,20),new DictWord(7,0,959),new DictWord(16,0,
					60),new DictWord(6,10,134),new DictWord(7,10,437),new DictWord(9,10,37),new DictWord(14,10,285),new DictWord(142,10,371),new DictWord(7,10,486),new DictWord(8,10,
					155),new DictWord(11,10,93),new DictWord(140,10,164),new DictWord(134,0,1653),new DictWord(7,0,337),new DictWord(133,10,591),new DictWord(6,0,1989),new DictWord(8,0
					,922),new DictWord(8,0,978),new DictWord(133,11,374),new DictWord(132,0,638),new DictWord(138,0,500),new DictWord(133,11,731),new DictWord(5,10,380),new DictWord(5,
					10,650),new DictWord(136,10,310),new DictWord(138,11,381),new DictWord(4,10,364),new DictWord(7,10,1156),new DictWord(7,10,1187),new DictWord(137,10,409
				),new DictWord(137,11,224),new DictWord(140,0,166),new DictWord(134,10,482),new DictWord(4,11,626),new DictWord(5,11,642),new DictWord(6,11,425),new DictWord(10,11,
					202),new DictWord(139,11,141),new DictWord(4,10,781),new DictWord(6,10,487),new DictWord(7,10,926),new DictWord(8,10,263),new DictWord(139,10,500),new DictWord(135,
					0,418),new DictWord(4,10,94),new DictWord(135,10,1265),new DictWord(136,0,760),new DictWord(132,10,417),new DictWord(136,11,835),new DictWord(5,10,348),
				new DictWord(134,10,522),new DictWord(6,0,1277),new DictWord(134,0,1538),new DictWord(139,11,541),new DictWord(135,11,1597),new DictWord(5,11,384),new DictWord(8,11
					,455),new DictWord(140,11,48),new DictWord(136,0,770),new DictWord(5,11,264),new DictWord(134,11,184),new DictWord(4,0,89),new DictWord(5,0,489),new DictWord(6,0,
					315),new DictWord(7,0,553),new DictWord(7,0,1745),new DictWord(138,0,243),new DictWord(4,10,408),new DictWord(4,10,741),new DictWord(135,10,500),new DictWord(134,0,
					1396),new DictWord(133,0,560),new DictWord(6,0,1658),new DictWord(9,0,3),new DictWord(10,0,154),new DictWord(11,0,641),new DictWord(13,0,85),new DictWord(13,0,201),
				new DictWord(141,0,346),new DictWord(135,11,1595),new DictWord(5,11,633),new DictWord(6,11,28),new DictWord(7,11,219),new DictWord(135,11,1323),new DictWord(9,11,
					769),new DictWord(140,11,185),new DictWord(135,11,785),new DictWord(7,11,359),new DictWord(8,11,243),new DictWord(140,11,175),new DictWord(138,0,586),new DictWord(7
					,0,1271),new DictWord(134,10,73),new DictWord(132,11,105),new DictWord(4,0,166),new DictWord(5,0,505),new DictWord(134,0,1670),new DictWord(133,10,576),
				new DictWord(4,11,324),new DictWord(138,11,104),new DictWord(142,10,231),new DictWord(6,0,637),new DictWord(7,10,1264),new DictWord(7,10,1678),new DictWord(11,10,
					945),new DictWord(12,10,341),new DictWord(12,10,471),new DictWord(12,10,569),new DictWord(23,11,21),new DictWord(151,11,23),new DictWord(8,11,559),new DictWord(141,
					11,109),new DictWord(134,0,1947),new DictWord(7,0,445),new DictWord(8,0,307),new DictWord(8,0,704),new DictWord(10,0,41),new DictWord(10,0,439),new DictWord(11,0,
					237),new DictWord(11,0,622),new DictWord(140,0,201),new DictWord(135,11,963),new DictWord(135,0,1977),new DictWord(4,0,189),new DictWord(5,0,713),new DictWord(136,0
					,57),new DictWord(138,0,371),new DictWord(135,10,538),new DictWord(132,0,552),new DictWord(6,0,883),new DictWord(133,10,413),new DictWord(6,0,923),new DictWord(132,
					11,758),new DictWord(138,11,215),new DictWord(136,10,495),new DictWord(7,10,54),new DictWord(8,10,312),new DictWord(10,10,191),new DictWord(10,10,614),new DictWord(
					140,10,567),new DictWord(7,11,351),new DictWord(139,11,128),new DictWord(7,0,875),new DictWord(6,10,468),new DictWord(7,10,1478),new DictWord(8,10,530),
				new DictWord(142,10,290),new DictWord(135,0,1788),new DictWord(17,0,49),new DictWord(133,11,918),new DictWord(12,11,398),new DictWord(20,11,39),new DictWord(21,11,
					11),new DictWord(150,11,41),new DictWord(10,0,661),new DictWord(6,10,484),new DictWord(135,10,822),new DictWord(135,0,1945),new DictWord(134,0,794),new DictWord(137
					,10,900),new DictWord(135,10,1335),new DictWord(6,10,1724),new DictWord(135,10,2022),new DictWord(132,11,340),new DictWord(134,0,1135),new DictWord(4,0,
					784),new DictWord(133,0,745),new DictWord(5,0,84),new DictWord(134,0,163),new DictWord(133,0,410),new DictWord(4,0,976),new DictWord(5,11,985),new DictWord(7,11,509
				),new DictWord(7,11,529),new DictWord(145,11,96),new DictWord(132,10,474),new DictWord(134,0,703),new DictWord(135,11,1919),new DictWord(5,0,322),new DictWord(8,0,
					186),new DictWord(9,0,262),new DictWord(10,0,187),new DictWord(142,0,208),new DictWord(135,10,1504),new DictWord(133,0,227),new DictWord(9,0,560),new DictWord(13,0,
					208),new DictWord(133,10,305),new DictWord(132,11,247),new DictWord(7,0,1395),new DictWord(8,0,486),new DictWord(9,0,236),new DictWord(9,0,878),new DictWord(10,0,
					218),new DictWord(11,0,95),new DictWord(19,0,17),new DictWord(147,0,31),new DictWord(7,0,2043),new DictWord(8,0,672),new DictWord(141,0,448),new DictWord(4,11,184),
				new DictWord(5,11,390),new DictWord(6,11,337),new DictWord(7,11,23),new DictWord(7,11,494),new DictWord(7,11,618),new DictWord(7,11,1456),new DictWord(8,11,27),new DictWord(8,
					11,599),new DictWord(10,11,153),new DictWord(139,11,710),new DictWord(135,0,466),new DictWord(135,10,1236),new DictWord(6,0,167),new DictWord(7,0,186),new DictWord(
					7,0,656),new DictWord(10,0,643),new DictWord(4,10,480),new DictWord(6,10,302),new DictWord(6,10,1642),new DictWord(7,10,837),new DictWord(7,10,1547),new DictWord(7,
					10,1657),new DictWord(8,10,429),new DictWord(9,10,228),new DictWord(13,10,289),new DictWord(13,10,343),new DictWord(147,10,101),new DictWord(134,0,1428)
				,new DictWord(134,0,1440),new DictWord(5,0,412),new DictWord(7,10,278),new DictWord(10,10,739),new DictWord(11,10,708),new DictWord(141,10,348),new DictWord(134,0,
					1118),new DictWord(136,0,562),new DictWord(148,11,46),new DictWord(9,0,316),new DictWord(139,0,256),new DictWord(134,0,1771),new DictWord(135,0,1190),new DictWord(
					137,0,132),new DictWord(10,11,227),new DictWord(11,11,497),new DictWord(11,11,709),new DictWord(140,11,415),new DictWord(143,0,66),new DictWord(6,11,360
				),new DictWord(7,11,1664),new DictWord(136,11,478),new DictWord(144,10,28),new DictWord(4,0,317),new DictWord(135,0,1279),new DictWord(5,0,63),new DictWord(133,0,
					509),new DictWord(136,11,699),new DictWord(145,10,36),new DictWord(134,0,1475),new DictWord(11,11,343),new DictWord(142,11,127),new DictWord(132,11,739)
				,new DictWord(132,0,288),new DictWord(135,11,1757),new DictWord(8,0,89),new DictWord(8,0,620),new DictWord(9,0,608),new DictWord(11,0,628),new DictWord(12,0,322),new DictWord(
					143,0,124),new DictWord(134,0,1225),new DictWord(7,0,1189),new DictWord(4,11,67),new DictWord(5,11,422),new DictWord(6,10,363),new DictWord(7,11,1037),new DictWord(
					7,11,1289),new DictWord(7,11,1555),new DictWord(7,10,1955),new DictWord(8,10,725),new DictWord(9,11,741),new DictWord(145,11,108),new DictWord(134,0,
					1468),new DictWord(6,0,689),new DictWord(134,0,1451),new DictWord(138,0,120),new DictWord(151,0,1),new DictWord(137,10,805),new DictWord(142,0,329),new DictWord(5,
					10,813),new DictWord(135,10,2046),new DictWord(135,0,226),new DictWord(138,11,96),new DictWord(7,0,1855),new DictWord(5,10,712),new DictWord(11,10,17),new DictWord(
					13,10,321),new DictWord(144,10,67),new DictWord(9,0,461),new DictWord(6,10,320),new DictWord(7,10,781),new DictWord(7,10,1921),new DictWord(9,10,55),new DictWord(10
					,10,186),new DictWord(10,10,273),new DictWord(10,10,664),new DictWord(10,10,801),new DictWord(11,10,996),new DictWord(11,10,997),new DictWord(13,10,157)
				,new DictWord(142,10,170),new DictWord(8,11,203),new DictWord(8,10,271),new DictWord(11,11,823),new DictWord(11,11,846),new DictWord(12,11,482),new DictWord(13,11,
					133),new DictWord(13,11,277),new DictWord(13,11,302),new DictWord(13,11,464),new DictWord(14,11,205),new DictWord(142,11,221),new DictWord(135,0,1346),new DictWord(
					4,11,449),new DictWord(133,11,718),new DictWord(134,0,85),new DictWord(14,0,299),new DictWord(7,10,103),new DictWord(7,10,863),new DictWord(11,10,184),new DictWord(
					145,10,62),new DictWord(4,11,355),new DictWord(6,11,311),new DictWord(9,11,256),new DictWord(138,11,404),new DictWord(137,10,659),new DictWord(138,11,
					758),new DictWord(133,11,827),new DictWord(5,11,64),new DictWord(140,11,581),new DictWord(134,0,1171),new DictWord(4,11,442),new DictWord(7,11,1047),new DictWord(7,
					11,1352),new DictWord(135,11,1643),new DictWord(132,0,980),new DictWord(5,11,977),new DictWord(6,11,288),new DictWord(7,11,528),new DictWord(135,11,1065
				),new DictWord(5,0,279),new DictWord(6,0,235),new DictWord(7,0,468),new DictWord(8,0,446),new DictWord(9,0,637),new DictWord(10,0,717),new DictWord(11,0,738),new DictWord(140,0
					,514),new DictWord(132,0,293),new DictWord(11,10,337),new DictWord(142,10,303),new DictWord(136,11,285),new DictWord(5,0,17),new DictWord(6,0,371),new DictWord(9,0,
					528),new DictWord(12,0,364),new DictWord(132,11,254),new DictWord(5,10,77),new DictWord(7,10,1455),new DictWord(10,10,843),new DictWord(147,10,73),new DictWord(150,
					0,5),new DictWord(132,10,458),new DictWord(6,11,12),new DictWord(7,11,1219),new DictWord(145,11,73),new DictWord(135,10,1420),new DictWord(6,10,109),new DictWord(
					138,10,382),new DictWord(135,11,125),new DictWord(6,10,330),new DictWord(7,10,1084),new DictWord(139,10,142),new DictWord(6,11,369),new DictWord(6,11,
					502),new DictWord(7,11,1036),new DictWord(8,11,348),new DictWord(9,11,452),new DictWord(10,11,26),new DictWord(11,11,224),new DictWord(11,11,387),new DictWord(11,11
					,772),new DictWord(12,11,95),new DictWord(12,11,629),new DictWord(13,11,195),new DictWord(13,11,207),new DictWord(13,11,241),new DictWord(14,11,260),new DictWord(14
					,11,270),new DictWord(143,11,140),new DictWord(132,11,269),new DictWord(5,11,480),new DictWord(7,11,532),new DictWord(7,11,1197),new DictWord(7,11,1358)
				,new DictWord(8,11,291),new DictWord(11,11,349),new DictWord(142,11,396),new DictWord(150,0,48),new DictWord(10,0,601),new DictWord(13,0,353),new DictWord(141,0,376
				),new DictWord(5,0,779),new DictWord(5,0,807),new DictWord(6,0,1655),new DictWord(134,0,1676),new DictWord(142,11,223),new DictWord(4,0,196),new DictWord(5,0,558),new DictWord(
					133,0,949),new DictWord(148,11,15),new DictWord(135,11,1764),new DictWord(134,0,1322),new DictWord(132,0,752),new DictWord(139,0,737),new DictWord(135,
					11,657),new DictWord(136,11,533),new DictWord(135,0,412),new DictWord(4,0,227),new DictWord(5,0,159),new DictWord(5,0,409),new DictWord(7,0,80),new DictWord(8,0,556
				),new DictWord(10,0,479),new DictWord(12,0,418),new DictWord(14,0,50),new DictWord(14,0,123),new DictWord(14,0,192),new DictWord(14,0,249),new DictWord(14,0,295),new DictWord(
					143,0,27),new DictWord(7,0,1470),new DictWord(8,0,66),new DictWord(8,0,137),new DictWord(8,0,761),new DictWord(9,0,638),new DictWord(11,0,80),new DictWord(11,0,212)
				,new DictWord(11,0,368),new DictWord(11,0,418),new DictWord(12,0,8),new DictWord(13,0,15),new DictWord(16,0,61),new DictWord(17,0,59),new DictWord(19,0,28),new DictWord(148,0,
					84),new DictWord(135,10,1985),new DictWord(4,11,211),new DictWord(4,11,332),new DictWord(5,11,335),new DictWord(6,11,238),new DictWord(7,11,269),new DictWord(7,11,
					811),new DictWord(7,11,1797),new DictWord(8,10,122),new DictWord(8,11,836),new DictWord(9,11,507),new DictWord(141,11,242),new DictWord(6,0,683),new DictWord(134,0,
					1252),new DictWord(4,0,873),new DictWord(132,10,234),new DictWord(134,0,835),new DictWord(6,0,38),new DictWord(7,0,1220),new DictWord(8,0,185),new DictWord(8,0,256)
				,new DictWord(9,0,22),new DictWord(9,0,331),new DictWord(10,0,738),new DictWord(11,0,205),new DictWord(11,0,540),new DictWord(11,0,746),new DictWord(13,0,465),new DictWord(14,0
					,88),new DictWord(142,0,194),new DictWord(138,0,986),new DictWord(5,11,1009),new DictWord(12,11,582),new DictWord(146,11,131),new DictWord(4,0,159),new DictWord(6,0
					,115),new DictWord(7,0,252),new DictWord(7,0,257),new DictWord(7,0,1928),new DictWord(8,0,69),new DictWord(9,0,384),new DictWord(10,0,91),new DictWord(10,0,615),new DictWord(12
					,0,375),new DictWord(14,0,235),new DictWord(18,0,117),new DictWord(147,0,123),new DictWord(133,0,911),new DictWord(136,0,278),new DictWord(5,10,430),new DictWord(5,
					10,932),new DictWord(6,10,131),new DictWord(7,10,417),new DictWord(9,10,522),new DictWord(11,10,314),new DictWord(141,10,390),new DictWord(14,10,149),new DictWord(
					14,10,399),new DictWord(143,10,57),new DictWord(4,0,151),new DictWord(7,0,1567),new DictWord(136,0,749),new DictWord(5,11,228),new DictWord(6,11,203),new DictWord(7
					,11,156),new DictWord(8,11,347),new DictWord(137,11,265),new DictWord(132,10,507),new DictWord(10,0,989),new DictWord(140,0,956),new DictWord(133,0,990)
				,new DictWord(5,0,194),new DictWord(6,0,927),new DictWord(7,0,1662),new DictWord(9,0,90),new DictWord(140,0,564),new DictWord(4,10,343),new DictWord(133,10,511),new DictWord(
					133,0,425),new DictWord(7,10,455),new DictWord(138,10,591),new DictWord(4,0,774),new DictWord(7,11,476),new DictWord(7,11,1592),new DictWord(138,11,87),
				new DictWord(5,0,971),new DictWord(135,10,1381),new DictWord(5,11,318),new DictWord(147,11,121),new DictWord(5,11,291),new DictWord(7,11,765),new DictWord(9,11,389)
				,new DictWord(140,11,548),new DictWord(134,10,575),new DictWord(4,0,827),new DictWord(12,0,646),new DictWord(12,0,705),new DictWord(12,0,712),new DictWord(140,0,714
				),new DictWord(139,0,752),new DictWord(137,0,662),new DictWord(5,0,72),new DictWord(6,0,264),new DictWord(7,0,21),new DictWord(7,0,46),new DictWord(7,0,2013),new DictWord(8,0,
					215),new DictWord(8,0,513),new DictWord(10,0,266),new DictWord(139,0,22),new DictWord(139,11,522),new DictWord(6,0,239),new DictWord(7,0,118),new DictWord(10,0,95),
				new DictWord(11,0,603),new DictWord(13,0,443),new DictWord(14,0,160),new DictWord(143,0,4),new DictWord(6,0,431),new DictWord(134,0,669),new DictWord(7,10,1127),new DictWord(7,
					10,1572),new DictWord(10,10,297),new DictWord(10,10,422),new DictWord(11,10,764),new DictWord(11,10,810),new DictWord(12,10,264),new DictWord(13,10,102)
				,new DictWord(13,10,300),new DictWord(13,10,484),new DictWord(14,10,147),new DictWord(14,10,229),new DictWord(17,10,71),new DictWord(18,10,118),new DictWord(147,10,
					120),new DictWord(5,0,874),new DictWord(6,0,1677),new DictWord(15,0,0),new DictWord(10,11,525),new DictWord(139,11,82),new DictWord(6,0,65),new DictWord(7,0,939),new DictWord(7
					,0,1172),new DictWord(7,0,1671),new DictWord(9,0,540),new DictWord(10,0,696),new DictWord(11,0,265),new DictWord(11,0,732),new DictWord(11,0,928),new DictWord(11,0,
					937),new DictWord(141,0,438),new DictWord(134,0,1350),new DictWord(136,11,547),new DictWord(132,11,422),new DictWord(5,11,355),new DictWord(145,11,0),new DictWord(
					137,11,905),new DictWord(5,0,682),new DictWord(135,0,1887),new DictWord(132,0,809),new DictWord(4,0,696),new DictWord(133,11,865),new DictWord(6,0,1074)
				,new DictWord(6,0,1472),new DictWord(14,10,35),new DictWord(142,10,191),new DictWord(5,11,914),new DictWord(134,11,1625),new DictWord(133,11,234),new DictWord(135,
					11,1383),new DictWord(137,11,780),new DictWord(132,10,125),new DictWord(4,0,726),new DictWord(133,0,630),new DictWord(8,0,802),new DictWord(136,0,838),new DictWord(
					132,10,721),new DictWord(6,0,1337),new DictWord(7,0,776),new DictWord(19,0,56),new DictWord(136,10,145),new DictWord(132,0,970),new DictWord(7,10,792),new DictWord(
					8,10,147),new DictWord(10,10,821),new DictWord(139,10,1021),new DictWord(139,10,970),new DictWord(8,0,940),new DictWord(137,0,797),new DictWord(135,11,
					1312),new DictWord(9,0,248),new DictWord(10,0,400),new DictWord(7,11,816),new DictWord(7,11,1241),new DictWord(7,10,1999),new DictWord(9,11,283),new DictWord(9,11,
					520),new DictWord(10,11,213),new DictWord(10,11,307),new DictWord(10,11,463),new DictWord(10,11,671),new DictWord(10,11,746),new DictWord(11,11,401),new DictWord(11
					,11,794),new DictWord(12,11,517),new DictWord(18,11,107),new DictWord(147,11,115),new DictWord(6,0,1951),new DictWord(134,0,2040),new DictWord(135,11,
					339),new DictWord(13,0,41),new DictWord(15,0,93),new DictWord(5,10,168),new DictWord(5,10,930),new DictWord(8,10,74),new DictWord(9,10,623),new DictWord(12,10,500),
				new DictWord(140,10,579),new DictWord(6,0,118),new DictWord(7,0,215),new DictWord(7,0,1521),new DictWord(140,0,11),new DictWord(6,10,220),new DictWord(7,10,1101),new DictWord(
					141,10,105),new DictWord(6,11,421),new DictWord(7,11,61),new DictWord(7,11,1540),new DictWord(10,11,11),new DictWord(138,11,501),new DictWord(7,0,615),new DictWord(
					138,0,251),new DictWord(140,11,631),new DictWord(135,0,1044),new DictWord(6,10,19),new DictWord(7,10,1413),new DictWord(139,10,428),new DictWord(133,0,
					225),new DictWord(7,10,96),new DictWord(8,10,401),new DictWord(8,10,703),new DictWord(137,10,896),new DictWord(145,10,116),new DictWord(6,11,102),new DictWord(7,11,
					72),new DictWord(15,11,142),new DictWord(147,11,67),new DictWord(7,10,1961),new DictWord(7,10,1965),new DictWord(8,10,702),new DictWord(136,10,750),new DictWord(7,
					10,2030),new DictWord(8,10,150),new DictWord(8,10,737),new DictWord(12,10,366),new DictWord(151,11,30),new DictWord(4,0,370),new DictWord(5,0,756),new DictWord(7,0,
					1326),new DictWord(135,11,823),new DictWord(8,10,800),new DictWord(9,10,148),new DictWord(9,10,872),new DictWord(9,10,890),new DictWord(11,10,309),new DictWord(11,
					10,1001),new DictWord(13,10,267),new DictWord(141,10,323),new DictWord(6,0,1662),new DictWord(7,0,48),new DictWord(8,0,771),new DictWord(10,0,116),new DictWord(13,0
					,104),new DictWord(14,0,105),new DictWord(14,0,184),new DictWord(15,0,168),new DictWord(19,0,92),new DictWord(148,0,68),new DictWord(10,0,209),new DictWord(135,11,
					1870),new DictWord(7,11,68),new DictWord(8,11,48),new DictWord(8,11,88),new DictWord(8,11,582),new DictWord(8,11,681),new DictWord(9,11,373),new DictWord(9,11,864),
				new DictWord(11,11,157),new DictWord(11,11,336),new DictWord(11,11,843),new DictWord(148,11,27),new DictWord(134,0,930),new DictWord(4,11,88),new DictWord(5,11,137)
				,new DictWord(5,11,174),new DictWord(5,11,777),new DictWord(6,11,1664),new DictWord(6,11,1725),new DictWord(7,11,77),new DictWord(7,11,426),new DictWord(7,11,1317),
				new DictWord(7,11,1355),new DictWord(8,11,126),new DictWord(8,11,563),new DictWord(9,11,523),new DictWord(9,11,750),new DictWord(10,11,310),new DictWord(10,11,836),
				new DictWord(11,11,42),new DictWord(11,11,318),new DictWord(11,11,731),new DictWord(12,11,68),new DictWord(12,11,92),new DictWord(12,11,507),new DictWord(12,11,692)
				,new DictWord(13,11,81),new DictWord(13,11,238),new DictWord(13,11,374),new DictWord(18,11,138),new DictWord(19,11,78),new DictWord(19,11,111),new DictWord(20,11,55
				),new DictWord(20,11,77),new DictWord(148,11,92),new DictWord(4,11,938),new DictWord(135,11,1831),new DictWord(5,10,547),new DictWord(7,10,424),new DictWord(8,11,
					617),new DictWord(138,11,351),new DictWord(6,0,1286),new DictWord(6,11,1668),new DictWord(7,11,1499),new DictWord(8,11,117),new DictWord(9,11,314),new DictWord(138,
					11,174),new DictWord(6,0,759),new DictWord(6,0,894),new DictWord(7,11,707),new DictWord(139,11,563),new DictWord(4,0,120),new DictWord(135,0,1894),new DictWord(9,0,
					385),new DictWord(149,0,17),new DictWord(138,0,429),new DictWord(133,11,403),new DictWord(5,0,820),new DictWord(135,0,931),new DictWord(10,0,199),new DictWord(133,
					10,133),new DictWord(6,0,151),new DictWord(6,0,1675),new DictWord(7,0,383),new DictWord(151,0,10),new DictWord(6,0,761),new DictWord(136,10,187),new DictWord(8,0,
					365),new DictWord(10,10,0),new DictWord(10,10,818),new DictWord(139,10,988),new DictWord(4,11,44),new DictWord(5,11,311),new DictWord(6,11,156),new DictWord(7,11,
					639),new DictWord(7,11,762),new DictWord(7,11,1827),new DictWord(9,11,8),new DictWord(9,11,462),new DictWord(148,11,83),new DictWord(4,11,346),new DictWord(7,11,115
				),new DictWord(9,11,180),new DictWord(9,11,456),new DictWord(138,11,363),new DictWord(136,10,685),new DictWord(7,0,1086),new DictWord(145,0,46),new DictWord(6,0,
					1624),new DictWord(11,0,11),new DictWord(12,0,422),new DictWord(13,0,444),new DictWord(142,0,360),new DictWord(6,0,1020),new DictWord(6,0,1260),new DictWord(134,0,
					1589),new DictWord(4,0,43),new DictWord(5,0,344),new DictWord(5,0,357),new DictWord(14,0,472),new DictWord(150,0,58),new DictWord(6,0,1864),new DictWord(6,0,1866),new DictWord(
					6,0,1868),new DictWord(6,0,1869),new DictWord(6,0,1874),new DictWord(6,0,1877),new DictWord(6,0,1903),new DictWord(6,0,1911),new DictWord(9,0,920),new DictWord(9,0,
					921),new DictWord(9,0,924),new DictWord(9,0,946),new DictWord(9,0,959),new DictWord(9,0,963),new DictWord(9,0,970),new DictWord(9,0,997),new DictWord(9,0,1008),new DictWord(9,0
					,1017),new DictWord(12,0,795),new DictWord(12,0,797),new DictWord(12,0,798),new DictWord(12,0,800),new DictWord(12,0,803),new DictWord(12,0,811),new DictWord(12,0,
					820),new DictWord(12,0,821),new DictWord(12,0,839),new DictWord(12,0,841),new DictWord(12,0,848),new DictWord(12,0,911),new DictWord(12,0,921),new DictWord(12,0,922
				),new DictWord(12,0,925),new DictWord(12,0,937),new DictWord(12,0,944),new DictWord(12,0,945),new DictWord(12,0,953),new DictWord(15,0,184),new DictWord(15,0,191),new DictWord(
					15,0,199),new DictWord(15,0,237),new DictWord(15,0,240),new DictWord(15,0,243),new DictWord(15,0,246),new DictWord(18,0,203),new DictWord(21,0,40),new DictWord(21,0
					,52),new DictWord(21,0,57),new DictWord(24,0,23),new DictWord(24,0,28),new DictWord(152,0,30),new DictWord(134,0,725),new DictWord(145,11,58),new DictWord(133,0,888
				),new DictWord(137,10,874),new DictWord(4,0,711),new DictWord(8,10,774),new DictWord(10,10,670),new DictWord(140,10,51),new DictWord(144,11,40),new DictWord(6,11,
					185),new DictWord(7,11,1899),new DictWord(139,11,673),new DictWord(137,10,701),new DictWord(137,0,440),new DictWord(4,11,327),new DictWord(5,11,478),new DictWord(7,
					11,1332),new DictWord(8,11,753),new DictWord(140,11,227),new DictWord(4,10,127),new DictWord(5,10,350),new DictWord(6,10,356),new DictWord(8,10,426),new DictWord(9,
					10,572),new DictWord(10,10,247),new DictWord(139,10,312),new DictWord(5,11,1020),new DictWord(133,11,1022),new DictWord(4,11,103),new DictWord(133,11,
					401),new DictWord(6,0,1913),new DictWord(6,0,1926),new DictWord(6,0,1959),new DictWord(9,0,914),new DictWord(9,0,939),new DictWord(9,0,952),new DictWord(9,0,979),new DictWord(9
					,0,990),new DictWord(9,0,998),new DictWord(9,0,1003),new DictWord(9,0,1023),new DictWord(12,0,827),new DictWord(12,0,834),new DictWord(12,0,845),new DictWord(12,0,
					912),new DictWord(12,0,935),new DictWord(12,0,951),new DictWord(15,0,172),new DictWord(15,0,174),new DictWord(18,0,198),new DictWord(149,0,63),new DictWord(5,0,958)
				,new DictWord(5,0,987),new DictWord(4,11,499),new DictWord(135,11,1421),new DictWord(7,0,885),new DictWord(6,10,59),new DictWord(6,10,1762),new DictWord(9,10,603),new DictWord(
					141,10,397),new DictWord(10,11,62),new DictWord(141,11,164),new DictWord(4,0,847),new DictWord(135,0,326),new DictWord(11,0,276),new DictWord(142,0,293)
				,new DictWord(4,0,65),new DictWord(5,0,479),new DictWord(5,0,1004),new DictWord(7,0,1913),new DictWord(8,0,317),new DictWord(9,0,302),new DictWord(10,0,612),new DictWord(13,0,
					22),new DictWord(132,11,96),new DictWord(4,0,261),new DictWord(135,0,510),new DictWord(135,0,1514),new DictWord(6,10,111),new DictWord(7,10,4),new DictWord(8,10,163
				),new DictWord(8,10,776),new DictWord(138,10,566),new DictWord(4,0,291),new DictWord(9,0,515),new DictWord(12,0,152),new DictWord(12,0,443),new DictWord(13,0,392),new DictWord(
					142,0,357),new DictWord(7,11,399),new DictWord(135,11,1492),new DictWord(4,0,589),new DictWord(139,0,282),new DictWord(6,11,563),new DictWord(135,10,
					1994),new DictWord(5,10,297),new DictWord(135,10,1038),new DictWord(4,0,130),new DictWord(7,0,843),new DictWord(135,0,1562),new DictWord(5,0,42),new DictWord(5,0,
					879),new DictWord(7,0,245),new DictWord(7,0,324),new DictWord(7,0,1532),new DictWord(11,0,463),new DictWord(11,0,472),new DictWord(13,0,363),new DictWord(144,0,52),
				new DictWord(4,0,134),new DictWord(133,0,372),new DictWord(133,0,680),new DictWord(136,10,363),new DictWord(6,0,1997),new DictWord(8,0,935),new DictWord(136,0,977),
				new DictWord(4,0,810),new DictWord(135,0,1634),new DictWord(135,10,1675),new DictWord(7,0,1390),new DictWord(4,11,910),new DictWord(133,11,832),new DictWord(7,10,
					808),new DictWord(8,11,266),new DictWord(139,11,578),new DictWord(132,0,644),new DictWord(4,0,982),new DictWord(138,0,867),new DictWord(132,10,280),new DictWord(135
					,0,540),new DictWord(140,10,54),new DictWord(135,0,123),new DictWord(134,0,1978),new DictWord(4,10,421),new DictWord(133,10,548),new DictWord(6,0,623),new DictWord(
					136,0,789),new DictWord(4,0,908),new DictWord(5,0,359),new DictWord(5,0,508),new DictWord(6,0,1723),new DictWord(7,0,343),new DictWord(7,0,1996),new DictWord(135,0,
					2026),new DictWord(134,0,1220),new DictWord(4,0,341),new DictWord(135,0,480),new DictWord(6,10,254),new DictWord(9,10,109),new DictWord(138,10,103),new DictWord(134
					,0,888),new DictWord(8,11,528),new DictWord(137,11,348),new DictWord(7,0,1995),new DictWord(8,0,299),new DictWord(11,0,890),new DictWord(12,0,674),new DictWord(4,11
					,20),new DictWord(133,11,616),new DictWord(135,11,1094),new DictWord(134,10,1630),new DictWord(4,0,238),new DictWord(5,0,503),new DictWord(6,0,179),new DictWord(7,0
					,2003),new DictWord(8,0,381),new DictWord(8,0,473),new DictWord(9,0,149),new DictWord(10,0,788),new DictWord(15,0,45),new DictWord(15,0,86),new DictWord(20,0,110),new DictWord(
					150,0,57),new DictWord(133,10,671),new DictWord(4,11,26),new DictWord(5,11,429),new DictWord(6,11,245),new DictWord(7,11,704),new DictWord(7,11,1379),new DictWord(
					135,11,1474),new DictWord(4,0,121),new DictWord(5,0,156),new DictWord(5,0,349),new DictWord(9,0,431),new DictWord(10,0,605),new DictWord(142,0,342),new DictWord(7,
					11,943),new DictWord(139,11,614),new DictWord(132,10,889),new DictWord(132,11,621),new DictWord(7,10,1382),new DictWord(7,11,1382),new DictWord(135,10,
					1910),new DictWord(132,10,627),new DictWord(133,10,775),new DictWord(133,11,542),new DictWord(133,11,868),new DictWord(136,11,433),new DictWord(6,0,1373
				),new DictWord(7,0,1011),new DictWord(11,10,362),new DictWord(11,10,948),new DictWord(140,10,388),new DictWord(6,0,80),new DictWord(7,0,173),new DictWord(9,0,547),new DictWord(
					10,0,730),new DictWord(14,0,18),new DictWord(22,0,39),new DictWord(135,11,1495),new DictWord(6,0,1694),new DictWord(135,0,1974),new DictWord(140,0,196),
				new DictWord(4,0,923),new DictWord(6,0,507),new DictWord(6,0,1711),new DictWord(7,10,451),new DictWord(8,10,389),new DictWord(12,10,490),new DictWord(13,10,16),new DictWord(13,
					10,215),new DictWord(13,10,351),new DictWord(18,10,132),new DictWord(147,10,125),new DictWord(6,0,646),new DictWord(134,0,1047),new DictWord(135,10,841)
				,new DictWord(136,10,566),new DictWord(6,0,1611),new DictWord(135,0,1214),new DictWord(139,0,926),new DictWord(132,11,525),new DictWord(132,0,595),new DictWord(5,0,
					240),new DictWord(6,0,459),new DictWord(7,0,12),new DictWord(7,0,114),new DictWord(7,0,949),new DictWord(7,0,1753),new DictWord(7,0,1805),new DictWord(8,0,658),new DictWord(9,0
					,1),new DictWord(11,0,959),new DictWord(141,0,446),new DictWord(5,10,912),new DictWord(134,10,1695),new DictWord(132,0,446),new DictWord(7,11,62),new DictWord(12,11
					,45),new DictWord(147,11,112),new DictWord(5,10,236),new DictWord(6,10,572),new DictWord(8,10,492),new DictWord(11,10,618),new DictWord(144,10,56),new DictWord(5,10
					,190),new DictWord(136,10,318),new DictWord(135,10,1376),new DictWord(4,11,223),new DictWord(6,11,359),new DictWord(11,11,3),new DictWord(13,11,108),new DictWord(14
					,11,89),new DictWord(144,11,22),new DictWord(132,11,647),new DictWord(134,0,490),new DictWord(134,0,491),new DictWord(134,0,1584),new DictWord(135,11,
					685),new DictWord(138,11,220),new DictWord(7,0,250),new DictWord(136,0,507),new DictWord(132,0,158),new DictWord(4,0,140),new DictWord(7,0,362),new DictWord(8,0,209
				),new DictWord(9,0,10),new DictWord(9,0,160),new DictWord(9,0,503),new DictWord(9,0,614),new DictWord(10,0,689),new DictWord(11,0,327),new DictWord(11,0,553),new DictWord(11,0,
					725),new DictWord(11,0,767),new DictWord(12,0,252),new DictWord(12,0,583),new DictWord(13,0,192),new DictWord(14,0,269),new DictWord(14,0,356),new DictWord(148,0,50
				),new DictWord(19,0,1),new DictWord(19,0,26),new DictWord(150,0,9),new DictWord(132,11,109),new DictWord(6,0,228),new DictWord(7,0,1341),new DictWord(9,0,408),new DictWord(138,
					0,343),new DictWord(4,0,373),new DictWord(5,0,283),new DictWord(6,0,480),new DictWord(7,0,609),new DictWord(10,0,860),new DictWord(138,0,878),new DictWord(6,0,779),
				new DictWord(134,0,1209),new DictWord(4,0,557),new DictWord(7,11,263),new DictWord(7,11,628),new DictWord(136,11,349),new DictWord(132,0,548),new DictWord(7,0,197),
				new DictWord(8,0,142),new DictWord(8,0,325),new DictWord(9,0,150),new DictWord(9,0,596),new DictWord(10,0,350),new DictWord(10,0,353),new DictWord(11,0,74),new DictWord(11,0,
					315),new DictWord(12,0,662),new DictWord(12,0,681),new DictWord(14,0,423),new DictWord(143,0,141),new DictWord(4,11,40),new DictWord(10,11,67),new DictWord(11,11,
					117),new DictWord(11,11,768),new DictWord(139,11,935),new DictWord(7,11,992),new DictWord(8,11,301),new DictWord(9,11,722),new DictWord(12,11,63),new DictWord(13,11
					,29),new DictWord(14,11,161),new DictWord(143,11,18),new DictWord(6,0,1490),new DictWord(138,11,532),new DictWord(5,0,580),new DictWord(7,0,378),new DictWord(7,0,
					674),new DictWord(7,0,1424),new DictWord(15,0,83),new DictWord(16,0,11),new DictWord(15,11,83),new DictWord(144,11,11),new DictWord(6,0,1057),new DictWord(6,0,1335)
				,new DictWord(10,0,316),new DictWord(7,10,85),new DictWord(7,10,247),new DictWord(8,10,585),new DictWord(138,10,163),new DictWord(4,0,169),new DictWord(5,0,83),new DictWord(6,0
					,399),new DictWord(6,0,579),new DictWord(6,0,1513),new DictWord(7,0,692),new DictWord(7,0,846),new DictWord(7,0,1015),new DictWord(7,0,1799),new DictWord(8,0,403),new DictWord(
					9,0,394),new DictWord(10,0,133),new DictWord(12,0,4),new DictWord(12,0,297),new DictWord(12,0,452),new DictWord(16,0,81),new DictWord(18,0,25),new DictWord(21,0,14)
				,new DictWord(22,0,12),new DictWord(151,0,18),new DictWord(134,0,1106),new DictWord(7,0,1546),new DictWord(11,0,299),new DictWord(142,0,407),new DictWord(134,0,1192
				),new DictWord(132,0,177),new DictWord(5,0,411),new DictWord(135,0,653),new DictWord(7,0,439),new DictWord(10,0,727),new DictWord(11,0,260),new DictWord(139,0,684),
				new DictWord(138,10,145),new DictWord(147,10,83),new DictWord(5,0,208),new DictWord(7,0,753),new DictWord(135,0,1528),new DictWord(137,11,617),new DictWord(135,10,
					1922),new DictWord(135,11,825),new DictWord(11,0,422),new DictWord(13,0,389),new DictWord(4,10,124),new DictWord(10,10,457),new DictWord(11,10,121),new DictWord(11,
					10,169),new DictWord(11,10,870),new DictWord(12,10,214),new DictWord(14,10,187),new DictWord(143,10,77),new DictWord(11,0,615),new DictWord(15,0,58),new DictWord(11
					,11,615),new DictWord(143,11,58),new DictWord(9,0,618),new DictWord(138,0,482),new DictWord(6,0,1952),new DictWord(6,0,1970),new DictWord(142,0,505),new DictWord(7,
					10,1193),new DictWord(135,11,1838),new DictWord(133,0,242),new DictWord(135,10,1333),new DictWord(6,10,107),new DictWord(7,10,638),new DictWord(7,10,
					1632),new DictWord(137,10,396),new DictWord(133,0,953),new DictWord(5,10,370),new DictWord(134,10,1756),new DictWord(5,11,28),new DictWord(6,11,204),new DictWord(10
					,11,320),new DictWord(10,11,583),new DictWord(13,11,502),new DictWord(14,11,72),new DictWord(14,11,274),new DictWord(14,11,312),new DictWord(14,11,344),
				new DictWord(15,11,159),new DictWord(16,11,62),new DictWord(16,11,69),new DictWord(17,11,30),new DictWord(18,11,42),new DictWord(18,11,53),new DictWord(18,11,84),new DictWord(
					18,11,140),new DictWord(19,11,68),new DictWord(19,11,85),new DictWord(20,11,5),new DictWord(20,11,45),new DictWord(20,11,101),new DictWord(22,11,7),new DictWord(150
					,11,20),new DictWord(4,11,558),new DictWord(6,11,390),new DictWord(7,11,162),new DictWord(7,11,689),new DictWord(9,11,360),new DictWord(138,11,653),new DictWord(11,
					0,802),new DictWord(141,0,67),new DictWord(133,10,204),new DictWord(133,0,290),new DictWord(5,10,970),new DictWord(134,10,1706),new DictWord(132,0,380),
				new DictWord(5,0,52),new DictWord(7,0,277),new DictWord(9,0,368),new DictWord(139,0,791),new DictWord(5,11,856),new DictWord(6,11,1672),new DictWord(6,11,1757),new DictWord(6,
					11,1781),new DictWord(7,11,1150),new DictWord(7,11,1425),new DictWord(7,11,1453),new DictWord(140,11,513),new DictWord(5,11,92),new DictWord(7,10,3),new DictWord(10
					,11,736),new DictWord(140,11,102),new DictWord(4,0,112),new DictWord(5,0,653),new DictWord(5,10,483),new DictWord(5,10,685),new DictWord(6,10,489),new DictWord(7,10
					,1204),new DictWord(136,10,394),new DictWord(132,10,921),new DictWord(6,0,1028),new DictWord(133,10,1007),new DictWord(5,11,590),new DictWord(9,11,213),
				new DictWord(145,11,91),new DictWord(135,10,1696),new DictWord(10,0,138),new DictWord(139,0,476),new DictWord(5,0,725),new DictWord(5,0,727),new DictWord(135,0,1811
				),new DictWord(4,0,979),new DictWord(6,0,1821),new DictWord(6,0,1838),new DictWord(8,0,876),new DictWord(8,0,883),new DictWord(8,0,889),new DictWord(8,0,893),new DictWord(8,0,
					895),new DictWord(10,0,934),new DictWord(12,0,720),new DictWord(14,0,459),new DictWord(148,0,123),new DictWord(135,11,551),new DictWord(4,0,38),new DictWord(6,0,435
				),new DictWord(7,0,307),new DictWord(7,0,999),new DictWord(7,0,1481),new DictWord(7,0,1732),new DictWord(7,0,1738),new DictWord(8,0,371),new DictWord(9,0,414),new DictWord(11,0
					,316),new DictWord(12,0,52),new DictWord(13,0,420),new DictWord(147,0,100),new DictWord(135,0,1296),new DictWord(132,10,712),new DictWord(134,10,1629),new DictWord(
					133,0,723),new DictWord(134,0,651),new DictWord(136,11,191),new DictWord(9,11,791),new DictWord(10,11,93),new DictWord(11,11,301),new DictWord(16,11,13)
				,new DictWord(17,11,23),new DictWord(18,11,135),new DictWord(19,11,12),new DictWord(20,11,1),new DictWord(20,11,12),new DictWord(148,11,14),new DictWord(136,11,503)
				,new DictWord(6,11,466),new DictWord(135,11,671),new DictWord(6,0,1200),new DictWord(134,0,1330),new DictWord(135,0,1255),new DictWord(134,0,986),new DictWord(5,0,
					109),new DictWord(6,0,1784),new DictWord(7,0,1895),new DictWord(12,0,296),new DictWord(140,0,302),new DictWord(135,11,983),new DictWord(133,10,485),new DictWord(134
					,0,660),new DictWord(134,0,800),new DictWord(5,0,216),new DictWord(5,0,294),new DictWord(6,0,591),new DictWord(7,0,1879),new DictWord(9,0,141),new DictWord(9,0,270)
				,new DictWord(9,0,679),new DictWord(10,0,159),new DictWord(11,0,197),new DictWord(11,0,438),new DictWord(12,0,538),new DictWord(12,0,559),new DictWord(14,0,144),new DictWord(14
					,0,167),new DictWord(15,0,67),new DictWord(4,10,285),new DictWord(5,10,317),new DictWord(6,10,301),new DictWord(7,10,7),new DictWord(8,10,153),new DictWord(10,10,
					766),new DictWord(11,10,468),new DictWord(12,10,467),new DictWord(141,10,143),new DictWord(136,0,945),new DictWord(134,0,1090),new DictWord(137,0,81),new DictWord(
					12,11,468),new DictWord(19,11,96),new DictWord(148,11,24),new DictWord(134,0,391),new DictWord(138,11,241),new DictWord(7,0,322),new DictWord(136,0,249)
				,new DictWord(134,0,1412),new DictWord(135,11,795),new DictWord(5,0,632),new DictWord(138,0,526),new DictWord(136,10,819),new DictWord(6,0,144),new DictWord(7,0,948
				),new DictWord(7,0,1042),new DictWord(8,0,235),new DictWord(8,0,461),new DictWord(9,0,453),new DictWord(9,0,796),new DictWord(10,0,354),new DictWord(17,0,77),new DictWord(135,
					11,954),new DictWord(139,10,917),new DictWord(6,0,940),new DictWord(134,0,1228),new DictWord(4,0,362),new DictWord(7,0,52),new DictWord(135,0,303),new DictWord(6,11
					,549),new DictWord(8,11,34),new DictWord(8,11,283),new DictWord(9,11,165),new DictWord(138,11,475),new DictWord(7,11,370),new DictWord(7,11,1007),new DictWord(7,11,
					1177),new DictWord(135,11,1565),new DictWord(5,11,652),new DictWord(5,11,701),new DictWord(135,11,449),new DictWord(5,0,196),new DictWord(6,0,486),new DictWord(7,0,
					212),new DictWord(8,0,309),new DictWord(136,0,346),new DictWord(6,10,1719),new DictWord(6,10,1735),new DictWord(7,10,2016),new DictWord(7,10,2020),new DictWord(8,10
					,837),new DictWord(137,10,852),new DictWord(6,11,159),new DictWord(6,11,364),new DictWord(7,11,516),new DictWord(7,11,1439),new DictWord(137,11,518),new DictWord(
					135,0,1912),new DictWord(135,0,1290),new DictWord(132,0,686),new DictWord(141,11,151),new DictWord(138,0,625),new DictWord(136,0,706),new DictWord(138,
					10,568),new DictWord(139,0,412),new DictWord(4,0,30),new DictWord(133,0,43),new DictWord(8,10,67),new DictWord(138,10,419),new DictWord(7,0,967),new DictWord(141,0,
					11),new DictWord(12,0,758),new DictWord(14,0,441),new DictWord(142,0,462),new DictWord(10,10,657),new DictWord(14,10,297),new DictWord(142,10,361),new DictWord(139,
					10,729),new DictWord(4,0,220),new DictWord(135,0,1535),new DictWord(7,11,501),new DictWord(9,11,111),new DictWord(10,11,141),new DictWord(11,11,332),new DictWord(13
					,11,43),new DictWord(13,11,429),new DictWord(14,11,130),new DictWord(14,11,415),new DictWord(145,11,102),new DictWord(4,0,950),new DictWord(6,0,1859),new DictWord(7
					,0,11),new DictWord(8,0,873),new DictWord(12,0,710),new DictWord(12,0,718),new DictWord(12,0,748),new DictWord(12,0,765),new DictWord(148,0,124),new DictWord(5,11,
					149),new DictWord(5,11,935),new DictWord(136,11,233),new DictWord(142,11,291),new DictWord(134,0,1579),new DictWord(7,0,890),new DictWord(8,10,51),new DictWord(9,10
					,868),new DictWord(10,10,833),new DictWord(12,10,481),new DictWord(12,10,570),new DictWord(148,10,106),new DictWord(141,0,2),new DictWord(132,10,445),new DictWord(
					136,11,801),new DictWord(135,0,1774),new DictWord(7,0,1725),new DictWord(138,0,393),new DictWord(5,0,263),new DictWord(134,0,414),new DictWord(132,11,
					322),new DictWord(133,10,239),new DictWord(7,0,456),new DictWord(7,10,1990),new DictWord(8,10,130),new DictWord(139,10,720),new DictWord(137,0,818),new DictWord(5,
					10,123),new DictWord(6,10,530),new DictWord(7,10,348),new DictWord(135,10,1419),new DictWord(135,10,2024),new DictWord(6,0,178),new DictWord(6,0,1750),new DictWord(
					8,0,251),new DictWord(9,0,690),new DictWord(10,0,155),new DictWord(10,0,196),new DictWord(10,0,373),new DictWord(11,0,698),new DictWord(13,0,155),new DictWord(148,0
					,93),new DictWord(5,0,97),new DictWord(137,0,393),new DictWord(134,0,674),new DictWord(11,0,223),new DictWord(140,0,168),new DictWord(132,10,210),new DictWord(139,
					11,464),new DictWord(6,0,1639),new DictWord(146,0,159),new DictWord(139,11,2),new DictWord(7,0,934),new DictWord(8,0,647),new DictWord(17,0,97),new DictWord(19,0,59
				),new DictWord(150,0,2),new DictWord(132,0,191),new DictWord(5,0,165),new DictWord(9,0,346),new DictWord(10,0,655),new DictWord(11,0,885),new DictWord(4,10,430),new DictWord(
					135,11,357),new DictWord(133,0,877),new DictWord(5,10,213),new DictWord(133,11,406),new DictWord(8,0,128),new DictWord(139,0,179),new DictWord(6,11,69),
				new DictWord(135,11,117),new DictWord(135,0,1297),new DictWord(11,11,43),new DictWord(13,11,72),new DictWord(141,11,142),new DictWord(135,11,1830),new DictWord(142,
					0,164),new DictWord(5,0,57),new DictWord(6,0,101),new DictWord(6,0,586),new DictWord(6,0,1663),new DictWord(7,0,132),new DictWord(7,0,1154),new DictWord(7,0,1415),new DictWord(
					7,0,1507),new DictWord(12,0,493),new DictWord(15,0,105),new DictWord(151,0,15),new DictWord(5,0,459),new DictWord(7,0,1073),new DictWord(8,0,241),new DictWord(136,0
					,334),new DictWord(133,11,826),new DictWord(133,10,108),new DictWord(5,10,219),new DictWord(10,11,132),new DictWord(11,11,191),new DictWord(11,11,358),new DictWord(
					139,11,460),new DictWord(6,0,324),new DictWord(6,0,520),new DictWord(7,0,338),new DictWord(7,0,1729),new DictWord(8,0,228),new DictWord(139,0,750),new DictWord(21,0
					,30),new DictWord(22,0,53),new DictWord(4,10,193),new DictWord(5,10,916),new DictWord(7,10,364),new DictWord(10,10,398),new DictWord(10,10,726),new DictWord(11,10,
					317),new DictWord(11,10,626),new DictWord(12,10,142),new DictWord(12,10,288),new DictWord(12,10,678),new DictWord(13,10,313),new DictWord(15,10,113),new DictWord(
					146,10,114),new DictWord(6,11,110),new DictWord(135,11,1681),new DictWord(135,0,910),new DictWord(6,10,241),new DictWord(7,10,907),new DictWord(8,10,832
				),new DictWord(9,10,342),new DictWord(10,10,729),new DictWord(11,10,284),new DictWord(11,10,445),new DictWord(11,10,651),new DictWord(11,10,863),new DictWord(13,10,
					398),new DictWord(146,10,99),new DictWord(7,0,705),new DictWord(9,0,734),new DictWord(5,11,1000),new DictWord(7,11,733),new DictWord(137,11,583),new DictWord(4,0,73
				),new DictWord(6,0,612),new DictWord(7,0,927),new DictWord(7,0,1822),new DictWord(8,0,217),new DictWord(9,0,765),new DictWord(9,0,766),new DictWord(10,0,408),new DictWord(11,0,
					51),new DictWord(11,0,793),new DictWord(12,0,266),new DictWord(15,0,158),new DictWord(20,0,89),new DictWord(150,0,32),new DictWord(7,0,1330),new DictWord(4,11,297),
				new DictWord(6,11,529),new DictWord(7,11,152),new DictWord(7,11,713),new DictWord(7,11,1845),new DictWord(8,11,710),new DictWord(8,11,717),new DictWord(140,11,639),
				new DictWord(5,0,389),new DictWord(136,0,636),new DictWord(134,0,1409),new DictWord(4,10,562),new DictWord(9,10,254),new DictWord(139,10,879),new DictWord(134,0,893
				),new DictWord(132,10,786),new DictWord(4,11,520),new DictWord(135,11,575),new DictWord(136,0,21),new DictWord(140,0,721),new DictWord(136,0,959),new DictWord(7,11,
					1428),new DictWord(7,11,1640),new DictWord(9,11,169),new DictWord(9,11,182),new DictWord(9,11,367),new DictWord(9,11,478),new DictWord(9,11,506),new DictWord(9,11,
					551),new DictWord(9,11,648),new DictWord(9,11,651),new DictWord(9,11,697),new DictWord(9,11,705),new DictWord(9,11,725),new DictWord(9,11,787),new DictWord(9,11,794
				),new DictWord(10,11,198),new DictWord(10,11,214),new DictWord(10,11,267),new DictWord(10,11,275),new DictWord(10,11,456),new DictWord(10,11,551),new DictWord(10,11
					,561),new DictWord(10,11,613),new DictWord(10,11,627),new DictWord(10,11,668),new DictWord(10,11,675),new DictWord(10,11,691),new DictWord(10,11,695),new DictWord(
					10,11,707),new DictWord(10,11,715),new DictWord(11,11,183),new DictWord(11,11,201),new DictWord(11,11,244),new DictWord(11,11,262),new DictWord(11,11,
					352),new DictWord(11,11,439),new DictWord(11,11,493),new DictWord(11,11,572),new DictWord(11,11,591),new DictWord(11,11,608),new DictWord(11,11,611),new DictWord(11
					,11,646),new DictWord(11,11,674),new DictWord(11,11,711),new DictWord(11,11,751),new DictWord(11,11,761),new DictWord(11,11,776),new DictWord(11,11,785)
				,new DictWord(11,11,850),new DictWord(11,11,853),new DictWord(11,11,862),new DictWord(11,11,865),new DictWord(11,11,868),new DictWord(11,11,898),new DictWord(11,11,
					902),new DictWord(11,11,903),new DictWord(11,11,910),new DictWord(11,11,932),new DictWord(11,11,942),new DictWord(11,11,957),new DictWord(11,11,967),new DictWord(11
					,11,972),new DictWord(12,11,148),new DictWord(12,11,195),new DictWord(12,11,220),new DictWord(12,11,237),new DictWord(12,11,318),new DictWord(12,11,339)
				,new DictWord(12,11,393),new DictWord(12,11,445),new DictWord(12,11,450),new DictWord(12,11,474),new DictWord(12,11,509),new DictWord(12,11,533),new DictWord(12,11,
					591),new DictWord(12,11,594),new DictWord(12,11,597),new DictWord(12,11,621),new DictWord(12,11,633),new DictWord(12,11,642),new DictWord(13,11,59),new DictWord(13,
					11,60),new DictWord(13,11,145),new DictWord(13,11,239),new DictWord(13,11,250),new DictWord(13,11,273),new DictWord(13,11,329),new DictWord(13,11,344),new DictWord(
					13,11,365),new DictWord(13,11,372),new DictWord(13,11,387),new DictWord(13,11,403),new DictWord(13,11,414),new DictWord(13,11,456),new DictWord(13,11,
					478),new DictWord(13,11,483),new DictWord(13,11,489),new DictWord(14,11,55),new DictWord(14,11,57),new DictWord(14,11,81),new DictWord(14,11,90),new DictWord(14,11,
					148),new DictWord(14,11,239),new DictWord(14,11,266),new DictWord(14,11,321),new DictWord(14,11,326),new DictWord(14,11,327),new DictWord(14,11,330),new DictWord(14
					,11,347),new DictWord(14,11,355),new DictWord(14,11,401),new DictWord(14,11,411),new DictWord(14,11,414),new DictWord(14,11,416),new DictWord(14,11,420)
				,new DictWord(15,11,61),new DictWord(15,11,74),new DictWord(15,11,87),new DictWord(15,11,88),new DictWord(15,11,94),new DictWord(15,11,96),new DictWord(15,11,116),new DictWord(
					15,11,149),new DictWord(15,11,154),new DictWord(16,11,50),new DictWord(16,11,63),new DictWord(16,11,73),new DictWord(17,11,2),new DictWord(17,11,66),new DictWord(17
					,11,92),new DictWord(17,11,103),new DictWord(17,11,112),new DictWord(18,11,50),new DictWord(18,11,54),new DictWord(18,11,82),new DictWord(18,11,86),new DictWord(18,
					11,90),new DictWord(18,11,111),new DictWord(18,11,115),new DictWord(18,11,156),new DictWord(19,11,40),new DictWord(19,11,79),new DictWord(20,11,78),new DictWord(149
					,11,22),new DictWord(137,11,170),new DictWord(134,0,1433),new DictWord(135,11,1307),new DictWord(139,11,411),new DictWord(5,0,189),new DictWord(7,0,442)
				,new DictWord(7,0,443),new DictWord(8,0,281),new DictWord(12,0,174),new DictWord(141,0,261),new DictWord(6,10,216),new DictWord(7,10,901),new DictWord(7,10,1343),new DictWord(
					136,10,493),new DictWord(5,11,397),new DictWord(6,11,154),new DictWord(7,10,341),new DictWord(7,11,676),new DictWord(8,11,443),new DictWord(8,11,609),new DictWord(9
					,11,24),new DictWord(9,11,325),new DictWord(10,11,35),new DictWord(11,10,219),new DictWord(11,11,535),new DictWord(11,11,672),new DictWord(11,11,1018),new DictWord(
					12,11,637),new DictWord(144,11,30),new DictWord(6,0,2),new DictWord(7,0,191),new DictWord(7,0,446),new DictWord(7,0,1262),new DictWord(7,0,1737),new DictWord(8,0,22
				),new DictWord(8,0,270),new DictWord(8,0,612),new DictWord(9,0,4),new DictWord(9,0,312),new DictWord(9,0,436),new DictWord(9,0,626),new DictWord(10,0,216),new DictWord(10,0,311
				),new DictWord(10,0,521),new DictWord(10,0,623),new DictWord(11,0,72),new DictWord(11,0,330),new DictWord(11,0,455),new DictWord(12,0,321),new DictWord(12,0,504),new DictWord(
					12,0,530),new DictWord(12,0,543),new DictWord(13,0,17),new DictWord(13,0,156),new DictWord(13,0,334),new DictWord(14,0,131),new DictWord(17,0,60),new DictWord(148,0
					,64),new DictWord(7,0,354),new DictWord(10,0,410),new DictWord(139,0,815),new DictWord(139,10,130),new DictWord(7,10,1734),new DictWord(137,11,631),new DictWord(12,
					0,425),new DictWord(15,0,112),new DictWord(10,10,115),new DictWord(11,10,420),new DictWord(13,10,404),new DictWord(14,10,346),new DictWord(143,10,54),new DictWord(6
					,0,60),new DictWord(6,0,166),new DictWord(7,0,374),new DictWord(7,0,670),new DictWord(7,0,1327),new DictWord(8,0,411),new DictWord(8,0,435),new DictWord(9,0,653),new DictWord(9
					,0,740),new DictWord(10,0,385),new DictWord(11,0,222),new DictWord(11,0,324),new DictWord(11,0,829),new DictWord(140,0,611),new DictWord(7,0,1611),new DictWord(13,0
					,14),new DictWord(15,0,44),new DictWord(19,0,13),new DictWord(148,0,76),new DictWord(133,11,981),new DictWord(4,11,56),new DictWord(7,11,1791),new DictWord(8,11,607
				),new DictWord(8,11,651),new DictWord(11,11,465),new DictWord(11,11,835),new DictWord(12,11,337),new DictWord(141,11,480),new DictWord(6,0,1478),new DictWord(5,10,
					1011),new DictWord(136,10,701),new DictWord(139,0,596),new DictWord(5,0,206),new DictWord(134,0,398),new DictWord(4,10,54),new DictWord(5,10,666),new DictWord(7,10,
					1039),new DictWord(7,10,1130),new DictWord(9,10,195),new DictWord(138,10,302),new DictWord(7,0,50),new DictWord(9,11,158),new DictWord(138,11,411),new DictWord(135,
					11,1120),new DictWord(6,0,517),new DictWord(7,0,1159),new DictWord(10,0,621),new DictWord(11,0,192),new DictWord(134,10,1669),new DictWord(4,0,592),new DictWord(6,0
					,600),new DictWord(135,0,1653),new DictWord(10,0,223),new DictWord(139,0,645),new DictWord(136,11,139),new DictWord(7,0,64),new DictWord(136,0,245),new DictWord(142
					,0,278),new DictWord(6,11,622),new DictWord(135,11,1030),new DictWord(136,0,604),new DictWord(134,0,1502),new DictWord(138,0,265),new DictWord(141,11,
					168),new DictWord(7,0,1763),new DictWord(140,0,310),new DictWord(7,10,798),new DictWord(139,11,719),new DictWord(7,11,160),new DictWord(10,11,624),new DictWord(142,
					11,279),new DictWord(132,11,363),new DictWord(7,10,122),new DictWord(9,10,259),new DictWord(10,10,84),new DictWord(11,10,470),new DictWord(12,10,541),new DictWord(
					141,10,379),new DictWord(5,0,129),new DictWord(6,0,61),new DictWord(135,0,947),new DictWord(134,0,1356),new DictWord(135,11,1191),new DictWord(13,0,505)
				,new DictWord(141,0,506),new DictWord(11,0,1000),new DictWord(5,10,82),new DictWord(5,10,131),new DictWord(7,10,1755),new DictWord(8,10,31),new DictWord(9,10,168),new DictWord(
					9,10,764),new DictWord(139,10,869),new DictWord(134,0,966),new DictWord(134,10,605),new DictWord(134,11,292),new DictWord(5,11,177),new DictWord(6,11,
					616),new DictWord(7,11,827),new DictWord(9,11,525),new DictWord(138,11,656),new DictWord(135,11,1486),new DictWord(138,11,31),new DictWord(5,10,278),new DictWord(
					137,10,68),new DictWord(4,10,163),new DictWord(5,10,201),new DictWord(5,10,307),new DictWord(5,10,310),new DictWord(6,10,335),new DictWord(7,10,284),new DictWord(
					136,10,165),new DictWord(6,0,839),new DictWord(135,10,1660),new DictWord(136,10,781),new DictWord(6,10,33),new DictWord(135,10,1244),new DictWord(133,0,
					637),new DictWord(4,11,161),new DictWord(133,11,631),new DictWord(137,0,590),new DictWord(7,10,1953),new DictWord(136,10,720),new DictWord(5,0,280),new DictWord(7,0
					,1226),new DictWord(138,10,203),new DictWord(134,0,1386),new DictWord(5,0,281),new DictWord(6,0,1026),new DictWord(6,10,326),new DictWord(7,10,677),new DictWord(137
					,10,425),new DictWord(7,11,1557),new DictWord(135,11,1684),new DictWord(135,0,1064),new DictWord(9,11,469),new DictWord(9,11,709),new DictWord(12,11,512
				),new DictWord(14,11,65),new DictWord(145,11,12),new DictWord(134,0,917),new DictWord(10,11,229),new DictWord(11,11,73),new DictWord(11,11,376),new DictWord(139,11,
					433),new DictWord(7,0,555),new DictWord(9,0,192),new DictWord(13,0,30),new DictWord(13,0,49),new DictWord(15,0,150),new DictWord(16,0,76),new DictWord(20,0,52),new DictWord(7,
					10,1316),new DictWord(7,10,1412),new DictWord(7,10,1839),new DictWord(9,10,589),new DictWord(11,10,241),new DictWord(11,10,676),new DictWord(11,10,811),
				new DictWord(11,10,891),new DictWord(12,10,140),new DictWord(12,10,346),new DictWord(12,10,479),new DictWord(13,10,381),new DictWord(14,10,188),new DictWord(146,10,
					30),new DictWord(149,0,15),new DictWord(6,0,1882),new DictWord(6,0,1883),new DictWord(6,0,1897),new DictWord(9,0,945),new DictWord(9,0,1014),new DictWord(9,0,1020),
				new DictWord(12,0,823),new DictWord(12,0,842),new DictWord(12,0,866),new DictWord(12,0,934),new DictWord(15,0,242),new DictWord(146,0,208),new DictWord(6,0,965),new DictWord(
					134,0,1499),new DictWord(7,0,33),new DictWord(7,0,120),new DictWord(8,0,489),new DictWord(9,0,319),new DictWord(10,0,820),new DictWord(11,0,1004),new DictWord(12,0,
					379),new DictWord(12,0,679),new DictWord(13,0,117),new DictWord(13,0,412),new DictWord(14,0,25),new DictWord(15,0,52),new DictWord(15,0,161),new DictWord(16,0,47),new DictWord(
					149,0,2),new DictWord(6,11,558),new DictWord(7,11,651),new DictWord(8,11,421),new DictWord(9,11,0),new DictWord(138,11,34),new DictWord(4,0,937),new DictWord(5,0,
					801),new DictWord(7,0,473),new DictWord(5,10,358),new DictWord(7,10,1184),new DictWord(10,10,662),new DictWord(13,10,212),new DictWord(13,10,304),new DictWord(13,10
					,333),new DictWord(145,10,98),new DictWord(132,0,877),new DictWord(6,0,693),new DictWord(134,0,824),new DictWord(132,0,365),new DictWord(7,11,1832),new DictWord(138
					,11,374),new DictWord(5,0,7),new DictWord(139,0,774),new DictWord(4,0,734),new DictWord(5,0,662),new DictWord(134,0,430),new DictWord(4,0,746),new DictWord(135,0,
					1090),new DictWord(5,0,360),new DictWord(8,0,237),new DictWord(10,0,231),new DictWord(147,0,124),new DictWord(138,11,348),new DictWord(6,11,6),new DictWord(7,11,81)
				,new DictWord(7,11,771),new DictWord(7,11,1731),new DictWord(9,11,405),new DictWord(138,11,421),new DictWord(6,0,740),new DictWord(137,0,822),new DictWord(133,10,
					946),new DictWord(7,0,1485),new DictWord(136,0,929),new DictWord(7,10,411),new DictWord(8,10,631),new DictWord(9,10,323),new DictWord(10,10,355),new DictWord(11,10,
					491),new DictWord(12,10,143),new DictWord(12,10,402),new DictWord(13,10,73),new DictWord(14,10,408),new DictWord(15,10,107),new DictWord(146,10,71),new DictWord(135
					,10,590),new DictWord(5,11,881),new DictWord(133,11,885),new DictWord(150,11,25),new DictWord(4,0,852),new DictWord(5,11,142),new DictWord(134,11,546),new DictWord(
					7,10,1467),new DictWord(8,10,328),new DictWord(10,10,544),new DictWord(11,10,955),new DictWord(13,10,320),new DictWord(145,10,83),new DictWord(9,0,17),new DictWord(
					10,0,291),new DictWord(11,10,511),new DictWord(13,10,394),new DictWord(14,10,298),new DictWord(14,10,318),new DictWord(146,10,103),new DictWord(5,11,466
				),new DictWord(11,11,571),new DictWord(12,11,198),new DictWord(13,11,283),new DictWord(14,11,186),new DictWord(15,11,21),new DictWord(143,11,103),new DictWord(134,0
					,1001),new DictWord(4,11,185),new DictWord(5,11,257),new DictWord(5,11,839),new DictWord(5,11,936),new DictWord(7,11,171),new DictWord(9,11,399),new DictWord(10,11,
					258),new DictWord(10,11,395),new DictWord(10,11,734),new DictWord(11,11,1014),new DictWord(12,11,23),new DictWord(13,11,350),new DictWord(14,11,150),new DictWord(
					147,11,6),new DictWord(143,0,35),new DictWord(132,0,831),new DictWord(5,10,835),new DictWord(134,10,483),new DictWord(4,0,277),new DictWord(5,0,608),new DictWord(6,
					0,493),new DictWord(7,0,457),new DictWord(12,0,384),new DictWord(7,11,404),new DictWord(7,11,1377),new DictWord(7,11,1430),new DictWord(7,11,2017),new DictWord(8,11
					,149),new DictWord(8,11,239),new DictWord(8,11,512),new DictWord(8,11,793),new DictWord(8,11,818),new DictWord(9,11,474),new DictWord(9,11,595),new DictWord(10,11,
					122),new DictWord(10,11,565),new DictWord(10,11,649),new DictWord(10,11,783),new DictWord(11,11,239),new DictWord(11,11,295),new DictWord(11,11,447),new DictWord(11
					,11,528),new DictWord(11,11,639),new DictWord(11,11,800),new DictWord(11,11,936),new DictWord(12,11,25),new DictWord(12,11,73),new DictWord(12,11,77),new DictWord(
					12,11,157),new DictWord(12,11,316),new DictWord(12,11,390),new DictWord(12,11,391),new DictWord(12,11,394),new DictWord(12,11,395),new DictWord(12,11,
					478),new DictWord(12,11,503),new DictWord(12,11,592),new DictWord(12,11,680),new DictWord(13,11,50),new DictWord(13,11,53),new DictWord(13,11,132),new DictWord(13,
					11,198),new DictWord(13,11,275),new DictWord(13,11,322),new DictWord(13,11,415),new DictWord(14,11,71),new DictWord(14,11,257),new DictWord(14,11,395),new DictWord(
					15,11,71),new DictWord(15,11,136),new DictWord(17,11,123),new DictWord(18,11,93),new DictWord(147,11,58),new DictWord(134,0,1351),new DictWord(7,0,27),new DictWord(
					135,0,316),new DictWord(136,11,712),new DictWord(136,0,984),new DictWord(133,0,552),new DictWord(137,0,264),new DictWord(132,0,401),new DictWord(6,0,710
				),new DictWord(6,0,1111),new DictWord(134,0,1343),new DictWord(134,0,1211),new DictWord(9,0,543),new DictWord(10,0,524),new DictWord(11,0,108),new DictWord(11,0,653
				),new DictWord(12,0,524),new DictWord(13,0,123),new DictWord(14,0,252),new DictWord(16,0,18),new DictWord(19,0,38),new DictWord(20,0,26),new DictWord(20,0,65),new DictWord(21,0
					,3),new DictWord(151,0,11),new DictWord(4,0,205),new DictWord(5,0,623),new DictWord(7,0,104),new DictWord(8,0,519),new DictWord(137,0,716),new DictWord(132,10,677),
				new DictWord(4,11,377),new DictWord(152,11,13),new DictWord(135,11,1673),new DictWord(7,0,579),new DictWord(9,0,41),new DictWord(9,0,244),new DictWord(9,0,669),new DictWord(10,
					0,5),new DictWord(11,0,861),new DictWord(11,0,951),new DictWord(139,0,980),new DictWord(132,0,717),new DictWord(136,0,1011),new DictWord(132,0,805),new DictWord(4,
					11,180),new DictWord(135,11,1906),new DictWord(132,10,777),new DictWord(132,10,331),new DictWord(132,0,489),new DictWord(6,0,1024),new DictWord(4,11,491
				),new DictWord(133,10,747),new DictWord(135,11,1182),new DictWord(4,11,171),new DictWord(138,11,234),new DictWord(4,11,586),new DictWord(7,11,1186),new DictWord(138
					,11,631),new DictWord(135,0,892),new DictWord(135,11,336),new DictWord(9,11,931),new DictWord(10,11,334),new DictWord(148,11,71),new DictWord(137,0,473)
				,new DictWord(6,0,864),new DictWord(12,0,659),new DictWord(139,11,926),new DictWord(7,0,819),new DictWord(9,0,26),new DictWord(9,0,392),new DictWord(10,0,152),new DictWord(10,0
					,226),new DictWord(11,0,19),new DictWord(12,0,276),new DictWord(12,0,426),new DictWord(12,0,589),new DictWord(13,0,460),new DictWord(15,0,97),new DictWord(19,0,48),
				new DictWord(148,0,104),new DictWord(135,0,51),new DictWord(133,10,326),new DictWord(4,10,691),new DictWord(146,10,16),new DictWord(9,0,130),new DictWord(11,0,765),
				new DictWord(10,10,680),new DictWord(10,10,793),new DictWord(141,10,357),new DictWord(133,11,765),new DictWord(8,0,229),new DictWord(6,10,32),new DictWord(7,10,385)
				,new DictWord(7,10,757),new DictWord(7,10,1916),new DictWord(8,10,94),new DictWord(8,10,711),new DictWord(9,10,541),new DictWord(10,10,162),new DictWord(10,10,795),
				new DictWord(11,10,989),new DictWord(11,10,1010),new DictWord(12,10,14),new DictWord(142,10,308),new DictWord(7,11,474),new DictWord(137,11,578),new DictWord(132,0,
					674),new DictWord(132,0,770),new DictWord(5,0,79),new DictWord(7,0,1027),new DictWord(7,0,1477),new DictWord(139,0,52),new DictWord(133,11,424),new DictWord(134,0,
					1666),new DictWord(6,0,409),new DictWord(6,10,349),new DictWord(6,10,1682),new DictWord(7,10,1252),new DictWord(8,10,112),new DictWord(8,11,714),new DictWord(9,10,
					435),new DictWord(9,10,668),new DictWord(10,10,290),new DictWord(10,10,319),new DictWord(10,10,815),new DictWord(11,10,180),new DictWord(11,10,837),new DictWord(12,
					10,240),new DictWord(13,10,152),new DictWord(13,10,219),new DictWord(142,10,158),new DictWord(5,0,789),new DictWord(134,0,195),new DictWord(4,0,251),new DictWord(4,
					0,688),new DictWord(7,0,513),new DictWord(135,0,1284),new DictWord(132,10,581),new DictWord(9,11,420),new DictWord(10,11,269),new DictWord(10,11,285),new DictWord(
					10,11,576),new DictWord(11,11,397),new DictWord(13,11,175),new DictWord(145,11,90),new DictWord(6,10,126),new DictWord(7,10,573),new DictWord(8,10,397),
				new DictWord(142,10,44),new DictWord(132,11,429),new DictWord(133,0,889),new DictWord(4,0,160),new DictWord(5,0,330),new DictWord(7,0,1434),new DictWord(136,0,174),
				new DictWord(7,11,18),new DictWord(7,11,699),new DictWord(7,11,1966),new DictWord(8,11,752),new DictWord(9,11,273),new DictWord(9,11,412),new DictWord(9,11,703),new DictWord(10
					,11,71),new DictWord(10,11,427),new DictWord(10,11,508),new DictWord(146,11,97),new DictWord(6,0,872),new DictWord(134,0,899),new DictWord(133,10,926),new DictWord(
					134,0,1126),new DictWord(134,0,918),new DictWord(4,11,53),new DictWord(5,11,186),new DictWord(135,11,752),new DictWord(7,0,268),new DictWord(136,0,569),
				new DictWord(134,0,1224),new DictWord(6,0,1361),new DictWord(7,10,1232),new DictWord(137,10,531),new DictWord(8,11,575),new DictWord(10,11,289),new DictWord(139,11,
					319),new DictWord(133,10,670),new DictWord(132,11,675),new DictWord(133,0,374),new DictWord(135,10,1957),new DictWord(133,0,731),new DictWord(11,0,190),
				new DictWord(15,0,49),new DictWord(11,11,190),new DictWord(143,11,49),new DictWord(4,0,626),new DictWord(5,0,506),new DictWord(5,0,642),new DictWord(6,0,425),new DictWord(10,0,
					202),new DictWord(139,0,141),new DictWord(137,0,444),new DictWord(7,10,242),new DictWord(135,10,1942),new DictWord(6,11,209),new DictWord(8,11,468),new DictWord(9,
					11,210),new DictWord(11,11,36),new DictWord(12,11,28),new DictWord(12,11,630),new DictWord(13,11,21),new DictWord(13,11,349),new DictWord(14,11,7),new DictWord(145,
					11,13),new DictWord(4,11,342),new DictWord(135,11,1179),new DictWord(5,10,834),new DictWord(7,10,1202),new DictWord(8,10,14),new DictWord(9,10,481),new DictWord(137
					,10,880),new DictWord(4,11,928),new DictWord(133,11,910),new DictWord(4,11,318),new DictWord(4,11,496),new DictWord(7,11,856),new DictWord(139,11,654),new DictWord(
					136,0,835),new DictWord(7,0,1526),new DictWord(138,10,465),new DictWord(151,0,17),new DictWord(135,0,477),new DictWord(4,10,357),new DictWord(6,10,172),
				new DictWord(7,10,143),new DictWord(137,10,413),new DictWord(6,0,1374),new DictWord(138,0,994),new DictWord(18,0,76),new DictWord(132,10,590),new DictWord(7,0,287),
				new DictWord(8,0,355),new DictWord(9,0,293),new DictWord(137,0,743),new DictWord(134,0,1389),new DictWord(7,11,915),new DictWord(8,11,247),new DictWord(147,11,0),new DictWord(4
					,11,202),new DictWord(5,11,382),new DictWord(6,11,454),new DictWord(7,11,936),new DictWord(7,11,1803),new DictWord(8,11,758),new DictWord(9,11,375),new DictWord(9,
					11,895),new DictWord(10,11,743),new DictWord(10,11,792),new DictWord(11,11,978),new DictWord(11,11,1012),new DictWord(142,11,109),new DictWord(5,0,384),
				new DictWord(8,0,455),new DictWord(140,0,48),new DictWord(132,11,390),new DictWord(5,10,169),new DictWord(7,10,333),new DictWord(136,10,45),new DictWord(5,0,264),new DictWord(
					134,0,184),new DictWord(138,11,791),new DictWord(133,11,717),new DictWord(132,10,198),new DictWord(6,11,445),new DictWord(7,11,332),new DictWord(137,11,
					909),new DictWord(136,0,1001),new DictWord(4,10,24),new DictWord(5,10,140),new DictWord(5,10,185),new DictWord(7,10,1500),new DictWord(11,10,565),new DictWord(139,
					10,838),new DictWord(134,11,578),new DictWord(5,0,633),new DictWord(6,0,28),new DictWord(135,0,1323),new DictWord(132,0,851),new DictWord(136,11,267),new DictWord(7
					,0,359),new DictWord(8,0,243),new DictWord(140,0,175),new DictWord(4,10,334),new DictWord(133,10,593),new DictWord(141,11,87),new DictWord(136,11,766),new DictWord(
					10,0,287),new DictWord(12,0,138),new DictWord(10,11,287),new DictWord(140,11,138),new DictWord(4,0,105),new DictWord(132,0,740),new DictWord(140,10,116)
				,new DictWord(134,0,857),new DictWord(135,11,1841),new DictWord(6,0,1402),new DictWord(137,0,819),new DictWord(132,11,584),new DictWord(132,10,709),new DictWord(133
					,10,897),new DictWord(5,0,224),new DictWord(13,0,174),new DictWord(146,0,52),new DictWord(135,10,1840),new DictWord(4,10,608),new DictWord(133,10,497),new DictWord(
					139,11,60),new DictWord(4,0,758),new DictWord(135,0,1649),new DictWord(4,11,226),new DictWord(4,11,326),new DictWord(135,11,1770),new DictWord(5,11,426)
				,new DictWord(8,11,30),new DictWord(9,11,2),new DictWord(11,11,549),new DictWord(147,11,122),new DictWord(135,10,2039),new DictWord(6,10,540),new DictWord(136,10,
					136),new DictWord(4,0,573),new DictWord(8,0,655),new DictWord(4,10,897),new DictWord(133,10,786),new DictWord(7,0,351),new DictWord(139,0,128),new DictWord(133,10,
					999),new DictWord(4,10,299),new DictWord(135,10,1004),new DictWord(133,0,918),new DictWord(132,11,345),new DictWord(4,11,385),new DictWord(7,11,265),new DictWord(
					135,11,587),new DictWord(133,10,456),new DictWord(136,10,180),new DictWord(6,0,687),new DictWord(134,0,1537),new DictWord(4,11,347),new DictWord(5,11,
					423),new DictWord(5,11,996),new DictWord(135,11,1329),new DictWord(132,10,755),new DictWord(7,11,1259),new DictWord(9,11,125),new DictWord(11,11,65),new DictWord(
					140,11,285),new DictWord(5,11,136),new DictWord(6,11,136),new DictWord(136,11,644),new DictWord(134,0,1525),new DictWord(4,0,1009),new DictWord(135,0,
					1139),new DictWord(139,10,338),new DictWord(132,0,340),new DictWord(135,10,1464),new DictWord(8,0,847),new DictWord(10,0,861),new DictWord(10,0,876),new DictWord(10
					,0,889),new DictWord(10,0,922),new DictWord(10,0,929),new DictWord(10,0,933),new DictWord(12,0,784),new DictWord(140,0,791),new DictWord(139,0,176),new DictWord(9,
					11,134),new DictWord(10,11,2),new DictWord(10,11,27),new DictWord(10,11,333),new DictWord(11,11,722),new DictWord(143,11,1),new DictWord(4,11,433),new DictWord(133,
					11,719),new DictWord(5,0,985),new DictWord(7,0,509),new DictWord(7,0,529),new DictWord(145,0,96),new DictWord(132,0,615),new DictWord(4,10,890),new DictWord(5,10,
					805),new DictWord(5,10,819),new DictWord(5,10,961),new DictWord(6,10,396),new DictWord(6,10,1631),new DictWord(6,10,1678),new DictWord(7,10,1967),new DictWord(7,10,
					2041),new DictWord(9,10,630),new DictWord(11,10,8),new DictWord(11,10,1019),new DictWord(12,10,176),new DictWord(13,10,225),new DictWord(14,10,292),new DictWord(149
					,10,24),new DictWord(135,0,1919),new DictWord(134,0,1131),new DictWord(144,11,21),new DictWord(144,11,51),new DictWord(135,10,1815),new DictWord(4,0,247
				),new DictWord(7,10,1505),new DictWord(10,10,190),new DictWord(10,10,634),new DictWord(11,10,792),new DictWord(12,10,358),new DictWord(140,10,447),new DictWord(5,10
					,0),new DictWord(6,10,536),new DictWord(7,10,604),new DictWord(13,10,445),new DictWord(145,10,126),new DictWord(4,0,184),new DictWord(5,0,390),new DictWord(6,0,337)
				,new DictWord(7,0,23),new DictWord(7,0,494),new DictWord(7,0,618),new DictWord(7,0,1456),new DictWord(8,0,27),new DictWord(8,0,599),new DictWord(10,0,153),new DictWord(139,0,
					710),new DictWord(6,10,232),new DictWord(6,10,412),new DictWord(7,10,1074),new DictWord(8,10,9),new DictWord(8,10,157),new DictWord(8,10,786),new DictWord(9,10,196)
				,new DictWord(9,10,352),new DictWord(9,10,457),new DictWord(10,10,337),new DictWord(11,10,232),new DictWord(11,10,877),new DictWord(12,10,480),new DictWord(140,10,
					546),new DictWord(13,0,38),new DictWord(135,10,958),new DictWord(4,10,382),new DictWord(136,10,579),new DictWord(4,10,212),new DictWord(135,10,1206),new DictWord(4,
					11,555),new DictWord(8,11,536),new DictWord(138,11,288),new DictWord(11,11,139),new DictWord(139,11,171),new DictWord(9,11,370),new DictWord(138,11,90),
				new DictWord(132,0,1015),new DictWord(134,0,1088),new DictWord(5,10,655),new DictWord(135,11,977),new DictWord(134,0,1585),new DictWord(17,10,67),new DictWord(147,
					10,74),new DictWord(10,0,227),new DictWord(11,0,497),new DictWord(11,0,709),new DictWord(140,0,415),new DictWord(6,0,360),new DictWord(7,0,1664),new DictWord(136,0,
					478),new DictWord(7,0,95),new DictWord(6,10,231),new DictWord(136,10,423),new DictWord(140,11,65),new DictWord(4,11,257),new DictWord(135,11,2031),new DictWord(135,
					11,1768),new DictWord(133,10,300),new DictWord(139,11,211),new DictWord(136,0,699),new DictWord(6,10,237),new DictWord(7,10,611),new DictWord(8,10,100),
				new DictWord(9,10,416),new DictWord(11,10,335),new DictWord(12,10,173),new DictWord(146,10,101),new DictWord(14,0,26),new DictWord(146,0,150),new DictWord(6,0,581),
				new DictWord(135,0,1119),new DictWord(135,10,1208),new DictWord(132,0,739),new DictWord(6,11,83),new DictWord(6,11,1733),new DictWord(135,11,1389),new DictWord(137,
					0,869),new DictWord(4,0,67),new DictWord(5,0,422),new DictWord(7,0,1037),new DictWord(7,0,1289),new DictWord(7,0,1555),new DictWord(9,0,741),new DictWord(145,0,108)
				,new DictWord(133,10,199),new DictWord(12,10,427),new DictWord(146,10,38),new DictWord(136,0,464),new DictWord(142,0,42),new DictWord(10,0,96),new DictWord(8,11,501
				),new DictWord(137,11,696),new DictWord(134,11,592),new DictWord(4,0,512),new DictWord(4,0,966),new DictWord(5,0,342),new DictWord(6,0,1855),new DictWord(8,0,869),new DictWord(
					8,0,875),new DictWord(8,0,901),new DictWord(144,0,26),new DictWord(8,0,203),new DictWord(11,0,823),new DictWord(11,0,846),new DictWord(12,0,482),new DictWord(13,0,
					277),new DictWord(13,0,302),new DictWord(13,0,464),new DictWord(14,0,205),new DictWord(142,0,221),new DictWord(4,0,449),new DictWord(133,0,718),new DictWord(7,11,
					1718),new DictWord(9,11,95),new DictWord(9,11,274),new DictWord(10,11,279),new DictWord(10,11,317),new DictWord(10,11,420),new DictWord(11,11,303),new DictWord(11,
					11,808),new DictWord(12,11,134),new DictWord(12,11,367),new DictWord(13,11,149),new DictWord(13,11,347),new DictWord(14,11,349),new DictWord(14,11,406),
				new DictWord(18,11,22),new DictWord(18,11,89),new DictWord(18,11,122),new DictWord(147,11,47),new DictWord(133,11,26),new DictWord(4,0,355),new DictWord(6,0,311),new DictWord(9
					,0,256),new DictWord(138,0,404),new DictWord(132,11,550),new DictWord(10,0,758),new DictWord(6,10,312),new DictWord(6,10,1715),new DictWord(10,10,584),new DictWord(
					11,10,546),new DictWord(11,10,692),new DictWord(12,10,259),new DictWord(12,10,295),new DictWord(13,10,46),new DictWord(141,10,154),new DictWord(136,11,
					822),new DictWord(5,0,827),new DictWord(4,11,902),new DictWord(5,11,809),new DictWord(6,11,122),new DictWord(135,11,896),new DictWord(5,0,64),new DictWord(140,0,581
				),new DictWord(4,0,442),new DictWord(6,0,739),new DictWord(7,0,1047),new DictWord(7,0,1352),new DictWord(7,0,1643),new DictWord(7,11,1911),new DictWord(9,11,449),new DictWord(
					10,11,192),new DictWord(138,11,740),new DictWord(135,11,262),new DictWord(132,10,588),new DictWord(133,11,620),new DictWord(5,0,977),new DictWord(6,0,
					288),new DictWord(7,0,528),new DictWord(4,11,34),new DictWord(5,11,574),new DictWord(7,11,279),new DictWord(7,11,1624),new DictWord(136,11,601),new DictWord(6,0,
					1375),new DictWord(4,10,231),new DictWord(5,10,61),new DictWord(6,10,104),new DictWord(7,10,729),new DictWord(7,10,964),new DictWord(7,10,1658),new DictWord(140,10,
					414),new DictWord(6,10,263),new DictWord(138,10,757),new DictWord(132,10,320),new DictWord(4,0,254),new DictWord(7,0,1309),new DictWord(5,11,332),new DictWord(135,
					11,1309),new DictWord(6,11,261),new DictWord(8,11,182),new DictWord(139,11,943),new DictWord(132,10,225),new DictWord(6,0,12),new DictWord(135,0,1219),new DictWord(
					4,0,275),new DictWord(12,0,376),new DictWord(6,11,1721),new DictWord(141,11,490),new DictWord(4,11,933),new DictWord(133,11,880),new DictWord(6,0,951),new DictWord(
					6,0,1109),new DictWord(6,0,1181),new DictWord(7,0,154),new DictWord(4,10,405),new DictWord(7,10,817),new DictWord(14,10,58),new DictWord(17,10,37),new DictWord(146,
					10,124),new DictWord(6,0,1520),new DictWord(133,10,974),new DictWord(134,0,1753),new DictWord(6,0,369),new DictWord(6,0,502),new DictWord(7,0,1036),new DictWord(8,0
					,348),new DictWord(9,0,452),new DictWord(10,0,26),new DictWord(11,0,224),new DictWord(11,0,387),new DictWord(11,0,772),new DictWord(12,0,95),new DictWord(12,0,629),
				new DictWord(13,0,195),new DictWord(13,0,207),new DictWord(13,0,241),new DictWord(14,0,260),new DictWord(14,0,270),new DictWord(143,0,140),new DictWord(132,0,269),new DictWord(
					5,0,480),new DictWord(7,0,532),new DictWord(7,0,1197),new DictWord(7,0,1358),new DictWord(8,0,291),new DictWord(11,0,349),new DictWord(142,0,396),new DictWord(5,10,
					235),new DictWord(7,10,1239),new DictWord(11,10,131),new DictWord(140,10,370),new DictWord(7,10,956),new DictWord(7,10,1157),new DictWord(7,10,1506),new DictWord(7,
					10,1606),new DictWord(7,10,1615),new DictWord(7,10,1619),new DictWord(7,10,1736),new DictWord(7,10,1775),new DictWord(8,10,590),new DictWord(9,10,324),new DictWord(
					9,10,736),new DictWord(9,10,774),new DictWord(9,10,776),new DictWord(9,10,784),new DictWord(10,10,567),new DictWord(10,10,708),new DictWord(11,10,518),new DictWord(
					11,10,613),new DictWord(11,10,695),new DictWord(11,10,716),new DictWord(11,10,739),new DictWord(11,10,770),new DictWord(11,10,771),new DictWord(11,10,
					848),new DictWord(11,10,857),new DictWord(11,10,931),new DictWord(11,10,947),new DictWord(12,10,326),new DictWord(12,10,387),new DictWord(12,10,484),new DictWord(12
					,10,528),new DictWord(12,10,552),new DictWord(12,10,613),new DictWord(13,10,189),new DictWord(13,10,256),new DictWord(13,10,340),new DictWord(13,10,432)
				,new DictWord(13,10,436),new DictWord(13,10,440),new DictWord(13,10,454),new DictWord(14,10,174),new DictWord(14,10,220),new DictWord(14,10,284),new DictWord(14,10,
					390),new DictWord(145,10,121),new DictWord(8,11,598),new DictWord(9,11,664),new DictWord(138,11,441),new DictWord(9,10,137),new DictWord(138,10,221),new DictWord(
					133,11,812),new DictWord(148,0,15),new DictWord(134,0,1341),new DictWord(6,0,1017),new DictWord(4,11,137),new DictWord(7,11,1178),new DictWord(135,11,
					1520),new DictWord(7,10,390),new DictWord(138,10,140),new DictWord(7,11,1260),new DictWord(135,11,1790),new DictWord(137,11,191),new DictWord(135,10,
					1144),new DictWord(6,0,1810),new DictWord(7,0,657),new DictWord(8,0,886),new DictWord(10,0,857),new DictWord(14,0,440),new DictWord(144,0,96),new DictWord(8,0,533),
				new DictWord(6,11,1661),new DictWord(7,11,1975),new DictWord(7,11,2009),new DictWord(135,11,2011),new DictWord(6,0,1453),new DictWord(134,10,464),new DictWord(132,
					11,715),new DictWord(5,10,407),new DictWord(11,10,204),new DictWord(11,10,243),new DictWord(11,10,489),new DictWord(12,10,293),new DictWord(19,10,37),new DictWord(
					20,10,73),new DictWord(150,10,38),new DictWord(133,11,703),new DictWord(4,0,211),new DictWord(7,0,1483),new DictWord(5,10,325),new DictWord(8,10,5),new DictWord(8,
					10,227),new DictWord(9,10,105),new DictWord(10,10,585),new DictWord(140,10,614),new DictWord(4,0,332),new DictWord(5,0,335),new DictWord(6,0,238),new DictWord(7,0,
					269),new DictWord(7,0,811),new DictWord(7,0,1797),new DictWord(8,0,836),new DictWord(9,0,507),new DictWord(141,0,242),new DictWord(5,11,89),new DictWord(7,11,1915),
				new DictWord(9,11,185),new DictWord(9,11,235),new DictWord(9,11,496),new DictWord(10,11,64),new DictWord(10,11,270),new DictWord(10,11,403),new DictWord(10,11,469),
				new DictWord(10,11,529),new DictWord(10,11,590),new DictWord(11,11,140),new DictWord(11,11,860),new DictWord(13,11,1),new DictWord(13,11,422),new DictWord(14,11,341
				),new DictWord(14,11,364),new DictWord(17,11,93),new DictWord(18,11,113),new DictWord(19,11,97),new DictWord(147,11,113),new DictWord(133,11,695),new DictWord(16,0,
					19),new DictWord(5,11,6),new DictWord(6,11,183),new DictWord(6,10,621),new DictWord(7,11,680),new DictWord(7,11,978),new DictWord(7,11,1013),new DictWord(7,11,1055)
				,new DictWord(12,11,230),new DictWord(13,11,172),new DictWord(13,10,504),new DictWord(146,11,29),new DictWord(136,0,156),new DictWord(133,0,1009),new DictWord(6,11,
					29),new DictWord(139,11,63),new DictWord(134,0,820),new DictWord(134,10,218),new DictWord(7,10,454),new DictWord(7,10,782),new DictWord(8,10,768),new DictWord(140,
					10,686),new DictWord(5,0,228),new DictWord(6,0,203),new DictWord(7,0,156),new DictWord(8,0,347),new DictWord(9,0,265),new DictWord(18,0,39),new DictWord(20,0,54),new DictWord(
					21,0,31),new DictWord(22,0,3),new DictWord(23,0,0),new DictWord(15,11,8),new DictWord(18,11,39),new DictWord(20,11,54),new DictWord(21,11,31),new DictWord(22,11,3),
				new DictWord(151,11,0),new DictWord(7,0,1131),new DictWord(135,0,1468),new DictWord(144,10,0),new DictWord(134,0,1276),new DictWord(10,10,676),new DictWord(140,10,
					462),new DictWord(132,11,311),new DictWord(134,11,1740),new DictWord(7,11,170),new DictWord(8,11,90),new DictWord(8,11,177),new DictWord(8,11,415),new DictWord(11,
					11,714),new DictWord(142,11,281),new DictWord(134,10,164),new DictWord(6,0,1792),new DictWord(138,0,849),new DictWord(150,10,50),new DictWord(5,0,291),new DictWord(
					5,0,318),new DictWord(7,0,765),new DictWord(9,0,389),new DictWord(12,0,548),new DictWord(8,11,522),new DictWord(142,11,328),new DictWord(11,11,91),new DictWord(13,
					11,129),new DictWord(15,11,101),new DictWord(145,11,125),new DictWord(4,11,494),new DictWord(6,11,74),new DictWord(7,11,44),new DictWord(7,11,407),new DictWord(8,11
					,551),new DictWord(12,11,17),new DictWord(15,11,5),new DictWord(148,11,11),new DictWord(4,11,276),new DictWord(133,11,296),new DictWord(6,10,343),new DictWord(7,10,
					195),new DictWord(7,11,1777),new DictWord(9,10,226),new DictWord(10,10,197),new DictWord(10,10,575),new DictWord(11,10,502),new DictWord(139,10,899),new DictWord(10
					,0,525),new DictWord(139,0,82),new DictWord(14,0,453),new DictWord(4,11,7),new DictWord(5,11,90),new DictWord(5,11,158),new DictWord(6,11,542),new DictWord(7,11,221
				),new DictWord(7,11,1574),new DictWord(9,11,490),new DictWord(10,11,540),new DictWord(11,11,443),new DictWord(139,11,757),new DictWord(135,0,666),new DictWord(22,10
					,29),new DictWord(150,11,29),new DictWord(4,0,422),new DictWord(147,10,8),new DictWord(5,0,355),new DictWord(145,0,0),new DictWord(6,0,1873),new DictWord(9,0,918),new DictWord(
					7,11,588),new DictWord(9,11,175),new DictWord(138,11,530),new DictWord(143,11,31),new DictWord(11,0,165),new DictWord(7,10,1125),new DictWord(9,10,143),
				new DictWord(14,10,405),new DictWord(150,10,21),new DictWord(9,0,260),new DictWord(137,0,905),new DictWord(5,11,872),new DictWord(6,11,57),new DictWord(6,11,479),new DictWord(6
					,11,562),new DictWord(7,11,471),new DictWord(7,11,1060),new DictWord(9,11,447),new DictWord(9,11,454),new DictWord(141,11,6),new DictWord(138,11,704),new DictWord(
					133,0,865),new DictWord(5,0,914),new DictWord(134,0,1625),new DictWord(133,0,234),new DictWord(7,0,1383),new DictWord(5,11,31),new DictWord(6,11,614),new DictWord(
					145,11,61),new DictWord(7,11,1200),new DictWord(138,11,460),new DictWord(6,11,424),new DictWord(135,11,1866),new DictWord(136,0,306),new DictWord(5,10,
					959),new DictWord(12,11,30),new DictWord(13,11,148),new DictWord(14,11,87),new DictWord(14,11,182),new DictWord(16,11,42),new DictWord(18,11,92),new DictWord(148,11
					,70),new DictWord(6,0,1919),new DictWord(6,0,1921),new DictWord(9,0,923),new DictWord(9,0,930),new DictWord(9,0,941),new DictWord(9,0,949),new DictWord(9,0,987),new DictWord(9,
					0,988),new DictWord(9,0,992),new DictWord(12,0,802),new DictWord(12,0,815),new DictWord(12,0,856),new DictWord(12,0,885),new DictWord(12,0,893),new DictWord(12,0,
					898),new DictWord(12,0,919),new DictWord(12,0,920),new DictWord(12,0,941),new DictWord(12,0,947),new DictWord(15,0,183),new DictWord(15,0,185),new DictWord(15,0,189
				),new DictWord(15,0,197),new DictWord(15,0,202),new DictWord(15,0,233),new DictWord(18,0,218),new DictWord(18,0,219),new DictWord(18,0,233),new DictWord(143,11,156)
				,new DictWord(135,10,1759),new DictWord(136,10,173),new DictWord(13,0,163),new DictWord(13,0,180),new DictWord(18,0,78),new DictWord(20,0,35),new DictWord(5,11,13),
				new DictWord(134,11,142),new DictWord(134,10,266),new DictWord(6,11,97),new DictWord(7,11,116),new DictWord(8,11,322),new DictWord(8,11,755),new DictWord(9,11,548),
				new DictWord(10,11,714),new DictWord(11,11,884),new DictWord(141,11,324),new DictWord(135,0,1312),new DictWord(9,0,814),new DictWord(137,11,676),new DictWord(133,0,
					707),new DictWord(135,0,1493),new DictWord(6,0,421),new DictWord(7,0,61),new DictWord(7,0,1540),new DictWord(10,0,11),new DictWord(138,0,501),new DictWord(12,0,733)
				,new DictWord(12,0,766),new DictWord(7,11,866),new DictWord(135,11,1163),new DictWord(137,0,341),new DictWord(142,0,98),new DictWord(145,11,115),new DictWord(135,11
					,1111),new DictWord(136,10,300),new DictWord(136,0,1014),new DictWord(8,11,1),new DictWord(9,11,112),new DictWord(138,11,326),new DictWord(132,11,730),new DictWord(
					5,11,488),new DictWord(6,11,527),new DictWord(7,11,489),new DictWord(7,11,1636),new DictWord(8,11,121),new DictWord(8,11,144),new DictWord(8,11,359),new DictWord(9,
					11,193),new DictWord(9,11,241),new DictWord(9,11,336),new DictWord(9,11,882),new DictWord(11,11,266),new DictWord(11,11,372),new DictWord(11,11,944),new DictWord(12
					,11,401),new DictWord(140,11,641),new DictWord(6,0,971),new DictWord(134,0,1121),new DictWord(6,0,102),new DictWord(7,0,72),new DictWord(15,0,142),new DictWord(147,
					0,67),new DictWord(151,0,30),new DictWord(135,0,823),new DictWord(134,0,1045),new DictWord(5,10,427),new DictWord(5,10,734),new DictWord(7,10,478),new DictWord(136,
					10,52),new DictWord(7,0,1930),new DictWord(11,10,217),new DictWord(142,10,165),new DictWord(6,0,1512),new DictWord(135,0,1870),new DictWord(9,11,31),new DictWord(10
					,11,244),new DictWord(10,11,699),new DictWord(12,11,149),new DictWord(141,11,497),new DictWord(133,11,377),new DictWord(145,11,101),new DictWord(10,11,
					158),new DictWord(13,11,13),new DictWord(13,11,137),new DictWord(13,11,258),new DictWord(14,11,111),new DictWord(14,11,225),new DictWord(14,11,253),new DictWord(14,
					11,304),new DictWord(14,11,339),new DictWord(14,11,417),new DictWord(146,11,33),new DictWord(6,0,87),new DictWord(6,10,1734),new DictWord(7,10,20),new DictWord(7,10
					,1056),new DictWord(8,10,732),new DictWord(9,10,406),new DictWord(9,10,911),new DictWord(138,10,694),new DictWord(134,0,1243),new DictWord(137,0,245),new DictWord(7
					,0,68),new DictWord(8,0,48),new DictWord(8,0,88),new DictWord(8,0,582),new DictWord(8,0,681),new DictWord(9,0,373),new DictWord(9,0,864),new DictWord(11,0,157),new DictWord(11,
					0,336),new DictWord(11,0,843),new DictWord(148,0,27),new DictWord(8,11,663),new DictWord(144,11,8),new DictWord(133,10,613),new DictWord(4,0,88),new DictWord(5,0,
					137),new DictWord(5,0,174),new DictWord(5,0,777),new DictWord(6,0,1664),new DictWord(6,0,1725),new DictWord(7,0,77),new DictWord(7,0,426),new DictWord(7,0,1317),new DictWord(7,
					0,1355),new DictWord(8,0,126),new DictWord(8,0,563),new DictWord(9,0,523),new DictWord(9,0,750),new DictWord(10,0,310),new DictWord(10,0,836),new DictWord(11,0,42),
				new DictWord(11,0,318),new DictWord(11,0,731),new DictWord(12,0,68),new DictWord(12,0,92),new DictWord(12,0,507),new DictWord(12,0,692),new DictWord(13,0,81),new DictWord(13,0,
					238),new DictWord(13,0,374),new DictWord(14,0,436),new DictWord(18,0,138),new DictWord(19,0,78),new DictWord(19,0,111),new DictWord(20,0,55),new DictWord(20,0,77),new DictWord(
					148,0,92),new DictWord(141,0,418),new DictWord(4,0,938),new DictWord(137,0,625),new DictWord(138,0,351),new DictWord(5,11,843),new DictWord(7,10,32),new DictWord(7,
					10,984),new DictWord(8,10,85),new DictWord(8,10,709),new DictWord(9,10,579),new DictWord(9,10,847),new DictWord(9,10,856),new DictWord(10,10,799),new DictWord(11,10
					,258),new DictWord(11,10,1007),new DictWord(12,10,331),new DictWord(12,10,615),new DictWord(13,10,188),new DictWord(13,10,435),new DictWord(14,10,8),new DictWord(15
					,10,165),new DictWord(16,10,27),new DictWord(148,10,40),new DictWord(6,0,1668),new DictWord(7,0,1499),new DictWord(8,0,117),new DictWord(9,0,314),new DictWord(138,0
					,174),new DictWord(135,0,707),new DictWord(132,11,554),new DictWord(133,11,536),new DictWord(5,0,403),new DictWord(5,11,207),new DictWord(9,11,79),new DictWord(11,
					11,625),new DictWord(145,11,7),new DictWord(132,11,424),new DictWord(136,11,785),new DictWord(4,10,167),new DictWord(135,10,82),new DictWord(9,0,7),new DictWord(23,
					0,6),new DictWord(9,11,7),new DictWord(151,11,6),new DictWord(6,0,282),new DictWord(5,10,62),new DictWord(6,10,534),new DictWord(7,10,74),new DictWord(7,10,678),new DictWord(7,
					10,684),new DictWord(7,10,1043),new DictWord(7,10,1072),new DictWord(8,10,280),new DictWord(8,10,541),new DictWord(8,10,686),new DictWord(9,10,258),new DictWord(10,
					10,519),new DictWord(11,10,252),new DictWord(140,10,282),new DictWord(138,10,33),new DictWord(132,10,359),new DictWord(4,0,44),new DictWord(5,0,311),new DictWord(6,
					0,156),new DictWord(7,0,639),new DictWord(7,0,762),new DictWord(7,0,1827),new DictWord(9,0,8),new DictWord(9,0,462),new DictWord(148,0,83),new DictWord(7,11,769),new DictWord(9
					,11,18),new DictWord(138,11,358),new DictWord(4,0,346),new DictWord(7,0,115),new DictWord(9,0,180),new DictWord(9,0,456),new DictWord(10,0,363),new DictWord(4,11,
					896),new DictWord(134,11,1777),new DictWord(133,10,211),new DictWord(7,0,761),new DictWord(7,0,1051),new DictWord(137,0,545),new DictWord(6,10,145),new DictWord(141
					,10,336),new DictWord(7,11,750),new DictWord(9,11,223),new DictWord(11,11,27),new DictWord(11,11,466),new DictWord(12,11,624),new DictWord(14,11,265),new DictWord(
					146,11,61),new DictWord(6,0,752),new DictWord(6,0,768),new DictWord(6,0,1195),new DictWord(6,0,1254),new DictWord(6,0,1619),new DictWord(137,0,835),new DictWord(6,0
					,1936),new DictWord(8,0,930),new DictWord(136,0,960),new DictWord(132,10,263),new DictWord(132,11,249),new DictWord(12,0,653),new DictWord(132,10,916),new DictWord(
					4,11,603),new DictWord(133,11,661),new DictWord(8,0,344),new DictWord(4,11,11),new DictWord(6,11,128),new DictWord(7,11,231),new DictWord(7,11,1533),new DictWord(
					138,11,725),new DictWord(134,0,1483),new DictWord(134,0,875),new DictWord(6,0,185),new DictWord(7,0,1899),new DictWord(9,0,875),new DictWord(139,0,673),
				new DictWord(15,10,155),new DictWord(144,10,79),new DictWord(7,0,93),new DictWord(7,0,210),new DictWord(7,0,1223),new DictWord(8,0,451),new DictWord(8,0,460),new DictWord(11,0,
					353),new DictWord(11,0,475),new DictWord(4,10,599),new DictWord(6,10,1634),new DictWord(7,10,67),new DictWord(7,10,691),new DictWord(7,10,979),new DictWord(7,10,
					1697),new DictWord(8,10,207),new DictWord(8,10,214),new DictWord(8,10,231),new DictWord(8,10,294),new DictWord(8,10,336),new DictWord(8,10,428),new DictWord(8,10,
					471),new DictWord(8,10,622),new DictWord(8,10,626),new DictWord(8,10,679),new DictWord(8,10,759),new DictWord(8,10,829),new DictWord(9,10,11),new DictWord(9,10,246)
				,new DictWord(9,10,484),new DictWord(9,10,573),new DictWord(9,10,706),new DictWord(9,10,762),new DictWord(9,10,798),new DictWord(9,10,855),new DictWord(9,10,870),new DictWord(9
					,10,912),new DictWord(10,10,303),new DictWord(10,10,335),new DictWord(10,10,424),new DictWord(10,10,461),new DictWord(10,10,543),new DictWord(10,10,759)
				,new DictWord(10,10,814),new DictWord(11,10,59),new DictWord(11,10,235),new DictWord(11,10,590),new DictWord(11,10,929),new DictWord(11,10,963),new DictWord(11,10,
					987),new DictWord(12,10,114),new DictWord(12,10,182),new DictWord(12,10,226),new DictWord(12,10,332),new DictWord(12,10,439),new DictWord(12,10,575),new DictWord(12
					,10,598),new DictWord(12,10,675),new DictWord(13,10,8),new DictWord(13,10,125),new DictWord(13,10,194),new DictWord(13,10,287),new DictWord(14,10,197),new DictWord(
					14,10,383),new DictWord(15,10,53),new DictWord(17,10,63),new DictWord(19,10,46),new DictWord(19,10,98),new DictWord(19,10,106),new DictWord(148,10,85),new DictWord(
					132,11,476),new DictWord(4,0,327),new DictWord(5,0,478),new DictWord(7,0,1332),new DictWord(136,0,753),new DictWord(5,0,1020),new DictWord(133,0,1022),new DictWord(
					135,11,1807),new DictWord(4,0,103),new DictWord(133,0,401),new DictWord(4,0,499),new DictWord(135,0,1421),new DictWord(10,0,207),new DictWord(13,0,164),
				new DictWord(147,10,126),new DictWord(9,11,20),new DictWord(10,11,324),new DictWord(139,11,488),new DictWord(132,0,96),new DictWord(9,11,280),new DictWord(138,11,
					134),new DictWord(135,0,968),new DictWord(133,10,187),new DictWord(135,10,1286),new DictWord(5,11,112),new DictWord(6,11,103),new DictWord(134,11,150),new DictWord(
					8,0,914),new DictWord(10,0,3),new DictWord(4,10,215),new DictWord(9,10,38),new DictWord(11,10,23),new DictWord(11,10,127),new DictWord(139,10,796),new DictWord(135,
					0,399),new DictWord(6,0,563),new DictWord(137,0,224),new DictWord(6,0,704),new DictWord(134,0,1214),new DictWord(4,11,708),new DictWord(8,11,15),new DictWord(9,11,
					50),new DictWord(9,11,386),new DictWord(11,11,18),new DictWord(11,11,529),new DictWord(140,11,228),new DictWord(4,11,563),new DictWord(7,11,109),new DictWord(7,11,
					592),new DictWord(7,11,637),new DictWord(7,11,770),new DictWord(7,11,1701),new DictWord(8,11,436),new DictWord(8,11,463),new DictWord(9,11,60),new DictWord(9,11,335
				),new DictWord(9,11,904),new DictWord(10,11,73),new DictWord(11,11,434),new DictWord(12,11,585),new DictWord(13,11,331),new DictWord(18,11,110),new DictWord(148,11,
					60),new DictWord(134,0,1559),new DictWord(132,11,502),new DictWord(6,11,347),new DictWord(138,11,161),new DictWord(4,11,33),new DictWord(5,11,102),new DictWord(5,11
					,500),new DictWord(6,11,284),new DictWord(7,11,1079),new DictWord(7,11,1423),new DictWord(7,11,1702),new DictWord(8,11,470),new DictWord(9,11,554),new DictWord(9,11
					,723),new DictWord(139,11,333),new DictWord(7,11,246),new DictWord(135,11,840),new DictWord(6,11,10),new DictWord(8,11,571),new DictWord(9,11,739),new DictWord(143,
					11,91),new DictWord(8,0,861),new DictWord(10,0,905),new DictWord(12,0,730),new DictWord(12,0,789),new DictWord(133,11,626),new DictWord(134,0,946),new DictWord(5,0,
					746),new DictWord(12,0,333),new DictWord(14,0,332),new DictWord(12,11,333),new DictWord(142,11,332),new DictWord(5,11,18),new DictWord(6,11,526),new DictWord(13,11,
					24),new DictWord(13,11,110),new DictWord(19,11,5),new DictWord(147,11,44),new DictWord(4,0,910),new DictWord(5,0,832),new DictWord(135,10,2002),new DictWord(10,11,
					768),new DictWord(139,11,787),new DictWord(4,11,309),new DictWord(5,11,462),new DictWord(7,11,970),new DictWord(135,11,1097),new DictWord(4,10,28),new DictWord(5,10
					,440),new DictWord(7,10,248),new DictWord(11,10,833),new DictWord(140,10,344),new DictWord(134,10,1654),new DictWord(6,0,632),new DictWord(6,0,652),new DictWord(6,0
					,1272),new DictWord(6,0,1384),new DictWord(134,0,1560),new DictWord(134,11,1704),new DictWord(6,0,1393),new DictWord(133,10,853),new DictWord(6,10,249),
				new DictWord(7,10,1234),new DictWord(139,10,573),new DictWord(5,11,86),new DictWord(7,11,743),new DictWord(9,11,85),new DictWord(10,11,281),new DictWord(10,11,432),
				new DictWord(11,11,490),new DictWord(12,11,251),new DictWord(13,11,118),new DictWord(14,11,378),new DictWord(146,11,143),new DictWord(5,11,524),new DictWord(133,11,
					744),new DictWord(134,0,1514),new DictWord(10,0,201),new DictWord(142,0,319),new DictWord(7,0,717),new DictWord(10,0,510),new DictWord(7,10,392),new DictWord(8,10,
					20),new DictWord(8,10,172),new DictWord(8,10,690),new DictWord(9,10,383),new DictWord(9,10,845),new DictWord(11,10,293),new DictWord(11,10,832),new DictWord(11,10,
					920),new DictWord(11,10,984),new DictWord(141,10,221),new DictWord(134,0,1381),new DictWord(5,10,858),new DictWord(133,10,992),new DictWord(8,0,528),new DictWord(
					137,0,348),new DictWord(10,11,107),new DictWord(140,11,436),new DictWord(4,0,20),new DictWord(133,0,616),new DictWord(134,0,1251),new DictWord(132,11,
					927),new DictWord(10,11,123),new DictWord(12,11,670),new DictWord(13,11,371),new DictWord(14,11,142),new DictWord(146,11,94),new DictWord(134,0,1163),new DictWord(7
					,11,1149),new DictWord(137,11,156),new DictWord(134,0,307),new DictWord(133,11,778),new DictWord(7,0,1091),new DictWord(135,0,1765),new DictWord(5,11,
					502),new DictWord(6,10,268),new DictWord(137,10,62),new DictWord(8,11,196),new DictWord(10,11,283),new DictWord(139,11,406),new DictWord(4,0,26),new DictWord(5,0,
					429),new DictWord(6,0,245),new DictWord(7,0,704),new DictWord(7,0,1379),new DictWord(135,0,1474),new DictWord(133,11,855),new DictWord(132,0,881),new DictWord(4,0,
					621),new DictWord(135,11,1596),new DictWord(7,11,1400),new DictWord(9,11,446),new DictWord(138,11,45),new DictWord(6,0,736),new DictWord(138,10,106),new DictWord(
					133,0,542),new DictWord(134,0,348),new DictWord(133,0,868),new DictWord(136,0,433),new DictWord(135,0,1495),new DictWord(138,0,771),new DictWord(6,10,
					613),new DictWord(136,10,223),new DictWord(138,0,215),new DictWord(141,0,124),new DictWord(136,11,391),new DictWord(135,11,172),new DictWord(132,10,670)
				,new DictWord(140,0,55),new DictWord(9,10,40),new DictWord(139,10,136),new DictWord(7,0,62),new DictWord(147,0,112),new DictWord(132,0,856),new DictWord(132,11,568)
				,new DictWord(12,0,270),new DictWord(139,10,259),new DictWord(8,0,572),new DictWord(137,0,698),new DictWord(4,11,732),new DictWord(9,10,310),new DictWord(137,10,682
				),new DictWord(142,10,296),new DictWord(134,0,939),new DictWord(136,11,733),new DictWord(135,11,1435),new DictWord(7,10,1401),new DictWord(135,10,1476),
				new DictWord(6,0,352),new DictWord(4,10,296),new DictWord(7,10,401),new DictWord(7,10,1410),new DictWord(7,10,1594),new DictWord(7,10,1674),new DictWord(8,10,63),new DictWord(8
					,10,660),new DictWord(137,10,74),new DictWord(4,11,428),new DictWord(133,11,668),new DictWord(4,10,139),new DictWord(4,10,388),new DictWord(140,10,188),
				new DictWord(7,11,2015),new DictWord(140,11,665),new DictWord(132,0,647),new DictWord(146,0,10),new DictWord(138,0,220),new DictWord(142,0,464),new DictWord(132,0,
					109),new DictWord(134,0,1746),new DictWord(6,0,515),new DictWord(4,10,747),new DictWord(6,11,1623),new DictWord(6,11,1681),new DictWord(7,10,649),new DictWord(7,10,
					1479),new DictWord(135,10,1583),new DictWord(133,10,232),new DictWord(135,0,566),new DictWord(137,10,887),new DictWord(4,0,40),new DictWord(10,0,67),new DictWord(11
					,0,117),new DictWord(11,0,768),new DictWord(139,0,935),new DictWord(132,0,801),new DictWord(7,0,992),new DictWord(8,0,301),new DictWord(9,0,722),new DictWord(12,0,
					63),new DictWord(13,0,29),new DictWord(14,0,161),new DictWord(143,0,18),new DictWord(139,0,923),new DictWord(6,11,1748),new DictWord(8,11,715),new DictWord(9,11,802
				),new DictWord(10,11,46),new DictWord(10,11,819),new DictWord(13,11,308),new DictWord(14,11,351),new DictWord(14,11,363),new DictWord(146,11,67),new DictWord(137,11
					,745),new DictWord(7,0,1145),new DictWord(4,10,14),new DictWord(7,10,1801),new DictWord(10,10,748),new DictWord(141,10,458),new DictWord(4,11,63),new DictWord(5,11,
					347),new DictWord(134,11,474),new DictWord(135,0,568),new DictWord(4,10,425),new DictWord(7,11,577),new DictWord(7,11,1432),new DictWord(9,11,475),new DictWord(9,11
					,505),new DictWord(9,11,526),new DictWord(9,11,609),new DictWord(9,11,689),new DictWord(9,11,726),new DictWord(9,11,735),new DictWord(9,11,738),new DictWord(10,11,
					556),new DictWord(10,11,674),new DictWord(10,11,684),new DictWord(11,11,89),new DictWord(11,11,202),new DictWord(11,11,272),new DictWord(11,11,380),new DictWord(11,
					11,415),new DictWord(11,11,505),new DictWord(11,11,537),new DictWord(11,11,550),new DictWord(11,11,562),new DictWord(11,11,640),new DictWord(11,11,667),
				new DictWord(11,11,688),new DictWord(11,11,847),new DictWord(11,11,927),new DictWord(11,11,930),new DictWord(11,11,940),new DictWord(12,11,144),new DictWord(12,11,
					325),new DictWord(12,11,329),new DictWord(12,11,389),new DictWord(12,11,403),new DictWord(12,11,451),new DictWord(12,11,515),new DictWord(12,11,604),new DictWord(12
					,11,616),new DictWord(12,11,626),new DictWord(13,11,66),new DictWord(13,11,131),new DictWord(13,11,167),new DictWord(13,11,236),new DictWord(13,11,368),
				new DictWord(13,11,411),new DictWord(13,11,434),new DictWord(13,11,453),new DictWord(13,11,461),new DictWord(13,11,474),new DictWord(14,11,59),new DictWord(14,11,60
				),new DictWord(14,11,139),new DictWord(14,11,152),new DictWord(14,11,276),new DictWord(14,11,353),new DictWord(14,11,402),new DictWord(15,11,28),new DictWord(15,11,
					81),new DictWord(15,11,123),new DictWord(15,11,152),new DictWord(18,11,136),new DictWord(148,11,88),new DictWord(137,0,247),new DictWord(135,11,1622),new DictWord(9
					,11,544),new DictWord(11,11,413),new DictWord(144,11,25),new DictWord(4,0,645),new DictWord(7,0,825),new DictWord(6,10,1768),new DictWord(135,11,89),new DictWord(
					140,0,328),new DictWord(5,10,943),new DictWord(134,10,1779),new DictWord(134,0,1363),new DictWord(5,10,245),new DictWord(6,10,576),new DictWord(7,10,582
				),new DictWord(136,10,225),new DictWord(134,0,1280),new DictWord(5,11,824),new DictWord(133,11,941),new DictWord(7,11,440),new DictWord(8,11,230),new DictWord(139,
					11,106),new DictWord(5,0,28),new DictWord(6,0,204),new DictWord(10,0,320),new DictWord(10,0,583),new DictWord(13,0,502),new DictWord(14,0,72),new DictWord(14,0,274)
				,new DictWord(14,0,312),new DictWord(14,0,344),new DictWord(15,0,159),new DictWord(16,0,62),new DictWord(16,0,69),new DictWord(17,0,30),new DictWord(18,0,42),new DictWord(18,0,
					53),new DictWord(18,0,84),new DictWord(18,0,140),new DictWord(19,0,68),new DictWord(19,0,85),new DictWord(20,0,5),new DictWord(20,0,45),new DictWord(20,0,101),new DictWord(22,0
					,7),new DictWord(150,0,20),new DictWord(4,0,558),new DictWord(6,0,390),new DictWord(7,0,162),new DictWord(7,0,689),new DictWord(9,0,360),new DictWord(138,0,653),new DictWord(
					134,0,764),new DictWord(6,0,862),new DictWord(137,0,833),new DictWord(5,0,856),new DictWord(6,0,1672),new DictWord(6,0,1757),new DictWord(134,0,1781),new DictWord(5
					,0,92),new DictWord(10,0,736),new DictWord(140,0,102),new DictWord(6,0,1927),new DictWord(6,0,1944),new DictWord(8,0,924),new DictWord(8,0,948),new DictWord(10,0,
					967),new DictWord(138,0,978),new DictWord(134,0,1479),new DictWord(5,0,590),new DictWord(8,0,360),new DictWord(9,0,213),new DictWord(138,0,63),new DictWord(134,0,
					1521),new DictWord(6,0,709),new DictWord(134,0,891),new DictWord(132,10,443),new DictWord(13,0,477),new DictWord(14,0,120),new DictWord(148,0,61),new DictWord(4,11,
					914),new DictWord(5,11,800),new DictWord(133,11,852),new DictWord(10,11,54),new DictWord(141,11,115),new DictWord(4,11,918),new DictWord(133,11,876),new DictWord(
					139,11,152),new DictWord(4,11,92),new DictWord(133,11,274),new DictWord(135,11,1901),new DictWord(9,11,800),new DictWord(10,11,693),new DictWord(11,11,
					482),new DictWord(11,11,734),new DictWord(139,11,789),new DictWord(9,0,483),new DictWord(132,10,298),new DictWord(6,0,1213),new DictWord(141,11,498),new DictWord(
					135,11,1451),new DictWord(133,11,743),new DictWord(4,0,1022),new DictWord(10,0,1000),new DictWord(12,0,957),new DictWord(12,0,980),new DictWord(12,0,
					1013),new DictWord(14,0,481),new DictWord(144,0,116),new DictWord(8,0,503),new DictWord(17,0,29),new DictWord(4,11,49),new DictWord(7,11,280),new DictWord(135,11,
					1633),new DictWord(135,0,1712),new DictWord(134,0,466),new DictWord(136,11,47),new DictWord(5,10,164),new DictWord(7,10,121),new DictWord(142,10,189),new DictWord(7
					,10,812),new DictWord(7,10,1261),new DictWord(7,10,1360),new DictWord(9,10,632),new DictWord(140,10,352),new DictWord(139,10,556),new DictWord(132,0,731
				),new DictWord(5,11,272),new DictWord(5,11,908),new DictWord(5,11,942),new DictWord(7,11,1008),new DictWord(7,11,1560),new DictWord(8,11,197),new DictWord(9,11,47),
				new DictWord(11,11,538),new DictWord(139,11,742),new DictWord(4,10,172),new DictWord(9,10,611),new DictWord(10,10,436),new DictWord(12,10,673),new DictWord(141,10,
					255),new DictWord(133,10,844),new DictWord(10,0,484),new DictWord(11,0,754),new DictWord(12,0,457),new DictWord(14,0,171),new DictWord(14,0,389),new DictWord(146,0,
					153),new DictWord(9,10,263),new DictWord(10,10,147),new DictWord(138,10,492),new DictWord(137,11,891),new DictWord(138,0,241),new DictWord(133,10,537),new DictWord(
					6,0,2005),new DictWord(136,0,964),new DictWord(137,10,842),new DictWord(151,11,8),new DictWord(4,11,407),new DictWord(132,11,560),new DictWord(135,11,
					1884),new DictWord(6,0,1100),new DictWord(134,0,1242),new DictWord(135,0,954),new DictWord(5,10,230),new DictWord(5,10,392),new DictWord(6,10,420),new DictWord(9,10
					,568),new DictWord(140,10,612),new DictWord(4,11,475),new DictWord(11,11,35),new DictWord(11,11,90),new DictWord(13,11,7),new DictWord(13,11,71),new DictWord(13,11,
					177),new DictWord(142,11,422),new DictWord(136,11,332),new DictWord(135,0,1958),new DictWord(6,0,549),new DictWord(8,0,34),new DictWord(8,0,283),new DictWord(9,0,
					165),new DictWord(138,0,475),new DictWord(10,0,952),new DictWord(12,0,966),new DictWord(140,0,994),new DictWord(5,0,652),new DictWord(5,0,701),new DictWord(135,0,
					449),new DictWord(4,0,655),new DictWord(7,0,850),new DictWord(17,0,75),new DictWord(146,0,137),new DictWord(4,0,146),new DictWord(7,0,1618),new DictWord(8,0,670),new DictWord(5
					,10,41),new DictWord(7,10,1459),new DictWord(7,10,1469),new DictWord(7,10,1859),new DictWord(9,10,549),new DictWord(139,10,905),new DictWord(133,10,696)
				,new DictWord(6,0,159),new DictWord(6,0,364),new DictWord(7,0,516),new DictWord(137,0,518),new DictWord(135,0,1439),new DictWord(6,11,222),new DictWord(7,11,636),new DictWord(7
					,11,1620),new DictWord(8,11,409),new DictWord(9,11,693),new DictWord(139,11,77),new DictWord(13,0,151),new DictWord(141,11,45),new DictWord(6,0,1027),new DictWord(4
					,11,336),new DictWord(132,10,771),new DictWord(139,11,392),new DictWord(10,11,121),new DictWord(11,11,175),new DictWord(149,11,16),new DictWord(8,0,950)
				,new DictWord(138,0,983),new DictWord(133,10,921),new DictWord(135,0,993),new DictWord(6,10,180),new DictWord(7,10,1137),new DictWord(8,10,751),new DictWord(139,10,
					805),new DictWord(7,0,501),new DictWord(9,0,111),new DictWord(10,0,141),new DictWord(11,0,332),new DictWord(13,0,43),new DictWord(13,0,429),new DictWord(14,0,130),new DictWord(
					14,0,415),new DictWord(145,0,102),new DictWord(4,10,183),new DictWord(5,11,882),new DictWord(7,10,271),new DictWord(11,10,824),new DictWord(11,10,952),new DictWord(
					13,10,278),new DictWord(13,10,339),new DictWord(13,10,482),new DictWord(14,10,424),new DictWord(148,10,99),new DictWord(4,10,19),new DictWord(5,10,477),
				new DictWord(5,10,596),new DictWord(6,10,505),new DictWord(7,10,1221),new DictWord(11,10,907),new DictWord(12,10,209),new DictWord(141,10,214),new DictWord(135,10,
					1215),new DictWord(133,0,452),new DictWord(132,11,426),new DictWord(5,0,149),new DictWord(136,0,233),new DictWord(133,0,935),new DictWord(6,11,58),new DictWord(7,11
					,654),new DictWord(7,11,745),new DictWord(7,11,1969),new DictWord(8,11,240),new DictWord(8,11,675),new DictWord(9,11,479),new DictWord(9,11,731),new DictWord(10,11,
					330),new DictWord(10,11,593),new DictWord(10,11,817),new DictWord(11,11,32),new DictWord(11,11,133),new DictWord(11,11,221),new DictWord(145,11,68),new DictWord(12,
					0,582),new DictWord(18,0,131),new DictWord(7,11,102),new DictWord(137,11,538),new DictWord(136,0,801),new DictWord(134,10,1645),new DictWord(132,0,70),new DictWord(
					6,10,92),new DictWord(6,10,188),new DictWord(7,10,1269),new DictWord(7,10,1524),new DictWord(7,10,1876),new DictWord(10,10,228),new DictWord(139,10,1020
				),new DictWord(4,10,459),new DictWord(133,10,966),new DictWord(138,0,369),new DictWord(16,0,36),new DictWord(140,10,330),new DictWord(141,11,366),new DictWord(7,0,
					721),new DictWord(10,0,236),new DictWord(12,0,204),new DictWord(6,10,18),new DictWord(7,10,932),new DictWord(8,10,757),new DictWord(9,10,54),new DictWord(9,10,65),new DictWord(
					9,10,844),new DictWord(10,10,113),new DictWord(10,10,315),new DictWord(10,10,798),new DictWord(11,10,153),new DictWord(12,10,151),new DictWord(12,10,392
				),new DictWord(12,10,666),new DictWord(142,10,248),new DictWord(7,0,241),new DictWord(10,0,430),new DictWord(8,10,548),new DictWord(9,10,532),new DictWord(10,10,117
				),new DictWord(11,10,351),new DictWord(11,10,375),new DictWord(143,10,23),new DictWord(134,10,1742),new DictWord(133,10,965),new DictWord(133,11,566),new DictWord(6
					,11,48),new DictWord(135,11,63),new DictWord(134,10,182),new DictWord(10,10,65),new DictWord(10,10,488),new DictWord(138,10,497),new DictWord(6,11,114),
				new DictWord(7,11,1224),new DictWord(7,11,1556),new DictWord(136,11,3),new DictWord(134,0,1817),new DictWord(8,11,576),new DictWord(137,11,267),new DictWord(6,0,
					1078),new DictWord(144,0,16),new DictWord(9,10,588),new DictWord(138,10,260),new DictWord(138,0,1021),new DictWord(5,0,406),new DictWord(134,0,2022),new DictWord(
					133,11,933),new DictWord(6,0,69),new DictWord(135,0,117),new DictWord(7,0,1830),new DictWord(136,11,427),new DictWord(4,0,432),new DictWord(135,0,824),new DictWord(
					134,10,1786),new DictWord(133,0,826),new DictWord(139,11,67),new DictWord(133,11,759),new DictWord(135,10,308),new DictWord(137,0,816),new DictWord(133,
					0,1000),new DictWord(4,0,297),new DictWord(6,0,529),new DictWord(7,0,152),new DictWord(7,0,713),new DictWord(7,0,1845),new DictWord(8,0,710),new DictWord(8,0,717),new DictWord(
					12,0,639),new DictWord(140,0,685),new DictWord(7,0,423),new DictWord(136,10,588),new DictWord(136,10,287),new DictWord(136,0,510),new DictWord(134,0,
					1048),new DictWord(6,0,618),new DictWord(7,11,56),new DictWord(7,11,1989),new DictWord(8,11,337),new DictWord(8,11,738),new DictWord(9,11,600),new DictWord(10,11,
					483),new DictWord(12,11,37),new DictWord(13,11,447),new DictWord(142,11,92),new DictWord(4,0,520),new DictWord(135,0,575),new DictWord(8,0,990),new DictWord(138,0,
					977),new DictWord(135,11,774),new DictWord(9,11,347),new DictWord(11,11,24),new DictWord(140,11,170),new DictWord(136,11,379),new DictWord(140,10,290),new DictWord(
					132,11,328),new DictWord(4,0,321),new DictWord(134,0,569),new DictWord(4,11,101),new DictWord(135,11,1171),new DictWord(7,0,723),new DictWord(7,0,1135),
				new DictWord(5,11,833),new DictWord(136,11,744),new DictWord(7,10,719),new DictWord(8,10,809),new DictWord(136,10,834),new DictWord(8,0,921),new DictWord(136,10,796
				),new DictWord(5,10,210),new DictWord(6,10,213),new DictWord(7,10,60),new DictWord(10,10,364),new DictWord(139,10,135),new DictWord(5,0,397),new DictWord(6,0,154),new DictWord(
					7,0,676),new DictWord(8,0,443),new DictWord(8,0,609),new DictWord(9,0,24),new DictWord(9,0,325),new DictWord(10,0,35),new DictWord(11,0,535),new DictWord(11,0,672),
				new DictWord(11,0,1018),new DictWord(12,0,637),new DictWord(16,0,30),new DictWord(5,10,607),new DictWord(8,10,326),new DictWord(136,10,490),new DictWord(4,10,701),new DictWord(
					5,10,472),new DictWord(6,11,9),new DictWord(6,11,397),new DictWord(7,11,53),new DictWord(7,11,1742),new DictWord(9,10,758),new DictWord(10,11,632),new DictWord(11,
					11,828),new DictWord(140,11,146),new DictWord(135,10,380),new DictWord(135,10,1947),new DictWord(148,11,109),new DictWord(10,10,278),new DictWord(138,11
					,278),new DictWord(134,0,856),new DictWord(7,0,139),new DictWord(4,10,386),new DictWord(8,10,405),new DictWord(8,10,728),new DictWord(9,10,497),new DictWord(11,10,
					110),new DictWord(11,10,360),new DictWord(15,10,37),new DictWord(144,10,84),new DictWord(141,0,282),new DictWord(133,0,981),new DictWord(5,0,288),new DictWord(7,10,
					1452),new DictWord(7,10,1480),new DictWord(8,10,634),new DictWord(140,10,472),new DictWord(7,0,1890),new DictWord(8,11,367),new DictWord(10,11,760),new DictWord(14,
					11,79),new DictWord(20,11,17),new DictWord(152,11,0),new DictWord(4,10,524),new DictWord(136,10,810),new DictWord(4,0,56),new DictWord(7,0,1791),new DictWord(8,0,
					607),new DictWord(8,0,651),new DictWord(11,0,465),new DictWord(11,0,835),new DictWord(12,0,337),new DictWord(141,0,480),new DictWord(10,10,238),new DictWord(141,10,
					33),new DictWord(11,11,417),new DictWord(12,11,223),new DictWord(140,11,265),new DictWord(9,0,158),new DictWord(10,0,411),new DictWord(140,0,261),new DictWord(133,
					10,532),new DictWord(133,10,997),new DictWord(12,11,186),new DictWord(12,11,292),new DictWord(14,11,100),new DictWord(146,11,70),new DictWord(6,0,1403),
				new DictWord(136,0,617),new DictWord(134,0,1205),new DictWord(139,0,563),new DictWord(4,0,242),new DictWord(134,0,333),new DictWord(4,11,186),new DictWord(5,11,157)
				,new DictWord(8,11,168),new DictWord(138,11,6),new DictWord(132,0,369),new DictWord(133,11,875),new DictWord(5,10,782),new DictWord(5,10,829),new DictWord(134,10,
					1738),new DictWord(134,0,622),new DictWord(135,11,1272),new DictWord(6,0,1407),new DictWord(7,11,111),new DictWord(136,11,581),new DictWord(7,10,1823),new DictWord(
					139,10,693),new DictWord(7,0,160),new DictWord(10,0,624),new DictWord(142,0,279),new DictWord(132,0,363),new DictWord(10,11,589),new DictWord(12,11,111)
				,new DictWord(13,11,260),new DictWord(14,11,82),new DictWord(18,11,63),new DictWord(147,11,45),new DictWord(7,11,1364),new DictWord(7,11,1907),new DictWord(141,11,
					158),new DictWord(4,11,404),new DictWord(4,11,659),new DictWord(135,11,675),new DictWord(13,11,211),new DictWord(14,11,133),new DictWord(14,11,204),new DictWord(15,
					11,64),new DictWord(15,11,69),new DictWord(15,11,114),new DictWord(16,11,10),new DictWord(19,11,23),new DictWord(19,11,35),new DictWord(19,11,39),new DictWord(19,11
					,51),new DictWord(19,11,71),new DictWord(19,11,75),new DictWord(152,11,15),new DictWord(4,10,78),new DictWord(5,10,96),new DictWord(5,10,182),new DictWord(7,10,1724
				),new DictWord(7,10,1825),new DictWord(10,10,394),new DictWord(10,10,471),new DictWord(11,10,532),new DictWord(14,10,340),new DictWord(145,10,88),new DictWord(135,
					10,1964),new DictWord(133,11,391),new DictWord(11,11,887),new DictWord(14,11,365),new DictWord(142,11,375),new DictWord(5,11,540),new DictWord(6,11,1697
				),new DictWord(7,11,222),new DictWord(136,11,341),new DictWord(134,11,78),new DictWord(9,0,601),new DictWord(9,0,619),new DictWord(10,0,505),new DictWord(10,0,732),
				new DictWord(11,0,355),new DictWord(140,0,139),new DictWord(134,0,292),new DictWord(139,0,174),new DictWord(5,0,177),new DictWord(6,0,616),new DictWord(7,0,827),new DictWord(9,
					0,525),new DictWord(138,0,656),new DictWord(10,0,31),new DictWord(6,10,215),new DictWord(7,10,1028),new DictWord(7,10,1473),new DictWord(7,10,1721),new DictWord(9,
					10,424),new DictWord(138,10,779),new DictWord(135,10,584),new DictWord(136,11,293),new DictWord(134,0,685),new DictWord(135,11,1868),new DictWord(133,11
					,460),new DictWord(7,0,647),new DictWord(6,10,67),new DictWord(7,10,1630),new DictWord(9,10,354),new DictWord(9,10,675),new DictWord(10,10,830),new DictWord(14,10,
					80),new DictWord(145,10,80),new DictWord(4,0,161),new DictWord(133,0,631),new DictWord(6,10,141),new DictWord(7,10,225),new DictWord(9,10,59),new DictWord(9,10,607)
				,new DictWord(10,10,312),new DictWord(11,10,687),new DictWord(12,10,555),new DictWord(13,10,373),new DictWord(13,10,494),new DictWord(148,10,58),new DictWord(7,11,
					965),new DictWord(7,11,1460),new DictWord(135,11,1604),new DictWord(136,10,783),new DictWord(134,11,388),new DictWord(6,0,722),new DictWord(6,0,1267),new DictWord(4
					,11,511),new DictWord(9,11,333),new DictWord(9,11,379),new DictWord(10,11,602),new DictWord(11,11,441),new DictWord(11,11,723),new DictWord(11,11,976),new DictWord(
					140,11,357),new DictWord(134,0,1797),new DictWord(135,0,1684),new DictWord(9,0,469),new DictWord(9,0,709),new DictWord(12,0,512),new DictWord(14,0,65),new DictWord(
					17,0,12),new DictWord(5,11,938),new DictWord(136,11,707),new DictWord(7,0,1230),new DictWord(136,0,531),new DictWord(10,0,229),new DictWord(11,0,73),new DictWord(11
					,0,376),new DictWord(139,0,433),new DictWord(12,0,268),new DictWord(12,0,640),new DictWord(142,0,119),new DictWord(7,10,430),new DictWord(139,10,46),new DictWord(6,
					0,558),new DictWord(7,0,651),new DictWord(8,0,421),new DictWord(9,0,0),new DictWord(10,0,34),new DictWord(139,0,1008),new DictWord(6,0,106),new DictWord(7,0,1786),new DictWord(
					7,0,1821),new DictWord(9,0,102),new DictWord(9,0,763),new DictWord(5,10,602),new DictWord(7,10,2018),new DictWord(137,10,418),new DictWord(5,0,65),new DictWord(6,0,
					416),new DictWord(7,0,1720),new DictWord(7,0,1924),new DictWord(10,0,109),new DictWord(11,0,14),new DictWord(11,0,70),new DictWord(11,0,569),new DictWord(11,0,735),
				new DictWord(15,0,153),new DictWord(20,0,80),new DictWord(136,10,677),new DictWord(135,11,1625),new DictWord(137,11,772),new DictWord(136,0,595),new DictWord(6,11,
					469),new DictWord(7,11,1709),new DictWord(138,11,515),new DictWord(7,0,1832),new DictWord(138,0,374),new DictWord(9,0,106),new DictWord(9,0,163),new DictWord(9,0,
					296),new DictWord(10,0,167),new DictWord(10,0,172),new DictWord(10,0,777),new DictWord(139,0,16),new DictWord(6,0,6),new DictWord(7,0,81),new DictWord(7,0,771),new DictWord(7,0
					,1731),new DictWord(9,0,405),new DictWord(138,0,421),new DictWord(4,11,500),new DictWord(135,11,938),new DictWord(5,11,68),new DictWord(134,11,383),new DictWord(5,0
					,881),new DictWord(133,0,885),new DictWord(6,0,854),new DictWord(6,0,1132),new DictWord(6,0,1495),new DictWord(6,0,1526),new DictWord(6,0,1533),new DictWord(134,0,
					1577),new DictWord(4,11,337),new DictWord(6,11,353),new DictWord(7,11,1934),new DictWord(8,11,488),new DictWord(137,11,429),new DictWord(7,11,236),new DictWord(7,11
					,1795),new DictWord(8,11,259),new DictWord(9,11,135),new DictWord(9,11,177),new DictWord(10,11,825),new DictWord(11,11,115),new DictWord(11,11,370),new DictWord(11,
					11,405),new DictWord(11,11,604),new DictWord(12,11,10),new DictWord(12,11,667),new DictWord(12,11,669),new DictWord(13,11,76),new DictWord(14,11,310),new DictWord(
					15,11,76),new DictWord(15,11,147),new DictWord(148,11,23),new DictWord(5,0,142),new DictWord(134,0,546),new DictWord(4,11,15),new DictWord(5,11,22),new DictWord(6,
					11,244),new DictWord(7,11,40),new DictWord(7,11,200),new DictWord(7,11,906),new DictWord(7,11,1199),new DictWord(9,11,616),new DictWord(10,11,716),new DictWord(11,
					11,635),new DictWord(11,11,801),new DictWord(140,11,458),new DictWord(5,0,466),new DictWord(11,0,571),new DictWord(12,0,198),new DictWord(13,0,283),new DictWord(14,
					0,186),new DictWord(15,0,21),new DictWord(15,0,103),new DictWord(135,10,329),new DictWord(4,0,185),new DictWord(5,0,257),new DictWord(5,0,839),new DictWord(5,0,936)
				,new DictWord(9,0,399),new DictWord(10,0,258),new DictWord(10,0,395),new DictWord(10,0,734),new DictWord(11,0,1014),new DictWord(12,0,23),new DictWord(13,0,350),new DictWord(14
					,0,150),new DictWord(19,0,6),new DictWord(135,11,1735),new DictWord(12,11,36),new DictWord(141,11,337),new DictWord(5,11,598),new DictWord(7,11,791),new DictWord(8,
					11,108),new DictWord(137,11,123),new DictWord(132,10,469),new DictWord(7,0,404),new DictWord(7,0,1377),new DictWord(7,0,1430),new DictWord(7,0,2017),new DictWord(8,
					0,149),new DictWord(8,0,239),new DictWord(8,0,512),new DictWord(8,0,793),new DictWord(8,0,818),new DictWord(9,0,474),new DictWord(9,0,595),new DictWord(10,0,122),new DictWord(
					10,0,565),new DictWord(10,0,649),new DictWord(10,0,783),new DictWord(11,0,239),new DictWord(11,0,295),new DictWord(11,0,447),new DictWord(11,0,528),new DictWord(11,
					0,639),new DictWord(11,0,800),new DictWord(12,0,25),new DictWord(12,0,77),new DictWord(12,0,157),new DictWord(12,0,256),new DictWord(12,0,316),new DictWord(12,0,390
				),new DictWord(12,0,391),new DictWord(12,0,395),new DictWord(12,0,478),new DictWord(12,0,503),new DictWord(12,0,592),new DictWord(12,0,680),new DictWord(13,0,50),new DictWord(
					13,0,53),new DictWord(13,0,132),new DictWord(13,0,198),new DictWord(13,0,322),new DictWord(13,0,415),new DictWord(13,0,511),new DictWord(14,0,71),new DictWord(14,0,
					395),new DictWord(15,0,71),new DictWord(15,0,136),new DictWord(17,0,123),new DictWord(18,0,93),new DictWord(147,0,58),new DictWord(136,0,712),new DictWord(134,10,
					1743),new DictWord(5,10,929),new DictWord(6,10,340),new DictWord(8,10,376),new DictWord(136,10,807),new DictWord(6,0,1848),new DictWord(8,0,860),new DictWord(10,0,
					856),new DictWord(10,0,859),new DictWord(10,0,925),new DictWord(10,0,941),new DictWord(140,0,762),new DictWord(6,0,629),new DictWord(6,0,906),new DictWord(9,0,810),
				new DictWord(140,0,652),new DictWord(5,10,218),new DictWord(7,10,1610),new DictWord(138,10,83),new DictWord(7,10,1512),new DictWord(135,10,1794),new DictWord(4,0,
					377),new DictWord(24,0,13),new DictWord(4,11,155),new DictWord(7,11,1689),new DictWord(11,10,0),new DictWord(144,10,78),new DictWord(4,11,164),new DictWord(5,11,151
				),new DictWord(5,11,730),new DictWord(5,11,741),new DictWord(7,11,498),new DictWord(7,11,870),new DictWord(7,11,1542),new DictWord(12,11,213),new DictWord(14,11,36)
				,new DictWord(14,11,391),new DictWord(17,11,111),new DictWord(18,11,6),new DictWord(18,11,46),new DictWord(18,11,151),new DictWord(19,11,36),new DictWord(20,11,32),
				new DictWord(20,11,56),new DictWord(20,11,69),new DictWord(20,11,102),new DictWord(21,11,4),new DictWord(22,11,8),new DictWord(22,11,10),new DictWord(22,11,14),new DictWord(150
					,11,31),new DictWord(7,0,1842),new DictWord(133,10,571),new DictWord(4,10,455),new DictWord(4,11,624),new DictWord(135,11,1752),new DictWord(134,0,1501)
				,new DictWord(4,11,492),new DictWord(5,11,451),new DictWord(6,10,161),new DictWord(7,10,372),new DictWord(137,10,597),new DictWord(132,10,349),new DictWord(4,0,180)
				,new DictWord(135,0,1906),new DictWord(135,11,835),new DictWord(141,11,70),new DictWord(132,0,491),new DictWord(137,10,751),new DictWord(6,10,432),new DictWord(139,
					10,322),new DictWord(4,0,171),new DictWord(138,0,234),new DictWord(6,11,113),new DictWord(135,11,436),new DictWord(4,0,586),new DictWord(7,0,1186),new DictWord(138,
					0,631),new DictWord(5,10,468),new DictWord(10,10,325),new DictWord(11,10,856),new DictWord(12,10,345),new DictWord(143,10,104),new DictWord(5,10,223),new DictWord(
					10,11,592),new DictWord(10,11,753),new DictWord(12,11,317),new DictWord(12,11,355),new DictWord(12,11,465),new DictWord(12,11,469),new DictWord(12,11,
					560),new DictWord(12,11,578),new DictWord(141,11,243),new DictWord(132,10,566),new DictWord(135,11,520),new DictWord(4,10,59),new DictWord(135,10,1394),
				new DictWord(6,10,436),new DictWord(139,10,481),new DictWord(9,0,931),new DictWord(10,0,334),new DictWord(20,0,71),new DictWord(4,10,48),new DictWord(5,10,271),new DictWord(7,
					10,953),new DictWord(135,11,1878),new DictWord(11,0,170),new DictWord(5,10,610),new DictWord(136,10,457),new DictWord(133,10,755),new DictWord(6,0,1587)
				,new DictWord(135,10,1217),new DictWord(4,10,197),new DictWord(149,11,26),new DictWord(133,11,585),new DictWord(137,11,521),new DictWord(133,0,765),new DictWord(133
					,10,217),new DictWord(139,11,586),new DictWord(133,0,424),new DictWord(9,11,752),new DictWord(12,11,610),new DictWord(13,11,431),new DictWord(16,11,59),
				new DictWord(146,11,109),new DictWord(136,0,714),new DictWord(7,0,685),new DictWord(132,11,307),new DictWord(9,0,420),new DictWord(10,0,269),new DictWord(10,0,285),
				new DictWord(10,0,576),new DictWord(11,0,397),new DictWord(13,0,175),new DictWord(145,0,90),new DictWord(132,0,429),new DictWord(133,11,964),new DictWord(9,11,463),
				new DictWord(138,11,595),new DictWord(7,0,18),new DictWord(7,0,699),new DictWord(7,0,1966),new DictWord(8,0,752),new DictWord(9,0,273),new DictWord(9,0,412),new DictWord(9,0,
					703),new DictWord(10,0,71),new DictWord(10,0,427),new DictWord(138,0,508),new DictWord(4,10,165),new DictWord(7,10,1398),new DictWord(135,10,1829),new DictWord(4,0,
					53),new DictWord(5,0,186),new DictWord(7,0,752),new DictWord(7,0,828),new DictWord(142,0,116),new DictWord(8,0,575),new DictWord(10,0,289),new DictWord(139,0,319),new DictWord(
					132,0,675),new DictWord(134,0,1424),new DictWord(4,11,75),new DictWord(5,11,180),new DictWord(6,11,500),new DictWord(7,11,58),new DictWord(7,11,710),new DictWord(
					138,11,645),new DictWord(133,11,649),new DictWord(6,11,276),new DictWord(7,11,282),new DictWord(7,11,879),new DictWord(7,11,924),new DictWord(8,11,459),
				new DictWord(9,11,599),new DictWord(9,11,754),new DictWord(11,11,574),new DictWord(12,11,128),new DictWord(12,11,494),new DictWord(13,11,52),new DictWord(13,11,301)
				,new DictWord(15,11,30),new DictWord(143,11,132),new DictWord(6,0,647),new DictWord(134,0,1095),new DictWord(5,10,9),new DictWord(7,10,297),new DictWord(7,10,966),new DictWord(
					140,10,306),new DictWord(132,11,200),new DictWord(134,0,1334),new DictWord(5,10,146),new DictWord(6,10,411),new DictWord(138,10,721),new DictWord(6,0,
					209),new DictWord(6,0,1141),new DictWord(6,0,1288),new DictWord(8,0,468),new DictWord(9,0,210),new DictWord(11,0,36),new DictWord(12,0,28),new DictWord(12,0,630),new DictWord(
					13,0,21),new DictWord(13,0,349),new DictWord(14,0,7),new DictWord(145,0,13),new DictWord(6,10,177),new DictWord(135,10,467),new DictWord(4,0,342),new DictWord(135,0
					,1179),new DictWord(10,11,454),new DictWord(140,11,324),new DictWord(4,0,928),new DictWord(133,0,910),new DictWord(7,0,1838),new DictWord(6,11,225),new DictWord(137
					,11,211),new DictWord(16,0,101),new DictWord(20,0,115),new DictWord(20,0,118),new DictWord(148,0,122),new DictWord(4,0,496),new DictWord(135,0,856),new DictWord(4,0
					,318),new DictWord(11,0,654),new DictWord(7,11,718),new DictWord(139,11,102),new DictWord(8,11,58),new DictWord(9,11,724),new DictWord(11,11,809),new DictWord(13,11
					,113),new DictWord(145,11,72),new DictWord(5,10,200),new DictWord(6,11,345),new DictWord(135,11,1247),new DictWord(8,11,767),new DictWord(8,11,803),new DictWord(9,
					11,301),new DictWord(137,11,903),new DictWord(7,0,915),new DictWord(8,0,247),new DictWord(19,0,0),new DictWord(7,11,1949),new DictWord(136,11,674),new DictWord(4,0,
					202),new DictWord(5,0,382),new DictWord(6,0,454),new DictWord(7,0,936),new DictWord(7,0,1803),new DictWord(8,0,758),new DictWord(9,0,375),new DictWord(9,0,895),new DictWord(10,
					0,743),new DictWord(10,0,792),new DictWord(11,0,978),new DictWord(11,0,1012),new DictWord(142,0,109),new DictWord(7,0,1150),new DictWord(7,0,1425),new DictWord(7,0,
					1453),new DictWord(140,0,513),new DictWord(134,11,259),new DictWord(138,0,791),new DictWord(11,0,821),new DictWord(12,0,110),new DictWord(12,0,153),new DictWord(18,
					0,41),new DictWord(150,0,19),new DictWord(134,10,481),new DictWord(132,0,796),new DictWord(6,0,445),new DictWord(9,0,909),new DictWord(136,11,254),new DictWord(10,0
					,776),new DictWord(13,0,345),new DictWord(142,0,425),new DictWord(4,10,84),new DictWord(7,10,1482),new DictWord(10,10,76),new DictWord(138,10,142),new DictWord(135,
					11,742),new DictWord(6,0,578),new DictWord(133,10,1015),new DictWord(6,0,1387),new DictWord(4,10,315),new DictWord(5,10,507),new DictWord(135,10,1370),new DictWord(
					4,0,438),new DictWord(133,0,555),new DictWord(136,0,766),new DictWord(133,11,248),new DictWord(134,10,1722),new DictWord(4,11,116),new DictWord(5,11,95)
				,new DictWord(5,11,445),new DictWord(7,11,1688),new DictWord(8,11,29),new DictWord(9,11,272),new DictWord(11,11,509),new DictWord(139,11,915),new DictWord(135,0,541
				),new DictWord(133,11,543),new DictWord(8,10,222),new DictWord(8,10,476),new DictWord(9,10,238),new DictWord(11,10,516),new DictWord(11,10,575),new DictWord(15,10,
					109),new DictWord(146,10,100),new DictWord(6,0,880),new DictWord(134,0,1191),new DictWord(5,11,181),new DictWord(136,11,41),new DictWord(134,0,1506),new DictWord(
					132,11,681),new DictWord(7,11,25),new DictWord(8,11,202),new DictWord(138,11,536),new DictWord(139,0,983),new DictWord(137,0,768),new DictWord(132,0,584
				),new DictWord(9,11,423),new DictWord(140,11,89),new DictWord(8,11,113),new DictWord(9,11,877),new DictWord(10,11,554),new DictWord(11,11,83),new DictWord(12,11,136
				),new DictWord(147,11,109),new DictWord(7,10,706),new DictWord(7,10,1058),new DictWord(138,10,538),new DictWord(133,11,976),new DictWord(4,11,206),new DictWord(135,
					11,746),new DictWord(136,11,526),new DictWord(140,0,737),new DictWord(11,10,92),new DictWord(11,10,196),new DictWord(11,10,409),new DictWord(11,10,450),
				new DictWord(11,10,666),new DictWord(11,10,777),new DictWord(12,10,262),new DictWord(13,10,385),new DictWord(13,10,393),new DictWord(15,10,115),new DictWord(16,10,
					45),new DictWord(145,10,82),new DictWord(4,0,226),new DictWord(4,0,326),new DictWord(7,0,1770),new DictWord(4,11,319),new DictWord(5,11,699),new DictWord(138,11,673
				),new DictWord(6,10,40),new DictWord(135,10,1781),new DictWord(5,0,426),new DictWord(8,0,30),new DictWord(9,0,2),new DictWord(11,0,549),new DictWord(147,0,122),new DictWord(6,0
					,1161),new DictWord(134,0,1329),new DictWord(138,10,97),new DictWord(6,10,423),new DictWord(7,10,665),new DictWord(135,10,1210),new DictWord(7,11,13),new DictWord(8
					,11,226),new DictWord(10,11,537),new DictWord(11,11,570),new DictWord(11,11,605),new DictWord(11,11,799),new DictWord(11,11,804),new DictWord(12,11,85),
				new DictWord(12,11,516),new DictWord(12,11,623),new DictWord(13,11,112),new DictWord(13,11,361),new DictWord(14,11,77),new DictWord(14,11,78),new DictWord(17,11,28)
				,new DictWord(147,11,110),new DictWord(132,11,769),new DictWord(132,11,551),new DictWord(132,11,728),new DictWord(147,0,117),new DictWord(9,11,57),new DictWord(9,11
					,459),new DictWord(10,11,425),new DictWord(11,11,119),new DictWord(12,11,184),new DictWord(12,11,371),new DictWord(13,11,358),new DictWord(145,11,51),new DictWord(5
					,11,188),new DictWord(5,11,814),new DictWord(8,11,10),new DictWord(9,11,421),new DictWord(9,11,729),new DictWord(10,11,609),new DictWord(139,11,689),new DictWord(
					134,11,624),new DictWord(135,11,298),new DictWord(135,0,462),new DictWord(4,0,345),new DictWord(139,10,624),new DictWord(136,10,574),new DictWord(4,0,
					385),new DictWord(7,0,265),new DictWord(135,0,587),new DictWord(6,0,808),new DictWord(132,11,528),new DictWord(133,0,398),new DictWord(132,10,354),new DictWord(4,0,
					347),new DictWord(5,0,423),new DictWord(5,0,996),new DictWord(135,0,1329),new DictWord(135,10,1558),new DictWord(7,0,1259),new DictWord(9,0,125),new DictWord(139,0,
					65),new DictWord(5,0,136),new DictWord(6,0,136),new DictWord(136,0,644),new DictWord(5,11,104),new DictWord(6,11,173),new DictWord(135,11,1631),new DictWord(135,0,
					469),new DictWord(133,10,830),new DictWord(4,0,278),new DictWord(5,0,465),new DictWord(135,0,1367),new DictWord(7,11,810),new DictWord(8,11,138),new DictWord(8,11,
					342),new DictWord(9,11,84),new DictWord(10,11,193),new DictWord(11,11,883),new DictWord(140,11,359),new DictWord(5,10,496),new DictWord(135,10,203),new DictWord(4,0
					,433),new DictWord(133,0,719),new DictWord(6,11,95),new DictWord(134,10,547),new DictWord(5,10,88),new DictWord(137,10,239),new DictWord(6,11,406),new DictWord(10,
					11,409),new DictWord(10,11,447),new DictWord(11,11,44),new DictWord(140,11,100),new DictWord(134,0,1423),new DictWord(7,10,650),new DictWord(135,10,1310
				),new DictWord(134,0,749),new DictWord(135,11,1243),new DictWord(135,0,1363),new DictWord(6,0,381),new DictWord(7,0,645),new DictWord(7,0,694),new DictWord(8,0,546)
				,new DictWord(7,10,1076),new DictWord(9,10,80),new DictWord(11,10,78),new DictWord(11,10,421),new DictWord(11,10,534),new DictWord(140,10,545),new DictWord(134,11,
					1636),new DictWord(135,11,1344),new DictWord(12,0,277),new DictWord(7,10,274),new DictWord(11,10,479),new DictWord(139,10,507),new DictWord(6,0,705),new DictWord(6,
					0,783),new DictWord(6,0,1275),new DictWord(6,0,1481),new DictWord(4,11,282),new DictWord(7,11,1034),new DictWord(11,11,398),new DictWord(11,11,634),new DictWord(12,
					11,1),new DictWord(12,11,79),new DictWord(12,11,544),new DictWord(14,11,237),new DictWord(17,11,10),new DictWord(146,11,20),new DictWord(134,0,453),new DictWord(4,0
					,555),new DictWord(8,0,536),new DictWord(10,0,288),new DictWord(11,0,1005),new DictWord(4,10,497),new DictWord(135,10,1584),new DictWord(5,11,118),new DictWord(5,11
					,499),new DictWord(6,11,476),new DictWord(7,11,600),new DictWord(7,11,888),new DictWord(135,11,1096),new DictWord(138,0,987),new DictWord(7,0,1107),new DictWord(7,
					10,261),new DictWord(7,10,1115),new DictWord(7,10,1354),new DictWord(7,10,1588),new DictWord(7,10,1705),new DictWord(7,10,1902),new DictWord(9,10,465),new DictWord(
					10,10,248),new DictWord(10,10,349),new DictWord(10,10,647),new DictWord(11,10,527),new DictWord(11,10,660),new DictWord(11,10,669),new DictWord(12,10,
					529),new DictWord(141,10,305),new DictWord(7,11,296),new DictWord(7,11,596),new DictWord(8,11,560),new DictWord(8,11,586),new DictWord(9,11,612),new DictWord(11,11,
					100),new DictWord(11,11,304),new DictWord(12,11,46),new DictWord(13,11,89),new DictWord(14,11,112),new DictWord(145,11,122),new DictWord(9,0,370),new DictWord(138,0
					,90),new DictWord(136,10,13),new DictWord(132,0,860),new DictWord(7,10,642),new DictWord(8,10,250),new DictWord(11,10,123),new DictWord(11,10,137),new DictWord(13,
					10,48),new DictWord(142,10,95),new DictWord(135,10,1429),new DictWord(137,11,321),new DictWord(132,0,257),new DictWord(135,0,2031),new DictWord(7,0,1768
				),new DictWord(7,11,1599),new DictWord(7,11,1723),new DictWord(8,11,79),new DictWord(8,11,106),new DictWord(8,11,190),new DictWord(8,11,302),new DictWord(8,11,383),
				new DictWord(9,11,119),new DictWord(9,11,233),new DictWord(9,11,298),new DictWord(9,11,419),new DictWord(9,11,471),new DictWord(10,11,181),new DictWord(10,11,406),new DictWord(
					11,11,57),new DictWord(11,11,85),new DictWord(11,11,120),new DictWord(11,11,177),new DictWord(11,11,296),new DictWord(11,11,382),new DictWord(11,11,454)
				,new DictWord(11,11,758),new DictWord(11,11,999),new DictWord(12,11,27),new DictWord(12,11,98),new DictWord(12,11,131),new DictWord(12,11,245),new DictWord(12,11,
					312),new DictWord(12,11,446),new DictWord(12,11,454),new DictWord(13,11,25),new DictWord(13,11,98),new DictWord(13,11,426),new DictWord(13,11,508),new DictWord(14,
					11,6),new DictWord(14,11,163),new DictWord(14,11,272),new DictWord(14,11,277),new DictWord(14,11,370),new DictWord(15,11,95),new DictWord(15,11,138),new DictWord(15
					,11,167),new DictWord(17,11,18),new DictWord(17,11,38),new DictWord(20,11,96),new DictWord(149,11,32),new DictWord(5,11,722),new DictWord(134,11,1759),new DictWord(
					145,11,16),new DictWord(6,0,1071),new DictWord(134,0,1561),new DictWord(10,10,545),new DictWord(140,10,301),new DictWord(6,0,83),new DictWord(6,0,1733),
				new DictWord(135,0,1389),new DictWord(4,0,835),new DictWord(135,0,1818),new DictWord(133,11,258),new DictWord(4,10,904),new DictWord(133,10,794),new DictWord(134,0,
					2006),new DictWord(5,11,30),new DictWord(7,11,495),new DictWord(8,11,134),new DictWord(9,11,788),new DictWord(140,11,438),new DictWord(135,11,2004),new DictWord(137
					,0,696),new DictWord(5,11,50),new DictWord(6,11,439),new DictWord(7,11,780),new DictWord(135,11,1040),new DictWord(7,11,772),new DictWord(7,11,1104),new DictWord(7,
					11,1647),new DictWord(11,11,269),new DictWord(11,11,539),new DictWord(11,11,607),new DictWord(11,11,627),new DictWord(11,11,706),new DictWord(11,11,975)
				,new DictWord(12,11,248),new DictWord(12,11,311),new DictWord(12,11,434),new DictWord(12,11,600),new DictWord(12,11,622),new DictWord(13,11,297),new DictWord(13,11,
					367),new DictWord(13,11,485),new DictWord(14,11,69),new DictWord(14,11,409),new DictWord(143,11,108),new DictWord(5,11,1),new DictWord(6,11,81),new DictWord(138,11,
					520),new DictWord(7,0,1718),new DictWord(9,0,95),new DictWord(9,0,274),new DictWord(10,0,279),new DictWord(10,0,317),new DictWord(10,0,420),new DictWord(11,0,303),new DictWord(
					11,0,808),new DictWord(12,0,134),new DictWord(12,0,367),new DictWord(13,0,149),new DictWord(13,0,347),new DictWord(14,0,349),new DictWord(14,0,406),new DictWord(18,
					0,22),new DictWord(18,0,89),new DictWord(18,0,122),new DictWord(147,0,47),new DictWord(5,11,482),new DictWord(8,11,98),new DictWord(9,11,172),new DictWord(10,11,222
				),new DictWord(10,11,700),new DictWord(10,11,822),new DictWord(11,11,302),new DictWord(11,11,778),new DictWord(12,11,50),new DictWord(12,11,127),new DictWord(12,11,
					396),new DictWord(13,11,62),new DictWord(13,11,328),new DictWord(14,11,122),new DictWord(147,11,72),new DictWord(7,10,386),new DictWord(138,10,713),new DictWord(6,
					10,7),new DictWord(6,10,35),new DictWord(7,10,147),new DictWord(7,10,1069),new DictWord(7,10,1568),new DictWord(7,10,1575),new DictWord(7,10,1917),new DictWord(8,10
					,43),new DictWord(8,10,208),new DictWord(9,10,128),new DictWord(9,10,866),new DictWord(10,10,20),new DictWord(11,10,981),new DictWord(147,10,33),new DictWord(133,0,
					26),new DictWord(132,0,550),new DictWord(5,11,2),new DictWord(7,11,1494),new DictWord(136,11,589),new DictWord(6,11,512),new DictWord(7,11,797),new DictWord(8,11,
					253),new DictWord(9,11,77),new DictWord(10,11,1),new DictWord(10,11,129),new DictWord(10,11,225),new DictWord(11,11,118),new DictWord(11,11,226),new DictWord(11,11,
					251),new DictWord(11,11,430),new DictWord(11,11,701),new DictWord(11,11,974),new DictWord(11,11,982),new DictWord(12,11,64),new DictWord(12,11,260),new DictWord(12,
					11,488),new DictWord(140,11,690),new DictWord(7,10,893),new DictWord(141,10,424),new DictWord(134,0,901),new DictWord(136,0,822),new DictWord(4,0,902),new DictWord(
					5,0,809),new DictWord(134,0,122),new DictWord(6,0,807),new DictWord(134,0,1366),new DictWord(7,0,262),new DictWord(5,11,748),new DictWord(134,11,553),new DictWord(
					133,0,620),new DictWord(4,0,34),new DictWord(5,0,574),new DictWord(7,0,279),new DictWord(7,0,1624),new DictWord(136,0,601),new DictWord(9,0,170),new DictWord(6,10,
					322),new DictWord(9,10,552),new DictWord(11,10,274),new DictWord(13,10,209),new DictWord(13,10,499),new DictWord(14,10,85),new DictWord(15,10,126),new DictWord(145,
					10,70),new DictWord(132,0,537),new DictWord(4,11,12),new DictWord(7,11,420),new DictWord(7,11,522),new DictWord(7,11,809),new DictWord(8,11,797),new DictWord(141,11
					,88),new DictWord(133,0,332),new DictWord(8,10,83),new DictWord(8,10,742),new DictWord(8,10,817),new DictWord(9,10,28),new DictWord(9,10,29),new DictWord(9,10,885),
				new DictWord(10,10,387),new DictWord(11,10,633),new DictWord(11,10,740),new DictWord(13,10,235),new DictWord(13,10,254),new DictWord(15,10,143),new DictWord(143,10,
					146),new DictWord(6,0,1909),new DictWord(9,0,964),new DictWord(12,0,822),new DictWord(12,0,854),new DictWord(12,0,865),new DictWord(12,0,910),new DictWord(12,0,938)
				,new DictWord(15,0,169),new DictWord(15,0,208),new DictWord(15,0,211),new DictWord(18,0,205),new DictWord(18,0,206),new DictWord(18,0,220),new DictWord(18,0,223),new DictWord(
					152,0,24),new DictWord(140,10,49),new DictWord(5,11,528),new DictWord(135,11,1580),new DictWord(6,0,261),new DictWord(8,0,182),new DictWord(139,0,943),new DictWord(
					134,0,1721),new DictWord(4,0,933),new DictWord(133,0,880),new DictWord(136,11,321),new DictWord(5,11,266),new DictWord(9,11,290),new DictWord(9,11,364),
				new DictWord(10,11,293),new DictWord(11,11,606),new DictWord(142,11,45),new DictWord(6,0,1609),new DictWord(4,11,50),new DictWord(6,11,510),new DictWord(6,11,594),new DictWord(
					9,11,121),new DictWord(10,11,49),new DictWord(10,11,412),new DictWord(139,11,834),new DictWord(7,0,895),new DictWord(136,11,748),new DictWord(132,11,466
				),new DictWord(4,10,110),new DictWord(10,10,415),new DictWord(10,10,597),new DictWord(142,10,206),new DictWord(133,0,812),new DictWord(135,11,281),new DictWord(6,0,
					1890),new DictWord(6,0,1902),new DictWord(6,0,1916),new DictWord(9,0,929),new DictWord(9,0,942),new DictWord(9,0,975),new DictWord(9,0,984),new DictWord(9,0,986),new DictWord(9
					,0,1011),new DictWord(9,0,1019),new DictWord(12,0,804),new DictWord(12,0,851),new DictWord(12,0,867),new DictWord(12,0,916),new DictWord(12,0,923),new DictWord(15,0
					,194),new DictWord(15,0,204),new DictWord(15,0,210),new DictWord(15,0,222),new DictWord(15,0,223),new DictWord(15,0,229),new DictWord(15,0,250),new DictWord(18,0,
					179),new DictWord(18,0,186),new DictWord(18,0,192),new DictWord(7,10,205),new DictWord(135,10,2000),new DictWord(132,11,667),new DictWord(135,0,778),new DictWord(4,
					0,137),new DictWord(7,0,1178),new DictWord(135,0,1520),new DictWord(134,0,1314),new DictWord(4,11,242),new DictWord(134,11,333),new DictWord(6,0,1661),new DictWord(
					7,0,1975),new DictWord(7,0,2009),new DictWord(135,0,2011),new DictWord(134,0,1591),new DictWord(4,10,283),new DictWord(135,10,1194),new DictWord(11,0,
					820),new DictWord(150,0,51),new DictWord(4,11,39),new DictWord(5,11,36),new DictWord(7,11,1843),new DictWord(8,11,407),new DictWord(11,11,144),new DictWord(140,11,
					523),new DictWord(134,10,1720),new DictWord(4,11,510),new DictWord(7,11,29),new DictWord(7,11,66),new DictWord(7,11,1980),new DictWord(10,11,487),new DictWord(10,11
					,809),new DictWord(146,11,9),new DictWord(5,0,89),new DictWord(7,0,1915),new DictWord(9,0,185),new DictWord(9,0,235),new DictWord(10,0,64),new DictWord(10,0,270),new DictWord(
					10,0,403),new DictWord(10,0,469),new DictWord(10,0,529),new DictWord(10,0,590),new DictWord(11,0,140),new DictWord(11,0,860),new DictWord(13,0,1),new DictWord(13,0,
					422),new DictWord(14,0,341),new DictWord(14,0,364),new DictWord(17,0,93),new DictWord(18,0,113),new DictWord(19,0,97),new DictWord(147,0,113),new DictWord(133,0,695
				),new DictWord(6,0,987),new DictWord(134,0,1160),new DictWord(5,0,6),new DictWord(6,0,183),new DictWord(7,0,680),new DictWord(7,0,978),new DictWord(7,0,1013),new DictWord(7,0,
					1055),new DictWord(12,0,230),new DictWord(13,0,172),new DictWord(146,0,29),new DictWord(134,11,570),new DictWord(132,11,787),new DictWord(134,11,518),new DictWord(6
					,0,29),new DictWord(139,0,63),new DictWord(132,11,516),new DictWord(136,11,821),new DictWord(132,0,311),new DictWord(134,0,1740),new DictWord(7,0,170),new DictWord(
					8,0,90),new DictWord(8,0,177),new DictWord(8,0,415),new DictWord(11,0,714),new DictWord(14,0,281),new DictWord(136,10,735),new DictWord(134,0,1961),new DictWord(135
					,11,1405),new DictWord(4,11,10),new DictWord(7,11,917),new DictWord(139,11,786),new DictWord(5,10,132),new DictWord(9,10,486),new DictWord(9,10,715),new DictWord(10
					,10,458),new DictWord(11,10,373),new DictWord(11,10,668),new DictWord(11,10,795),new DictWord(11,10,897),new DictWord(12,10,272),new DictWord(12,10,424)
				,new DictWord(12,10,539),new DictWord(12,10,558),new DictWord(14,10,245),new DictWord(14,10,263),new DictWord(14,10,264),new DictWord(14,10,393),new DictWord(142,10
					,403),new DictWord(11,0,91),new DictWord(13,0,129),new DictWord(15,0,101),new DictWord(145,0,125),new DictWord(135,0,1132),new DictWord(4,0,494),new DictWord(6,0,74
				),new DictWord(7,0,44),new DictWord(7,0,407),new DictWord(12,0,17),new DictWord(15,0,5),new DictWord(148,0,11),new DictWord(133,10,379),new DictWord(5,0,270),new DictWord(5,11,
					684),new DictWord(6,10,89),new DictWord(6,10,400),new DictWord(7,10,1569),new DictWord(7,10,1623),new DictWord(7,10,1850),new DictWord(8,10,218),new DictWord(8,10,
					422),new DictWord(9,10,570),new DictWord(138,10,626),new DictWord(4,0,276),new DictWord(133,0,296),new DictWord(6,0,1523),new DictWord(134,11,27),new DictWord(6,10,
					387),new DictWord(7,10,882),new DictWord(141,10,111),new DictWord(6,10,224),new DictWord(7,10,877),new DictWord(137,10,647),new DictWord(135,10,790),new DictWord(4,
					0,7),new DictWord(5,0,90),new DictWord(5,0,158),new DictWord(6,0,542),new DictWord(7,0,221),new DictWord(7,0,1574),new DictWord(9,0,490),new DictWord(10,0,540),new DictWord(11,
					0,443),new DictWord(139,0,757),new DictWord(7,0,588),new DictWord(9,0,175),new DictWord(138,0,530),new DictWord(135,10,394),new DictWord(142,11,23),new DictWord(134
					,0,786),new DictWord(135,0,580),new DictWord(7,0,88),new DictWord(136,0,627),new DictWord(5,0,872),new DictWord(6,0,57),new DictWord(7,0,471),new DictWord(9,0,447),
				new DictWord(137,0,454),new DictWord(6,11,342),new DictWord(6,11,496),new DictWord(8,11,275),new DictWord(137,11,206),new DictWord(4,11,909),new DictWord(133,11,940
				),new DictWord(6,0,735),new DictWord(132,11,891),new DictWord(8,0,845),new DictWord(8,0,916),new DictWord(135,10,1409),new DictWord(5,0,31),new DictWord(134,0,614),
				new DictWord(11,0,458),new DictWord(12,0,15),new DictWord(140,0,432),new DictWord(8,0,330),new DictWord(140,0,477),new DictWord(4,0,530),new DictWord(5,0,521),new DictWord(7,0,
					1200),new DictWord(10,0,460),new DictWord(132,11,687),new DictWord(6,0,424),new DictWord(135,0,1866),new DictWord(9,0,569),new DictWord(12,0,12),new DictWord(12,0,
					81),new DictWord(12,0,319),new DictWord(13,0,69),new DictWord(14,0,259),new DictWord(16,0,87),new DictWord(17,0,1),new DictWord(17,0,21),new DictWord(17,0,24),new DictWord(18,0
					,15),new DictWord(18,0,56),new DictWord(18,0,59),new DictWord(18,0,127),new DictWord(18,0,154),new DictWord(19,0,19),new DictWord(148,0,31),new DictWord(7,0,1302),new DictWord(
					136,10,38),new DictWord(134,11,253),new DictWord(5,10,261),new DictWord(7,10,78),new DictWord(7,10,199),new DictWord(8,10,815),new DictWord(9,10,126),new DictWord(
					138,10,342),new DictWord(5,0,595),new DictWord(135,0,1863),new DictWord(6,11,41),new DictWord(141,11,160),new DictWord(5,0,13),new DictWord(134,0,142),new DictWord(
					6,0,97),new DictWord(7,0,116),new DictWord(8,0,322),new DictWord(8,0,755),new DictWord(9,0,548),new DictWord(10,0,714),new DictWord(11,0,884),new DictWord(13,0,324)
				,new DictWord(7,11,1304),new DictWord(138,11,477),new DictWord(132,10,628),new DictWord(134,11,1718),new DictWord(7,10,266),new DictWord(136,10,804),new DictWord(
					135,10,208),new DictWord(7,0,1021),new DictWord(6,10,79),new DictWord(135,10,1519),new DictWord(7,0,1472),new DictWord(135,0,1554),new DictWord(6,11,362
				),new DictWord(146,11,51),new DictWord(7,0,1071),new DictWord(7,0,1541),new DictWord(7,0,1767),new DictWord(7,0,1806),new DictWord(11,0,162),new DictWord(11,0,242),
				new DictWord(11,0,452),new DictWord(12,0,605),new DictWord(15,0,26),new DictWord(144,0,44),new DictWord(136,10,741),new DictWord(133,11,115),new DictWord(145,0,115)
				,new DictWord(134,10,376),new DictWord(6,0,1406),new DictWord(134,0,1543),new DictWord(5,11,193),new DictWord(12,11,178),new DictWord(13,11,130),new DictWord(145,11
					,84),new DictWord(135,0,1111),new DictWord(8,0,1),new DictWord(9,0,650),new DictWord(10,0,326),new DictWord(5,11,705),new DictWord(137,11,606),new DictWord(5,0,488)
				,new DictWord(6,0,527),new DictWord(7,0,489),new DictWord(7,0,1636),new DictWord(8,0,121),new DictWord(8,0,144),new DictWord(8,0,359),new DictWord(9,0,193),new DictWord(9,0,241
				),new DictWord(9,0,336),new DictWord(9,0,882),new DictWord(11,0,266),new DictWord(11,0,372),new DictWord(11,0,944),new DictWord(12,0,401),new DictWord(140,0,641),new DictWord(
					135,11,174),new DictWord(6,0,267),new DictWord(7,10,244),new DictWord(7,10,632),new DictWord(7,10,1609),new DictWord(8,10,178),new DictWord(8,10,638),new DictWord(
					141,10,58),new DictWord(134,0,1983),new DictWord(134,0,1155),new DictWord(134,0,1575),new DictWord(134,0,1438),new DictWord(9,0,31),new DictWord(10,0,
					244),new DictWord(10,0,699),new DictWord(12,0,149),new DictWord(141,0,497),new DictWord(133,0,377),new DictWord(4,11,122),new DictWord(5,11,796),new DictWord(5,11,
					952),new DictWord(6,11,1660),new DictWord(6,11,1671),new DictWord(8,11,567),new DictWord(9,11,687),new DictWord(9,11,742),new DictWord(10,11,686),new DictWord(11,11
					,356),new DictWord(11,11,682),new DictWord(140,11,281),new DictWord(145,0,101),new DictWord(11,11,0),new DictWord(144,11,78),new DictWord(5,11,179),new DictWord(5,
					10,791),new DictWord(7,11,1095),new DictWord(135,11,1213),new DictWord(8,11,372),new DictWord(9,11,122),new DictWord(138,11,175),new DictWord(7,10,686),
				new DictWord(8,10,33),new DictWord(8,10,238),new DictWord(10,10,616),new DictWord(11,10,467),new DictWord(11,10,881),new DictWord(13,10,217),new DictWord(13,10,253)
				,new DictWord(142,10,268),new DictWord(9,0,476),new DictWord(4,11,66),new DictWord(7,11,722),new DictWord(135,11,904),new DictWord(7,11,352),new DictWord(137,11,684
				),new DictWord(135,0,2023),new DictWord(135,0,1836),new DictWord(132,10,447),new DictWord(5,0,843),new DictWord(144,0,35),new DictWord(137,11,779),new DictWord(141,
					11,35),new DictWord(4,10,128),new DictWord(5,10,415),new DictWord(6,10,462),new DictWord(7,10,294),new DictWord(7,10,578),new DictWord(10,10,710),new DictWord(139,
					10,86),new DictWord(132,0,554),new DictWord(133,0,536),new DictWord(136,10,587),new DictWord(5,0,207),new DictWord(9,0,79),new DictWord(11,0,625),new DictWord(145,0
					,7),new DictWord(7,0,1371),new DictWord(6,10,427),new DictWord(138,10,692),new DictWord(4,0,424),new DictWord(4,10,195),new DictWord(135,10,802),new DictWord(8,0,
					785),new DictWord(133,11,564),new DictWord(135,0,336),new DictWord(4,0,896),new DictWord(6,0,1777),new DictWord(134,11,556),new DictWord(137,11,103),new DictWord(
					134,10,1683),new DictWord(7,11,544),new DictWord(8,11,719),new DictWord(138,11,61),new DictWord(138,10,472),new DictWord(4,11,5),new DictWord(5,11,498),
				new DictWord(136,11,637),new DictWord(7,0,750),new DictWord(9,0,223),new DictWord(11,0,27),new DictWord(11,0,466),new DictWord(12,0,624),new DictWord(14,0,265),new DictWord(146
					,0,61),new DictWord(12,0,238),new DictWord(18,0,155),new DictWord(12,11,238),new DictWord(146,11,155),new DictWord(151,10,28),new DictWord(133,11,927),new DictWord(
					12,0,383),new DictWord(5,10,3),new DictWord(8,10,578),new DictWord(9,10,118),new DictWord(10,10,705),new DictWord(141,10,279),new DictWord(4,11,893),new DictWord(5,
					11,780),new DictWord(133,11,893),new DictWord(4,0,603),new DictWord(133,0,661),new DictWord(4,0,11),new DictWord(6,0,128),new DictWord(7,0,231),new DictWord(7,0,
					1533),new DictWord(10,0,725),new DictWord(5,10,229),new DictWord(5,11,238),new DictWord(135,11,1350),new DictWord(8,10,102),new DictWord(10,10,578),new DictWord(10,
					10,672),new DictWord(12,10,496),new DictWord(13,10,408),new DictWord(14,10,121),new DictWord(145,10,106),new DictWord(132,0,476),new DictWord(134,0,1552
				),new DictWord(134,11,1729),new DictWord(8,10,115),new DictWord(8,10,350),new DictWord(9,10,489),new DictWord(10,10,128),new DictWord(11,10,306),new DictWord(12,10,
					373),new DictWord(14,10,30),new DictWord(17,10,79),new DictWord(19,10,80),new DictWord(150,10,55),new DictWord(135,0,1807),new DictWord(4,0,680),new DictWord(4,11,
					60),new DictWord(7,11,760),new DictWord(7,11,1800),new DictWord(8,11,314),new DictWord(9,11,700),new DictWord(139,11,487),new DictWord(4,10,230),new DictWord(5,10,
					702),new DictWord(148,11,94),new DictWord(132,11,228),new DictWord(139,0,435),new DictWord(9,0,20),new DictWord(10,0,324),new DictWord(10,0,807),new DictWord(139,0,
					488),new DictWord(6,10,1728),new DictWord(136,11,419),new DictWord(4,10,484),new DictWord(18,10,26),new DictWord(19,10,42),new DictWord(20,10,43),new DictWord(21,10
					,0),new DictWord(23,10,27),new DictWord(152,10,14),new DictWord(135,0,1431),new DictWord(133,11,828),new DictWord(5,0,112),new DictWord(6,0,103),new DictWord(6,0,
					150),new DictWord(7,0,1303),new DictWord(9,0,292),new DictWord(10,0,481),new DictWord(20,0,13),new DictWord(7,11,176),new DictWord(7,11,178),new DictWord(7,11,1110)
				,new DictWord(10,11,481),new DictWord(148,11,13),new DictWord(138,0,356),new DictWord(4,11,51),new DictWord(5,11,39),new DictWord(6,11,4),new DictWord(7,11,591),new DictWord(7,
					11,849),new DictWord(7,11,951),new DictWord(7,11,1129),new DictWord(7,11,1613),new DictWord(7,11,1760),new DictWord(7,11,1988),new DictWord(9,11,434),new DictWord(
					10,11,754),new DictWord(11,11,25),new DictWord(11,11,37),new DictWord(139,11,414),new DictWord(6,0,1963),new DictWord(134,0,2000),new DictWord(132,10,
					633),new DictWord(6,0,1244),new DictWord(133,11,902),new DictWord(135,11,928),new DictWord(140,0,18),new DictWord(138,0,204),new DictWord(135,11,1173),new DictWord(
					134,0,867),new DictWord(4,0,708),new DictWord(8,0,15),new DictWord(9,0,50),new DictWord(9,0,386),new DictWord(11,0,18),new DictWord(11,0,529),new DictWord(140,0,228
				),new DictWord(134,11,270),new DictWord(4,0,563),new DictWord(7,0,109),new DictWord(7,0,592),new DictWord(7,0,637),new DictWord(7,0,770),new DictWord(8,0,463),new DictWord(9,0,
					60),new DictWord(9,0,335),new DictWord(9,0,904),new DictWord(10,0,73),new DictWord(11,0,434),new DictWord(12,0,585),new DictWord(13,0,331),new DictWord(18,0,110),new DictWord(
					148,0,60),new DictWord(132,0,502),new DictWord(14,11,359),new DictWord(19,11,52),new DictWord(148,11,47),new DictWord(6,11,377),new DictWord(7,11,1025),
				new DictWord(9,11,613),new DictWord(145,11,104),new DictWord(6,0,347),new DictWord(10,0,161),new DictWord(5,10,70),new DictWord(5,10,622),new DictWord(6,10,334),new DictWord(7,
					10,1032),new DictWord(9,10,171),new DictWord(11,10,26),new DictWord(11,10,213),new DictWord(11,10,637),new DictWord(11,10,707),new DictWord(12,10,202),new DictWord(
					12,10,380),new DictWord(13,10,226),new DictWord(13,10,355),new DictWord(14,10,222),new DictWord(145,10,42),new DictWord(132,11,416),new DictWord(4,0,33)
				,new DictWord(5,0,102),new DictWord(6,0,284),new DictWord(7,0,1079),new DictWord(7,0,1423),new DictWord(7,0,1702),new DictWord(8,0,470),new DictWord(9,0,554),new DictWord(9,0,
					723),new DictWord(11,0,333),new DictWord(142,11,372),new DictWord(5,11,152),new DictWord(5,11,197),new DictWord(7,11,340),new DictWord(7,11,867),new DictWord(10,11,
					548),new DictWord(10,11,581),new DictWord(11,11,6),new DictWord(12,11,3),new DictWord(12,11,19),new DictWord(14,11,110),new DictWord(142,11,289),new DictWord(7,0,
					246),new DictWord(135,0,840),new DictWord(6,0,10),new DictWord(8,0,571),new DictWord(9,0,739),new DictWord(143,0,91),new DictWord(6,0,465),new DictWord(7,0,1465),new DictWord(4
					,10,23),new DictWord(4,10,141),new DictWord(5,10,313),new DictWord(5,10,1014),new DictWord(6,10,50),new DictWord(7,10,142),new DictWord(7,10,559),new DictWord(8,10,
					640),new DictWord(9,10,460),new DictWord(9,10,783),new DictWord(11,10,741),new DictWord(12,10,183),new DictWord(141,10,488),new DictWord(133,0,626),new DictWord(136
					,0,614),new DictWord(138,0,237),new DictWord(7,11,34),new DictWord(7,11,190),new DictWord(8,11,28),new DictWord(8,11,141),new DictWord(8,11,444),new DictWord(8,11,
					811),new DictWord(9,11,468),new DictWord(11,11,334),new DictWord(12,11,24),new DictWord(12,11,386),new DictWord(140,11,576),new DictWord(133,11,757),new DictWord(5,
					0,18),new DictWord(6,0,526),new DictWord(13,0,24),new DictWord(13,0,110),new DictWord(19,0,5),new DictWord(147,0,44),new DictWord(6,0,506),new DictWord(134,11,506),
				new DictWord(135,11,1553),new DictWord(4,0,309),new DictWord(5,0,462),new DictWord(7,0,970),new DictWord(7,0,1097),new DictWord(22,0,30),new DictWord(22,0,33),new DictWord(7,11
					,1385),new DictWord(11,11,582),new DictWord(11,11,650),new DictWord(11,11,901),new DictWord(11,11,949),new DictWord(12,11,232),new DictWord(12,11,236),new DictWord(
					13,11,413),new DictWord(13,11,501),new DictWord(146,11,116),new DictWord(9,0,140),new DictWord(5,10,222),new DictWord(138,10,534),new DictWord(6,0,1056)
				,new DictWord(137,10,906),new DictWord(134,0,1704),new DictWord(138,10,503),new DictWord(134,0,1036),new DictWord(5,10,154),new DictWord(7,10,1491),new DictWord(10,
					10,379),new DictWord(138,10,485),new DictWord(4,11,383),new DictWord(133,10,716),new DictWord(134,0,1315),new DictWord(5,0,86),new DictWord(7,0,743),new DictWord(9,
					0,85),new DictWord(10,0,281),new DictWord(10,0,432),new DictWord(11,0,825),new DictWord(12,0,251),new DictWord(13,0,118),new DictWord(142,0,378),new DictWord(8,0,
					264),new DictWord(4,10,91),new DictWord(5,10,388),new DictWord(5,10,845),new DictWord(6,10,206),new DictWord(6,10,252),new DictWord(6,10,365),new DictWord(7,10,136)
				,new DictWord(7,10,531),new DictWord(136,10,621),new DictWord(5,0,524),new DictWord(133,0,744),new DictWord(5,11,277),new DictWord(141,11,247),new DictWord(132,11,
					435),new DictWord(10,0,107),new DictWord(140,0,436),new DictWord(132,0,927),new DictWord(10,0,123),new DictWord(12,0,670),new DictWord(146,0,94),new DictWord(7,0,
					1149),new DictWord(9,0,156),new DictWord(138,0,957),new DictWord(5,11,265),new DictWord(6,11,212),new DictWord(135,11,28),new DictWord(133,0,778),new DictWord(133,0
					,502),new DictWord(8,0,196),new DictWord(10,0,283),new DictWord(139,0,406),new DictWord(135,10,576),new DictWord(136,11,535),new DictWord(134,0,1312),new DictWord(5
					,10,771),new DictWord(5,10,863),new DictWord(5,10,898),new DictWord(6,10,1632),new DictWord(6,10,1644),new DictWord(134,10,1780),new DictWord(5,0,855),new DictWord(
					5,10,331),new DictWord(135,11,1487),new DictWord(132,11,702),new DictWord(5,11,808),new DictWord(135,11,2045),new DictWord(7,0,1400),new DictWord(9,0,
					446),new DictWord(138,0,45),new DictWord(140,10,632),new DictWord(132,0,1003),new DictWord(5,11,166),new DictWord(8,11,739),new DictWord(140,11,511),new DictWord(5,
					10,107),new DictWord(7,10,201),new DictWord(136,10,518),new DictWord(6,10,446),new DictWord(135,10,1817),new DictWord(134,0,1532),new DictWord(134,0,
					1097),new DictWord(4,11,119),new DictWord(5,11,170),new DictWord(5,11,447),new DictWord(7,11,1708),new DictWord(7,11,1889),new DictWord(9,11,357),new DictWord(9,11,
					719),new DictWord(12,11,486),new DictWord(140,11,596),new DictWord(9,10,851),new DictWord(141,10,510),new DictWord(7,0,612),new DictWord(8,0,545),new DictWord(8,0,
					568),new DictWord(8,0,642),new DictWord(9,0,717),new DictWord(10,0,541),new DictWord(10,0,763),new DictWord(11,0,449),new DictWord(12,0,489),new DictWord(13,0,153),
				new DictWord(13,0,296),new DictWord(14,0,138),new DictWord(14,0,392),new DictWord(15,0,50),new DictWord(16,0,6),new DictWord(16,0,12),new DictWord(20,0,9),new DictWord(132,10,
					504),new DictWord(4,11,450),new DictWord(135,11,1158),new DictWord(11,0,54),new DictWord(13,0,173),new DictWord(13,0,294),new DictWord(5,10,883),new DictWord(5,10,
					975),new DictWord(8,10,392),new DictWord(148,10,7),new DictWord(13,0,455),new DictWord(15,0,99),new DictWord(15,0,129),new DictWord(144,0,68),new DictWord(135,0,172
				),new DictWord(132,11,754),new DictWord(5,10,922),new DictWord(134,10,1707),new DictWord(134,0,1029),new DictWord(17,11,39),new DictWord(148,11,36),new DictWord(4,0
					,568),new DictWord(5,10,993),new DictWord(7,10,515),new DictWord(137,10,91),new DictWord(132,0,732),new DictWord(10,0,617),new DictWord(138,11,617),new DictWord(134
					,0,974),new DictWord(7,0,989),new DictWord(10,0,377),new DictWord(12,0,363),new DictWord(13,0,68),new DictWord(13,0,94),new DictWord(14,0,108),new DictWord(142,0,
					306),new DictWord(136,0,733),new DictWord(132,0,428),new DictWord(7,0,1789),new DictWord(135,11,1062),new DictWord(7,0,2015),new DictWord(140,0,665),new DictWord(
					135,10,1433),new DictWord(5,0,287),new DictWord(7,10,921),new DictWord(8,10,580),new DictWord(8,10,593),new DictWord(8,10,630),new DictWord(138,10,28),new DictWord(
					138,0,806),new DictWord(4,10,911),new DictWord(5,10,867),new DictWord(5,10,1013),new DictWord(7,10,2034),new DictWord(8,10,798),new DictWord(136,10,813)
				,new DictWord(134,0,1539),new DictWord(8,11,523),new DictWord(150,11,34),new DictWord(135,11,740),new DictWord(7,11,238),new DictWord(7,11,2033),new DictWord(8,11,
					120),new DictWord(8,11,188),new DictWord(8,11,659),new DictWord(9,11,598),new DictWord(10,11,466),new DictWord(12,11,342),new DictWord(12,11,588),new DictWord(13,11
					,503),new DictWord(14,11,246),new DictWord(143,11,92),new DictWord(7,0,1563),new DictWord(141,0,182),new DictWord(5,10,135),new DictWord(6,10,519),new DictWord(7,10
					,1722),new DictWord(10,10,271),new DictWord(11,10,261),new DictWord(145,10,54),new DictWord(14,10,338),new DictWord(148,10,81),new DictWord(7,0,484),new DictWord(4,
					10,300),new DictWord(133,10,436),new DictWord(145,11,114),new DictWord(6,0,1623),new DictWord(134,0,1681),new DictWord(133,11,640),new DictWord(4,11,201
				),new DictWord(7,11,1744),new DictWord(8,11,602),new DictWord(11,11,247),new DictWord(11,11,826),new DictWord(145,11,65),new DictWord(8,11,164),new DictWord(146,11,
					62),new DictWord(6,0,1833),new DictWord(6,0,1861),new DictWord(136,0,878),new DictWord(134,0,1569),new DictWord(8,10,357),new DictWord(10,10,745),new DictWord(14,10
					,426),new DictWord(17,10,94),new DictWord(147,10,57),new DictWord(12,0,93),new DictWord(12,0,501),new DictWord(13,0,362),new DictWord(14,0,151),new DictWord(15,0,40
				),new DictWord(15,0,59),new DictWord(16,0,46),new DictWord(17,0,25),new DictWord(18,0,14),new DictWord(18,0,134),new DictWord(19,0,25),new DictWord(19,0,69),new DictWord(20,0,
					16),new DictWord(20,0,19),new DictWord(20,0,66),new DictWord(21,0,23),new DictWord(21,0,25),new DictWord(150,0,42),new DictWord(6,0,1748),new DictWord(8,0,715),new DictWord(9,0
					,802),new DictWord(10,0,46),new DictWord(10,0,819),new DictWord(13,0,308),new DictWord(14,0,351),new DictWord(14,0,363),new DictWord(146,0,67),new DictWord(132,0,
					994),new DictWord(4,0,63),new DictWord(133,0,347),new DictWord(132,0,591),new DictWord(133,0,749),new DictWord(7,11,1577),new DictWord(10,11,304),new DictWord(10,11
					,549),new DictWord(11,11,424),new DictWord(12,11,365),new DictWord(13,11,220),new DictWord(13,11,240),new DictWord(142,11,33),new DictWord(133,0,366),new DictWord(7
					,0,557),new DictWord(12,0,547),new DictWord(14,0,86),new DictWord(133,10,387),new DictWord(135,0,1747),new DictWord(132,11,907),new DictWord(5,11,100),new DictWord(
					10,11,329),new DictWord(12,11,416),new DictWord(149,11,29),new DictWord(4,10,6),new DictWord(5,10,708),new DictWord(136,10,75),new DictWord(7,10,1351),new DictWord(
					9,10,581),new DictWord(10,10,639),new DictWord(11,10,453),new DictWord(140,10,584),new DictWord(7,0,89),new DictWord(132,10,303),new DictWord(138,10,772
				),new DictWord(132,11,176),new DictWord(5,11,636),new DictWord(5,11,998),new DictWord(8,11,26),new DictWord(137,11,358),new DictWord(7,11,9),new DictWord(7,11,1508)
				,new DictWord(9,11,317),new DictWord(10,11,210),new DictWord(10,11,292),new DictWord(10,11,533),new DictWord(11,11,555),new DictWord(12,11,526),new DictWord(12,11,
					607),new DictWord(13,11,263),new DictWord(13,11,459),new DictWord(142,11,271),new DictWord(134,0,1463),new DictWord(6,0,772),new DictWord(6,0,1137),new DictWord(139
					,11,595),new DictWord(7,0,977),new DictWord(139,11,66),new DictWord(138,0,893),new DictWord(20,0,48),new DictWord(148,11,48),new DictWord(5,0,824),new DictWord(133,
					0,941),new DictWord(134,11,295),new DictWord(7,0,1543),new DictWord(7,0,1785),new DictWord(10,0,690),new DictWord(4,10,106),new DictWord(139,10,717),new DictWord(7,
					0,440),new DictWord(8,0,230),new DictWord(139,0,106),new DictWord(5,10,890),new DictWord(133,10,988),new DictWord(6,10,626),new DictWord(142,10,431),new DictWord(10
					,11,127),new DictWord(141,11,27),new DictWord(17,0,32),new DictWord(10,10,706),new DictWord(150,10,44),new DictWord(132,0,216),new DictWord(137,0,332),new DictWord(
					4,10,698),new DictWord(136,11,119),new DictWord(139,11,267),new DictWord(138,10,17),new DictWord(11,11,526),new DictWord(11,11,939),new DictWord(141,11,
					290),new DictWord(7,11,1167),new DictWord(11,11,934),new DictWord(13,11,391),new DictWord(145,11,76),new DictWord(139,11,39),new DictWord(134,10,84),new DictWord(4,
					0,914),new DictWord(5,0,800),new DictWord(133,0,852),new DictWord(10,0,416),new DictWord(141,0,115),new DictWord(7,0,564),new DictWord(142,0,168),new DictWord(4,0,
					918),new DictWord(133,0,876),new DictWord(134,0,1764),new DictWord(152,0,3),new DictWord(4,0,92),new DictWord(5,0,274),new DictWord(7,11,126),new DictWord(136,11,84
				),new DictWord(140,10,498),new DictWord(136,11,790),new DictWord(8,0,501),new DictWord(5,10,986),new DictWord(6,10,130),new DictWord(7,10,1582),new DictWord(8,10,
					458),new DictWord(10,10,101),new DictWord(10,10,318),new DictWord(138,10,823),new DictWord(6,11,64),new DictWord(12,11,377),new DictWord(141,11,309),new DictWord(5,
					0,743),new DictWord(138,0,851),new DictWord(4,0,49),new DictWord(7,0,280),new DictWord(135,0,1633),new DictWord(134,0,879),new DictWord(136,0,47),new DictWord(7,10,
					1644),new DictWord(137,10,129),new DictWord(132,0,865),new DictWord(134,0,1202),new DictWord(9,11,34),new DictWord(139,11,484),new DictWord(135,10,997),
				new DictWord(5,0,272),new DictWord(5,0,908),new DictWord(5,0,942),new DictWord(8,0,197),new DictWord(9,0,47),new DictWord(11,0,538),new DictWord(139,0,742),new DictWord(6,11,
					1700),new DictWord(7,11,26),new DictWord(7,11,293),new DictWord(7,11,382),new DictWord(7,11,1026),new DictWord(7,11,1087),new DictWord(7,11,2027),new DictWord(8,11,
					24),new DictWord(8,11,114),new DictWord(8,11,252),new DictWord(8,11,727),new DictWord(8,11,729),new DictWord(9,11,30),new DictWord(9,11,199),new DictWord(9,11,231),
				new DictWord(9,11,251),new DictWord(9,11,334),new DictWord(9,11,361),new DictWord(9,11,488),new DictWord(9,11,712),new DictWord(10,11,55),new DictWord(10,11,60),new DictWord(10
					,11,232),new DictWord(10,11,332),new DictWord(10,11,384),new DictWord(10,11,396),new DictWord(10,11,504),new DictWord(10,11,542),new DictWord(10,11,652)
				,new DictWord(11,11,20),new DictWord(11,11,48),new DictWord(11,11,207),new DictWord(11,11,291),new DictWord(11,11,298),new DictWord(11,11,342),new DictWord(11,11,
					365),new DictWord(11,11,394),new DictWord(11,11,620),new DictWord(11,11,705),new DictWord(11,11,1017),new DictWord(12,11,123),new DictWord(12,11,340),new DictWord(
					12,11,406),new DictWord(12,11,643),new DictWord(13,11,61),new DictWord(13,11,269),new DictWord(13,11,311),new DictWord(13,11,319),new DictWord(13,11,486
				),new DictWord(14,11,234),new DictWord(15,11,62),new DictWord(15,11,85),new DictWord(16,11,71),new DictWord(18,11,119),new DictWord(148,11,105),new DictWord(6,0,
					1455),new DictWord(150,11,37),new DictWord(135,10,1927),new DictWord(135,0,1911),new DictWord(137,0,891),new DictWord(7,10,1756),new DictWord(137,10,98)
				,new DictWord(7,10,1046),new DictWord(139,10,160),new DictWord(132,0,761),new DictWord(6,11,379),new DictWord(7,11,270),new DictWord(7,11,1116),new DictWord(8,11,
					176),new DictWord(8,11,183),new DictWord(9,11,432),new DictWord(9,11,661),new DictWord(12,11,247),new DictWord(12,11,617),new DictWord(146,11,125),new DictWord(6,10
					,45),new DictWord(7,10,433),new DictWord(8,10,129),new DictWord(9,10,21),new DictWord(10,10,392),new DictWord(11,10,79),new DictWord(12,10,499),new DictWord(13,10,
					199),new DictWord(141,10,451),new DictWord(4,0,407),new DictWord(5,11,792),new DictWord(133,11,900),new DictWord(132,0,560),new DictWord(135,0,183),new DictWord(13,
					0,490),new DictWord(7,10,558),new DictWord(136,10,353),new DictWord(4,0,475),new DictWord(6,0,731),new DictWord(11,0,35),new DictWord(13,0,71),new DictWord(13,0,177
				),new DictWord(14,0,422),new DictWord(133,10,785),new DictWord(8,10,81),new DictWord(9,10,189),new DictWord(9,10,201),new DictWord(11,10,478),new DictWord(11,10,712
				),new DictWord(141,10,338),new DictWord(4,0,418),new DictWord(4,0,819),new DictWord(133,10,353),new DictWord(151,10,26),new DictWord(4,11,901),new DictWord(133,11,
					776),new DictWord(132,0,575),new DictWord(7,0,818),new DictWord(16,0,92),new DictWord(17,0,14),new DictWord(17,0,45),new DictWord(18,0,75),new DictWord(148,0,18),new DictWord(6
					,0,222),new DictWord(7,0,636),new DictWord(7,0,1620),new DictWord(8,0,409),new DictWord(9,0,693),new DictWord(139,0,77),new DictWord(6,10,25),new DictWord(7,10,855)
				,new DictWord(7,10,1258),new DictWord(144,10,32),new DictWord(6,0,1880),new DictWord(6,0,1887),new DictWord(6,0,1918),new DictWord(6,0,1924),new DictWord(9,0,967),new DictWord(
					9,0,995),new DictWord(9,0,1015),new DictWord(12,0,826),new DictWord(12,0,849),new DictWord(12,0,857),new DictWord(12,0,860),new DictWord(12,0,886),new DictWord(12,0
					,932),new DictWord(18,0,228),new DictWord(18,0,231),new DictWord(146,0,240),new DictWord(134,0,633),new DictWord(134,0,1308),new DictWord(4,11,37),new DictWord(5,11
					,334),new DictWord(135,11,1253),new DictWord(10,0,86),new DictWord(4,10,4),new DictWord(7,10,1118),new DictWord(7,10,1320),new DictWord(7,10,1706),new DictWord(8,10
					,277),new DictWord(9,10,622),new DictWord(11,10,724),new DictWord(12,10,350),new DictWord(12,10,397),new DictWord(13,10,28),new DictWord(13,10,159),new DictWord(15,
					10,89),new DictWord(18,10,5),new DictWord(19,10,9),new DictWord(20,10,34),new DictWord(150,10,47),new DictWord(132,11,508),new DictWord(137,11,448),new DictWord(12,
					11,107),new DictWord(146,11,31),new DictWord(132,0,817),new DictWord(134,0,663),new DictWord(133,0,882),new DictWord(134,0,914),new DictWord(132,11,540)
				,new DictWord(132,11,533),new DictWord(136,11,608),new DictWord(8,0,885),new DictWord(138,0,865),new DictWord(132,0,426),new DictWord(6,0,58),new DictWord(7,0,745),
				new DictWord(7,0,1969),new DictWord(8,0,399),new DictWord(8,0,675),new DictWord(9,0,479),new DictWord(9,0,731),new DictWord(10,0,330),new DictWord(10,0,593),new DictWord(10,0,
					817),new DictWord(11,0,32),new DictWord(11,0,133),new DictWord(11,0,221),new DictWord(145,0,68),new DictWord(134,10,255),new DictWord(7,0,102),new DictWord(137,0,
					538),new DictWord(137,10,216),new DictWord(7,11,253),new DictWord(136,11,549),new DictWord(135,11,912),new DictWord(9,10,183),new DictWord(139,10,286),new DictWord(
					11,10,956),new DictWord(151,10,3),new DictWord(8,11,527),new DictWord(18,11,60),new DictWord(147,11,24),new DictWord(4,10,536),new DictWord(7,10,1141),new DictWord(
					10,10,723),new DictWord(139,10,371),new DictWord(133,11,920),new DictWord(7,0,876),new DictWord(135,10,285),new DictWord(135,10,560),new DictWord(132,10
					,690),new DictWord(142,11,126),new DictWord(11,10,33),new DictWord(12,10,571),new DictWord(149,10,1),new DictWord(133,0,566),new DictWord(9,0,139),new DictWord(10,0
					,399),new DictWord(11,0,469),new DictWord(12,0,634),new DictWord(13,0,223),new DictWord(132,11,483),new DictWord(6,0,48),new DictWord(135,0,63),new DictWord(18,0,12
				),new DictWord(7,10,1862),new DictWord(12,10,491),new DictWord(12,10,520),new DictWord(13,10,383),new DictWord(142,10,244),new DictWord(135,11,1665),new DictWord(
					132,11,448),new DictWord(9,11,495),new DictWord(146,11,104),new DictWord(6,0,114),new DictWord(7,0,1224),new DictWord(7,0,1556),new DictWord(136,0,3),new DictWord(4
					,10,190),new DictWord(133,10,554),new DictWord(8,0,576),new DictWord(9,0,267),new DictWord(133,10,1001),new DictWord(133,10,446),new DictWord(133,0,933)
				,new DictWord(139,11,1009),new DictWord(8,11,653),new DictWord(13,11,93),new DictWord(147,11,14),new DictWord(6,0,692),new DictWord(6,0,821),new DictWord(134,0,1077
				),new DictWord(5,11,172),new DictWord(135,11,801),new DictWord(138,0,752),new DictWord(4,0,375),new DictWord(134,0,638),new DictWord(134,0,1011),new DictWord(140,11
					,540),new DictWord(9,0,96),new DictWord(133,11,260),new DictWord(139,11,587),new DictWord(135,10,1231),new DictWord(12,0,30),new DictWord(13,0,148),new DictWord(14,
					0,87),new DictWord(14,0,182),new DictWord(16,0,42),new DictWord(20,0,70),new DictWord(132,10,304),new DictWord(6,0,1398),new DictWord(7,0,56),new DictWord(7,0,1989)
				,new DictWord(8,0,337),new DictWord(8,0,738),new DictWord(9,0,600),new DictWord(12,0,37),new DictWord(13,0,447),new DictWord(142,0,92),new DictWord(138,0,666),new DictWord(5,0,
					394),new DictWord(7,0,487),new DictWord(136,0,246),new DictWord(9,0,437),new DictWord(6,10,53),new DictWord(6,10,199),new DictWord(7,10,1408),new DictWord(8,10,32),
				new DictWord(8,10,93),new DictWord(10,10,397),new DictWord(10,10,629),new DictWord(11,10,593),new DictWord(11,10,763),new DictWord(13,10,326),new DictWord(145,10,35
				),new DictWord(134,10,105),new DictWord(9,0,320),new DictWord(10,0,506),new DictWord(138,10,794),new DictWord(7,11,57),new DictWord(8,11,167),new DictWord(8,11,375)
				,new DictWord(9,11,82),new DictWord(9,11,561),new DictWord(10,11,620),new DictWord(10,11,770),new DictWord(11,10,704),new DictWord(141,10,396),new DictWord(6,0,1003
				),new DictWord(5,10,114),new DictWord(5,10,255),new DictWord(141,10,285),new DictWord(7,0,866),new DictWord(135,0,1163),new DictWord(133,11,531),new DictWord(132,0,
					328),new DictWord(7,10,2035),new DictWord(8,10,19),new DictWord(9,10,89),new DictWord(138,10,831),new DictWord(8,11,194),new DictWord(136,11,756),new DictWord(136,0
					,1000),new DictWord(5,11,453),new DictWord(134,11,441),new DictWord(4,0,101),new DictWord(5,0,833),new DictWord(7,0,1171),new DictWord(136,0,744),new DictWord(133,0
					,726),new DictWord(136,10,746),new DictWord(138,0,176),new DictWord(6,0,9),new DictWord(6,0,397),new DictWord(7,0,53),new DictWord(7,0,1742),new DictWord(10,0,632),
				new DictWord(11,0,828),new DictWord(140,0,146),new DictWord(135,11,22),new DictWord(145,11,64),new DictWord(132,0,839),new DictWord(11,0,417),new DictWord(12,0,223)
				,new DictWord(140,0,265),new DictWord(4,11,102),new DictWord(7,11,815),new DictWord(7,11,1699),new DictWord(139,11,964),new DictWord(5,10,955),new DictWord(136,10,
					814),new DictWord(6,0,1931),new DictWord(6,0,2007),new DictWord(18,0,246),new DictWord(146,0,247),new DictWord(8,0,198),new DictWord(11,0,29),new DictWord(140,0,534
				),new DictWord(135,0,1771),new DictWord(6,0,846),new DictWord(7,11,1010),new DictWord(11,11,733),new DictWord(11,11,759),new DictWord(12,11,563),new DictWord(13,11,
					34),new DictWord(14,11,101),new DictWord(18,11,45),new DictWord(146,11,129),new DictWord(4,0,186),new DictWord(5,0,157),new DictWord(8,0,168),new DictWord(138,0,6),
				new DictWord(132,11,899),new DictWord(133,10,56),new DictWord(148,10,100),new DictWord(133,0,875),new DictWord(5,0,773),new DictWord(5,0,991),new DictWord(6,0,1635)
				,new DictWord(134,0,1788),new DictWord(6,0,1274),new DictWord(9,0,477),new DictWord(141,0,78),new DictWord(4,0,639),new DictWord(7,0,111),new DictWord(8,0,581),new DictWord(12,
					0,177),new DictWord(6,11,52),new DictWord(9,11,104),new DictWord(9,11,559),new DictWord(10,10,4),new DictWord(10,10,13),new DictWord(11,10,638),new DictWord(12,11,
					308),new DictWord(19,11,87),new DictWord(148,10,57),new DictWord(132,11,604),new DictWord(4,11,301),new DictWord(133,10,738),new DictWord(133,10,758),new DictWord(
					134,0,1747),new DictWord(7,11,1440),new DictWord(11,11,854),new DictWord(11,11,872),new DictWord(11,11,921),new DictWord(12,11,551),new DictWord(13,11,
					472),new DictWord(142,11,367),new DictWord(7,0,1364),new DictWord(7,0,1907),new DictWord(141,0,158),new DictWord(134,0,873),new DictWord(4,0,404),new DictWord(4,0,
					659),new DictWord(7,0,552),new DictWord(135,0,675),new DictWord(135,10,1112),new DictWord(139,10,328),new DictWord(7,11,508),new DictWord(137,10,133),new DictWord(
					133,0,391),new DictWord(5,10,110),new DictWord(6,10,169),new DictWord(6,10,1702),new DictWord(7,10,400),new DictWord(8,10,538),new DictWord(9,10,184),new DictWord(9
					,10,524),new DictWord(140,10,218),new DictWord(6,11,310),new DictWord(7,11,1849),new DictWord(8,11,72),new DictWord(8,11,272),new DictWord(8,11,431),new DictWord(9,
					11,12),new DictWord(9,11,351),new DictWord(10,11,563),new DictWord(10,11,630),new DictWord(10,11,810),new DictWord(11,11,367),new DictWord(11,11,599),new DictWord(
					11,11,686),new DictWord(140,11,672),new DictWord(5,0,540),new DictWord(6,0,1697),new DictWord(136,0,668),new DictWord(132,0,883),new DictWord(134,0,78),
				new DictWord(12,0,628),new DictWord(18,0,79),new DictWord(6,10,133),new DictWord(9,10,353),new DictWord(139,10,993),new DictWord(6,11,181),new DictWord(7,11,537),new DictWord(8
					,11,64),new DictWord(9,11,127),new DictWord(10,11,496),new DictWord(12,11,510),new DictWord(141,11,384),new DictWord(6,10,93),new DictWord(7,10,1422),new DictWord(7
					,10,1851),new DictWord(8,10,673),new DictWord(9,10,529),new DictWord(140,10,43),new DictWord(137,10,371),new DictWord(134,0,1460),new DictWord(134,0,962
				),new DictWord(4,11,244),new DictWord(135,11,233),new DictWord(9,10,25),new DictWord(10,10,467),new DictWord(138,10,559),new DictWord(4,10,335),new DictWord(135,10,
					942),new DictWord(133,0,460),new DictWord(135,11,334),new DictWord(134,11,1650),new DictWord(4,0,199),new DictWord(139,0,34),new DictWord(5,10,601),new DictWord(8,
					10,39),new DictWord(10,10,773),new DictWord(11,10,84),new DictWord(12,10,205),new DictWord(142,10,1),new DictWord(133,10,870),new DictWord(134,0,388),new DictWord(
					14,0,474),new DictWord(148,0,120),new DictWord(133,11,369),new DictWord(139,0,271),new DictWord(4,0,511),new DictWord(9,0,333),new DictWord(9,0,379),new DictWord(10
					,0,602),new DictWord(11,0,441),new DictWord(11,0,723),new DictWord(11,0,976),new DictWord(12,0,357),new DictWord(132,10,181),new DictWord(134,0,608),new DictWord(
					134,10,1652),new DictWord(22,0,49),new DictWord(137,11,338),new DictWord(140,0,988),new DictWord(134,0,617),new DictWord(5,0,938),new DictWord(136,0,707
				),new DictWord(132,10,97),new DictWord(5,10,147),new DictWord(6,10,286),new DictWord(7,10,1362),new DictWord(141,10,176),new DictWord(6,0,756),new DictWord(134,0,
					1149),new DictWord(133,11,896),new DictWord(6,10,375),new DictWord(7,10,169),new DictWord(7,10,254),new DictWord(136,10,780),new DictWord(134,0,1583),new DictWord(
					135,10,1447),new DictWord(139,0,285),new DictWord(7,11,1117),new DictWord(8,11,393),new DictWord(136,11,539),new DictWord(135,0,344),new DictWord(6,0,
					469),new DictWord(7,0,1709),new DictWord(138,0,515),new DictWord(5,10,629),new DictWord(135,10,1549),new DictWord(5,11,4),new DictWord(5,11,810),new DictWord(6,11,
					13),new DictWord(6,11,538),new DictWord(6,11,1690),new DictWord(6,11,1726),new DictWord(7,11,499),new DictWord(7,11,1819),new DictWord(8,11,148),new DictWord(8,11,
					696),new DictWord(8,11,791),new DictWord(12,11,125),new DictWord(13,11,54),new DictWord(143,11,9),new DictWord(135,11,1268),new DictWord(137,0,404),new DictWord(132
					,0,500),new DictWord(5,0,68),new DictWord(134,0,383),new DictWord(11,0,216),new DictWord(139,0,340),new DictWord(4,11,925),new DictWord(5,11,803),new DictWord(8,11,
					698),new DictWord(138,11,828),new DictWord(4,0,337),new DictWord(6,0,353),new DictWord(7,0,1934),new DictWord(8,0,488),new DictWord(137,0,429),new DictWord(7,0,236)
				,new DictWord(7,0,1795),new DictWord(8,0,259),new DictWord(9,0,135),new DictWord(9,0,177),new DictWord(9,0,860),new DictWord(10,0,825),new DictWord(11,0,115),new DictWord(11,0,
					370),new DictWord(11,0,405),new DictWord(11,0,604),new DictWord(12,0,10),new DictWord(12,0,667),new DictWord(12,0,669),new DictWord(13,0,76),new DictWord(14,0,310),
				new DictWord(15,0,76),new DictWord(15,0,147),new DictWord(148,0,23),new DictWord(4,0,15),new DictWord(4,0,490),new DictWord(5,0,22),new DictWord(6,0,244),new DictWord(7,0,40),new DictWord(
					7,0,200),new DictWord(7,0,906),new DictWord(7,0,1199),new DictWord(9,0,616),new DictWord(10,0,716),new DictWord(11,0,635),new DictWord(11,0,801),new DictWord(140,0,
					458),new DictWord(12,0,756),new DictWord(132,10,420),new DictWord(134,0,1504),new DictWord(6,0,757),new DictWord(133,11,383),new DictWord(6,0,1266),new DictWord(135
					,0,1735),new DictWord(5,0,598),new DictWord(7,0,791),new DictWord(8,0,108),new DictWord(9,0,123),new DictWord(7,10,1570),new DictWord(140,10,542),new DictWord(142,
					11,410),new DictWord(9,11,660),new DictWord(138,11,347)
			};

			internal enum BrotliEncoderStreamState 
			{
				/* Default state. */
				BROTLI_STREAM_PROCESSING = 0,

				/* Intermediate state; after next block is emitted, byte-padding should be
				   performed before getting back to default state. */
				BROTLI_STREAM_FLUSH_REQUESTED = 1,

				/* Last metablock was produced; no more input is acceptable. */
				BROTLI_STREAM_FINISHED = 2,

				/* Flushing compressed block and writing meta-data block header. */
				BROTLI_STREAM_METADATA_HEAD = 3,

				/* Writing metadata block body. */
				BROTLI_STREAM_METADATA_BODY = 4
			}

			internal enum BrotliEncoderOperation 
			{
				/**
				 * Process input.
				 *
				 * Encoder may postpone producing output, until it has processed enough input.
				 */
				BROTLI_OPERATION_PROCESS = 0,

				/**
				 * Produce output for all processed input.
				 *
				 * Actual flush is performed when input stream is depleted and there is enough
				 * space in output stream. This means that client should repeat
				 * ::BROTLI_OPERATION_FLUSH operation until @p available_in becomes @c 0, and
				 * ::BrotliEncoderHasMoreOutput returns ::BROTLI_FALSE.
				 *
				 * @warning Until flush is complete, client @b SHOULD @b NOT swap,
				 *          reduce or extend input stream.
				 *
				 * When flush is complete, output data will be sufficient for decoder to
				 * reproduce all the given input.
				 */
				BROTLI_OPERATION_FLUSH = 1,

				/**
				 * Finalize the stream.
				 *
				 * Actual finalization is performed when input stream is depleted and there is
				 * enough space in output stream. This means that client should repeat
				 * ::BROTLI_OPERATION_FLUSH operation until @p available_in becomes @c 0, and
				 * ::BrotliEncoderHasMoreOutput returns ::BROTLI_FALSE.
				 *
				 * @warning Until finalization is complete, client @b SHOULD @b NOT swap,
				 *          reduce or extend input stream.
				 *
				 * Helper function ::BrotliEncoderIsFinished checks if stream is finalized and
				 * output fully dumped.
				 *
				 * Adding more input data to finalized stream is impossible.
				 */
				BROTLI_OPERATION_FINISH = 2,

				/**
				 * Emit metadata block to stream.
				 *
				 * Metadata is opaque to Brotli: neither encoder, nor decoder processes this
				 * data or relies on it. It may be used to pass some extra information from
				 * encoder client to decoder client without interfering with main data stream.
				 *
				 * @note Encoder may emit empty metadata blocks internally, to pad encoded
				 *       stream to byte boundary.
				 *
				 * @warning Until emitting metadata is complete client @b SHOULD @b NOT swap,
				 *          reduce or extend input stream.
				 *
				 * @warning The whole content of input buffer is considered to be the content
				 *          of metadata block. Do @b NOT @e append metadata to input stream,
				 *          before it is depleted with other operations.
				 *
				 * Stream is soft-flushed before metadata block is emitted. Metadata block
				 * @b MUST be no longer than than 16MiB.
				 */
				BROTLI_OPERATION_EMIT_METADATA = 3
			}

			internal enum BrotliEncoderMode 
			{
				/*
				 * Default compression mode.
				 *
				 * In this mode compressor does not know anything in advance about the
				 * properties of the input.
				 */
				BROTLI_MODE_GENERIC = 0,

				/* Compression mode for UTF-8 formatted text input. */
				BROTLI_MODE_TEXT = 1,

				/* Compression mode used in WOFF 2.0. */
				BROTLI_MODE_FONT = 2
			}

			internal enum BrotliEncoderParameter 
			{
				/*
				 * Tune encoder for specific input.
				 *
				 * ::BrotliEncoderMode enumerates all available values.
				 */
				BROTLI_PARAM_MODE = 0,

				/*
				 * The main compression speed-density lever.
				 *
				 * The higher the quality, the slower the compression. Range is
				 * from ::BROTLI_MIN_QUALITY to ::BROTLI_MAX_QUALITY.
				 */
				BROTLI_PARAM_QUALITY = 1,

				/*
				 * Recommended sliding LZ77 window size.
				 *
				 * Encoder may reduce this value, e.g. if input is much smaller than
				 * window size.
				 *
				 * Window size is `(1 << value) - 16`.
				 *
				 * Range is from ::BROTLI_MIN_WINDOW_BITS to ::BROTLI_MAX_WINDOW_BITS.
				 */
				BROTLI_PARAM_LGWIN = 2,

				/*
				 * Recommended input block size.
				 *
				 * Encoder may reduce this value, e.g. if input is much smaller than input
				 * block size.
				 *
				 * Range is from ::BROTLI_MIN_INPUT_BLOCK_BITS to
				 * ::BROTLI_MAX_INPUT_BLOCK_BITS.
				 *
				 * @note Bigger input block size allows better compression, but consumes more
				 *       memory. \n The rough formula of memory used for temporary input
				 *       storage is `3 << lgBlock`.
				 */
				BROTLI_PARAM_LGBLOCK = 3,

				/*
				 * Flag that affects usage of "literal context modeling" format feature.
				 *
				 * This flag is a "decoding-speed vs compression ratio" trade-off.
				 */
				BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING = 4,

				/**
				 * Estimated total input size for all ::BrotliEncoderCompressStream calls.
				 *
				 * The default value is 0, which means that the total input size is unknown.
				 */
				BROTLI_PARAM_SIZE_HINT = 5
			}

			internal unsafe struct HasherHandle 
			{
				private byte* handle;

				public HasherHandle(void* h) {handle = (byte*) h; }

				public static implicit operator void*(HasherHandle h) {return h.handle;}

				public static implicit operator HasherHandle(void* h) { return new HasherHandle(h); }

			}

			[StructLayout(LayoutKind.Sequential)]
			internal unsafe struct BrotliEncoderStateStruct 
			{
				public BrotliEncoderParams params_;

				public MemoryManager memory_manager_;

				public HasherHandle hasher_;
				public ulong input_pos_;
				public RingBuffer ringbuffer_;
				public size_t cmd_alloc_size_;
				public Command* commands_;
				public size_t num_commands_;
				public size_t num_literals_;
				public size_t last_insert_len_;
				public ulong last_flush_pos_;
				public ulong last_processed_pos_;

				public fixed int dist_cache_[BROTLI_NUM_DISTANCE_SHORT_CODES];
				public fixed int saved_dist_cache_[4];
				public byte last_byte_;
				public byte last_byte_bits_;
				public byte prev_byte_;
				public byte prev_byte2_;
				public size_t storage_size_;

				public byte* storage_;

				/* Hash table for FAST_ONE_PASS_COMPRESSION_QUALITY mode. */
				public fixed int small_table_[1 << 10]; /* 4KiB */

				public int* large_table_; /* Allocated only when needed */

				public size_t large_table_size_;

				/* Command and distance prefix codes (each 64 symbols, stored back-to-back)
				   used for the next block in FAST_ONE_PASS_COMPRESSION_QUALITY. The command
				   prefix code is over a smaller alphabet with the following 64 symbols:
					  0 - 15: insert length code 0, copy length code 0 - 15, same distance
					 16 - 39: insert length code 0, copy length code 0 - 23
					 40 - 63: insert length code 0 - 23, copy length code 0
				   Note that symbols 16 and 40 represent the same code in the full alphabet,
				   but we do not use either of them in FAST_ONE_PASS_COMPRESSION_QUALITY. */
				public fixed byte cmd_depths_[128];

				public fixed ushort cmd_bits_[128];

				/* The compressed form of the command and distance prefix codes for the next
				   block in FAST_ONE_PASS_COMPRESSION_QUALITY. */
				public fixed byte cmd_code_[512];

				public size_t cmd_code_numbits_;

				/* Command and literal buffers for FAST_TWO_PASS_COMPRESSION_QUALITY. */
				public uint* command_buf_;

				public byte* literal_buf_;

				public byte* next_out_;
				public size_t available_out_;

				public size_t total_out_;

				/* Temporary buffer for padding flush bits or metadata block header / body. */
				public fixed byte tiny_buf_u8[16];

				public uint remaining_metadata_bytes_;
				public BrotliEncoderStreamState stream_state_;

				public bool is_last_block_emitted_;
				public bool is_initialized_;
			}

			[StructLayout(LayoutKind.Sequential)]
			internal struct BrotliHasherParams 
			{
				public int type;
				public int bucket_bits;
				public int block_bits;
				public int hash_len;
				public int num_last_distances_to_check;
			}

			[StructLayout(LayoutKind.Sequential)]
			internal struct BrotliEncoderParams 
			{
				public BrotliEncoderMode mode;
				public int quality;
				public int lgwin;
				public int lgblock;
				public size_t size_hint;
				public bool disable_literal_context_modeling;
				public BrotliHasherParams hasher;
			}

			private static readonly byte[] kDefaultCommandDepths = {
				0, 4, 4, 5, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,
				0, 0, 0, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7,
				7, 7, 10, 10, 10, 10, 10, 10, 0, 4, 4, 5, 5, 5, 6, 6,
				7, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
				5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4,
				4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 8, 10,
				12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
			};

			private static readonly ushort[] kDefaultCommandBits = {
				0, 0, 8, 9, 3, 35, 7, 71,
				39, 103, 23, 47, 175, 111, 239, 31,
				0, 0, 0, 4, 12, 2, 10, 6,
				13, 29, 11, 43, 27, 59, 87, 55,
				15, 79, 319, 831, 191, 703, 447, 959,
				0, 14, 1, 25, 5, 21, 19, 51,
				119, 159, 95, 223, 479, 991, 63, 575,
				127, 639, 383, 895, 255, 767, 511, 1023,
				14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				27, 59, 7, 39, 23, 55, 30, 1, 17, 9, 25, 5, 0, 8, 4, 12,
				2, 10, 6, 21, 13, 29, 3, 19, 11, 15, 47, 31, 95, 63, 127, 255,
				767, 2815, 1791, 3839, 511, 2559, 1535, 3583, 1023, 3071, 2047, 4095,
			};

			private static readonly byte[] kDefaultCommandCode = {
				0xff, 0x77, 0xd5, 0xbf, 0xe7, 0xde, 0xea, 0x9e, 0x51, 0x5d, 0xde, 0xc6,
				0x70, 0x57, 0xbc, 0x58, 0x58, 0x58, 0xd8, 0xd8, 0x58, 0xd5, 0xcb, 0x8c,
				0xea, 0xe0, 0xc3, 0x87, 0x1f, 0x83, 0xc1, 0x60, 0x1c, 0x67, 0xb2, 0xaa,
				0x06, 0x83, 0xc1, 0x60, 0x30, 0x18, 0xcc, 0xa1, 0xce, 0x88, 0x54, 0x94,
				0x46, 0xe1, 0xb0, 0xd0, 0x4e, 0xb2, 0xf7, 0x04, 0x00,
			};

			private static readonly size_t kDefaultCommandCodeNumBits = 448;

			private static readonly byte[] kCodeLengthDepth = { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 0, 4, 4, };

			private static readonly byte[] kCodeLengthBits = { 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 15, 31, 0, 11, 7, };

			private static readonly ulong[] kZeroRepsBits = {
				0x00000000, 0x00000000, 0x00000000, 0x00000007, 0x00000017, 0x00000027,
				0x00000037, 0x00000047, 0x00000057, 0x00000067, 0x00000077, 0x00000770,
				0x00000b87, 0x00001387, 0x00001b87, 0x00002387, 0x00002b87, 0x00003387,
				0x00003b87, 0x00000397, 0x00000b97, 0x00001397, 0x00001b97, 0x00002397,
				0x00002b97, 0x00003397, 0x00003b97, 0x000003a7, 0x00000ba7, 0x000013a7,
				0x00001ba7, 0x000023a7, 0x00002ba7, 0x000033a7, 0x00003ba7, 0x000003b7,
				0x00000bb7, 0x000013b7, 0x00001bb7, 0x000023b7, 0x00002bb7, 0x000033b7,
				0x00003bb7, 0x000003c7, 0x00000bc7, 0x000013c7, 0x00001bc7, 0x000023c7,
				0x00002bc7, 0x000033c7, 0x00003bc7, 0x000003d7, 0x00000bd7, 0x000013d7,
				0x00001bd7, 0x000023d7, 0x00002bd7, 0x000033d7, 0x00003bd7, 0x000003e7,
				0x00000be7, 0x000013e7, 0x00001be7, 0x000023e7, 0x00002be7, 0x000033e7,
				0x00003be7, 0x000003f7, 0x00000bf7, 0x000013f7, 0x00001bf7, 0x000023f7,
				0x00002bf7, 0x000033f7, 0x00003bf7, 0x0001c387, 0x0005c387, 0x0009c387,
				0x000dc387, 0x0011c387, 0x0015c387, 0x0019c387, 0x001dc387, 0x0001cb87,
				0x0005cb87, 0x0009cb87, 0x000dcb87, 0x0011cb87, 0x0015cb87, 0x0019cb87,
				0x001dcb87, 0x0001d387, 0x0005d387, 0x0009d387, 0x000dd387, 0x0011d387,
				0x0015d387, 0x0019d387, 0x001dd387, 0x0001db87, 0x0005db87, 0x0009db87,
				0x000ddb87, 0x0011db87, 0x0015db87, 0x0019db87, 0x001ddb87, 0x0001e387,
				0x0005e387, 0x0009e387, 0x000de387, 0x0011e387, 0x0015e387, 0x0019e387,
				0x001de387, 0x0001eb87, 0x0005eb87, 0x0009eb87, 0x000deb87, 0x0011eb87,
				0x0015eb87, 0x0019eb87, 0x001deb87, 0x0001f387, 0x0005f387, 0x0009f387,
				0x000df387, 0x0011f387, 0x0015f387, 0x0019f387, 0x001df387, 0x0001fb87,
				0x0005fb87, 0x0009fb87, 0x000dfb87, 0x0011fb87, 0x0015fb87, 0x0019fb87,
				0x001dfb87, 0x0001c397, 0x0005c397, 0x0009c397, 0x000dc397, 0x0011c397,
				0x0015c397, 0x0019c397, 0x001dc397, 0x0001cb97, 0x0005cb97, 0x0009cb97,
				0x000dcb97, 0x0011cb97, 0x0015cb97, 0x0019cb97, 0x001dcb97, 0x0001d397,
				0x0005d397, 0x0009d397, 0x000dd397, 0x0011d397, 0x0015d397, 0x0019d397,
				0x001dd397, 0x0001db97, 0x0005db97, 0x0009db97, 0x000ddb97, 0x0011db97,
				0x0015db97, 0x0019db97, 0x001ddb97, 0x0001e397, 0x0005e397, 0x0009e397,
				0x000de397, 0x0011e397, 0x0015e397, 0x0019e397, 0x001de397, 0x0001eb97,
				0x0005eb97, 0x0009eb97, 0x000deb97, 0x0011eb97, 0x0015eb97, 0x0019eb97,
				0x001deb97, 0x0001f397, 0x0005f397, 0x0009f397, 0x000df397, 0x0011f397,
				0x0015f397, 0x0019f397, 0x001df397, 0x0001fb97, 0x0005fb97, 0x0009fb97,
				0x000dfb97, 0x0011fb97, 0x0015fb97, 0x0019fb97, 0x001dfb97, 0x0001c3a7,
				0x0005c3a7, 0x0009c3a7, 0x000dc3a7, 0x0011c3a7, 0x0015c3a7, 0x0019c3a7,
				0x001dc3a7, 0x0001cba7, 0x0005cba7, 0x0009cba7, 0x000dcba7, 0x0011cba7,
				0x0015cba7, 0x0019cba7, 0x001dcba7, 0x0001d3a7, 0x0005d3a7, 0x0009d3a7,
				0x000dd3a7, 0x0011d3a7, 0x0015d3a7, 0x0019d3a7, 0x001dd3a7, 0x0001dba7,
				0x0005dba7, 0x0009dba7, 0x000ddba7, 0x0011dba7, 0x0015dba7, 0x0019dba7,
				0x001ddba7, 0x0001e3a7, 0x0005e3a7, 0x0009e3a7, 0x000de3a7, 0x0011e3a7,
				0x0015e3a7, 0x0019e3a7, 0x001de3a7, 0x0001eba7, 0x0005eba7, 0x0009eba7,
				0x000deba7, 0x0011eba7, 0x0015eba7, 0x0019eba7, 0x001deba7, 0x0001f3a7,
				0x0005f3a7, 0x0009f3a7, 0x000df3a7, 0x0011f3a7, 0x0015f3a7, 0x0019f3a7,
				0x001df3a7, 0x0001fba7, 0x0005fba7, 0x0009fba7, 0x000dfba7, 0x0011fba7,
				0x0015fba7, 0x0019fba7, 0x001dfba7, 0x0001c3b7, 0x0005c3b7, 0x0009c3b7,
				0x000dc3b7, 0x0011c3b7, 0x0015c3b7, 0x0019c3b7, 0x001dc3b7, 0x0001cbb7,
				0x0005cbb7, 0x0009cbb7, 0x000dcbb7, 0x0011cbb7, 0x0015cbb7, 0x0019cbb7,
				0x001dcbb7, 0x0001d3b7, 0x0005d3b7, 0x0009d3b7, 0x000dd3b7, 0x0011d3b7,
				0x0015d3b7, 0x0019d3b7, 0x001dd3b7, 0x0001dbb7, 0x0005dbb7, 0x0009dbb7,
				0x000ddbb7, 0x0011dbb7, 0x0015dbb7, 0x0019dbb7, 0x001ddbb7, 0x0001e3b7,
				0x0005e3b7, 0x0009e3b7, 0x000de3b7, 0x0011e3b7, 0x0015e3b7, 0x0019e3b7,
				0x001de3b7, 0x0001ebb7, 0x0005ebb7, 0x0009ebb7, 0x000debb7, 0x0011ebb7,
				0x0015ebb7, 0x0019ebb7, 0x001debb7, 0x0001f3b7, 0x0005f3b7, 0x0009f3b7,
				0x000df3b7, 0x0011f3b7, 0x0015f3b7, 0x0019f3b7, 0x001df3b7, 0x0001fbb7,
				0x0005fbb7, 0x0009fbb7, 0x000dfbb7, 0x0011fbb7, 0x0015fbb7, 0x0019fbb7,
				0x001dfbb7, 0x0001c3c7, 0x0005c3c7, 0x0009c3c7, 0x000dc3c7, 0x0011c3c7,
				0x0015c3c7, 0x0019c3c7, 0x001dc3c7, 0x0001cbc7, 0x0005cbc7, 0x0009cbc7,
				0x000dcbc7, 0x0011cbc7, 0x0015cbc7, 0x0019cbc7, 0x001dcbc7, 0x0001d3c7,
				0x0005d3c7, 0x0009d3c7, 0x000dd3c7, 0x0011d3c7, 0x0015d3c7, 0x0019d3c7,
				0x001dd3c7, 0x0001dbc7, 0x0005dbc7, 0x0009dbc7, 0x000ddbc7, 0x0011dbc7,
				0x0015dbc7, 0x0019dbc7, 0x001ddbc7, 0x0001e3c7, 0x0005e3c7, 0x0009e3c7,
				0x000de3c7, 0x0011e3c7, 0x0015e3c7, 0x0019e3c7, 0x001de3c7, 0x0001ebc7,
				0x0005ebc7, 0x0009ebc7, 0x000debc7, 0x0011ebc7, 0x0015ebc7, 0x0019ebc7,
				0x001debc7, 0x0001f3c7, 0x0005f3c7, 0x0009f3c7, 0x000df3c7, 0x0011f3c7,
				0x0015f3c7, 0x0019f3c7, 0x001df3c7, 0x0001fbc7, 0x0005fbc7, 0x0009fbc7,
				0x000dfbc7, 0x0011fbc7, 0x0015fbc7, 0x0019fbc7, 0x001dfbc7, 0x0001c3d7,
				0x0005c3d7, 0x0009c3d7, 0x000dc3d7, 0x0011c3d7, 0x0015c3d7, 0x0019c3d7,
				0x001dc3d7, 0x0001cbd7, 0x0005cbd7, 0x0009cbd7, 0x000dcbd7, 0x0011cbd7,
				0x0015cbd7, 0x0019cbd7, 0x001dcbd7, 0x0001d3d7, 0x0005d3d7, 0x0009d3d7,
				0x000dd3d7, 0x0011d3d7, 0x0015d3d7, 0x0019d3d7, 0x001dd3d7, 0x0001dbd7,
				0x0005dbd7, 0x0009dbd7, 0x000ddbd7, 0x0011dbd7, 0x0015dbd7, 0x0019dbd7,
				0x001ddbd7, 0x0001e3d7, 0x0005e3d7, 0x0009e3d7, 0x000de3d7, 0x0011e3d7,
				0x0015e3d7, 0x0019e3d7, 0x001de3d7, 0x0001ebd7, 0x0005ebd7, 0x0009ebd7,
				0x000debd7, 0x0011ebd7, 0x0015ebd7, 0x0019ebd7, 0x001debd7, 0x0001f3d7,
				0x0005f3d7, 0x0009f3d7, 0x000df3d7, 0x0011f3d7, 0x0015f3d7, 0x0019f3d7,
				0x001df3d7, 0x0001fbd7, 0x0005fbd7, 0x0009fbd7, 0x000dfbd7, 0x0011fbd7,
				0x0015fbd7, 0x0019fbd7, 0x001dfbd7, 0x0001c3e7, 0x0005c3e7, 0x0009c3e7,
				0x000dc3e7, 0x0011c3e7, 0x0015c3e7, 0x0019c3e7, 0x001dc3e7, 0x0001cbe7,
				0x0005cbe7, 0x0009cbe7, 0x000dcbe7, 0x0011cbe7, 0x0015cbe7, 0x0019cbe7,
				0x001dcbe7, 0x0001d3e7, 0x0005d3e7, 0x0009d3e7, 0x000dd3e7, 0x0011d3e7,
				0x0015d3e7, 0x0019d3e7, 0x001dd3e7, 0x0001dbe7, 0x0005dbe7, 0x0009dbe7,
				0x000ddbe7, 0x0011dbe7, 0x0015dbe7, 0x0019dbe7, 0x001ddbe7, 0x0001e3e7,
				0x0005e3e7, 0x0009e3e7, 0x000de3e7, 0x0011e3e7, 0x0015e3e7, 0x0019e3e7,
				0x001de3e7, 0x0001ebe7, 0x0005ebe7, 0x0009ebe7, 0x000debe7, 0x0011ebe7,
				0x0015ebe7, 0x0019ebe7, 0x001debe7, 0x0001f3e7, 0x0005f3e7, 0x0009f3e7,
				0x000df3e7, 0x0011f3e7, 0x0015f3e7, 0x0019f3e7, 0x001df3e7, 0x0001fbe7,
				0x0005fbe7, 0x0009fbe7, 0x000dfbe7, 0x0011fbe7, 0x0015fbe7, 0x0019fbe7,
				0x001dfbe7, 0x0001c3f7, 0x0005c3f7, 0x0009c3f7, 0x000dc3f7, 0x0011c3f7,
				0x0015c3f7, 0x0019c3f7, 0x001dc3f7, 0x0001cbf7, 0x0005cbf7, 0x0009cbf7,
				0x000dcbf7, 0x0011cbf7, 0x0015cbf7, 0x0019cbf7, 0x001dcbf7, 0x0001d3f7,
				0x0005d3f7, 0x0009d3f7, 0x000dd3f7, 0x0011d3f7, 0x0015d3f7, 0x0019d3f7,
				0x001dd3f7, 0x0001dbf7, 0x0005dbf7, 0x0009dbf7, 0x000ddbf7, 0x0011dbf7,
				0x0015dbf7, 0x0019dbf7, 0x001ddbf7, 0x0001e3f7, 0x0005e3f7, 0x0009e3f7,
				0x000de3f7, 0x0011e3f7, 0x0015e3f7, 0x0019e3f7, 0x001de3f7, 0x0001ebf7,
				0x0005ebf7, 0x0009ebf7, 0x000debf7, 0x0011ebf7, 0x0015ebf7, 0x0019ebf7,
				0x001debf7, 0x0001f3f7, 0x0005f3f7, 0x0009f3f7, 0x000df3f7, 0x0011f3f7,
				0x0015f3f7, 0x0019f3f7, 0x001df3f7, 0x0001fbf7, 0x0005fbf7, 0x0009fbf7,
				0x000dfbf7, 0x0011fbf7, 0x0015fbf7, 0x0019fbf7, 0x001dfbf7, 0x00e1c387,
				0x02e1c387, 0x04e1c387, 0x06e1c387, 0x08e1c387, 0x0ae1c387, 0x0ce1c387,
				0x0ee1c387, 0x00e5c387, 0x02e5c387, 0x04e5c387, 0x06e5c387, 0x08e5c387,
				0x0ae5c387, 0x0ce5c387, 0x0ee5c387, 0x00e9c387, 0x02e9c387, 0x04e9c387,
				0x06e9c387, 0x08e9c387, 0x0ae9c387, 0x0ce9c387, 0x0ee9c387, 0x00edc387,
				0x02edc387, 0x04edc387, 0x06edc387, 0x08edc387, 0x0aedc387, 0x0cedc387,
				0x0eedc387, 0x00f1c387, 0x02f1c387, 0x04f1c387, 0x06f1c387, 0x08f1c387,
				0x0af1c387, 0x0cf1c387, 0x0ef1c387, 0x00f5c387, 0x02f5c387, 0x04f5c387,
				0x06f5c387, 0x08f5c387, 0x0af5c387, 0x0cf5c387, 0x0ef5c387, 0x00f9c387,
				0x02f9c387, 0x04f9c387, 0x06f9c387, 0x08f9c387, 0x0af9c387, 0x0cf9c387,
				0x0ef9c387, 0x00fdc387, 0x02fdc387, 0x04fdc387, 0x06fdc387, 0x08fdc387,
				0x0afdc387, 0x0cfdc387, 0x0efdc387, 0x00e1cb87, 0x02e1cb87, 0x04e1cb87,
				0x06e1cb87, 0x08e1cb87, 0x0ae1cb87, 0x0ce1cb87, 0x0ee1cb87, 0x00e5cb87,
				0x02e5cb87, 0x04e5cb87, 0x06e5cb87, 0x08e5cb87, 0x0ae5cb87, 0x0ce5cb87,
				0x0ee5cb87, 0x00e9cb87, 0x02e9cb87, 0x04e9cb87, 0x06e9cb87, 0x08e9cb87,
				0x0ae9cb87, 0x0ce9cb87, 0x0ee9cb87, 0x00edcb87, 0x02edcb87, 0x04edcb87,
				0x06edcb87, 0x08edcb87, 0x0aedcb87, 0x0cedcb87, 0x0eedcb87, 0x00f1cb87,
				0x02f1cb87, 0x04f1cb87, 0x06f1cb87, 0x08f1cb87, 0x0af1cb87, 0x0cf1cb87,
				0x0ef1cb87, 0x00f5cb87, 0x02f5cb87, 0x04f5cb87, 0x06f5cb87, 0x08f5cb87,
				0x0af5cb87, 0x0cf5cb87, 0x0ef5cb87, 0x00f9cb87, 0x02f9cb87, 0x04f9cb87,
				0x06f9cb87, 0x08f9cb87,
			};

			private static readonly uint[] kZeroRepsDepth = {
				0, 4, 8, 7, 7, 7, 7, 7, 7, 7, 7, 11, 14, 14, 14, 14,
				14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
				14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
				14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
				14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
				21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
				28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
			};

			private static ulong[] kNonZeroRepsBits = {
				0x0000000b, 0x0000001b, 0x0000002b, 0x0000003b, 0x000002cb, 0x000006cb,
				0x00000acb, 0x00000ecb, 0x000002db, 0x000006db, 0x00000adb, 0x00000edb,
				0x000002eb, 0x000006eb, 0x00000aeb, 0x00000eeb, 0x000002fb, 0x000006fb,
				0x00000afb, 0x00000efb, 0x0000b2cb, 0x0001b2cb, 0x0002b2cb, 0x0003b2cb,
				0x0000b6cb, 0x0001b6cb, 0x0002b6cb, 0x0003b6cb, 0x0000bacb, 0x0001bacb,
				0x0002bacb, 0x0003bacb, 0x0000becb, 0x0001becb, 0x0002becb, 0x0003becb,
				0x0000b2db, 0x0001b2db, 0x0002b2db, 0x0003b2db, 0x0000b6db, 0x0001b6db,
				0x0002b6db, 0x0003b6db, 0x0000badb, 0x0001badb, 0x0002badb, 0x0003badb,
				0x0000bedb, 0x0001bedb, 0x0002bedb, 0x0003bedb, 0x0000b2eb, 0x0001b2eb,
				0x0002b2eb, 0x0003b2eb, 0x0000b6eb, 0x0001b6eb, 0x0002b6eb, 0x0003b6eb,
				0x0000baeb, 0x0001baeb, 0x0002baeb, 0x0003baeb, 0x0000beeb, 0x0001beeb,
				0x0002beeb, 0x0003beeb, 0x0000b2fb, 0x0001b2fb, 0x0002b2fb, 0x0003b2fb,
				0x0000b6fb, 0x0001b6fb, 0x0002b6fb, 0x0003b6fb, 0x0000bafb, 0x0001bafb,
				0x0002bafb, 0x0003bafb, 0x0000befb, 0x0001befb, 0x0002befb, 0x0003befb,
				0x002cb2cb, 0x006cb2cb, 0x00acb2cb, 0x00ecb2cb, 0x002db2cb, 0x006db2cb,
				0x00adb2cb, 0x00edb2cb, 0x002eb2cb, 0x006eb2cb, 0x00aeb2cb, 0x00eeb2cb,
				0x002fb2cb, 0x006fb2cb, 0x00afb2cb, 0x00efb2cb, 0x002cb6cb, 0x006cb6cb,
				0x00acb6cb, 0x00ecb6cb, 0x002db6cb, 0x006db6cb, 0x00adb6cb, 0x00edb6cb,
				0x002eb6cb, 0x006eb6cb, 0x00aeb6cb, 0x00eeb6cb, 0x002fb6cb, 0x006fb6cb,
				0x00afb6cb, 0x00efb6cb, 0x002cbacb, 0x006cbacb, 0x00acbacb, 0x00ecbacb,
				0x002dbacb, 0x006dbacb, 0x00adbacb, 0x00edbacb, 0x002ebacb, 0x006ebacb,
				0x00aebacb, 0x00eebacb, 0x002fbacb, 0x006fbacb, 0x00afbacb, 0x00efbacb,
				0x002cbecb, 0x006cbecb, 0x00acbecb, 0x00ecbecb, 0x002dbecb, 0x006dbecb,
				0x00adbecb, 0x00edbecb, 0x002ebecb, 0x006ebecb, 0x00aebecb, 0x00eebecb,
				0x002fbecb, 0x006fbecb, 0x00afbecb, 0x00efbecb, 0x002cb2db, 0x006cb2db,
				0x00acb2db, 0x00ecb2db, 0x002db2db, 0x006db2db, 0x00adb2db, 0x00edb2db,
				0x002eb2db, 0x006eb2db, 0x00aeb2db, 0x00eeb2db, 0x002fb2db, 0x006fb2db,
				0x00afb2db, 0x00efb2db, 0x002cb6db, 0x006cb6db, 0x00acb6db, 0x00ecb6db,
				0x002db6db, 0x006db6db, 0x00adb6db, 0x00edb6db, 0x002eb6db, 0x006eb6db,
				0x00aeb6db, 0x00eeb6db, 0x002fb6db, 0x006fb6db, 0x00afb6db, 0x00efb6db,
				0x002cbadb, 0x006cbadb, 0x00acbadb, 0x00ecbadb, 0x002dbadb, 0x006dbadb,
				0x00adbadb, 0x00edbadb, 0x002ebadb, 0x006ebadb, 0x00aebadb, 0x00eebadb,
				0x002fbadb, 0x006fbadb, 0x00afbadb, 0x00efbadb, 0x002cbedb, 0x006cbedb,
				0x00acbedb, 0x00ecbedb, 0x002dbedb, 0x006dbedb, 0x00adbedb, 0x00edbedb,
				0x002ebedb, 0x006ebedb, 0x00aebedb, 0x00eebedb, 0x002fbedb, 0x006fbedb,
				0x00afbedb, 0x00efbedb, 0x002cb2eb, 0x006cb2eb, 0x00acb2eb, 0x00ecb2eb,
				0x002db2eb, 0x006db2eb, 0x00adb2eb, 0x00edb2eb, 0x002eb2eb, 0x006eb2eb,
				0x00aeb2eb, 0x00eeb2eb, 0x002fb2eb, 0x006fb2eb, 0x00afb2eb, 0x00efb2eb,
				0x002cb6eb, 0x006cb6eb, 0x00acb6eb, 0x00ecb6eb, 0x002db6eb, 0x006db6eb,
				0x00adb6eb, 0x00edb6eb, 0x002eb6eb, 0x006eb6eb, 0x00aeb6eb, 0x00eeb6eb,
				0x002fb6eb, 0x006fb6eb, 0x00afb6eb, 0x00efb6eb, 0x002cbaeb, 0x006cbaeb,
				0x00acbaeb, 0x00ecbaeb, 0x002dbaeb, 0x006dbaeb, 0x00adbaeb, 0x00edbaeb,
				0x002ebaeb, 0x006ebaeb, 0x00aebaeb, 0x00eebaeb, 0x002fbaeb, 0x006fbaeb,
				0x00afbaeb, 0x00efbaeb, 0x002cbeeb, 0x006cbeeb, 0x00acbeeb, 0x00ecbeeb,
				0x002dbeeb, 0x006dbeeb, 0x00adbeeb, 0x00edbeeb, 0x002ebeeb, 0x006ebeeb,
				0x00aebeeb, 0x00eebeeb, 0x002fbeeb, 0x006fbeeb, 0x00afbeeb, 0x00efbeeb,
				0x002cb2fb, 0x006cb2fb, 0x00acb2fb, 0x00ecb2fb, 0x002db2fb, 0x006db2fb,
				0x00adb2fb, 0x00edb2fb, 0x002eb2fb, 0x006eb2fb, 0x00aeb2fb, 0x00eeb2fb,
				0x002fb2fb, 0x006fb2fb, 0x00afb2fb, 0x00efb2fb, 0x002cb6fb, 0x006cb6fb,
				0x00acb6fb, 0x00ecb6fb, 0x002db6fb, 0x006db6fb, 0x00adb6fb, 0x00edb6fb,
				0x002eb6fb, 0x006eb6fb, 0x00aeb6fb, 0x00eeb6fb, 0x002fb6fb, 0x006fb6fb,
				0x00afb6fb, 0x00efb6fb, 0x002cbafb, 0x006cbafb, 0x00acbafb, 0x00ecbafb,
				0x002dbafb, 0x006dbafb, 0x00adbafb, 0x00edbafb, 0x002ebafb, 0x006ebafb,
				0x00aebafb, 0x00eebafb, 0x002fbafb, 0x006fbafb, 0x00afbafb, 0x00efbafb,
				0x002cbefb, 0x006cbefb, 0x00acbefb, 0x00ecbefb, 0x002dbefb, 0x006dbefb,
				0x00adbefb, 0x00edbefb, 0x002ebefb, 0x006ebefb, 0x00aebefb, 0x00eebefb,
				0x002fbefb, 0x006fbefb, 0x00afbefb, 0x00efbefb, 0x0b2cb2cb, 0x1b2cb2cb,
				0x2b2cb2cb, 0x3b2cb2cb, 0x0b6cb2cb, 0x1b6cb2cb, 0x2b6cb2cb, 0x3b6cb2cb,
				0x0bacb2cb, 0x1bacb2cb, 0x2bacb2cb, 0x3bacb2cb, 0x0becb2cb, 0x1becb2cb,
				0x2becb2cb, 0x3becb2cb, 0x0b2db2cb, 0x1b2db2cb, 0x2b2db2cb, 0x3b2db2cb,
				0x0b6db2cb, 0x1b6db2cb, 0x2b6db2cb, 0x3b6db2cb, 0x0badb2cb, 0x1badb2cb,
				0x2badb2cb, 0x3badb2cb, 0x0bedb2cb, 0x1bedb2cb, 0x2bedb2cb, 0x3bedb2cb,
				0x0b2eb2cb, 0x1b2eb2cb, 0x2b2eb2cb, 0x3b2eb2cb, 0x0b6eb2cb, 0x1b6eb2cb,
				0x2b6eb2cb, 0x3b6eb2cb, 0x0baeb2cb, 0x1baeb2cb, 0x2baeb2cb, 0x3baeb2cb,
				0x0beeb2cb, 0x1beeb2cb, 0x2beeb2cb, 0x3beeb2cb, 0x0b2fb2cb, 0x1b2fb2cb,
				0x2b2fb2cb, 0x3b2fb2cb, 0x0b6fb2cb, 0x1b6fb2cb, 0x2b6fb2cb, 0x3b6fb2cb,
				0x0bafb2cb, 0x1bafb2cb, 0x2bafb2cb, 0x3bafb2cb, 0x0befb2cb, 0x1befb2cb,
				0x2befb2cb, 0x3befb2cb, 0x0b2cb6cb, 0x1b2cb6cb, 0x2b2cb6cb, 0x3b2cb6cb,
				0x0b6cb6cb, 0x1b6cb6cb, 0x2b6cb6cb, 0x3b6cb6cb, 0x0bacb6cb, 0x1bacb6cb,
				0x2bacb6cb, 0x3bacb6cb, 0x0becb6cb, 0x1becb6cb, 0x2becb6cb, 0x3becb6cb,
				0x0b2db6cb, 0x1b2db6cb, 0x2b2db6cb, 0x3b2db6cb, 0x0b6db6cb, 0x1b6db6cb,
				0x2b6db6cb, 0x3b6db6cb, 0x0badb6cb, 0x1badb6cb, 0x2badb6cb, 0x3badb6cb,
				0x0bedb6cb, 0x1bedb6cb, 0x2bedb6cb, 0x3bedb6cb, 0x0b2eb6cb, 0x1b2eb6cb,
				0x2b2eb6cb, 0x3b2eb6cb, 0x0b6eb6cb, 0x1b6eb6cb, 0x2b6eb6cb, 0x3b6eb6cb,
				0x0baeb6cb, 0x1baeb6cb, 0x2baeb6cb, 0x3baeb6cb, 0x0beeb6cb, 0x1beeb6cb,
				0x2beeb6cb, 0x3beeb6cb, 0x0b2fb6cb, 0x1b2fb6cb, 0x2b2fb6cb, 0x3b2fb6cb,
				0x0b6fb6cb, 0x1b6fb6cb, 0x2b6fb6cb, 0x3b6fb6cb, 0x0bafb6cb, 0x1bafb6cb,
				0x2bafb6cb, 0x3bafb6cb, 0x0befb6cb, 0x1befb6cb, 0x2befb6cb, 0x3befb6cb,
				0x0b2cbacb, 0x1b2cbacb, 0x2b2cbacb, 0x3b2cbacb, 0x0b6cbacb, 0x1b6cbacb,
				0x2b6cbacb, 0x3b6cbacb, 0x0bacbacb, 0x1bacbacb, 0x2bacbacb, 0x3bacbacb,
				0x0becbacb, 0x1becbacb, 0x2becbacb, 0x3becbacb, 0x0b2dbacb, 0x1b2dbacb,
				0x2b2dbacb, 0x3b2dbacb, 0x0b6dbacb, 0x1b6dbacb, 0x2b6dbacb, 0x3b6dbacb,
				0x0badbacb, 0x1badbacb, 0x2badbacb, 0x3badbacb, 0x0bedbacb, 0x1bedbacb,
				0x2bedbacb, 0x3bedbacb, 0x0b2ebacb, 0x1b2ebacb, 0x2b2ebacb, 0x3b2ebacb,
				0x0b6ebacb, 0x1b6ebacb, 0x2b6ebacb, 0x3b6ebacb, 0x0baebacb, 0x1baebacb,
				0x2baebacb, 0x3baebacb, 0x0beebacb, 0x1beebacb, 0x2beebacb, 0x3beebacb,
				0x0b2fbacb, 0x1b2fbacb, 0x2b2fbacb, 0x3b2fbacb, 0x0b6fbacb, 0x1b6fbacb,
				0x2b6fbacb, 0x3b6fbacb, 0x0bafbacb, 0x1bafbacb, 0x2bafbacb, 0x3bafbacb,
				0x0befbacb, 0x1befbacb, 0x2befbacb, 0x3befbacb, 0x0b2cbecb, 0x1b2cbecb,
				0x2b2cbecb, 0x3b2cbecb, 0x0b6cbecb, 0x1b6cbecb, 0x2b6cbecb, 0x3b6cbecb,
				0x0bacbecb, 0x1bacbecb, 0x2bacbecb, 0x3bacbecb, 0x0becbecb, 0x1becbecb,
				0x2becbecb, 0x3becbecb, 0x0b2dbecb, 0x1b2dbecb, 0x2b2dbecb, 0x3b2dbecb,
				0x0b6dbecb, 0x1b6dbecb, 0x2b6dbecb, 0x3b6dbecb, 0x0badbecb, 0x1badbecb,
				0x2badbecb, 0x3badbecb, 0x0bedbecb, 0x1bedbecb, 0x2bedbecb, 0x3bedbecb,
				0x0b2ebecb, 0x1b2ebecb, 0x2b2ebecb, 0x3b2ebecb, 0x0b6ebecb, 0x1b6ebecb,
				0x2b6ebecb, 0x3b6ebecb, 0x0baebecb, 0x1baebecb, 0x2baebecb, 0x3baebecb,
				0x0beebecb, 0x1beebecb, 0x2beebecb, 0x3beebecb, 0x0b2fbecb, 0x1b2fbecb,
				0x2b2fbecb, 0x3b2fbecb, 0x0b6fbecb, 0x1b6fbecb, 0x2b6fbecb, 0x3b6fbecb,
				0x0bafbecb, 0x1bafbecb, 0x2bafbecb, 0x3bafbecb, 0x0befbecb, 0x1befbecb,
				0x2befbecb, 0x3befbecb, 0x0b2cb2db, 0x1b2cb2db, 0x2b2cb2db, 0x3b2cb2db,
				0x0b6cb2db, 0x1b6cb2db, 0x2b6cb2db, 0x3b6cb2db, 0x0bacb2db, 0x1bacb2db,
				0x2bacb2db, 0x3bacb2db, 0x0becb2db, 0x1becb2db, 0x2becb2db, 0x3becb2db,
				0x0b2db2db, 0x1b2db2db, 0x2b2db2db, 0x3b2db2db, 0x0b6db2db, 0x1b6db2db,
				0x2b6db2db, 0x3b6db2db, 0x0badb2db, 0x1badb2db, 0x2badb2db, 0x3badb2db,
				0x0bedb2db, 0x1bedb2db, 0x2bedb2db, 0x3bedb2db, 0x0b2eb2db, 0x1b2eb2db,
				0x2b2eb2db, 0x3b2eb2db, 0x0b6eb2db, 0x1b6eb2db, 0x2b6eb2db, 0x3b6eb2db,
				0x0baeb2db, 0x1baeb2db, 0x2baeb2db, 0x3baeb2db, 0x0beeb2db, 0x1beeb2db,
				0x2beeb2db, 0x3beeb2db, 0x0b2fb2db, 0x1b2fb2db, 0x2b2fb2db, 0x3b2fb2db,
				0x0b6fb2db, 0x1b6fb2db, 0x2b6fb2db, 0x3b6fb2db, 0x0bafb2db, 0x1bafb2db,
				0x2bafb2db, 0x3bafb2db, 0x0befb2db, 0x1befb2db, 0x2befb2db, 0x3befb2db,
				0x0b2cb6db, 0x1b2cb6db, 0x2b2cb6db, 0x3b2cb6db, 0x0b6cb6db, 0x1b6cb6db,
				0x2b6cb6db, 0x3b6cb6db, 0x0bacb6db, 0x1bacb6db, 0x2bacb6db, 0x3bacb6db,
				0x0becb6db, 0x1becb6db, 0x2becb6db, 0x3becb6db, 0x0b2db6db, 0x1b2db6db,
				0x2b2db6db, 0x3b2db6db, 0x0b6db6db, 0x1b6db6db, 0x2b6db6db, 0x3b6db6db,
				0x0badb6db, 0x1badb6db, 0x2badb6db, 0x3badb6db, 0x0bedb6db, 0x1bedb6db,
				0x2bedb6db, 0x3bedb6db, 0x0b2eb6db, 0x1b2eb6db, 0x2b2eb6db, 0x3b2eb6db,
				0x0b6eb6db, 0x1b6eb6db, 0x2b6eb6db, 0x3b6eb6db, 0x0baeb6db, 0x1baeb6db,
				0x2baeb6db, 0x3baeb6db,
			};

			private static readonly uint[] kNonZeroRepsDepth = {
				6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
				12, 12, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
				18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
				18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
				18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
				18, 18, 18, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
				24, 24, 24, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
			};

			private static readonly uint[] kCmdHistoSeed = {
				0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 0, 0, 0, 0,
			};

			private static readonly byte[] kOmitLastNTransforms = { 0, 12, 27, 23, 42, 63, 56, 48, 59, 64, };

			private static readonly uint[] kDistanceCacheIndex = { 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, };

			private static readonly int[] kDistanceCacheOffset = { 0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3 };

			private static readonly byte[] kStaticCommandCodeDepth = {
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
			};

			private static readonly ushort[] kStaticCommandCodeBits = {
				0,  256,  128,  384,   64,  320,  192,  448,
				32,  288,  160,  416,   96,  352,  224,  480,
				16,  272,  144,  400,   80,  336,  208,  464,
				48,  304,  176,  432,  112,  368,  240,  496,
				8,  264,  136,  392,   72,  328,  200,  456,
				40,  296,  168,  424,  104,  360,  232,  488,
				24,  280,  152,  408,   88,  344,  216,  472,
				56,  312,  184,  440,  120,  376,  248,  504,
				4,  260,  132,  388,   68,  324,  196,  452,
				36,  292,  164,  420,  100,  356,  228,  484,
				20,  276,  148,  404,   84,  340,  212,  468,
				52,  308,  180,  436,  116,  372,  244,  500,
				12,  268,  140,  396,   76,  332,  204,  460,
				44,  300,  172,  428,  108,  364,  236,  492,
				28,  284,  156,  412,   92,  348,  220,  476,
				60,  316,  188,  444,  124,  380,  252,  508,
				2,  258,  130,  386,   66,  322,  194,  450,
				34,  290,  162,  418,   98,  354,  226,  482,
				18,  274,  146,  402,   82,  338,  210,  466,
				50,  306,  178,  434,  114,  370,  242,  498,
				10,  266,  138,  394,   74,  330,  202,  458,
				42,  298,  170,  426,  106,  362,  234,  490,
				26,  282,  154,  410,   90,  346,  218,  474,
				58,  314,  186,  442,  122,  378,  250,  506,
				6,  262,  134,  390,   70,  326,  198,  454,
				38,  294,  166,  422,  102,  358,  230,  486,
				22,  278,  150,  406,   86,  342,  214,  470,
				54,  310,  182,  438,  118,  374,  246,  502,
				14,  270,  142,  398,   78,  334,  206,  462,
				46,  302,  174,  430,  110,  366,  238,  494,
				30,  286,  158,  414,   94,  350,  222,  478,
				62,  318,  190,  446,  126,  382,  254,  510,
				1,  257,  129,  385,   65,  321,  193,  449,
				33,  289,  161,  417,   97,  353,  225,  481,
				17,  273,  145,  401,   81,  337,  209,  465,
				49,  305,  177,  433,  113,  369,  241,  497,
				9,  265,  137,  393,   73,  329,  201,  457,
				41,  297,  169,  425,  105,  361,  233,  489,
				25,  281,  153,  409,   89,  345,  217,  473,
				57,  313,  185,  441,  121,  377,  249,  505,
				5,  261,  133,  389,   69,  325,  197,  453,
				37,  293,  165,  421,  101,  357,  229,  485,
				21,  277,  149,  405,   85,  341,  213,  469,
				53,  309,  181,  437,  117,  373,  245,  501,
				13,  269,  141,  397,   77,  333,  205,  461,
				45,  301,  173,  429,  109,  365,  237,  493,
				29,  285,  157,  413,   93,  349,  221,  477,
				61,  317,  189,  445,  125,  381,  253,  509,
				3,  259,  131,  387,   67,  323,  195,  451,
				35,  291,  163,  419,   99,  355,  227,  483,
				19,  275,  147,  403,   83,  339,  211,  467,
				51,  307,  179,  435,  115,  371,  243,  499,
				11,  267,  139,  395,   75,  331,  203,  459,
				43,  299,  171,  427,  107,  363,  235,  491,
				27,  283,  155,  411,   91,  347,  219,  475,
				59,  315,  187,  443,  123,  379,  251,  507,
				7, 1031,  519, 1543,  263, 1287,  775, 1799,
				135, 1159,  647, 1671,  391, 1415,  903, 1927,
				71, 1095,  583, 1607,  327, 1351,  839, 1863,
				199, 1223,  711, 1735,  455, 1479,  967, 1991,
				39, 1063,  551, 1575,  295, 1319,  807, 1831,
				167, 1191,  679, 1703,  423, 1447,  935, 1959,
				103, 1127,  615, 1639,  359, 1383,  871, 1895,
				231, 1255,  743, 1767,  487, 1511,  999, 2023,
				23, 1047,  535, 1559,  279, 1303,  791, 1815,
				151, 1175,  663, 1687,  407, 1431,  919, 1943,
				87, 1111,  599, 1623,  343, 1367,  855, 1879,
				215, 1239,  727, 1751,  471, 1495,  983, 2007,
				55, 1079,  567, 1591,  311, 1335,  823, 1847,
				183, 1207,  695, 1719,  439, 1463,  951, 1975,
				119, 1143,  631, 1655,  375, 1399,  887, 1911,
				247, 1271,  759, 1783,  503, 1527, 1015, 2039,
				15, 1039,  527, 1551,  271, 1295,  783, 1807,
				143, 1167,  655, 1679,  399, 1423,  911, 1935,
				79, 1103,  591, 1615,  335, 1359,  847, 1871,
				207, 1231,  719, 1743,  463, 1487,  975, 1999,
				47, 1071,  559, 1583,  303, 1327,  815, 1839,
				175, 1199,  687, 1711,  431, 1455,  943, 1967,
				111, 1135,  623, 1647,  367, 1391,  879, 1903,
				239, 1263,  751, 1775,  495, 1519, 1007, 2031,
				31, 1055,  543, 1567,  287, 1311,  799, 1823,
				159, 1183,  671, 1695,  415, 1439,  927, 1951,
				95, 1119,  607, 1631,  351, 1375,  863, 1887,
				223, 1247,  735, 1759,  479, 1503,  991, 2015,
				63, 1087,  575, 1599,  319, 1343,  831, 1855,
				191, 1215,  703, 1727,  447, 1471,  959, 1983,
				127, 1151,  639, 1663,  383, 1407,  895, 1919,
				255, 1279,  767, 1791,  511, 1535, 1023, 2047,
			};

			private static readonly byte[] kStaticDistanceCodeDepth = {
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
			};

			private static readonly ushort[] kStaticDistanceCodeBits = {
				0, 32, 16, 48,  8, 40, 24, 56,  4, 36, 20, 52, 12, 44, 28, 60,
				2, 34, 18, 50, 10, 42, 26, 58,  6, 38, 22, 54, 14, 46, 30, 62,
				1, 33, 17, 49,  9, 41, 25, 57,  5, 37, 21, 53, 13, 45, 29, 61,
				3, 35, 19, 51, 11, 43, 27, 59,  7, 39, 23, 55, 15, 47, 31, 63,
			};

			private static readonly uint[] kStaticContextMapComplexUTF8 = {
				11, 11, 12, 12, /* 0 special */
				0, 0, 0, 0, /* 4 lf */
				1, 1, 9, 9, /* 8 space */
				2, 2, 2, 2, /* !, first after space/lf and after something else. */
				1, 1, 1, 1, /* " */
				8, 3, 3, 3, /* % */
				1, 1, 1, 1, /* ({[ */
				2, 2, 2, 2, /* }]) */
				8, 4, 4, 4, /* :; */
				8, 7, 4, 4, /* . */
				8, 0, 0, 0, /* > */
				3, 3, 3, 3, /* [0..9] */
				5, 5, 10, 5, /* [A-Z] */
				5, 5, 10, 5,
				6, 6, 6, 6, /* [a-z] */
				6, 6, 6, 6,
			};

			private static readonly uint[] kStaticContextMapContinuation = {
				1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};

			private static readonly uint[] kStaticContextMapSimpleUTF8 = {
				0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			};

			private static unsafe size_t BrotliParseAsUTF8(int* symbol, byte* input, size_t size)
			{
				/* ASCII */
				if ((input[0] & 0x80) == 0)
				{
					*symbol = input[0];
					if (*symbol > 0) { return 1; }
				}
				/* 2-byte UTF8 */
				if (size > 1u && (input[0] & 0xe0) == 0xc0 && (input[1] & 0xc0) == 0x80)
				{
					*symbol = (((input[0] & 0x1f) << 6) | (input[1] & 0x3f));
					if (*symbol > 0x7f) { return 2; }
				}
				/* 3-byte UFT8 */
				if (size > 2u && (input[0] & 0xf0) == 0xe0 && (input[1] & 0xc0) == 0x80 && (input[2] & 0xc0) == 0x80)
				{
					*symbol = (((input[0] & 0x0f) << 12) | ((input[1] & 0x3f) << 6) | (input[2] & 0x3f));
					if (*symbol > 0x7ff) { return 3; }
				}
				/* 4-byte UFT8 */
				if (size > 3u && (input[0] & 0xf8) == 0xf0 && (input[1] & 0xc0) == 0x80 && (input[2] & 0xc0) == 0x80 && (input[3] & 0xc0) == 0x80)
				{
					*symbol = (((input[0] & 0x07) << 18) | ((input[1] & 0x3f) << 12) | ((input[2] & 0x3f) << 6) | (input[3] & 0x3f));
					if (*symbol > 0xffff && *symbol <= 0x10ffff) { return 4; }
				}
				/* Not UTF8, emit a special symbol above the UTF8-code space */
				*symbol = 0x110000 | input[0];
				return 1;
			}

			/* Returns 1 if at least min_fraction of the data is UTF8-encoded.*/
			private static unsafe bool BrotliIsMostlyUTF8(byte* data, size_t pos, size_t mask,size_t length, double min_fraction)
			{
				size_t size_utf8 = 0;
				size_t i = 0;
				while (i < length)
				{
					int symbol;
					size_t bytes_read = BrotliParseAsUTF8(&symbol, &data[(pos + i) & mask], length - i);
					i += bytes_read;
					if (symbol < 0x110000) size_utf8 += bytes_read;
				}
				return (size_utf8 > min_fraction * (double)length);
			}

			/* This function writes bits into bytes in increasing addresses, and within
			   a byte least-significant-bit first.

			   The function can write up to 56 bits in one go with WriteBits
			   Example: let's assume that 3 bits (Rs below) have been written already:

			   BYTE-0     BYTE+1       BYTE+2

			   0000 0RRR    0000 0000    0000 0000

			   Now, we could write 5 or less bits in MSB by just sifting by 3
			   and OR'ing to BYTE-0.

			   For n bits, we take the last 5 bits, OR that with high bits in BYTE-0,
			   and locate the rest in BYTE+1, BYTE+2, etc. */
			private static unsafe void BrotliWriteBits(size_t n_bits, ulong bits, size_t* pos, byte* array) 
			{
				if (BROTLI_LITTLE_ENDIAN) 
				{
					byte* p = &array[*pos >> 3];
					ulong v = *p;
					v |= bits << (int) (*pos & 7);
					*(ulong*) p = v; /* Set some bits. */
					*pos += n_bits;
				}
				else 
				{
					/* implicit & 0xff is assumed for uint8_t arithmetics */
					byte* array_pos = &array[*pos >> 3];
					size_t bits_reserved_in_first_byte = (*pos & 7);
					size_t bits_left_to_write;
					bits <<= (int) bits_reserved_in_first_byte;
					*array_pos++ |= (byte) bits;
					for (bits_left_to_write = n_bits + bits_reserved_in_first_byte; bits_left_to_write >= 9; bits_left_to_write -= 8) { bits >>= 8; *array_pos++ = (byte) bits; }
					*array_pos = 0;
					*pos += n_bits;
				}
			}

			private static unsafe void BrotliWriteBitsPrepareStorage(size_t pos, byte* array) { array[pos >> 3] = 0; }

			private abstract unsafe class Hasher 
			{
				public abstract size_t StoreLookahead();
				public abstract size_t HashTypeLength();

				public abstract size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot, size_t input_size);
				public abstract void Initialize(HasherHandle handle, BrotliEncoderParams* params_);
				public abstract void Prepare(HasherHandle handle, bool one_shot, size_t input_size, byte* data);

				public abstract void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end);

				public abstract void Store(HasherHandle handle, byte* data, size_t mask, size_t ix);

				public abstract void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask);

				public abstract void PrepareDistanceCache(HasherHandle handle, int* distance_cache);

				public abstract bool FindLongestMatch(HasherHandle handle,
					ushort* dictionary_hash,
					byte* data, size_t ring_buffer_mask,
					int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_);

				public abstract void CreateBackwardReferences(
					ushort* dictionary_hash,
					size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals);
			}

			private class HashForgetfulChainH40 : Hasher 
			{
				private const int BUCKET_BITS = 15;
				private const int NUM_LAST_DISTANCES_TO_CHECK = 1;
				private const int NUM_BANKS = 1;
				private const int BANK_BITS = 16;
				private const int BANK_SIZE = 1 << BANK_BITS;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const bool CAPPED_CHAINS = false;

				public override size_t HashTypeLength() {return 4;}

				public override size_t StoreLookahead() { return 4; }

				/* HashBytes is the function that chooses the bucket to place the address in. */
				private static unsafe uint HashBytes(byte* data) {
					uint h = *(uint*) (data) * kHashMul32;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return h >> (32 - BUCKET_BITS);
				}

				[StructLayout(LayoutKind.Sequential)]
				private struct Slot 
				{
					public ushort delta;
					public ushort next;
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct Bank 
				{
					private fixed ushort slots_[BANK_SIZE * 2];

					public Slot* slots(size_t index) { fixed (ushort* s = slots_) { return (Slot*)&s[index * 2]; } }
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashForgetfulChain 
				{
					public fixed uint addr[BUCKET_SIZE];

					public fixed ushort head[BUCKET_SIZE];

					/* Truncated hash used for quick rejection of "distance cache" candidates. */
					public fixed byte tiny_hash[65536];

					private fixed ushort banks_[NUM_BANKS * (BANK_SIZE * 2)];
					public fixed ushort free_slot_idx[NUM_BANKS];
					public size_t max_hops;

					public Bank* banks(size_t index) { fixed (ushort* s = banks_) return (Bank*) &s[index * BANK_SIZE * 2]; }
				}

				private static unsafe HashForgetfulChain* Self(HasherHandle handle) { return (HashForgetfulChain*) &GetHasherCommon(handle)[1]; }

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) { Self(handle)->max_hops = (params_->quality > 6 ? 7u : 8u) << (params_->quality - 4); }

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashForgetfulChain* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = BUCKET_SIZE >> 6;
					if (one_shot && input_size <= partial_prepare_threshold) 
					{
						size_t i;
						for (i = 0; i < input_size; ++i) 
						{
							size_t bucket = HashBytes(&data[i]);
							/* See InitEmpty comment. */
							self->addr[bucket] = 0xCCCCCCCC;
							self->head[bucket] = 0xCCCC;
						}
					}
					else 
					{
						/* Fill |addr| array with 0xCCCCCCCC value. Because of wrapping, position
						   processed by hasher never reaches 3GB + 64M; this makes all new chains
						   to be terminated after the first node. */
						memset(self->addr, 0xCC, BUCKET_SIZE * sizeof(uint));
						memset(self->head, 0, BUCKET_SIZE * sizeof(ushort));
					}
					memset(self->tiny_hash, 0, 65536);
					memset(self->free_slot_idx, 0, NUM_BANKS * sizeof(ushort));
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot, size_t input_size) { return sizeof(HashForgetfulChain);}

				/* Look at 4 bytes at &data[ix & mask]. Compute a hash from these, and prepend
				   node to corresponding chain; also update tiny_hash for current position. */
				public override unsafe void Store(HasherHandle handle, byte* data, size_t mask, size_t ix) 
				{
					HashForgetfulChain* self = Self(handle);
					size_t key = HashBytes(&data[ix & mask]);
					size_t bank = key & (NUM_BANKS - 1);
					size_t idx = self->free_slot_idx[bank]++ & (BANK_SIZE - 1);
					size_t delta = ix - self->addr[key];
					self->tiny_hash[(ushort) ix] = (byte) key;
					if (delta > 0xFFFF) delta = CAPPED_CHAINS ? 0 : 0xFFFF;
					self->banks(bank)->slots(idx)->delta = (ushort) delta;
					self->banks(bank)->slots(idx)->next = self->head[key];
					self->addr[key] = (uint) ix;
					self->head[key] = (ushort) idx;
				}

				public override unsafe void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end)  { size_t i; for (i = ix_start; i < ix_end; ++i) { Store(handle, data, mask, i); } }

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
				{
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) 
					{
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}

				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) { Brotli.PrepareDistanceCache(distance_cache, NUM_LAST_DISTANCES_TO_CHECK); }

				/* Find a longest backward match of &data[cur_ix] up to the length of
				   max_length and stores the position cur_ix in the hash table.

				   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
							 values; if this method is invoked repeatedly with the same distance
							 cache values, it is enough to invoke FN(PrepareDistanceCache) once.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns 1 when match is found, otherwise 0. */
				public override unsafe bool FindLongestMatch(HasherHandle handle, ushort* dictionary_hash, byte* data, size_t ring_buffer_mask,
					int* distance_cache, size_t cur_ix, size_t max_length, size_t max_backward, HasherSearchResult* out_) 
				{
					HashForgetfulChain* self = Self(handle);
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					bool is_match_found = false;
					/* Don't accept a short copy from far away. */
					score_t best_score = out_->score;
					size_t best_len = out_->len;
					size_t i;
					size_t key = HashBytes(&data[cur_ix_masked]);
					byte tiny_hash = (byte) (key);
					out_->len = 0;
					out_->len_x_code = 0;
					/* Try last distance first. */
					for (i = 0; i < NUM_LAST_DISTANCES_TO_CHECK; ++i) 
					{
						size_t backward = (size_t) distance_cache[i];
						size_t prev_ix = (cur_ix - backward);
						/* For distance code 0 we want to consider 2-byte matches. */
						if (i > 0 && self->tiny_hash[(ushort) prev_ix] != tiny_hash) continue;
						if (prev_ix >= cur_ix || backward > max_backward) { continue; }
						prev_ix &= ring_buffer_mask;
						{
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 2) 
							{
								score_t score = BackwardReferenceScoreUsingLastDistance(len);
								if (best_score < score) 
								{
									if (i != 0) score -= BackwardReferencePenaltyUsingLastDistance(i);
									if (best_score < score) 
									{
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
					}
					{
						size_t bank = key & (NUM_BANKS - 1);
						size_t backward = 0;
						size_t hops = self->max_hops;
						size_t delta = cur_ix - self->addr[key];
						size_t slot = self->head[key];
						while ((hops--) != 0) 
						{
							size_t prev_ix;
							size_t last = slot;
							backward += delta;
							if (backward > max_backward || (CAPPED_CHAINS && delta == 0)) break;
							prev_ix = (cur_ix - backward) & ring_buffer_mask;
							slot = self->banks(bank)->slots(last)->next;
							delta = self->banks(bank)->slots(last)->delta;
							if (cur_ix_masked + best_len > ring_buffer_mask || prev_ix + best_len > ring_buffer_mask || data[cur_ix_masked + best_len] != data[prev_ix + best_len]) { continue; }
							{
								size_t len = FindMatchLengthWithLimit(&data[prev_ix],
									&data[cur_ix_masked],
									max_length);
								if (len >= 4) 
								{
									/* Comparing for >= 3 does not change the semantics, but just saves
									   for a few unnecessary binary logarithms in backward reference
									   score, since we are not interested in such short matches. */
									score_t score = BackwardReferenceScore(len, backward);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
						Store(handle, data, ring_buffer_mask, cur_ix);
					}
					if (!is_match_found) { is_match_found = SearchInStaticDictionary(dictionary_hash,handle, &data[cur_ix_masked], max_length, max_backward, out_, false); }
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(ushort* dictionary_hash, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals) 
				{
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead() ? position + num_bytes - StoreLookahead() + 1 : position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size = LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) 
					{
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache, position, max_length, max_distance, &sr)) 
						{
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) 
							{
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH ? Math.Min(sr.len - 1, max_length) : 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher, dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache, position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) 
								{
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 && position + HashTypeLength() < pos_end) {continue;}
								}
								break;
							}
							apply_random_heuristics = position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code = ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) { dist_cache[3] = dist_cache[2]; dist_cache[2] = dist_cache[1]; dist_cache[1] = dist_cache[0]; dist_cache[0] = (int) sr.distance; PrepareDistanceCache(hasher, dist_cache);}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code, distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2, Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else 
						{
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) 
							{
								/* Going through uncompressible data, jump. */
								if (position > (apply_random_heuristics + 4 * random_heuristics_window_size)) 
								{
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin = Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump = Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) { Store(hasher, ringbuffer, ringbuffer_mask, position); insert_length += 4; }
								}
								else 
								{
									size_t kMargin = Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump = Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) { Store(hasher, ringbuffer, ringbuffer_mask, position); insert_length += 2; }
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashForgetfulChainH41 : Hasher 
			{
				private const int BUCKET_BITS = 15;
				private const int NUM_LAST_DISTANCES_TO_CHECK = 10;
				private const int NUM_BANKS = 1;
				private const int BANK_BITS = 16;
				private const int BANK_SIZE = 1 << BANK_BITS;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const bool CAPPED_CHAINS = false;

				public override size_t HashTypeLength() { return 4; }

				public override size_t StoreLookahead() { return 4; }

				/* HashBytes is the function that chooses the bucket to place the address in. */
				private static unsafe uint HashBytes(byte* data) {
					uint h = *(uint*) (data) * kHashMul32;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return h >> (32 - BUCKET_BITS);
				}

				[StructLayout(LayoutKind.Sequential)]
				private struct Slot {
					public ushort delta;
					public ushort next;
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct Bank 
				{
					private fixed ushort slots_[BANK_SIZE * 2];

					public Slot* slots(size_t index) { fixed (ushort* s = slots_) return (Slot*) &s[index * 2]; }
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashForgetfulChain 
				{
					public fixed uint addr[BUCKET_SIZE];

					public fixed ushort head[BUCKET_SIZE];

					/* Truncated hash used for quick rejection of "distance cache" candidates. */
					public fixed byte tiny_hash[65536];

					private fixed ushort banks_[NUM_BANKS * (BANK_SIZE * 2)];
					public fixed ushort free_slot_idx[NUM_BANKS];
					public size_t max_hops;

					public Bank* banks(size_t index) { fixed (ushort* s = banks_) return (Bank*) &s[index * BANK_SIZE * 2]; }
				}

				private static unsafe HashForgetfulChain* Self(HasherHandle handle) { return (HashForgetfulChain*) &(GetHasherCommon(handle)[1]); }

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) { Self(handle)->max_hops = (params_->quality > 6 ? 7u : 8u) << (params_->quality - 4);}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashForgetfulChain* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = BUCKET_SIZE >> 6;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) {
							size_t bucket = HashBytes(&data[i]);
							/* See InitEmpty comment. */
							self->addr[bucket] = 0xCCCCCCCC;
							self->head[bucket] = 0xCCCC;
						}
					}
					else {
						/* Fill |addr| array with 0xCCCCCCCC value. Because of wrapping, position
						   processed by hasher never reaches 3GB + 64M; this makes all new chains
						   to be terminated after the first node. */
						memset(self->addr, 0xCC, BUCKET_SIZE * sizeof(uint));
						memset(self->head, 0, BUCKET_SIZE * sizeof(ushort));
					}
					memset(self->tiny_hash, 0, 65536);
					memset(self->free_slot_idx, 0, NUM_BANKS * sizeof(ushort));
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot, size_t input_size) { return sizeof(HashForgetfulChain); }

				/* Look at 4 bytes at &data[ix & mask]. Compute a hash from these, and prepend
				   node to corresponding chain; also update tiny_hash for current position. */
				public override unsafe void Store(HasherHandle handle,byte* data, size_t mask, size_t ix) {
					HashForgetfulChain* self = Self(handle);
					size_t key = HashBytes(&data[ix & mask]);
					size_t bank = key & (NUM_BANKS - 1);
					size_t idx = self->free_slot_idx[bank]++ & (BANK_SIZE - 1);
					size_t delta = ix - self->addr[key];
					self->tiny_hash[(ushort) ix] = (byte) key;
					if (delta > 0xFFFF) delta = CAPPED_CHAINS ? 0 : 0xFFFF;
					self->banks(bank)->slots(idx)->delta = (ushort) delta;
					self->banks(bank)->slots(idx)->next = self->head[key];
					self->addr[key] = (uint) ix;
					self->head[key] = (ushort) idx;
				}

				public override unsafe void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end) 
				{
					size_t i;
					for (i = ix_start; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
				{
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) 
					{
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}


				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) { Brotli.PrepareDistanceCache(distance_cache, NUM_LAST_DISTANCES_TO_CHECK); }

				/* Find a longest backward match of &data[cur_ix] up to the length of
				   max_length and stores the position cur_ix in the hash table.

				   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
							 values; if this method is invoked repeatedly with the same distance
							 cache values, it is enough to invoke FN(PrepareDistanceCache) once.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns 1 when match is found, otherwise 0. */
				public override unsafe bool FindLongestMatch(HasherHandle handle, ushort* dictionary_hash, byte* data, size_t ring_buffer_mask,
					int* distance_cache, size_t cur_ix, size_t max_length, size_t max_backward, HasherSearchResult* out_) 
				{
					HashForgetfulChain* self = Self(handle);
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					bool is_match_found = false;
					/* Don't accept a short copy from far away. */
					score_t best_score = out_->score;
					size_t best_len = out_->len;
					size_t i;
					size_t key = HashBytes(&data[cur_ix_masked]);
					byte tiny_hash = (byte) (key);
					out_->len = 0;
					out_->len_x_code = 0;
					/* Try last distance first. */
					for (i = 0; i < NUM_LAST_DISTANCES_TO_CHECK; ++i) {
						size_t backward = (size_t) distance_cache[i];
						size_t prev_ix = (cur_ix - backward);
						/* For distance code 0 we want to consider 2-byte matches. */
						if (i > 0 && self->tiny_hash[(ushort) prev_ix] != tiny_hash) continue;
						if (prev_ix >= cur_ix || backward > max_backward) {
							continue;
						}
						prev_ix &= ring_buffer_mask;
						{
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 2) {
								score_t score = BackwardReferenceScoreUsingLastDistance(len);
								if (best_score < score) {
									if (i != 0) score -= BackwardReferencePenaltyUsingLastDistance(i);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
					}
					{
						size_t bank = key & (NUM_BANKS - 1);
						size_t backward = 0;
						size_t hops = self->max_hops;
						size_t delta = cur_ix - self->addr[key];
						size_t slot = self->head[key];
						while ((hops--) != 0) {
							size_t prev_ix;
							size_t last = slot;
							backward += delta;
							if (backward > max_backward || (CAPPED_CHAINS && delta == 0)) break;
							prev_ix = (cur_ix - backward) & ring_buffer_mask;
							slot = self->banks(bank)->slots(last)->next;
							delta = self->banks(bank)->slots(last)->delta;
							if (cur_ix_masked + best_len > ring_buffer_mask ||
								prev_ix + best_len > ring_buffer_mask ||
								data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
								continue;
							}
							{
								size_t len = FindMatchLengthWithLimit(&data[prev_ix],
									&data[cur_ix_masked],
									max_length);
								if (len >= 4) {
									/* Comparing for >= 3 does not change the semantics, but just saves
									   for a few unnecessary binary logarithms in backward reference
									   score, since we are not interested in such short matches. */
									score_t score = BackwardReferenceScore(len, backward);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
						Store(handle, data, ring_buffer_mask, cur_ix);
					}
					if (!is_match_found) {
						is_match_found = SearchInStaticDictionary(dictionary_hash,
							handle, &data[cur_ix_masked], max_length, max_backward, out_,
							false);
					}
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences( ushort* dictionary_hash, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals) 
				{
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashForgetfulChainH42 : Hasher 
			{
				private const int BUCKET_BITS = 15;
				private const int NUM_LAST_DISTANCES_TO_CHECK = 16;
				private const int NUM_BANKS = 512;
				private const int BANK_BITS = 9;
				private const int BANK_SIZE = 1 << BANK_BITS;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const bool CAPPED_CHAINS = false;

				public override size_t HashTypeLength() { return 4; }

				public override size_t StoreLookahead() { return 4; }

				/* HashBytes is the function that chooses the bucket to place the address in. */
				private static unsafe uint HashBytes(byte* data) 
				{
					uint h = *(uint*) (data) * kHashMul32;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return h >> (32 - BUCKET_BITS);
				}

				[StructLayout(LayoutKind.Sequential)]
				private struct Slot 
				{
					public ushort delta;
					public ushort next;
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct Bank 
				{
					private fixed ushort slots_[BANK_SIZE * 2];

					public Slot* slots(size_t index) {fixed (ushort* s = slots_) return (Slot*) &s[index * 2]; }
				}

				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashForgetfulChain 
				{
					public fixed uint addr[BUCKET_SIZE];

					public fixed ushort head[BUCKET_SIZE];

					/* Truncated hash used for quick rejection of "distance cache" candidates. */
					public fixed byte tiny_hash[65536];

					private fixed ushort banks_[NUM_BANKS * (BANK_SIZE * 2)];
					public fixed ushort free_slot_idx[NUM_BANKS];
					public size_t max_hops;

					public Bank* banks(size_t index) { fixed (ushort* s = banks_) return (Bank*) &s[index * BANK_SIZE * 2]; }
				}

				private static unsafe HashForgetfulChain* Self(HasherHandle handle) { return (HashForgetfulChain*) &(GetHasherCommon(handle)[1]); }

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) { Self(handle)->max_hops = (params_->quality > 6 ? 7u : 8u) << (params_->quality - 4); }

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) 
				{
					HashForgetfulChain* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = BUCKET_SIZE >> 6;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) 
						{
							size_t bucket = HashBytes(&data[i]);
							/* See InitEmpty comment. */
							self->addr[bucket] = 0xCCCCCCCC;
							self->head[bucket] = 0xCCCC;
						}
					}
					else 
					{
						/* Fill |addr| array with 0xCCCCCCCC value. Because of wrapping, position
						   processed by hasher never reaches 3GB + 64M; this makes all new chains
						   to be terminated after the first node. */
						memset(self->addr, 0xCC, BUCKET_SIZE * sizeof(uint));
						memset(self->head, 0, BUCKET_SIZE * sizeof(ushort));
					}
					memset(self->tiny_hash, 0, 65536);
					memset(self->free_slot_idx, 0, NUM_BANKS * sizeof(ushort));
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot, size_t input_size) { return sizeof(HashForgetfulChain); }

				/* Look at 4 bytes at &data[ix & mask]. Compute a hash from these, and prepend
				   node to corresponding chain; also update tiny_hash for current position. */
				public override unsafe void Store(HasherHandle handle, byte* data, size_t mask, size_t ix) 
				{
					HashForgetfulChain* self = Self(handle);
					size_t key = HashBytes(&data[ix & mask]);
					size_t bank = key & (NUM_BANKS - 1);
					size_t idx = self->free_slot_idx[bank]++ & (BANK_SIZE - 1);
					size_t delta = ix - self->addr[key];
					self->tiny_hash[(ushort) ix] = (byte) key;
					if (delta > 0xFFFF) delta = CAPPED_CHAINS ? 0 : 0xFFFF;
					self->banks(bank)->slots(idx)->delta = (ushort) delta;
					self->banks(bank)->slots(idx)->next = self->head[key];
					self->addr[key] = (uint) ix;
					self->head[key] = (ushort) idx;
				}

				public override unsafe void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end)  { size_t i; for (i = ix_start; i < ix_end; ++i) { Store(handle, data, mask, i); } }

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
				{ if (num_bytes >= HashTypeLength() - 1 && position >= 3) 
					{
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					} }


				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {Brotli.PrepareDistanceCache(distance_cache, NUM_LAST_DISTANCES_TO_CHECK); }

				/* Find a longest backward match of &data[cur_ix] up to the length of
				   max_length and stores the position cur_ix in the hash table.

				   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
							 values; if this method is invoked repeatedly with the same distance
							 cache values, it is enough to invoke FN(PrepareDistanceCache) once.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns 1 when match is found, otherwise 0. */
				public override unsafe bool FindLongestMatch(HasherHandle handle, ushort* dictionary_hash, byte* data, size_t ring_buffer_mask, int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward, HasherSearchResult* out_) 
				{
					HashForgetfulChain* self = Self(handle);
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					bool is_match_found = false;
					/* Don't accept a short copy from far away. */
					score_t best_score = out_->score;
					size_t best_len = out_->len;
					size_t i;
					size_t key = HashBytes(&data[cur_ix_masked]);
					byte tiny_hash = (byte) (key);
					out_->len = 0;
					out_->len_x_code = 0;
					/* Try last distance first. */
					for (i = 0; i < NUM_LAST_DISTANCES_TO_CHECK; ++i) {
						size_t backward = (size_t) distance_cache[i];
						size_t prev_ix = (cur_ix - backward);
						/* For distance code 0 we want to consider 2-byte matches. */
						if (i > 0 && self->tiny_hash[(ushort) prev_ix] != tiny_hash) continue;
						if (prev_ix >= cur_ix || backward > max_backward) {
							continue;
						}
						prev_ix &= ring_buffer_mask;
						{
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 2) {
								score_t score = BackwardReferenceScoreUsingLastDistance(len);
								if (best_score < score) {
									if (i != 0) score -= BackwardReferencePenaltyUsingLastDistance(i);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
					}
					{
						size_t bank = key & (NUM_BANKS - 1);
						size_t backward = 0;
						size_t hops = self->max_hops;
						size_t delta = cur_ix - self->addr[key];
						size_t slot = self->head[key];
						while ((hops--) != 0) {
							size_t prev_ix;
							size_t last = slot;
							backward += delta;
							if (backward > max_backward || (CAPPED_CHAINS && delta == 0)) break;
							prev_ix = (cur_ix - backward) & ring_buffer_mask;
							slot = self->banks(bank)->slots(last)->next;
							delta = self->banks(bank)->slots(last)->delta;
							if (cur_ix_masked + best_len > ring_buffer_mask ||
								prev_ix + best_len > ring_buffer_mask ||
								data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
								continue;
							}
							{
								size_t len = FindMatchLengthWithLimit(&data[prev_ix],
									&data[cur_ix_masked],
									max_length);
								if (len >= 4) {
									/* Comparing for >= 3 does not change the semantics, but just saves
									   for a few unnecessary binary logarithms in backward reference
									   score, since we are not interested in such short matches. */
									score_t score = BackwardReferenceScore(len, backward);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
						Store(handle, data, ring_buffer_mask, cur_ix);
					}
					if (!is_match_found) {
						is_match_found = SearchInStaticDictionary(dictionary_hash,
							handle, &data[cur_ix_masked], max_length, max_backward, out_,
							false);
					}
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(ushort* dictionary_hash, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals)
				{
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashLongestMatchH5 : Hasher 
			{
				public override size_t HashTypeLength() { return 4; }

				public override size_t StoreLookahead() { return 4; }

				/* HashBytes is the function that chooses the bucket to place the address in. */
				private static unsafe uint HashBytes(byte* data, int shift) {
					uint h = *(uint*) (data) * kHashMul32;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> shift);
				}

				[StructLayout(LayoutKind.Sequential)]
				private struct HashLongestMatch {
					/* Number of hash buckets. */
					public size_t bucket_size_;

					/* Only block_size_ newest backward references are kept,
					   and the older are forgotten. */
					public size_t block_size_;

					/* Left-shift for computing hash bucket index from hash value. */
					public int hash_shift_;

					/* Mask for accessing entries in a block (in a ring-buffer manner). */
					public uint block_mask_;

					/* --- Dynamic size members --- */

					/* Number of entries in a particular bucket. */
					/* uint16_t num[bucket_size]; */

					/* Buckets containing block_size_ of backward references. */
					/* uint32_t* buckets[bucket_size * block_size]; */
				}

				private static unsafe HashLongestMatch* Self(HasherHandle handle) { return (HashLongestMatch*) &(GetHasherCommon(handle)[1]); }

				private static unsafe ushort* Num(HashLongestMatch* self) { return (ushort*) (&self[1]); }

				private static unsafe uint* Buckets(HashLongestMatch* self) { return (uint*) (&Num(self)[self->bucket_size_]); }

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) 
				{
					HasherCommon* common = GetHasherCommon(handle);
					HashLongestMatch* self = Self(handle);
					self->hash_shift_ = 32 - common->params_.bucket_bits;
					self->bucket_size_ = (size_t) 1 << common->params_.bucket_bits;
					self->block_size_ = (size_t) 1 << common->params_.block_bits;
					self->block_mask_ = (uint) (self->block_size_ - 1);
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) 
				{
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = self->bucket_size_ >> 6;
					if (one_shot && input_size <= partial_prepare_threshold) 
					{
						size_t i;
						for (i = 0; i < input_size; ++i) { uint key = HashBytes(&data[i], self->hash_shift_); num[key] = 0; }
					} else { memset(num, 0, self->bucket_size_ * sizeof(ushort)); }
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot, size_t input_size) 
				{
					size_t bucket_size = (size_t) 1 << params_->hasher.bucket_bits;
					size_t block_size = (size_t) 1 << params_->hasher.block_bits;
					return sizeof(HashLongestMatch) + bucket_size * (2 + 4 * block_size);
				}

				/* Look at 4 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value of ix at that position. */
				public override unsafe void Store(HasherHandle handle, byte* data, size_t mask, size_t ix) 
				{
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					uint key = HashBytes(&data[ix & mask], self->hash_shift_);
					size_t minor_ix = num[key] & self->block_mask_;
					size_t offset =
						minor_ix + (key << GetHasherCommon(handle)->params_.block_bits);
					Buckets(self)[offset] = (uint) ix;
					++num[key];
				}

				public override unsafe void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end)  { size_t i; for (i = ix_start; i < ix_end; ++i) { Store(handle, data, mask, i); } }

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
				{
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) 
					{
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}

				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
					Brotli.PrepareDistanceCache(distance_cache,
						GetHasherCommon(handle)->params_.num_last_distances_to_check);
				}

				/* Find a longest backward match of &data[cur_ix] up to the length of
				   max_length and stores the position cur_ix in the hash table.

				   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
							 values; if this method is invoked repeatedly with the same distance
							 cache values, it is enough to invoke FN(PrepareDistanceCache) once.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true when match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(HasherHandle handle, ushort* dictionary_hash, byte* data, size_t ring_buffer_mask,
					int* distance_cache, size_t cur_ix, size_t max_length, size_t max_backward, HasherSearchResult* out_) 
				{
					HasherCommon* common = GetHasherCommon(handle);
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					uint* buckets = Buckets(self);
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					bool is_match_found = false;
					/* Don't accept a short copy from far away. */
					score_t best_score = out_->score;
					size_t best_len = out_->len;
					size_t i;
					out_->len = 0;
					out_->len_x_code = 0;
					/* Try last distance first. */
					for (i = 0; i < (size_t) common->params_.num_last_distances_to_check; ++i) {
						size_t backward = (size_t) distance_cache[i];
						size_t prev_ix = (size_t) (cur_ix - backward);
						if (prev_ix >= cur_ix) {
							continue;
						}
						if ((backward > max_backward)) {
							continue;
						}
						prev_ix &= ring_buffer_mask;

						if (cur_ix_masked + best_len > ring_buffer_mask ||
							prev_ix + best_len > ring_buffer_mask ||
							data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
							continue;
						}
						{
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 3 || (len == 2 && i < 2)) {
								/* Comparing for >= 2 does not change the semantics, but just saves for
								   a few unnecessary binary logarithms in backward reference score,
								   since we are not interested in such short matches. */
								score_t score = BackwardReferenceScoreUsingLastDistance(len);
								if (best_score < score) {
									if (i != 0) score -= BackwardReferencePenaltyUsingLastDistance(i);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
					}
					{
						uint key =
							HashBytes(&data[cur_ix_masked], self->hash_shift_);
						uint* bucket =
							&buckets[key << common->params_.block_bits];
						size_t down =
							(num[key] > self->block_size_) ? (num[key] - self->block_size_) : 0;
						for (i = num[key]; i > down;) {
							size_t prev_ix = bucket[--i & self->block_mask_];
							size_t backward = cur_ix - prev_ix;
							if ((backward > max_backward)) {
								break;
							}
							prev_ix &= ring_buffer_mask;
							if (cur_ix_masked + best_len > ring_buffer_mask ||
								prev_ix + best_len > ring_buffer_mask ||
								data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
								continue;
							}
							{
								size_t len = FindMatchLengthWithLimit(&data[prev_ix],
									&data[cur_ix_masked],
									max_length);
								if (len >= 4) {
									/* Comparing for >= 3 does not change the semantics, but just saves
									   for a few unnecessary binary logarithms in backward reference
									   score, since we are not interested in such short matches. */
									score_t score = BackwardReferenceScore(len, backward);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
						bucket[num[key] & self->block_mask_] = (uint) cur_ix;
						++num[key];
					}
					if (!is_match_found) {
						is_match_found = SearchInStaticDictionary(dictionary_hash,
							handle, &data[cur_ix_masked], max_length, max_backward, out_,
							false);
					}
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(ushort* dictionary_hash, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals)
				{
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			
			}

			private class HashLongestMatch64H6 : Hasher 
			{
				public override size_t HashTypeLength() {
					return 8;
				}

				public override size_t StoreLookahead() {
					return 8;
				}

				/* HashBytes is the function that chooses the bucket to place the address in. */
				private static unsafe uint HashBytes(byte* data, ulong mask, int shift) {
					ulong h = (*(ulong*) (data) & mask) * kHashMul64Long;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> shift);
				}

				[StructLayout(LayoutKind.Sequential)]
				private struct HashLongestMatch {
					/* Number of hash buckets. */
					public size_t bucket_size_;

					/* Only block_size_ newest backward references are kept,
					   and the older are forgotten. */
					public size_t block_size_;

					/* Left-shift for computing hash bucket index from hash value. */
					public int hash_shift_;

					/* Mask for selecting the next 4-8 bytes of input */
					public ulong hash_mask_;

					/* Mask for accessing entries in a block (in a ring-buffer manner). */
					public uint block_mask_;

					/* --- Dynamic size members --- */

					/* Number of entries in a particular bucket. */
					/* uint16_t num[bucket_size]; */

					/* Buckets containing block_size_ of backward references. */
					/* uint32_t* buckets[bucket_size * block_size]; */
				}

				private static unsafe HashLongestMatch* Self(HasherHandle handle) {
					return (HashLongestMatch*) &(GetHasherCommon(handle)[1]);
				}

				private static unsafe ushort* Num(HashLongestMatch* self) {
					return (ushort*) (&self[1]);
				}

				private static unsafe uint* Buckets(HashLongestMatch* self) {
					return (uint*) (&Num(self)[self->bucket_size_]);
				}

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) {
					HasherCommon* common = GetHasherCommon(handle);
					HashLongestMatch* self = Self(handle);
					self->hash_shift_ = 64 - common->params_.bucket_bits;
					self->hash_mask_ = (~((ulong) 0U)) >> (64 - 8 * common->params_.hash_len);
					self->bucket_size_ = (size_t) 1 << common->params_.bucket_bits;
					self->block_size_ = (size_t) 1 << common->params_.block_bits;
					self->block_mask_ = (uint) (self->block_size_ - 1);
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = self->bucket_size_ >> 6;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) {
							uint key = HashBytes(&data[i], self->hash_mask_,
								self->hash_shift_);
							num[key] = 0;
						}
					}
					else {
						memset(num, 0, self->bucket_size_ * sizeof(ushort));
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,
					size_t input_size) {
					size_t bucket_size = (size_t) 1 << params_->hasher.bucket_bits;
					size_t block_size = (size_t) 1 << params_->hasher.block_bits;
					return sizeof(HashLongestMatch) + bucket_size * (2 + 4 * block_size);
				}

				/* Look at 4 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value of ix at that position. */
				public override unsafe void Store(HasherHandle handle,
					byte* data, size_t mask, size_t ix) {
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					uint key = HashBytes(&data[ix & mask], self->hash_mask_,
						self->hash_shift_);
					size_t minor_ix = num[key] & self->block_mask_;
					size_t offset =
						minor_ix + (key << GetHasherCommon(handle)->params_.block_bits);
					Buckets(self)[offset] = (uint) ix;
					++num[key];
				}

				public override unsafe void StoreRange(HasherHandle handle,
					byte* data, size_t mask, size_t ix_start,
					size_t ix_end) {
					size_t i;
					for (i = ix_start; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position,
					byte* ringbuffer,
					size_t ringbuffer_mask) {
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) {
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}

				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
					Brotli.PrepareDistanceCache(distance_cache,
						GetHasherCommon(handle)->params_.num_last_distances_to_check);
				}

				/* Find a longest backward match of &data[cur_ix] up to the length of
				   max_length and stores the position cur_ix in the hash table.

				   REQUIRES: FN(PrepareDistanceCache) must be invoked for current distance cache
							 values; if this method is invoked repeatedly with the same distance
							 cache values, it is enough to invoke FN(PrepareDistanceCache) once.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true when match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(HasherHandle handle,
					ushort* dictionary_hash,
					byte* data, size_t ring_buffer_mask,
					int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_) {
					HasherCommon* common = GetHasherCommon(handle);
					HashLongestMatch* self = Self(handle);
					ushort* num = Num(self);
					uint* buckets = Buckets(self);
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					bool is_match_found = false;
					/* Don't accept a short copy from far away. */
					score_t best_score = out_->score;
					size_t best_len = out_->len;
					size_t i;
					out_->len = 0;
					out_->len_x_code = 0;
					/* Try last distance first. */
					for (i = 0; i < (size_t) common->params_.num_last_distances_to_check; ++i) {
						size_t backward = (size_t) distance_cache[i];
						size_t prev_ix = (size_t) (cur_ix - backward);
						if (prev_ix >= cur_ix) {
							continue;
						}
						if ((backward > max_backward)) {
							continue;
						}
						prev_ix &= ring_buffer_mask;

						if (cur_ix_masked + best_len > ring_buffer_mask ||
							prev_ix + best_len > ring_buffer_mask ||
							data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
							continue;
						}
						{
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 3 || (len == 2 && i < 2)) {
								/* Comparing for >= 2 does not change the semantics, but just saves for
								   a few unnecessary binary logarithms in backward reference score,
								   since we are not interested in such short matches. */
								score_t score = BackwardReferenceScoreUsingLastDistance(len);
								if (best_score < score) {
									if (i != 0) score -= BackwardReferencePenaltyUsingLastDistance(i);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
					}
					{
						uint key = HashBytes(
							&data[cur_ix_masked], self->hash_mask_, self->hash_shift_);
						uint* bucket =
							&buckets[key << common->params_.block_bits];
						size_t down =
							(num[key] > self->block_size_) ? (num[key] - self->block_size_) : 0;
						for (i = num[key]; i > down;) {
							size_t prev_ix = bucket[--i & self->block_mask_];
							size_t backward = cur_ix - prev_ix;
							if ((backward > max_backward)) {
								break;
							}
							prev_ix &= ring_buffer_mask;
							if (cur_ix_masked + best_len > ring_buffer_mask ||
								prev_ix + best_len > ring_buffer_mask ||
								data[cur_ix_masked + best_len] != data[prev_ix + best_len]) {
								continue;
							}
							{
								size_t len = FindMatchLengthWithLimit(&data[prev_ix],
									&data[cur_ix_masked],
									max_length);
								if (len >= 4) {
									/* Comparing for >= 3 does not change the semantics, but just saves
									   for a few unnecessary binary logarithms in backward reference
									   score, since we are not interested in such short matches. */
									score_t score = BackwardReferenceScore(len, backward);
									if (best_score < score) {
										best_score = score;
										best_len = len;
										out_->len = best_len;
										out_->distance = backward;
										out_->score = best_score;
										is_match_found = true;
									}
								}
							}
						}
						bucket[num[key] & self->block_mask_] = (uint) cur_ix;
						++num[key];
					}
					if (!is_match_found) {
						is_match_found = SearchInStaticDictionary(dictionary_hash,
							handle, &data[cur_ix_masked], max_length, max_backward, out_,
							false);
					}
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(
					ushort* dictionary_hash,
					size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals) {
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashLongestMatchQuicklyH2 : Hasher 
			{
				private const int BUCKET_BITS = 16;
				private const int BUCKET_SWEEP = 1;
				private const int HASH_LEN = 5;
				private const int USE_DICTIONARY = 1;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const int HASH_MAP_SIZE = 4 << BUCKET_BITS;

				public override size_t HashTypeLength() { return 8; }

				public override size_t StoreLookahead() { return 8; }

				/* HashBytes is the function that chooses the bucket to place
				   the address in. The HashLongestMatch and HashLongestMatchQuickly
				   classes have separate, different implementations of hashing. */
				private static unsafe uint HashBytes(byte* data) 
				{ 
					ulong h = ((*(ulong*) (data) << (64 - 8 * HASH_LEN)) * kHashMul64);
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> (64 - BUCKET_BITS));
				}

				/* A (forgetful) hash table to the data seen by the compressor, to
				   help create backward references to previous data.

				   This is a hash map of fixed size (BUCKET_SIZE). Starting from the
				   given index, BUCKET_SWEEP buckets are used to store values of a key. */
				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashLongestMatchQuickly { public fixed uint buckets_[BUCKET_SIZE + BUCKET_SWEEP]; }

				private static unsafe HashLongestMatchQuickly* Self(HasherHandle handle) { return (HashLongestMatchQuickly*) &(GetHasherCommon(handle)[1]); }

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) { }

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) 
				{
					HashLongestMatchQuickly* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = HASH_MAP_SIZE >> 7;
					if (one_shot && input_size <= partial_prepare_threshold) { size_t i; for (i = 0; i < input_size; ++i) { uint key = HashBytes(&data[i]); memset(&self->buckets_[key], 0, BUCKET_SWEEP * sizeof(uint)); } }
					else
					{ 
						/* It is not strictly necessary to fill this buffer here, but
						   not filling will make the results of the compression stochastic
						   (but correct). This is because random data would cause the
						   system to find accidentally good backward references here and there. */
						memset(&self->buckets_[0], 0, sizeof(uint) * (BUCKET_SIZE + BUCKET_SWEEP));
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,size_t input_size) { return sizeof(HashLongestMatchQuickly); }

				/* Look at 5 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value somewhere within
				   [ix .. ix+3]. */
				public override unsafe void Store(HasherHandle handle, byte* data, size_t mask, size_t ix) 
				{
					uint key = HashBytes(&data[ix & mask]);
					/* Wiggle the value with the bucket sweep range. */
					uint off = (ix >> 3) % BUCKET_SWEEP; Self(handle)->buckets_[key + off] = (uint) ix;
				}

				public override unsafe void StoreRange(HasherHandle handle, byte* data, size_t mask, size_t ix_start, size_t ix_end) { size_t i; for (i = ix_start; i < ix_end; ++i) { Store(handle, data, mask, i); } }

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position, byte* ringbuffer, size_t ringbuffer_mask) 
				{
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) 
					{
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}

				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {}

				/* Find a longest backward match of &data[cur_ix & ring_buffer_mask]
				   up to the length of max_length and stores the position cur_ix in the
				   hash table.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true if match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(HasherHandle handle, ushort* dictionary_hash, byte* data,
					size_t ring_buffer_mask, int* distance_cache, size_t cur_ix, size_t max_length, size_t max_backward, HasherSearchResult* out_) 
				{
					HashLongestMatchQuickly* self = Self(handle);
					size_t best_len_in = out_->len;
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					uint key = HashBytes(&data[cur_ix_masked]);
					int compare_char = data[cur_ix_masked + best_len_in];
					score_t best_score = out_->score;
					size_t best_len = best_len_in;
					size_t cached_backward = (size_t) distance_cache[0];
					size_t prev_ix = cur_ix - cached_backward;
					bool is_match_found = false;
					out_->len_x_code = 0;
					if (prev_ix < cur_ix) {
						prev_ix &= (uint) ring_buffer_mask;
						if (compare_char == data[prev_ix + best_len]) {
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								best_score = BackwardReferenceScoreUsingLastDistance(len);
								best_len = len;
								out_->len = len;
								out_->distance = cached_backward;
								out_->score = best_score;
								compare_char = data[cur_ix_masked + best_len];
								self->buckets_[key] = (uint) cur_ix;
								return true;
							}
						}
					}
					{
						size_t backward;
						size_t len;
						/* Only one to look for, don't bother to prepare for a loop. */
						prev_ix = self->buckets_[key];
						self->buckets_[key] = (uint) cur_ix;
						backward = cur_ix - prev_ix;
						prev_ix &= (uint) ring_buffer_mask;
						if (compare_char != data[prev_ix + best_len_in]) {
							return false;
						}
						if ((backward == 0 || backward > max_backward)) {
							return false;
						}
						len = FindMatchLengthWithLimit(&data[prev_ix],
							&data[cur_ix_masked],
							max_length);
						if (len >= 4) {
							out_->len = len;
							out_->distance = backward;
							out_->score = BackwardReferenceScore(len, backward);
							return true;
						}
					}
					is_match_found = SearchInStaticDictionary(dictionary_hash,
						handle, &data[cur_ix_masked], max_length, max_backward, out_,
						true);
					self->buckets_[key + ((cur_ix >> 3) % BUCKET_SWEEP)] = (uint) cur_ix;
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences( ushort* dictionary_hash, size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask, BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands, size_t* num_literals) 
				{
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashLongestMatchQuicklyH3 : Hasher 
			{
				private const int BUCKET_BITS = 16;
				private const int BUCKET_SWEEP = 2;
				private const int HASH_LEN = 5;
				private const int USE_DICTIONARY = 0;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const int HASH_MAP_SIZE = 4 << BUCKET_BITS;

				public override size_t HashTypeLength() {
					return 8;
				}

				public override size_t StoreLookahead() {
					return 8;
				}

				/* HashBytes is the function that chooses the bucket to place
				   the address in. The HashLongestMatch and HashLongestMatchQuickly
				   classes have separate, different implementations of hashing. */
				private static unsafe uint HashBytes(byte* data) {
					ulong h = ((*(ulong*) (data) << (64 - 8 * HASH_LEN)) *
							   kHashMul64);
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> (64 - BUCKET_BITS));
				}

				/* A (forgetful) hash table to the data seen by the compressor, to
				   help create backward references to previous data.

				   This is a hash map of fixed size (BUCKET_SIZE). Starting from the
				   given index, BUCKET_SWEEP buckets are used to store values of a key. */
				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashLongestMatchQuickly {
					public fixed uint buckets_[BUCKET_SIZE + BUCKET_SWEEP];
				}

				private static unsafe HashLongestMatchQuickly* Self(HasherHandle handle) {
					return (HashLongestMatchQuickly*) &(GetHasherCommon(handle)[1]);
				}

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) {
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashLongestMatchQuickly* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = HASH_MAP_SIZE >> 7;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) {
							uint key = HashBytes(&data[i]);
							memset(&self->buckets_[key], 0, BUCKET_SWEEP * sizeof(uint));
						}
					}
					else {
						/* It is not strictly necessary to fill this buffer here, but
						   not filling will make the results of the compression stochastic
						   (but correct). This is because random data would cause the
						   system to find accidentally good backward references here and there. */
						memset(&self->buckets_[0], 0, sizeof(uint) * (BUCKET_SIZE + BUCKET_SWEEP));
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,
					size_t input_size) {
					return sizeof(HashLongestMatchQuickly);
				}

				/* Look at 5 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value somewhere within
				   [ix .. ix+3]. */
				public override unsafe void Store(HasherHandle handle,
					byte* data, size_t mask, size_t ix) {
					uint key = HashBytes(&data[ix & mask]);
					/* Wiggle the value with the bucket sweep range. */
					uint off = (ix >> 3) % BUCKET_SWEEP;
					Self(handle)->buckets_[key + off] = (uint) ix;
				}

				public override unsafe void StoreRange(HasherHandle handle,
					byte* data, size_t mask, size_t ix_start,
					size_t ix_end) {
					size_t i;
					for (i = ix_start; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position,
					byte* ringbuffer,
					size_t ringbuffer_mask) {
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) {
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}


				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
				}

				/* Find a longest backward match of &data[cur_ix & ring_buffer_mask]
				   up to the length of max_length and stores the position cur_ix in the
				   hash table.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true if match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(
					HasherHandle handle,
					ushort* dictionary_hash, byte* data,
					size_t ring_buffer_mask, int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_) {
					HashLongestMatchQuickly* self = Self(handle);
					size_t best_len_in = out_->len;
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					uint key = HashBytes(&data[cur_ix_masked]);
					int compare_char = data[cur_ix_masked + best_len_in];
					score_t best_score = out_->score;
					size_t best_len = best_len_in;
					size_t cached_backward = (size_t) distance_cache[0];
					size_t prev_ix = cur_ix - cached_backward;
					bool is_match_found = false;
					out_->len_x_code = 0;
					if (prev_ix < cur_ix) {
						prev_ix &= (uint) ring_buffer_mask;
						if (compare_char == data[prev_ix + best_len]) {
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								best_score = BackwardReferenceScoreUsingLastDistance(len);
								best_len = len;
								out_->len = len;
								out_->distance = cached_backward;
								out_->score = best_score;
								compare_char = data[cur_ix_masked + best_len];
								{
									is_match_found = true;
								}
							}
						}
					}
					{
						uint* bucket = self->buckets_ + key;
						int i;
						prev_ix = *bucket++;
						for (i = 0; i < BUCKET_SWEEP; ++i, prev_ix = *bucket++) {
							size_t backward = cur_ix - prev_ix;
							size_t len;
							prev_ix &= (uint) ring_buffer_mask;
							if (compare_char != data[prev_ix + best_len]) {
								continue;
							}
							if ((backward == 0 || backward > max_backward)) {
								continue;
							}
							len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								score_t score = BackwardReferenceScore(len, backward);
								if (best_score < score) {
									best_score = score;
									best_len = len;
									out_->len = best_len;
									out_->distance = backward;
									out_->score = score;
									compare_char = data[cur_ix_masked + best_len];
									is_match_found = true;
								}
							}
						}
					}
					self->buckets_[key + ((cur_ix >> 3) % BUCKET_SWEEP)] = (uint) cur_ix;
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(
					ushort* dictionary_hash,
					size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals) {
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashLongestMatchQuicklyH4 : Hasher 
			{
				private const int BUCKET_BITS = 17;
				private const int BUCKET_SWEEP = 4;
				private const int HASH_LEN = 5;
				private const int USE_DICTIONARY = 1;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const int HASH_MAP_SIZE = 4 << BUCKET_BITS;

				public override size_t HashTypeLength() {
					return 8;
				}

				public override size_t StoreLookahead() {
					return 8;
				}

				/* HashBytes is the function that chooses the bucket to place
				   the address in. The HashLongestMatch and HashLongestMatchQuickly
				   classes have separate, different implementations of hashing. */
				private static unsafe uint HashBytes(byte* data) {
					ulong h = ((*(ulong*) (data) << (64 - 8 * HASH_LEN)) *
							   kHashMul64);
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> (64 - BUCKET_BITS));
				}

				/* A (forgetful) hash table to the data seen by the compressor, to
				   help create backward references to previous data.

				   This is a hash map of fixed size (BUCKET_SIZE). Starting from the
				   given index, BUCKET_SWEEP buckets are used to store values of a key. */
				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashLongestMatchQuickly {
					public fixed uint buckets_[BUCKET_SIZE + BUCKET_SWEEP];
				}

				private static unsafe HashLongestMatchQuickly* Self(HasherHandle handle) {
					return (HashLongestMatchQuickly*) &(GetHasherCommon(handle)[1]);
				}

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) {
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashLongestMatchQuickly* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = HASH_MAP_SIZE >> 7;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) {
							uint key = HashBytes(&data[i]);
							memset(&self->buckets_[key], 0, BUCKET_SWEEP * sizeof(uint));
						}
					}
					else {
						/* It is not strictly necessary to fill this buffer here, but
						   not filling will make the results of the compression stochastic
						   (but correct). This is because random data would cause the
						   system to find accidentally good backward references here and there. */
						memset(&self->buckets_[0], 0, sizeof(uint) * (BUCKET_SIZE + BUCKET_SWEEP));
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,
					size_t input_size) {
					return sizeof(HashLongestMatchQuickly);
				}

				/* Look at 5 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value somewhere within
				   [ix .. ix+3]. */
				public override unsafe void Store(HasherHandle handle,
					byte* data, size_t mask, size_t ix) {
					uint key = HashBytes(&data[ix & mask]);
					/* Wiggle the value with the bucket sweep range. */
					uint off = (ix >> 3) % BUCKET_SWEEP;
					Self(handle)->buckets_[key + off] = (uint) ix;
				}

				public override unsafe void StoreRange(HasherHandle handle,
					byte* data, size_t mask, size_t ix_start,
					size_t ix_end) {
					size_t i;
					for (i = ix_start; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position,
					byte* ringbuffer,
					size_t ringbuffer_mask) {
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) {
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}


				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
				}

				/* Find a longest backward match of &data[cur_ix & ring_buffer_mask]
				   up to the length of max_length and stores the position cur_ix in the
				   hash table.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true if match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(
					HasherHandle handle,
					ushort* dictionary_hash, byte* data,
					size_t ring_buffer_mask, int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_) {
					HashLongestMatchQuickly* self = Self(handle);
					size_t best_len_in = out_->len;
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					uint key = HashBytes(&data[cur_ix_masked]);
					int compare_char = data[cur_ix_masked + best_len_in];
					score_t best_score = out_->score;
					size_t best_len = best_len_in;
					size_t cached_backward = (size_t) distance_cache[0];
					size_t prev_ix = cur_ix - cached_backward;
					bool is_match_found = false;
					out_->len_x_code = 0;
					if (prev_ix < cur_ix) {
						prev_ix &= (uint) ring_buffer_mask;
						if (compare_char == data[prev_ix + best_len]) {
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								best_score = BackwardReferenceScoreUsingLastDistance(len);
								best_len = len;
								out_->len = len;
								out_->distance = cached_backward;
								out_->score = best_score;
								compare_char = data[cur_ix_masked + best_len];
								{
									is_match_found = true;
								}
							}
						}
					}
					{
						uint* bucket = self->buckets_ + key;
						int i;
						prev_ix = *bucket++;
						for (i = 0; i < BUCKET_SWEEP; ++i, prev_ix = *bucket++) {
							size_t backward = cur_ix - prev_ix;
							size_t len;
							prev_ix &= (uint) ring_buffer_mask;
							if (compare_char != data[prev_ix + best_len]) {
								continue;
							}
							if ((backward == 0 || backward > max_backward)) {
								continue;
							}
							len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								score_t score = BackwardReferenceScore(len, backward);
								if (best_score < score) {
									best_score = score;
									best_len = len;
									out_->len = best_len;
									out_->distance = backward;
									out_->score = score;
									compare_char = data[cur_ix_masked + best_len];
									is_match_found = true;
								}
							}
						}
					}
					if (USE_DICTIONARY != 0 && !is_match_found) {
						is_match_found = SearchInStaticDictionary(dictionary_hash,
							handle, &data[cur_ix_masked], max_length, max_backward, out_,
							true);
					}
					self->buckets_[key + ((cur_ix >> 3) % BUCKET_SWEEP)] = (uint) cur_ix;
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(
					ushort* dictionary_hash,
					size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals) {
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashLongestMatchQuicklyH54 : Hasher {
				private const int BUCKET_BITS = 20;
				private const int BUCKET_SWEEP = 4;
				private const int HASH_LEN = 7;
				private const int USE_DICTIONARY = 0;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;
				private const int HASH_MAP_SIZE = 4 << BUCKET_BITS;

				public override size_t HashTypeLength() {
					return 8;
				}

				public override size_t StoreLookahead() {
					return 8;
				}

				/* HashBytes is the function that chooses the bucket to place
				   the address in. The HashLongestMatch and HashLongestMatchQuickly
				   classes have separate, different implementations of hashing. */
				private static unsafe uint HashBytes(byte* data) {
					ulong h = ((*(ulong*) (data) << (64 - 8 * HASH_LEN)) *
							   kHashMul64);
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return (uint) (h >> (64 - BUCKET_BITS));
				}

				/* A (forgetful) hash table to the data seen by the compressor, to
				   help create backward references to previous data.

				   This is a hash map of fixed size (BUCKET_SIZE). Starting from the
				   given index, BUCKET_SWEEP buckets are used to store values of a key. */
				[StructLayout(LayoutKind.Sequential)]
				private unsafe struct HashLongestMatchQuickly {
					public fixed uint buckets_[BUCKET_SIZE + BUCKET_SWEEP];
				}

				private static unsafe HashLongestMatchQuickly* Self(HasherHandle handle) {
					return (HashLongestMatchQuickly*) &(GetHasherCommon(handle)[1]);
				}

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) {
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, SizeT input_size, byte* data) {
					HashLongestMatchQuickly* self = Self(handle);
					/* Partial preparation is 100 times slower (per socket). */
					size_t partial_prepare_threshold = HASH_MAP_SIZE >> 7;
					if (one_shot && input_size <= partial_prepare_threshold) {
						size_t i;
						for (i = 0; i < input_size; ++i) {
							uint key = HashBytes(&data[i]);
							memset(&self->buckets_[key], 0, BUCKET_SWEEP * sizeof(uint));
						}
					}
					else {
						/* It is not strictly necessary to fill this buffer here, but
						   not filling will make the results of the compression stochastic
						   (but correct). This is because random data would cause the
						   system to find accidentally good backward references here and there. */
						memset(&self->buckets_[0], 0, sizeof(uint) * (BUCKET_SIZE + BUCKET_SWEEP));
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,
					size_t input_size) {
					return sizeof(HashLongestMatchQuickly);
				}

				/* Look at 5 bytes at &data[ix & mask].
				   Compute a hash from these, and store the value somewhere within
				   [ix .. ix+3]. */
				public override unsafe void Store(HasherHandle handle,
					byte* data, size_t mask, size_t ix) {
					uint key = HashBytes(&data[ix & mask]);
					/* Wiggle the value with the bucket sweep range. */
					uint off = (ix >> 3) % BUCKET_SWEEP;
					Self(handle)->buckets_[key + off] = (uint) ix;
				}

				public override unsafe void StoreRange(HasherHandle handle,
					byte* data, size_t mask, size_t ix_start,
					size_t ix_end) {
					size_t i;
					for (i = ix_start; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position,
					byte* ringbuffer,
					size_t ringbuffer_mask) {
					if (num_bytes >= HashTypeLength() - 1 && position >= 3) {
						/* Prepare the hashes for three last bytes of the last write.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						Store(handle, ringbuffer, ringbuffer_mask, position - 3);
						Store(handle, ringbuffer, ringbuffer_mask, position - 2);
						Store(handle, ringbuffer, ringbuffer_mask, position - 1);
					}
				}


				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
				}

				/* Find a longest backward match of &data[cur_ix & ring_buffer_mask]
				   up to the length of max_length and stores the position cur_ix in the
				   hash table.

				   Does not look for matches longer than max_length.
				   Does not look for matches further away than max_backward.
				   Writes the best match into |out|.
				   Returns true if match is found, otherwise false. */
				public override unsafe bool FindLongestMatch(
					HasherHandle handle,
					ushort* dictionary_hash, byte* data,
					size_t ring_buffer_mask, int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_) {
					HashLongestMatchQuickly* self = Self(handle);
					size_t best_len_in = out_->len;
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					uint key = HashBytes(&data[cur_ix_masked]);
					int compare_char = data[cur_ix_masked + best_len_in];
					score_t best_score = out_->score;
					size_t best_len = best_len_in;
					size_t cached_backward = (size_t) distance_cache[0];
					size_t prev_ix = cur_ix - cached_backward;
					bool is_match_found = false;
					out_->len_x_code = 0;
					if (prev_ix < cur_ix) {
						prev_ix &= (uint) ring_buffer_mask;
						if (compare_char == data[prev_ix + best_len]) {
							size_t len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								best_score = BackwardReferenceScoreUsingLastDistance(len);
								best_len = len;
								out_->len = len;
								out_->distance = cached_backward;
								out_->score = best_score;
								compare_char = data[cur_ix_masked + best_len];
								{
									is_match_found = true;
								}
							}
						}
					}
					{
						uint* bucket = self->buckets_ + key;
						int i;
						prev_ix = *bucket++;
						for (i = 0; i < BUCKET_SWEEP; ++i, prev_ix = *bucket++) {
							size_t backward = cur_ix - prev_ix;
							size_t len;
							prev_ix &= (uint) ring_buffer_mask;
							if (compare_char != data[prev_ix + best_len]) {
								continue;
							}
							if ((backward == 0 || backward > max_backward)) {
								continue;
							}
							len = FindMatchLengthWithLimit(&data[prev_ix],
								&data[cur_ix_masked],
								max_length);
							if (len >= 4) {
								score_t score = BackwardReferenceScore(len, backward);
								if (best_score < score) {
									best_score = score;
									best_len = len;
									out_->len = best_len;
									out_->distance = backward;
									out_->score = score;
									compare_char = data[cur_ix_masked + best_len];
									is_match_found = true;
								}
							}
						}
					}
					self->buckets_[key + ((cur_ix >> 3) % BUCKET_SWEEP)] = (uint) cur_ix;
					return is_match_found;
				}

				public override unsafe void CreateBackwardReferences(
					ushort* dictionary_hash,
					size_t num_bytes, size_t position,
					byte* ringbuffer, size_t ringbuffer_mask,
					BrotliEncoderParams* params_, HasherHandle hasher, int* dist_cache,
					size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals) {
					/* Set maximum distance, see section 9.1. of the spec. */
					size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params_->lgwin);

					Command* orig_commands = commands;
					size_t insert_length = *last_insert_len;
					size_t pos_end = position + num_bytes;
					size_t store_end = num_bytes >= StoreLookahead()
						? position + num_bytes - StoreLookahead() + 1
						: position;

					/* For speed up heuristics for random data. */
					size_t random_heuristics_window_size =
						LiteralSpreeLengthForSparseSearch(params_);
					size_t apply_random_heuristics = position + random_heuristics_window_size;

					/* Minimum score to accept a backward reference. */
					score_t kMinScore = BROTLI_SCORE_BASE + 100;

					PrepareDistanceCache(hasher, dist_cache);

					while (position + HashTypeLength() < pos_end) {
						size_t max_length = pos_end - position;
						size_t max_distance = Math.Min(position, max_backward_limit);
						HasherSearchResult sr = new HasherSearchResult();
						sr.len = 0;
						sr.len_x_code = 0;
						sr.distance = 0;
						sr.score = kMinScore;
						if (FindLongestMatch(hasher, dictionary_hash,
							ringbuffer, ringbuffer_mask, dist_cache,
							position, max_length, max_distance, &sr)) {
							/* Found a match. Let's look for something even better ahead. */
							int delayed_backward_references_in_row = 0;
							--max_length;
							for (;; --max_length) {
								score_t cost_diff_lazy = 175;
								bool is_match_found;
								HasherSearchResult sr2;
								sr2.len = params_->quality < MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH
									? Math.Min(sr.len - 1, max_length)
									: 0;
								sr2.len_x_code = 0;
								sr2.distance = 0;
								sr2.score = kMinScore;
								max_distance = Math.Min(position + 1, max_backward_limit);
								is_match_found = FindLongestMatch(hasher,
									dictionary_hash, ringbuffer, ringbuffer_mask, dist_cache,
									position + 1, max_length, max_distance, &sr2);
								if (is_match_found && sr2.score >= sr.score + cost_diff_lazy) {
									/* Ok, let's just write one byte for now and start a match from the
									   next byte. */
									++position;
									++insert_length;
									sr = sr2;
									if (++delayed_backward_references_in_row < 4 &&
										position + HashTypeLength() < pos_end) {
										continue;
									}
								}
								break;
							}
							apply_random_heuristics =
								position + 2 * sr.len + random_heuristics_window_size;
							max_distance = Math.Min(position, max_backward_limit);
							{
								/* The first 16 codes are special short-codes,
								   and the minimum offset is 1. */
								size_t distance_code =
									ComputeDistanceCode(sr.distance, max_distance, dist_cache);
								if (sr.distance <= max_distance && distance_code > 0) {
									dist_cache[3] = dist_cache[2];
									dist_cache[2] = dist_cache[1];
									dist_cache[1] = dist_cache[0];
									dist_cache[0] = (int) sr.distance;
									PrepareDistanceCache(hasher, dist_cache);
								}
								InitCommand(commands++, insert_length, sr.len, sr.len ^ sr.len_x_code,
									distance_code);
							}
							*num_literals += insert_length;
							insert_length = 0;
							/* Put the hash keys into the table, if there are enough bytes left.
							   Depending on the hasher implementation, it can push all positions
							   in the given range or only a subset of them. */
							StoreRange(hasher, ringbuffer, ringbuffer_mask, position + 2,
								Math.Min(position + sr.len, store_end));
							position += sr.len;
						}
						else {
							++insert_length;
							++position;
							/* If we have not seen matches for a long time, we can skip some
							   match lookups. Unsuccessful match lookups are very very expensive
							   and this kind of a heuristic speeds up compression quite
							   a lot. */
							if (position > apply_random_heuristics) {
								/* Going through uncompressible data, jump. */
								if (position >
									apply_random_heuristics + 4 * random_heuristics_window_size) {
									/* It is quite a long time since we saw a copy, so we assume
									   that this data is not compressible, and store hashes less
									   often. Hashes of non compressible data are less likely to
									   turn out to be useful in the future, too, so we store less of
									   them to not to flood out the hash table of good compressible
									   data. */
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 4);
									size_t pos_jump =
										Math.Min(position + 16, pos_end - kMargin);
									for (; position < pos_jump; position += 4) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 4;
									}
								}
								else {
									size_t kMargin =
										Math.Max(StoreLookahead() - 1, 2);
									size_t pos_jump =
										Math.Min(position + 8, pos_end - kMargin);
									for (; position < pos_jump; position += 2) {
										Store(hasher, ringbuffer, ringbuffer_mask, position);
										insert_length += 2;
									}
								}
							}
						}
					}
					insert_length += pos_end - position;
					*last_insert_len = insert_length;
					*num_commands += (size_t) (commands - orig_commands);
				}
			}

			private class HashToBinaryTreeH10 : Hasher 
			{
				private const int BUCKET_BITS = 17;
				private const int MAX_TREE_SEARCH_DEPTH = 64;
				private const int MAX_TREE_COMP_LENGTH = 128;
				private const int BUCKET_SIZE = 1 << BUCKET_BITS;

				public override size_t HashTypeLength() {
					return 4;
				}

				public override size_t StoreLookahead() {
					return MAX_TREE_COMP_LENGTH;
				}

				private static unsafe uint HashBytes(byte* data) {
					uint h = *(uint*) data * kHashMul32;
					/* The higher bits contain more mixture from the multiplication,
					   so we take our results from there. */
					return h >> (32 - BUCKET_BITS);
				}

				private unsafe struct HashToBinaryTree {
					/* The window size minus 1 */
					public size_t window_mask_;

					/* Hash table that maps the 4-byte hashes of the sequence to the last
					   position where this hash was found, which is the root of the binary
					   tree of sequences that share this hash bucket. */
					public fixed uint buckets_[BUCKET_SIZE];

					/* A position used to mark a non-existent sequence, i.e. a tree is empty if
					   its root is at invalid_pos_ and a node is a leaf if both its children
					   are at invalid_pos_. */
					public uint invalid_pos_;

					/* --- Dynamic size members --- */

					/* The union of the binary trees of each hash bucket. The root of the tree
					   corresponding to a hash is a sequence starting at buckets_[hash] and
					   the left and right children of a sequence starting at pos are
					   forest_[2 * pos] and forest_[2 * pos + 1]. */
					/* uint32_t forest[2 * num_nodes] */
				}

				private static unsafe HashToBinaryTree* Self(HasherHandle handle) {
					return (HashToBinaryTree*) &(GetHasherCommon(handle)[1]);
				}

				private static unsafe uint* Forest(HashToBinaryTree* self) {
					return (uint*) (&self[1]);
				}

				public override unsafe void Initialize(HasherHandle handle, BrotliEncoderParams* params_) {
					HashToBinaryTree* self = Self(handle);
					self->window_mask_ = (1u << params_->lgwin) - 1u;
					self->invalid_pos_ = (uint) (0 - self->window_mask_);
				}

				public override unsafe void Prepare(HasherHandle handle, bool one_shot, size_t input_size, byte* data) {
					HashToBinaryTree* self = Self(handle);
					uint invalid_pos = self->invalid_pos_;
					uint i;
					for (i = 0; i < BUCKET_SIZE; i++) {
						self->buckets_[i] = invalid_pos;
					}
				}

				public override unsafe size_t HashMemAllocInBytes(BrotliEncoderParams* params_, bool one_shot,
					size_t input_size) {
					size_t num_nodes = (size_t) 1 << params_->lgwin;
					if (one_shot && input_size < num_nodes) {
						num_nodes = input_size;
					}
					return sizeof(HashToBinaryTree) + 2 * sizeof(uint) * num_nodes;
				}

				private static unsafe size_t LeftChildIndex(HashToBinaryTree* self, size_t pos) {
					return 2 * (pos & self->window_mask_);
				}

				private static unsafe size_t RightChildIndex(HashToBinaryTree* self, size_t pos) {
					return 2 * (pos & self->window_mask_) + 1;
				}


				/* Stores the hash of the next 4 bytes and in a single tree-traversal, the
				   hash bucket's binary tree is searched for matches and is re-rooted at the
				   current position.

				   If less than MAX_TREE_COMP_LENGTH data is available, the hash bucket of the
				   current position is searched for matches, but the state of the hash table
				   is not changed, since we can not know the final sorting order of the
				   current (incomplete) sequence.

				   This function must be called with increasing cur_ix positions. */
				private static unsafe BackwardMatch* StoreAndFindMatches(
					HashToBinaryTree* self, byte* data,
					size_t cur_ix, size_t ring_buffer_mask, size_t max_length,
					size_t max_backward, size_t* best_len,
					BackwardMatch* matches) {
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					size_t max_comp_len =
						Math.Min(max_length, MAX_TREE_COMP_LENGTH);
					bool should_reroot_tree =
						max_length >= MAX_TREE_COMP_LENGTH;
					uint key = HashBytes(&data[cur_ix_masked]);
					uint* forest = Forest(self);
					size_t prev_ix = self->buckets_[key];
					/* The forest index of the rightmost node of the left subtree of the new
					   root, updated as we traverse and re-root the tree of the hash bucket. */
					size_t node_left = LeftChildIndex(self, cur_ix);
					/* The forest index of the leftmost node of the right subtree of the new
					   root, updated as we traverse and re-root the tree of the hash bucket. */
					size_t node_right = RightChildIndex(self, cur_ix);
					/* The match length of the rightmost node of the left subtree of the new
					   root, updated as we traverse and re-root the tree of the hash bucket. */
					size_t best_len_left = 0;
					/* The match length of the leftmost node of the right subtree of the new
					   root, updated as we traverse and re-root the tree of the hash bucket. */
					size_t best_len_right = 0;
					size_t depth_remaining;
					if (should_reroot_tree) {
						self->buckets_[key] = (uint) cur_ix;
					}
					for (depth_remaining = MAX_TREE_SEARCH_DEPTH;; --depth_remaining) {
						size_t backward = cur_ix - prev_ix;
						size_t prev_ix_masked = prev_ix & ring_buffer_mask;
						if (backward == 0 || backward > max_backward || depth_remaining == 0) {
							if (should_reroot_tree) {
								forest[node_left] = self->invalid_pos_;
								forest[node_right] = self->invalid_pos_;
							}
							break;
						}
						{
							size_t cur_len = Math.Min(best_len_left, best_len_right);
							size_t len;
							len = cur_len +
								  FindMatchLengthWithLimit(&data[cur_ix_masked + cur_len],
									  &data[prev_ix_masked + cur_len],
									  max_length - cur_len);
							if (matches != null && len > *best_len) {
								*best_len = len;
								InitBackwardMatch(matches++, backward, len);
							}
							if (len >= max_comp_len) {
								if (should_reroot_tree) {
									forest[node_left] = forest[LeftChildIndex(self, prev_ix)];
									forest[node_right] = forest[RightChildIndex(self, prev_ix)];
								}
								break;
							}
							if (data[cur_ix_masked + len] > data[prev_ix_masked + len]) {
								best_len_left = len;
								if (should_reroot_tree) {
									forest[node_left] = (uint) prev_ix;
								}
								node_left = RightChildIndex(self, prev_ix);
								prev_ix = forest[node_left];
							}
							else {
								best_len_right = len;
								if (should_reroot_tree) {
									forest[node_right] = (uint) prev_ix;
								}
								node_right = LeftChildIndex(self, prev_ix);
								prev_ix = forest[node_right];
							}
						}
					}
					return matches;
				}

				/* Finds all backward matches of &data[cur_ix & ring_buffer_mask] up to the
				   length of max_length and stores the position cur_ix in the hash table.

				   Sets *num_matches to the number of matches found, and stores the found
				   matches in matches[0] to matches[*num_matches - 1]. The matches will be
				   sorted by strictly increasing length and (non-strictly) increasing
				   distance. */
				public static unsafe size_t FindAllMatches(HasherHandle handle,
					byte* data,
					size_t ring_buffer_mask, size_t cur_ix,
					size_t max_length, size_t max_backward,
					BrotliEncoderParams* params_, BackwardMatch* matches) {
					BackwardMatch* orig_matches = matches;
					size_t cur_ix_masked = cur_ix & ring_buffer_mask;
					size_t best_len = 1;
					size_t short_match_max_backward =
						params_->quality != HQ_ZOPFLIFICATION_QUALITY ? 16 : 64;
					size_t stop = cur_ix - short_match_max_backward;
					uint[] dict_matches_arr = new uint[BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN + 1];
					fixed (uint* dict_matches = dict_matches_arr) {
						size_t i;
						if (cur_ix < short_match_max_backward) {
							stop = 0;
						}
						for (i = cur_ix - 1; i > stop && best_len <= 2; --i) {
							size_t prev_ix = i;
							size_t backward = cur_ix - prev_ix;
							if ((backward > max_backward)) {
								break;
							}
							prev_ix &= ring_buffer_mask;
							if (data[cur_ix_masked] != data[prev_ix] ||
								data[cur_ix_masked + 1] != data[prev_ix + 1]) {
								continue;
							}
							{
								size_t len =
									FindMatchLengthWithLimit(&data[prev_ix], &data[cur_ix_masked],
										max_length);
								if (len > best_len) {
									best_len = len;
									InitBackwardMatch(matches++, backward, len);
								}
							}
						}
						if (best_len < max_length) {
							matches = StoreAndFindMatches(Self(handle), data, cur_ix,
								ring_buffer_mask, max_length, max_backward, &best_len, matches);
						}
						for (i = 0; i <= BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN; ++i) {
							dict_matches[i] = kInvalidMatch;
						}
						{
							size_t minlen = Math.Max(4, best_len + 1);
							if (BrotliFindAllStaticDictionaryMatches(
								&data[cur_ix_masked], minlen, max_length, &dict_matches[0])) {
								size_t maxlen = Math.Min(
									BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN, max_length);
								size_t l;
								for (l = minlen; l <= maxlen; ++l) {
									uint dict_id = dict_matches[l];
									if (dict_id < kInvalidMatch) {
										InitDictionaryBackwardMatch(matches++,
											max_backward + (dict_id >> 5) + 1, l, dict_id & 31);
									}
								}
							}
						}
						return (size_t)(matches - orig_matches);
					}
				}

				/* Stores the hash of the next 4 bytes and re-roots the binary tree at the
				   current sequence, without returning any matches.
				   REQUIRES: ix + MAX_TREE_COMP_LENGTH <= end-of-current-block */
				public override unsafe void Store(HasherHandle handle,
					byte* data, size_t mask, size_t ix) {
					HashToBinaryTree* self = Self(handle);
					/* Maximum distance is window size - 16, see section 9.1. of the spec. */
					size_t max_backward = self->window_mask_ - BROTLI_WINDOW_GAP + 1;
					StoreAndFindMatches(self, data, ix, mask, MAX_TREE_COMP_LENGTH,
						max_backward, null, null);
				}

				public override unsafe void StoreRange(HasherHandle handle,
					byte* data, size_t mask, size_t ix_start,
					size_t ix_end) {
					size_t i = ix_start;
					size_t j = ix_start;
					if (ix_start + 63 <= ix_end) {
						i = ix_end - 63;
					}
					if (ix_start + 512 <= i) {
						for (; j < i; j += 8) {
							Store(handle, data, mask, j);
						}
					}
					for (; i < ix_end; ++i) {
						Store(handle, data, mask, i);
					}
				}

				public override unsafe void StitchToPreviousBlock(HasherHandle handle, size_t num_bytes, size_t position,
					byte* ringbuffer,
					size_t ringbuffer_mask) {
					HashToBinaryTree* self = Self(handle);
					if (num_bytes >= HashTypeLength() - 1 &&
						position >= MAX_TREE_COMP_LENGTH) {
						/* Store the last `MAX_TREE_COMP_LENGTH - 1` positions in the hasher.
						   These could not be calculated before, since they require knowledge
						   of both the previous and the current block. */
						size_t i_start = position - MAX_TREE_COMP_LENGTH + 1;
						size_t i_end = Math.Min(position, i_start + num_bytes);
						size_t i;
						for (i = i_start; i < i_end; ++i) {
							/* Maximum distance is window size - 16, see section 9.1. of the spec.
							   Furthermore, we have to make sure that we don't look further back
							   from the start of the next block than the window size, otherwise we
							   could access already overwritten areas of the ring-buffer. */
							size_t max_backward =
								self->window_mask_ - Math.Max(
									BROTLI_WINDOW_GAP - 1,
									position - i);
							/* We know that i + MAX_TREE_COMP_LENGTH <= position + num_bytes, i.e. the
							   end of the current block and that we have at least
							   MAX_TREE_COMP_LENGTH tail in the ring-buffer. */
							StoreAndFindMatches(self, ringbuffer, i, ringbuffer_mask,
								MAX_TREE_COMP_LENGTH, max_backward, null, null);
						}
					}
				}

				public override unsafe void PrepareDistanceCache(HasherHandle handle, int* distance_cache) {
					throw new InvalidOperationException();
				}

				public override unsafe bool FindLongestMatch(HasherHandle handle,
					ushort* dictionary_hash,
					byte* data, size_t ring_buffer_mask,
					int* distance_cache,
					size_t cur_ix, size_t max_length, size_t max_backward,
					HasherSearchResult* out_) {
					throw new InvalidOperationException();
				}

				public override unsafe void CreateBackwardReferences(ushort* dictionary_hash, size_t num_bytes,
					size_t position, byte* ringbuffer, size_t ringbuffer_mask, BrotliEncoderParams* params_,
					HasherHandle hasher, int* dist_cache, size_t* last_insert_len, Command* commands, size_t* num_commands,
					size_t* num_literals) {
					throw new InvalidOperationException();
				}
			}
		
		}
		
	}

}